<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Planet Haskell</title>
  <updated>2022-09-15T12:03:17Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Haskell Admin Team</name>
    <email>planet@haskell.org</email>
  </author>
  <id>http://planet.haskell.org/atom.xml</id>
  <link href="http://planet.haskell.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://planet.haskell.org/" rel="alternate"/>

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/795-rec-def__Dominators_case_study</id>
    <link href="http://www.joachim-breitner.de/blog/795-rec-def__Dominators_case_study" rel="alternate" type="text/html"/>
    <title xml:lang="en">rec-def: Dominators case study</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>More ICFP-inspired experiments using the <a href="https://hackage.haskell.org/package/rec-def"><code>rec-def</code></a> library: In <a href="https://icfp22.sigplan.org/details/icfp-2022-papers/1/Beyond-Relooper-Recursive-Translation-of-Unstructured-Control-Flow-to-Structured-Con">Norman Ramsey’s very nice talk</a> about his Functional Pearl “<a href="https://doi.org/10.1145/3547621">Beyond Relooper: Recursive Translation of Unstructured Control Flow to Structured Control Flow</a>”, he had the following slide showing the equation for the dominators of a node in a graph:</p>
<figure>
<img alt="Norman Ramsey shows a formula" src="https://www.joachim-breitner.de/various/norman-ramsey-dominator.jpg"/>
<figcaption>Norman Ramsey shows a formula</figcaption>
</figure>
<p>He said “it’s ICFP and I wanted to say the dominance relation has a beautiful set of equations … you can read all these algorithms how to compute this, but the concept is simple”.</p>
<p>This made me wonder: If the concept is simple and this formula is beautiful – shouldn’t this be sufficient for the Haskell programmer to obtain the dominator relation, <em>without</em> reading all those algorithms?</p>
<p>Before we start, we have to clarify the formula a bit: If a node is an entry node (no predecessors) then the big intersection is over the empty set, and that is not a well-defined concept. For these nodes, we need that big intersection to return the <em>empty</em> set, as entry nodes are not dominated by any other node. (Let’s assume that the entry nodes are exactly those with no predecessors.)</p>
<p>Let’s try, first using plain Haskell data structures. We begin by implementing this big intersection operator on <code>Data.Set</code>, and also a function to find the predecessors of a node in a graph:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Set</span> <span class="kw">as</span> <span class="dt">S</span></a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1">
<span id="cb1-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-2" tabindex="-1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">M</span>
<span id="cb1-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-3" tabindex="-1">
<span id="cb1-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-4" tabindex="-1"><span class="ot">intersections ::</span> [<span class="dt">S.Set</span> <span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">S.Set</span> <span class="dt">Int</span>
<span id="cb1-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-5" tabindex="-1">intersections [] <span class="ot">=</span> S.empty
<span id="cb1-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-6" tabindex="-1">intersections xs <span class="ot">=</span> <span class="fu">foldl1</span> S.intersection xs
<span id="cb1-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-7" tabindex="-1">
<span id="cb1-8"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-8" tabindex="-1"><span class="ot">preds ::</span> [(<span class="dt">Int</span>,<span class="dt">Int</span>)] <span class="ot">-&gt;</span> <span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">Int</span>]
<span id="cb1-9"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-9" tabindex="-1">preds edges <span class="ot">=</span> M.fromListWith (<span class="op">&lt;&gt;</span>) <span class="op">$</span>
<span id="cb1-10"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-10" tabindex="-1">    [ (v1, [])   <span class="op">|</span> (v1, _) <span class="ot">&lt;-</span> edges ] <span class="op">++</span> <span class="co">-- to make the map total</span>
<span id="cb1-11"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-11" tabindex="-1">    [ (v2, [v1]) <span class="op">|</span> (v1, v2) <span class="ot">&lt;-</span> edges ]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-11" tabindex="-1">
<p>Now we can write down the formula that Norman gave, quite elegantly:</p>
</a><div class="sourceCode" id="cb2"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-11" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-11" tabindex="-1"><code class="sourceCode haskell"><span id="cb2-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-1" tabindex="-1"><span class="ot">domintors1 ::</span> [(<span class="dt">Int</span>,<span class="dt">Int</span>)] <span class="ot">-&gt;</span> <span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">Int</span>]
<span id="cb2-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1">domintors1 edges <span class="ot">=</span> <span class="fu">fmap</span> S.toList doms
<span id="cb2-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-3" tabindex="-1">  <span class="kw">where</span>
<span id="cb2-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-4" tabindex="-1"><span class="ot">    doms ::</span> <span class="dt">M.Map</span> <span class="dt">Int</span> (<span class="dt">S.Set</span> <span class="dt">Int</span>)
<span id="cb2-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-5" tabindex="-1">    doms <span class="ot">=</span> M.mapWithKey
<span id="cb2-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-6" tabindex="-1">        (\v vs <span class="ot">-&gt;</span> S.insert v (intersections [ doms <span class="op">M.!</span> v' <span class="op">|</span> v' <span class="ot">&lt;-</span> vs]))
<span id="cb2-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-7" tabindex="-1">        (preds edges)</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-7" tabindex="-1">
<p>Does this work? It seems it does:</p>
</a><div class="sourceCode" id="cb3"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-7" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-7" tabindex="-1"><code class="sourceCode haskell"><span id="cb3-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-1" tabindex="-1">ghci<span class="op">&gt;</span> domintors1 []
<span id="cb3-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1">fromList []
<span id="cb3-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-3" tabindex="-1">ghci<span class="op">&gt;</span> domintors1 [(<span class="dv">1</span>,<span class="dv">2</span>)]
<span id="cb3-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-4" tabindex="-1">fromList [(<span class="dv">1</span>,[<span class="dv">1</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">2</span>])]
<span id="cb3-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-5" tabindex="-1">ghci<span class="op">&gt;</span> domintors1 [(<span class="dv">1</span>,<span class="dv">2</span>),(<span class="dv">1</span>,<span class="dv">3</span>),(<span class="dv">2</span>,<span class="dv">4</span>),(<span class="dv">3</span>,<span class="dv">4</span>)]
<span id="cb3-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-6" tabindex="-1">fromList [(<span class="dv">1</span>,[<span class="dv">1</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">2</span>]),(<span class="dv">3</span>,[<span class="dv">1</span>,<span class="dv">3</span>]),(<span class="dv">4</span>,[<span class="dv">1</span>,<span class="dv">4</span>])]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-6" tabindex="-1">
<p>But – not surprising if you have read my previous blog posts – it falls over once we have recursion:</p>
</a><div class="sourceCode" id="cb4"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-6" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-6" tabindex="-1"><code class="sourceCode haskell"><span id="cb4-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-1" tabindex="-1">ghci<span class="op">&gt;</span> domintors1 [(<span class="dv">1</span>,<span class="dv">2</span>),(<span class="dv">1</span>,<span class="dv">3</span>),(<span class="dv">2</span>,<span class="dv">4</span>),(<span class="dv">3</span>,<span class="dv">4</span>),(<span class="dv">4</span>,<span class="dv">3</span>)]
<span id="cb4-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">fromList [(<span class="dv">1</span>,[<span class="dv">1</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">2</span>]),(<span class="dv">3</span>,<span class="op">^</span><span class="dt">CInterrupted</span><span class="op">.</span></a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">So let us reimplement it with </a><a href="https://hackage.haskell.org/package/rec-def-0.1/docs/Data-Recursive-Set.html"><code>Data.Recursive.Set</code></a>.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-1" tabindex="-1"><span class="ot">rIntersections ::</span> [<span class="dt">R</span> (<span class="dt">S.Set</span> <span class="dt">Int</span>)] <span class="ot">-&gt;</span> <span class="dt">R</span> (<span class="dt">S.Set</span> <span class="dt">Int</span>)</a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-1" tabindex="-1">
<span id="cb5-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-2" tabindex="-1">rIntersections [] <span class="ot">=</span> rEmpty
<span id="cb5-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-3" tabindex="-1">rIntersections xs <span class="ot">=</span> <span class="fu">foldl1</span> rIntersection xs
<span id="cb5-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-4" tabindex="-1">
<span id="cb5-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-5" tabindex="-1"><span class="ot">domintors2 ::</span> [(<span class="dt">Int</span>,<span class="dt">Int</span>)] <span class="ot">-&gt;</span> <span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">Int</span>]
<span id="cb5-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-6" tabindex="-1">domintors2 edges <span class="ot">=</span> <span class="fu">fmap</span> (S.toList <span class="op">.</span> getR) doms
<span id="cb5-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-7" tabindex="-1">  <span class="kw">where</span>
<span id="cb5-8"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-8" tabindex="-1"><span class="ot">    doms ::</span> <span class="dt">M.Map</span> <span class="dt">Int</span> (<span class="dt">R</span> (<span class="dt">S.Set</span> <span class="dt">Int</span>))
<span id="cb5-9"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-9" tabindex="-1">    doms <span class="ot">=</span> M.mapWithKey
<span id="cb5-10"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-10" tabindex="-1">        (\v vs <span class="ot">-&gt;</span> rInsert v (rIntersections [ doms <span class="op">M.!</span> v' <span class="op">|</span> v' <span class="ot">&lt;-</span> vs]))
<span id="cb5-11"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-11" tabindex="-1">        (preds edges)</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-11" tabindex="-1">
<p>The hope is that we can simply replace the operations, and that now it can suddenly handle cyclic graphs as well. Let’s see:</p>
</a><div class="sourceCode" id="cb6"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-11" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-11" tabindex="-1"><code class="sourceCode haskell"><span id="cb6-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-1" tabindex="-1">ghci<span class="op">&gt;</span> domintors2 [(<span class="dv">1</span>,<span class="dv">2</span>),(<span class="dv">1</span>,<span class="dv">3</span>),(<span class="dv">2</span>,<span class="dv">4</span>),(<span class="dv">3</span>,<span class="dv">4</span>),(<span class="dv">4</span>,<span class="dv">3</span>)]
<span id="cb6-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-2" tabindex="-1">fromList [(<span class="dv">1</span>,[<span class="dv">1</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">2</span>]),(<span class="dv">3</span>,[<span class="dv">3</span>]),(<span class="dv">4</span>,[<span class="dv">4</span>])]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-2" tabindex="-1">
<p>It does! Well, it does return a result… but it looks strange. Clearly node 3 and 4 are also dominated by 1, but the result does not reflect that.</p>
<p>But the result <em>is</em> a solution to Norman’s equation. Was the equation wrong? No, but we failed to notice that the desired solution is the <em>largest</em>, not the <em>smallest</em>. And <code>Data.Recursive.Set</code> calculates, as documented, the least fixed point.</p>
<p>What now? Until the library has code for <code>R (Dual (S.Set a))</code>, we can work around this by using the <em>dual</em> formula to calculate the non-dominators. To do this, we</p>
<ul>
<li>use union instead of intersection</li>
<li>delete instead of insert,</li>
<li><code>S.empty</code>, use the set of all nodes (which requires some extra plumbing)</li>
<li>subtract the result from the set of all nodes to get the dominators</li>
</ul>
<p>and thus the code turns into:</p>
</a><div class="sourceCode" id="cb7"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-2" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-2" tabindex="-1"><code class="sourceCode haskell"><span id="cb7-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-1" tabindex="-1"><span class="ot">rUnions' ::</span> <span class="dt">S.Set</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [<span class="dt">R</span> (<span class="dt">S.Set</span> <span class="dt">Int</span>)] <span class="ot">-&gt;</span> <span class="dt">R</span> (<span class="dt">S.Set</span> <span class="dt">Int</span>)
<span id="cb7-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-2" tabindex="-1">rUnions' univ [] <span class="ot">=</span> mkR univ
<span id="cb7-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-3" tabindex="-1">rUnions' _ xs <span class="ot">=</span> <span class="fu">foldl1</span> rUnion xs
<span id="cb7-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-4" tabindex="-1">
<span id="cb7-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-5" tabindex="-1"><span class="ot">domintors3 ::</span> [(<span class="dt">Int</span>,<span class="dt">Int</span>)] <span class="ot">-&gt;</span> <span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">Int</span>]
<span id="cb7-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-6" tabindex="-1">domintors3 edges <span class="ot">=</span> <span class="fu">fmap</span> (S.toList <span class="op">.</span> S.difference nodes <span class="op">.</span> getR) nonDoms
<span id="cb7-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-7" tabindex="-1">  <span class="kw">where</span>
<span id="cb7-8"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-8" tabindex="-1">    nodes <span class="ot">=</span> S.fromList [v <span class="op">|</span> (v1,v2) <span class="ot">&lt;-</span> edges, v <span class="ot">&lt;-</span> [v1,v2]]
<span id="cb7-9"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-9" tabindex="-1"><span class="ot">    nonDoms ::</span> <span class="dt">M.Map</span> <span class="dt">Int</span> (<span class="dt">R</span> (<span class="dt">S.Set</span> <span class="dt">Int</span>))
<span id="cb7-10"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-10" tabindex="-1">    nonDoms <span class="ot">=</span> M.mapWithKey
<span id="cb7-11"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-11" tabindex="-1">        (\v vs <span class="ot">-&gt;</span> rDelete v (rUnions' nodes [ nonDoms <span class="op">M.!</span> v' <span class="op">|</span> v' <span class="ot">&lt;-</span> vs]))
<span id="cb7-12"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-12" tabindex="-1">        (preds edges)</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-12" tabindex="-1">
<p>And with this, now we do get the correct result:</p>
<pre><code>ghci&gt; domintors3 [(1,2),(1,3),(2,4),(3,4),(4,3)]
fromList [(1,[1]),(2,[1,2]),(3,[1,3]),(4,[1,4])]</code></pre>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-12" tabindex="-1">We worked a little bit on how to express the “beautiful formula” to Haskell, but at no point did we have to think about how to solve it. To me, this is the essence of declarative programming.</a></p></div>
    </summary>
    <updated>2022-09-15T08:27:19Z</updated>
    <published>2022-09-15T08:27:19Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html"/>
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml"/>
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2022-09-15T10:00:55Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2022-09-15-hermetic-bazel/</id>
    <link href="https://tweag.io/blog/2022-09-15-hermetic-bazel/" rel="alternate" type="text/html"/>
    <title>How to keep a Bazel project hermetic?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>A build is <em>hermetic</em> if it is not affected by details of the environment
where it is performed. Hermeticity is a prerequisite for generally desirable
features like <a href="https://bazel.build/remote/caching">remote caching</a> and <a href="https://bazel.build/remote/rbe">remote
execution</a>. While certain build systems, such as Nix,
impose hermeticity through their design, others rely on their users to do
the extra work and be vigilant to get it. Bazel enforces hermeticity to some
extent, for example through sandboxing, but is less strict about it than
Nix. In this post I’m going to try to enumerate most ways in which
hermeticity of a Bazel project can be compromised.</p>
<h2 id="execution-strategy"><a class="anchor before" href="https://www.tweag.io/rss.xml#execution-strategy"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Execution strategy</h2>
<p>One source of inhermeticity is the file system. If tools, such as compilers,
are invoked in a way that does not limit their access to contents of the
file system, the output of these tools can be influenced by extraneous files
that might be present during the build. One example could be include files
in languages like C or C++. Imagine a shared machine that is used to perform
builds with different configurations. One build might generate some header
files and place it in a directory that might later be specified as an
include directory in a compiler invocation performed by another build. If
the generated header file happens to have the right name it can shadow the
correct header file and lead to a build failure that is hard to reproduce
and understand. This is not a hypothetical example, but a real problem our
client once struggled with. This is why it is important to always use some
form of sandbox for your build actions. Sandboxing also guarantees that all
build inputs are declared correctly, because otherwise the input files will
simply not be available.</p>
<p>The use of sandbox is controlled by choosing an <a href="https://bazel.build/docs/user-manual#execution-strategy"><em>execution
strategy</em></a>. The following execution strategies are
available:</p>
<ul>
<li><code class="language-text">local</code> (or <code class="language-text">standalone</code>, which is the same but deprecated) causes
commands to be executed as local subprocesses without sandboxing.</li>
<li><code class="language-text">sandboxed</code> causes commands to be executed inside a sandbox on the local
machine.</li>
<li><code class="language-text">worker</code> causes commands to be executed using a persistent worker, if
available.</li>
<li><code class="language-text">docker</code> causes commands to be executed inside a docker sandbox on the
local machine.</li>
<li><code class="language-text">remote</code> causes commands to be executed remotely; this is only available
if a remote executor has been configured separately.</li>
</ul>
<p>These are set with <a href="https://bazel.build/docs/user-manual#spawn-strategy"><code class="language-text">--spawn_strategy</code></a> and
<a href="https://bazel.build/docs/user-manual#strategy"><code class="language-text">--strategy</code></a> flags.</p>
<p>Without going into details of all the strategies mentioned, it must be noted
that <code class="language-text">local</code> should be avoided if the build is to stay hermetic.
In addition to the strategy flags there are several ways to choose local
execution:</p>
<ul>
<li>Using a tag with special meaning such as <a href="https://bazel.build/reference/be/common-definitions#common.tags"><code class="language-text">"no-sandbox"</code></a>
or <a href="https://bazel.build/reference/be/common-definitions#common.tags"><code class="language-text">"local"</code></a>.</li>
<li>Setting the <a href="https://bazel.build/reference/be/common-definitions#test.local"><code class="language-text">local</code> attribute</a> to <code class="language-text">1</code> or <code class="language-text">True</code>.</li>
</ul>
<p>It should also be noted that, as of this writing, <a href="https://github.com/bazelbuild/bazel/issues/5136">Windows has no support
for sandboxing</a>. Therefore build hermeticity on Windows
cannot be enforced at that level.</p>
<h3 id="with-persistent-workers"><a class="anchor before" href="https://www.tweag.io/rss.xml#with-persistent-workers"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>With persistent workers</h3>
<p>Another pitfall is related to the <a href="https://bazel.build/docs/persistent-workers"><code class="language-text">worker</code> strategy</a>.
While using persistent workers can have performance benefits, these workers
will not use sandboxed execution by default. It must be enabled manually by
using the <a href="https://bazel.build/reference/command-line-reference#flag--worker_sandboxing"><code class="language-text">--worker_sandboxing</code></a> flag.</p>
<h2 id="environment"><a class="anchor before" href="https://www.tweag.io/rss.xml#environment"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Environment</h2>
<p>Environment variables can also be a source of inhermeticity. There are many
ways to inherit the environment of the machine that executes the build:</p>
<ul>
<li>Setting the <a href="https://bazel.build/rules/lib/actions#run.use_default_shell_env"><code class="language-text">use_default_shell_env</code></a> attribute to
<code class="language-text">True</code> in invocations of <a href="https://bazel.build/rules/lib/actions#run"><code class="language-text">action.run</code></a> or
<a href="https://bazel.build/rules/lib/actions#run_shell"><code class="language-text">action.run_shell</code></a>.</li>
<li>Setting <a href="https://bazel.build/reference/be/common-definitions#test.env_inherit"><code class="language-text">env_inherit</code></a> to <code class="language-text">True</code> in test attributes.</li>
<li>Not using
<a href="https://bazel.build/reference/command-line-reference#flag--incompatible_strict_action_env"><code class="language-text">--incompatible_strict_action_env</code></a>.</li>
<li>Using the <a href="https://bazel.build/reference/command-line-reference#flag--action_env"><code class="language-text">--action_env</code></a> flag to inherit the value of a
given environmental variable. This option can also be used with the
<code class="language-text">--action_env=name=value</code> syntax. Extra care must be taken in that case to
guarantee that <code class="language-text">value</code> stays reasonably stable (e.g. it is not an absolute
path which can vary from machine to machine).</li>
</ul>
<p>Whenever the environment of host machine is inherited it becomes an input to
the respective build actions and since it is very hard to ensure identical
environments on different machines, especially developer machines, features like remote caching have no
chance to work.</p>
<h2 id="rules"><a class="anchor before" href="https://www.tweag.io/rss.xml#rules"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Rules</h2>
<p>While most modern Bazel rules will provide a way to pin the toolchain that
is used for the build, others will default to simply picking up binaries
from the <code class="language-text">PATH</code>. Nothing prevents these binaries to vary from machine to
machine. The built-in C and C++ rules are notorious for this kind of
behavior. It is worth paying attention to what kind of rules you are using
and what their guarantees with respect to hermeticity and reproducibility
are.</p>
<h2 id="workspace-status"><a class="anchor before" href="https://www.tweag.io/rss.xml#workspace-status"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Workspace status</h2>
<p>Not a bug, but a feature—<a href="https://bazel.build/docs/user-manual#workspace_status">workspace status</a> is in the gray
area with respect to hermeticity. Activated by the
<code class="language-text">--workspace_status_command</code> command line option, it allows users to call an
arbitrary program before the build begins and then use its output to stamp
build results (e.g. status command could return git commit hash or time
stamp). If an action directly depends on the output of the status command,
typically stored as <code class="language-text">bazel-out/stable-status.txt</code>, then it will likely be invalidated and rebuilt more often than intended and
not benefit much from remote caching. Extra care must be exercised so as to pick only
relevant bits of information from <code class="language-text">stable-status.txt</code>, put them in a
separate file, and depend on that file only when truly necessary.</p>
<h2 id="other-things-to-watch-for"><a class="anchor before" href="https://www.tweag.io/rss.xml#other-things-to-watch-for"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Other things to watch for</h2>
<p>Unfortunately, there is always a new way to shoot yourself in the foot. Here
are some examples:</p>
<ul>
<li>Repository rules can execute arbitrary code outside of the sandbox, they
can potentially break hermeticity. For example, <code class="language-text">pip_install</code> or
<code class="language-text">npm_install</code> may build native components with whichever compiler is in
<code class="language-text">PATH</code>, linking against whichever system libraries are found.
Avoiding such dependencies, importing them in a reproducible way, for example through <a href="https://github.com/tweag/rules_nixpkgs">rules_nixpkgs</a>, or carefully controlling the environment during fetch may be solutions to this problem.</li>
<li>Performing any non-deterministic actions. Creating archives (zip, tar,
etc.) is a good example: The order of directory listings as well as
timestamps are usually non-deterministic. The [reprodubile-builds project(<a href="https://reproducible-builds.org/docs/archives/">https://reproducible-builds.org/docs/archives/</a>) is a great resources to learn about these issues and how to circumvent them.</li>
</ul>
<h2 id="detecting-hermeticity-issues"><a class="anchor before" href="https://www.tweag.io/rss.xml#detecting-hermeticity-issues"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Detecting hermeticity issues</h2>
<p>In general, detecting hermeticity issues is hard. The best strategy, it
seems, is to attempt building your project in different environments and
have Bazel write execlogs. An execlog is the ground truth about what is
going on during the build. <a href="https://bazel.build/docs/remote-execution-caching-debug#troubleshooting-cache-hits">This page about troubleshooting remote cache
hits</a> describes how to make Bazel write
execlogs. Let’s summarize it:</p>
<ol>
<li>Execute <code class="language-text">bazel clean</code> in order to force the subsequent build command to
perform all necessary actions so that they end up in the execlog.</li>
<li>Execute <code class="language-text">bazel build //your:target --execution_log_binary_file=/tmp/exec1.log</code>. This will produce a binary
execution log.</li>
<li>Re-run the build (preceding it with a <code class="language-text">bazel clean</code> invocation) in a
different environment or even in the same environment if there is a
reason to suspect that something could change between two runs in the
same environment.</li>
<li>Compare execution logs following the instructions from <a href="https://bazel.build/docs/remote-execution-caching-debug#compare-logs">this
section</a>. The procedure involves building a
special parser that can convert binary execlogs produced by Bazel into
text and then diffing the obtained text files with a tool like <code class="language-text">diff</code>.
Differences found in this way will reveal sources of inhermeticity.</li>
</ol>
<p>With this approach the main question becomes “how to choose the environments
in which builds are performed so as to detect all hermeticity issues.” There
is no answer to this question that works in all cases. Varying host name and
user name might catch some problems, while others may only reveal themselves
in specific circumstances. If you already know what might be a source of
potential problems that could help with choosing the right build
environments for these tests. From a pragmatic point of view, choosing
environments that are already typically used to perform builds (remote
workers, build agents, local developer machines) is probably a good first
step.</p>
<h2 id="conclusion"><a class="anchor before" href="https://www.tweag.io/rss.xml#conclusion"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Conclusion</h2>
<p>It is likely true that virtually all users of Bazel wish their builds be
hermetic. The blog post summarizes most ways in which hermiticity can be
violated and provides some suggestions about how to avoid the common
pitfalls and debug hermeticity issues.</p></div>
    </summary>
    <updated>2022-09-15T00:00:00Z</updated>
    <published>2022-09-15T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html"/>
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2022-09-15T11:54:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/794-rec-def__Program_analysis_case_study</id>
    <link href="http://www.joachim-breitner.de/blog/794-rec-def__Program_analysis_case_study" rel="alternate" type="text/html"/>
    <title xml:lang="en">rec-def: Program analysis case study</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>At this week’s <a href="https://icfp22.sigplan.org/">International Conference on Functional Programming</a> I showed my <a href="https://hackage.haskell.org/package/rec-def"><code>rec-def</code></a> Haskell library to a few people. As this crowd appreciates writing compilers, and example from the realm of program analysis is quite compelling.</p>
<h3 id="to-throw-or-not-to-throw">To Throw or not to throw</h3>
<p>Here is our little toy language to analyze: It has variables, lambdas and applications, non-recursive (lazy) let bindings and, so that we have something to analyze, a way to throw and to catch exceptions:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1"><span class="kw">type</span> <span class="dt">Var</span> <span class="ot">=</span> <span class="dt">String</span></a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1">
<span id="cb1-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-2" tabindex="-1">
<span id="cb1-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-3" tabindex="-1"><span class="kw">data</span> <span class="dt">Exp</span>
<span id="cb1-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-4" tabindex="-1">  <span class="ot">=</span> <span class="dt">Var</span> <span class="dt">Var</span>
<span id="cb1-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-5" tabindex="-1">  <span class="op">|</span> <span class="dt">Throw</span>
<span id="cb1-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-6" tabindex="-1">  <span class="op">|</span> <span class="dt">Catch</span> <span class="dt">Exp</span>
<span id="cb1-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-7" tabindex="-1">  <span class="op">|</span> <span class="dt">Lam</span> <span class="dt">Var</span> <span class="dt">Exp</span>
<span id="cb1-8"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-8" tabindex="-1">  <span class="op">|</span> <span class="dt">App</span> <span class="dt">Exp</span> <span class="dt">Exp</span>
<span id="cb1-9"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-9" tabindex="-1">  <span class="op">|</span> <span class="dt">Let</span> <span class="dt">Var</span> <span class="dt">Exp</span> <span class="dt">Exp</span></a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-9" tabindex="-1">
<p>Given such an expression, we would like to know whether it might throw an exception. Such an analysis is easy to write: We traverse the syntax tree, remembering in the <code>env</code> which of the variables may throw an exception:</p>
</a><div class="sourceCode" id="cb2"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-9" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-9" tabindex="-1"><code class="sourceCode haskell"><span id="cb2-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-1" tabindex="-1"><span class="ot">canThrow1 ::</span> <span class="dt">Exp</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>
<span id="cb2-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1">canThrow1 <span class="ot">=</span> go M.empty
<span id="cb2-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-3" tabindex="-1">  <span class="kw">where</span>
<span id="cb2-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-4" tabindex="-1"><span class="ot">    go ::</span> <span class="dt">M.Map</span> <span class="dt">Var</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Exp</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>
<span id="cb2-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-5" tabindex="-1">    go env (<span class="dt">Var</span> v)       <span class="ot">=</span> env <span class="op">M.!</span> v
<span id="cb2-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-6" tabindex="-1">    go env <span class="dt">Throw</span>         <span class="ot">=</span> <span class="dt">True</span>
<span id="cb2-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-7" tabindex="-1">    go env (<span class="dt">Catch</span> e)     <span class="ot">=</span> <span class="dt">False</span>
<span id="cb2-8"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-8" tabindex="-1">    go env (<span class="dt">Lam</span> v e)     <span class="ot">=</span> go (M.insert v <span class="dt">False</span> env) e
<span id="cb2-9"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-9" tabindex="-1">    go env (<span class="dt">App</span> e1 e2)   <span class="ot">=</span> go env e1 <span class="op">||</span> go env e2
<span id="cb2-10"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-10" tabindex="-1">    go env (<span class="dt">Let</span> v e1 e2) <span class="ot">=</span> go env' e2
<span id="cb2-11"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-11" tabindex="-1">      <span class="kw">where</span>
<span id="cb2-12"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-12" tabindex="-1">        env_bind <span class="ot">=</span> M.singleton v (go env e1)
<span id="cb2-13"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-13" tabindex="-1">        env' <span class="ot">=</span> M.union env_bind env</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-13" tabindex="-1">
<p>The most interesting case is the one for <code>Let</code>, where we extend the environment <code>env</code> with the information about the additional variable <code>env_bind</code>, which is calculated from analyzing the right-hand side <code>e1</code>.</p>
<p>So far so good:</p>
<pre><code>ghci&gt; someVal = Lam "y" (Var "y")
ghci&gt; canThrow1 $ Throw
True
ghci&gt; canThrow1 $ Let "x" Throw someVal
False
ghci&gt; canThrow1 $ Let "x" Throw (App (Var "x") someVal)
True</code></pre>
<h3 id="let-it-rec">Let it rec</h3>
<p>To spice things up, let us add a <em>recursive</em> let to the language:</p>
</a><div class="sourceCode" id="cb4"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-13" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-13" tabindex="-1"><code class="sourceCode haskell"><span id="cb4-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-1" tabindex="-1"><span class="kw">data</span> <span class="dt">Exp</span>
<span id="cb4-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">  …
<span id="cb4-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-3" tabindex="-1">  <span class="op">|</span> <span class="dt">LetRec</span> [(<span class="dt">Var</span>, <span class="dt">Exp</span>)] <span class="dt">Exp</span></a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-3" tabindex="-1">
<p>How can we support this new constructor in <code>canThrow1</code>? Let use naively follow the pattern used for <code>Let</code>: Calculate the analysis information for the variables in <code>env_bind</code>, extend the environment with that, and pass it down:</p>
</a><div class="sourceCode" id="cb5"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-3" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-3" tabindex="-1"><code class="sourceCode haskell"><span id="cb5-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-1" tabindex="-1">    go env (<span class="dt">LetRec</span> binds e) <span class="ot">=</span> go env' e
<span id="cb5-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-2" tabindex="-1">      <span class="kw">where</span>
<span id="cb5-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-3" tabindex="-1">        env_bind <span class="ot">=</span> M.fromList [ (v, go env' e) <span class="op">|</span> (v,e) <span class="ot">&lt;-</span> binds ]
<span id="cb5-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-4" tabindex="-1">        env' <span class="ot">=</span> M.union env_bind env</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-4" tabindex="-1">
<p>Note that, crucially, we use <code>env'</code>, and not just <code>env</code>, when analyzing the right-hand sides. It has to be that way, as all the variables are in scope in all the right-hand sides.</p>
<p>In a strict language, such a mutually recursive definition, where <code>env_bind</code> uses <code>env'</code> which uses <code>env_bind</code> is basically unthinkable. But in a lazy language like Haskell, it might just work.</p>
<p>Unfortunately, it works only as long as the recursive bindings are <em>not actually recursive</em>, or if they are recursive, they are not used:</p>
<pre><code>ghci&gt; canThrow1 $ LetRec [("x", Throw)] (Var "x")
True
ghci&gt; canThrow1 $ LetRec [("x", App (Var "y") someVal), ("y", Throw)] (Var "x")
True
ghci&gt; canThrow1 $ LetRec [("x", App (Var "x") someVal), ("y", Throw)] (Var "y")
True</code></pre>
<p>But with genuine recursion, it does not work, and simply goes into a recursive cycle:</p>
<pre><code>ghci&gt; canThrow1 $ LetRec [("x", App (Var "x") someVal), ("y", Throw)] (Var "x")
^CInterrupted.</code></pre>
<p>That is disappointing! Do we really have to toss that code and somehow do an explicit fixed-point calculation here? Obscuring our nice declarative code? And possibly having to repeat work (such as traversing the syntax tree) many times that we should only have to do once?</p>
<h3 id="rec-def-to-the-rescue">rec-def to the rescue</h3>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-4" tabindex="-1">Not with rec-def! Using <code>R Bool</code> from </a><a href="https://hackage.haskell.org/package/rec-def-0.1/docs/Data-Recursive-Bool.html"><code>Data.Recursive.Bool</code></a> instead of <code>Bool</code>, we can write the exact same code, as follows:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-1" tabindex="-1"><span class="ot">canThrow2 ::</span> <span class="dt">Exp</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-1" tabindex="-1">
<span id="cb8-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-2" tabindex="-1">canThrow2 <span class="ot">=</span> getR <span class="op">.</span> go M.empty
<span id="cb8-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-3" tabindex="-1">  <span class="kw">where</span>
<span id="cb8-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-4" tabindex="-1"><span class="ot">    go ::</span> <span class="dt">M.Map</span> <span class="dt">Var</span> (<span class="dt">R</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> <span class="dt">Exp</span> <span class="ot">-&gt;</span> <span class="dt">R</span> <span class="dt">Bool</span>
<span id="cb8-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-5" tabindex="-1">    go env (<span class="dt">Var</span> v)       <span class="ot">=</span> env <span class="op">M.!</span> v
<span id="cb8-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-6" tabindex="-1">    go env <span class="dt">Throw</span>         <span class="ot">=</span> rTrue
<span id="cb8-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-7" tabindex="-1">    go env (<span class="dt">Catch</span> e)     <span class="ot">=</span> rFalse
<span id="cb8-8"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-8" tabindex="-1">    go env (<span class="dt">Lam</span> v e)     <span class="ot">=</span> go (M.insert v rFalse env) e
<span id="cb8-9"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-9" tabindex="-1">    go env (<span class="dt">App</span> e1 e2)   <span class="ot">=</span> go env e1 <span class="op">|||</span> go env e2
<span id="cb8-10"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-10" tabindex="-1">    go env (<span class="dt">Let</span> v e1 e2) <span class="ot">=</span> go env' e2
<span id="cb8-11"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-11" tabindex="-1">      <span class="kw">where</span>
<span id="cb8-12"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-12" tabindex="-1">        env_bind <span class="ot">=</span> M.singleton v (go env e1)
<span id="cb8-13"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-13" tabindex="-1">        env' <span class="ot">=</span> M.union env_bind env
<span id="cb8-14"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-14" tabindex="-1">    go env (<span class="dt">LetRec</span> binds e) <span class="ot">=</span> go env' e
<span id="cb8-15"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-15" tabindex="-1">      <span class="kw">where</span>
<span id="cb8-16"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-16" tabindex="-1">        env_bind <span class="ot">=</span> M.fromList [ (v, go env' e) <span class="op">|</span> (v,e) <span class="ot">&lt;-</span> binds ]
<span id="cb8-17"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-17" tabindex="-1">        env' <span class="ot">=</span> M.union env_bind env</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-17" tabindex="-1">
<p>And it works!</p>
<pre><code>ghci&gt; canThrow2 $ LetRec [("x", App (Var "x") someVal), ("y", Throw)] (Var "x")
False
ghci&gt; canThrow2 $ LetRec [("x", App (Var "x") Throw), ("y", Throw)] (Var "x")
True</code></pre>
<p>I find this much more pleasing than the explicit naive fix-pointing you might do otherwise, where you stabilize the result at each <code>LetRec</code> independently: Not only is all that extra work hidden from the programmer, but now also a <em>single</em> traversal of the syntax tree creates, thanks to the laziness, a graph of <code>R Bool</code> values, which are then solved “under the hood”.</p>
<h3 id="the-issue-with-xx">The issue with x=x</h3>
<p>There is one downside worth mentioning: <code>canThrow2</code> fails to produce a result in case we hit <code>x=x</code>:</p>
<pre><code>ghci&gt; canThrow2 $ LetRec [("x", Var "x")] (Var "x")
^CInterrupted.</code></pre>
<p>This is, after all the syntax tree has been processed and all the map lookups have been resolved, equivalent to</p>
<pre><code>ghci&gt; let x = x in getR (x :: R Bool)
^CInterrupted.</code></pre>
<p>which also does not work. The <code>rec-def</code> machinery can only kick in if at least one of its function is used on any such cycle, even if it is just a form of identity (which I ought to add to the library):</p>
<pre><code>ghci&gt; idR x = rFalse ||| x
ghci&gt; let x = idR x in getR (x :: R Bool)
False</code></pre>
<p>And indeed, if I insert a call to <code>idR</code> in the line</p>
</a><div class="sourceCode" id="cb13"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-17" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-17" tabindex="-1"><code class="sourceCode haskell"><span id="cb13-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-1" tabindex="-1">        env_bind <span class="ot">=</span> M.fromList [ (v, idR (go env' e)) <span class="op">|</span> (v,e) <span class="ot">&lt;-</span> binds ]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-1" tabindex="-1">
<p>then our analyzer will no longer stumble over these nasty recursive equations:</p>
<pre><code>ghci&gt; canThrow2 $ LetRec [("x", Var "x")] (Var "x")
False</code></pre>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-1" tabindex="-1">It is a bit disappointing to have to do that, but I do not see a better way yet. I guess the <code>def-rec</code> library expects the programmer to have a similar level of sophistication as other tie-the-know tricks with laziness (where you also have to ensure that your definitions are productive and that the sharing is not accidentally lost).</a></p></div>
    </summary>
    <updated>2022-09-14T21:53:37Z</updated>
    <published>2022-09-14T21:53:37Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html"/>
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml"/>
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2022-09-15T10:00:55Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2022:/misc/zeppelin-wappen</id>
    <link href="https://blog.plover.com/misc/zeppelin-wappen.html" rel="alternate" type="text/html"/>
    <title>Coat of arms of Zeppelin-Wappen</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>"Can we choose a new coat of arms?"</p>

<p>"What's wrong with the one we have?"</p>

<p>"What's wrong with it?  It's nauseated goat!"</p>

<p>"I don't know what your problem is, it's been the family crest for
generations."</p>

<p>"Please, I'm begging."</p>

<p>"Okay, how about a compromise: I'll get a new coat of arms, but it
must include a reference to the old one."</p>

<p>"I guess I can live with that."</p>

<p><img alt="The coat of arms of the Zeppelin family, per Wikimedia Commons. A white goat's head with a nauseated expression, its long red tongue sticking out.  Below this is a blue and white cloth, a full-face helmet, and, at the bottom, a blue kite shield with the same picture of the same nauseated goat." class="center" src="https://pic.blog.plover.com/misc/zeppelin-wappen/Zeppelin-Wappen.png"/></p>

<p>[ Source: <a href="https://en.wikipedia.org/wiki/Zeppelin_%28surname%29">Wikipedia</a>Â ]</p></div>
    </content>
    <updated>2022-09-13T02:12:00Z</updated>
    <published>2022-09-13T02:12:00Z</published>
    <category term="/misc"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml"/>
      <link href="https://blog.plover.com" rel="alternate" type="text/html"/>
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2022-09-13T02:12:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2022-09-13-nixpkgs-graph/</id>
    <link href="https://tweag.io/blog/2022-09-13-nixpkgs-graph/" rel="alternate" type="text/html"/>
    <title>Construction and analysis of the build and runtime dependency graph of nixpkgs</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>During my internship under the mentorship of Guillaume Desforges at Tweag, I worked on creating and analyzing a graph of the contents of <a href="https://github.com/NixOS/nixpkgs">nixpkgs</a>.
I received help and advice from many talented colleagues on Tweag’s Nix Slack channel during this process.</p>
<p><a href="https://nixos.org/">Nix</a> is a package manager with a focus on reproducible, declarative and reliable packages.
Nixpkgs is an enormous collection of software packages that can be installed with the <a href="https://nixos.org/">Nix</a> package manager.
Due to the way Nix works, all packages must define precisely all of their dependencies (their dependency closure) down to the operating system’s kernel.
This rigor-by-design with respect to dependencies is what makes Nix packages highly reproducible, and as a side effect, it gives us a fantastic dataset: the full dependency network that the more than 80000 packages in this collection form.</p>
<p>The interdependence between software packages forms a very complex network.
Seemingly insignificant programs maintained by only a handful of people may be the pillar of applications we use every day.
Looking at the dependency graph of software allows us to identify such libraries or programs.
As a software collection that is used to build a complete operating system, Nixpkgs is not limited to an ecosystem and contains packages for many languages and programs.
Its dependency graph can help us understand the relationship between different software ecosystems and capture some macro features that they have.</p>
<p>Besides, if you plan to contribute to nixpkgs, knowing some its basic characteristics in advance can help you get a feeling for how this intricate system works.</p>
<p>In contrast to an <a href="https://www.tweag.io/blog/2019-02-06-mapping-open-source/">earlier blog post</a> that extracted the graph in an adhoc way directly from Nix’s database of packages, the main purpose of this project is to provide a CLI tool that simplifies the extraction of derivations (Nix’s name for packages) and their dependencies programmatically from nixpkgs, and injecting them as nodes and edges in a graph database for further examination.</p>
<p>I thus sincerely encourage you to visit the <a href="https://github.com/tweag/nixpkgs-graph/">GitHub repository</a> after reading this post. Now let’s get into it!</p>
<h2 id="how-to-get-nodes-and-edges-from-nixpkgs"><a class="anchor before" href="https://www.tweag.io/rss.xml#how-to-get-nodes-and-edges-from-nixpkgs"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>How to get nodes and edges from nixpkgs?</h2>
<p>Before we start, let’s see how nixpkgs can be seen as a graph.</p>
<p>A graph in computer science is a structure made of nodes and edges, a set of node pairs.
A directed graph (digraph), is a graph in which the edges have a direction, from the first to the second node in an edge’s node pair.</p>
<p><span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;">
      <a class="gatsby-resp-image-link" href="https://www.tweag.io/static/66f594ee525a1fefebc13f5748f6d0ff/aa440/DiGraph.png" rel="noopener" style="display: block;" target="_blank">
    <span class="gatsby-resp-image-background-image" style="padding-bottom: 100%; display: block;"/>
  <img alt="Digraph" class="gatsby-resp-image-image" src="https://www.tweag.io/static/66f594ee525a1fefebc13f5748f6d0ff/fcda8/DiGraph.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Digraph"/>
  </a>
    </span></p>
<p>In the context of nixpkgs, we can interpret nodes as derivations (packages) identified by their name, in the form of <code class="language-text">pname-version</code>.
In addition, given two derivations A and B, an edge from A to B can be understood as a dependency of A on B, meaning B is in either a build-time or runtime dependency of A (in Nix derivations, dependencies are specified in the <code class="language-text">buildInputs</code> and <code class="language-text">propagatedBuildInputs</code> attributes).
For example, in this interpretation, the Nix derivation <code class="language-text">chromium</code> has four dependencies, one of them being <code class="language-text">glib</code>.</p>
<h3 id="how-to-get-a-list-of-all-derivations-in-nixpkgs"><a class="anchor before" href="https://www.tweag.io/rss.xml#how-to-get-a-list-of-all-derivations-in-nixpkgs"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>How to get a list of all derivations in nixpkgs?</h3>
<p>One of the easiest and most direct ways to get the list of all derivations under nixpkgs is to use the <a href="https://nixos.org/manual/nix/unstable/command-ref/new-cli/nix3-search.html">nix search</a> command:</p>
<div class="gatsby-highlight"><pre class="language-sh"><code class="language-sh">$ nix search --json nixpkgs</code></pre></div>
<p>The json output is a list of all derivations in nixpkgs containing each package’s full path in the nixpkgs collection, it’s <code class="language-text">pname</code> (package name), <code class="language-text">version</code>, and <code class="language-text">description</code> attributes:</p>
<div class="gatsby-highlight"><pre class="language-json"><code class="language-json"><span class="token property">"legacyPackages.aarch64-darwin.zzuf"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"pname"</span><span class="token operator">:</span><span class="token string">"zzuf"</span><span class="token punctuation">,</span><span class="token property">"version"</span><span class="token operator">:</span><span class="token string">"0.15"</span><span class="token punctuation">,</span><span class="token property">"description"</span><span class="token operator">:</span><span class="token string">"Transparent application input fuzzer"</span><span class="token punctuation">}</span></code></pre></div>
<p>This is the list of <em>nodes</em>, with names and various properties, in the graph that we want to build.</p>
<h3 id="how-to-list-the-dependencies-of-a-derivation"><a class="anchor before" href="https://www.tweag.io/rss.xml#how-to-list-the-dependencies-of-a-derivation"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>How to list the dependencies of a derivation?</h3>
<p>To find the dependency relationships between those nodes, we need to get the dependencies for all derivations from nixpkgs.
To do this, we can go through the full tree of nixpkgs paths (similar to <code class="language-text">legacyPackages.aarch64-darwin.zzuf</code>), access each of the derivations and extract their dependencies programmatically.
In short, we need to map over nixpkgs.</p>
<h4 id="mapping-over-the-full-nixpkgs-attribute-set"><a class="anchor before" href="https://www.tweag.io/rss.xml#mapping-over-the-full-nixpkgs-attribute-set"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Mapping over the full nixpkgs attribute set</h4>
<p>The command <code class="language-text">nix search</code> is a good start for an initial look at the content of nixpkgs，but it is not enough for what we need because it doesn’t output dependencies.
To go further, we will use the Nix language to inspect nixpkgs, instead of using Nix’s command-line tools. This will give us more liberty.
The key is to correctly understand the structure of nixpkgs,
then obtain the dependencies of derivations under nixpkgs without building them.
Because the build of derivations is quite time consuming and we just need to evaluate them.</p>
<p>In Nix, the data type of nixpkgs is <a href="https://nixos.org/manual/nix/unstable/language/values.html?highlight=attribute%20set#attribute-set">attribute set</a> (similar to the notion of a dict in Python).
And the Nix language contains two special functions: the Nix builtin function <a href="https://nixos.org/manual/nix/stable/expressions/builtins.html#builtins-mapAttrs">mapAttrs</a> and the nixpkgs function <a href="http://ryantm.github.io/nixpkgs/functions/library/strings/">concatMapStrings</a>.</p>
<p>With the help of the above two tools, we can iterate through each package in nixpkgs, get its basic information and dependencies directly and integrate the results into the output.
To avoid the time-consuming problem of build, we will use <a href="https://nixos.org/manual/nix/unstable/command-ref/nix-instantiate.html">nix-instantiate</a> instead of <code class="language-text">nix-build</code>.
The <code class="language-text">--eval</code> flag will allow the <code class="language-text">nix-instantiate</code> command to evaluate the Nix expressions without instantiations of store derivations taking place.
And this is just what we need.</p>
<p>Then, for each attribute under nixpkgs, we first check whether it is a derivation using the Nix lib function <code class="language-text">isDerivation</code>.
If so we extract the information in it with <a href="https://nixos.org/manual/nix/unstable/language/builtins.html?highlight=tryEval#built-in-functions">tryEval</a>.
We use <code class="language-text">tryEval</code> because not all derivations can be evaluated.
<code class="language-text">tryEval</code> prevents the program from stopping because of the evaluation failure of some derivations.
Otherwise, we check if it can recurse (this means that it is not a derivation but a attribute set like nixpkgs that contains derivations, and we need to re-apply the function of extraction on this set) or is in the whitelist, if yes, we recurse, else we stop.
For determining whether or not to recurse, we can rely on <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/top-level/release-lib.nix#L151">recurseForDerivations</a> and <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/top-level/release-lib.nix#L151">recurseForRelease</a> attributes.
In particular, there are important sets of derivations that are not derivations while their both recurse attributes are false, such as <code class="language-text">python3Packages</code>.
Therefore, a whitelist is added for these sets.</p>
<h4 id="inconsistent-result-hierarchy-due-to-nested-structure"><a class="anchor before" href="https://www.tweag.io/rss.xml#inconsistent-result-hierarchy-due-to-nested-structure"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Inconsistent result hierarchy due to nested structure</h4>
<p>With the above steps we get the <code class="language-text">pname</code>, <code class="language-text">version</code> and dependencies of the derivations in nixpkgs in json format.
We get something like <code class="language-text">{n1, n2, {n3, {n4}}}</code>, while what we hope to get is <code class="language-text">{n1, n2, n3, n4}</code>.
All derivations should be in the same level of the json file to be readable to other software.</p>
<p>Once again, Nix provides the ace we need: <a href="https://teu5us.github.io/nix-lib.html#lib.attrsets.collect">lib.collect</a>.
Using <code class="language-text">collect</code>, we can both flatten a nested structure and select which elements to take.
In order to properly filter the packages, we need the previous mapping step to flag the packages that we have evaluated.
This can be done for instance by adding a <code class="language-text">type</code> attribute with value <code class="language-text">node</code>, and filtering with a function <code class="language-text">selectNodes = x: (x.type or null) == "node"</code>.
Then the function <code class="language-text">collectNodes = pkgs.lib.collect selectNodes</code> will give us all the previously evaluated packages as a flat list.</p>
<p><strong>In the end, we get the result in the following format:</strong></p>
<div class="gatsby-highlight"><pre class="language-json"><code class="language-json">...
<span class="token punctuation">{</span>
  <span class="token property">"buildInputs"</span><span class="token operator">:</span> <span class="token string">"/nix/store/c1pzk30ksbff1x3krxnqzrzzfjazsy3l-gsettings-desktop-schemas-42.0 /nix/store/mmwc0xqwxz2s4j35w7wd329hajzfy2f1-glib-2.72.3-dev /nix/store/64mp60apx1klb14l0205562qsk1nlk39-gtk+3-3.24.34-dev /nix/store/6hdwxlycxjgh8y55gb77i8yqglmfaxkp-adwaita-icon-theme-42.0 "</span><span class="token punctuation">,</span>
  <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"chromium-103.0.5060.134"</span><span class="token punctuation">,</span>
  <span class="token property">"package"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"nixpkgs"</span><span class="token punctuation">,</span>
    <span class="token string">"chromium"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"pname"</span><span class="token operator">:</span> <span class="token string">"chromium"</span><span class="token punctuation">,</span>
  <span class="token property">"propagatedBuildInputs"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"node"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"103.0.5060.134"</span>
<span class="token punctuation">}</span>
...</code></pre></div>
<h2 id="log-the-graph-to-networkx"><a class="anchor before" href="https://www.tweag.io/rss.xml#log-the-graph-to-networkx"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Log the graph to networkx</h2>
<p>For the graph generation and processing, this project uses the <a href="https://networkx.org/">networkx</a> Python package.
NetworkX is a powerful Python package for the creation, manipulation, and study of complex networks.
It also has output functions for multiple formats (<code class="language-text">.csv</code>, <code class="language-text">.gexf</code>, etc.), which is very helpful for the subsequent analysts of the graph.</p>
<p>Based on the data in json format obtained in the previous section, the generation of the graph consists of the following main steps:</p>
<ul>
<li>Read data and pre-process</li>
<li>Create a new graph in networkx.DiGraph format and add nodes and edges to it</li>
<li>Complete data</li>
<li>Output data</li>
</ul>
<p>Preprocessing consists mainly of reading data using <a href="https://pandas.pydata.org/">pandas</a> and cutting <code class="language-text">buildInputs</code> and <code class="language-text">propagatedBuildInputs</code> from one single string to a list.
And each item in this list contains only the required <code class="language-text">id</code> part.
In addition, depending on the package set the node belongs to (e.g. <code class="language-text">pythonPackages</code>), we add a <code class="language-text">group</code> attribute to it.</p>
<p>Nodes and edges can be added using networkx built-in functions.
In particular, networkx allows us to add various labels to nodes and edges (e.g. a node can contain its id, pname, version, group; an edge can contain the category it belongs to).</p>
<p>Specifically, since not all packages in nixpkgs can be evaluated, there are some edges involved in nodes that are not evaluated.
In turn, in networkx’s database, these nodes only have <code class="language-text">id</code>.
So additional <code class="language-text">group</code> attributes need to be added for them.
Here, the group attribute of all nodes that cannot be evaluated is set to <code class="language-text">"nixpkgs"</code>.</p>
<p>Finally, we can first export the data in csv format using pandas.
Besides, we can use networkx’s built-in functions output the graph in png format, which can allow us to have a general idea of the graph.
However, if we want to go deeper into the visualization features, networkx also allows us to export the graph in gexf format and then we can process it with Gephi as well as in graphml format which could be treated by Neo4j.</p>
<h2 id="analyze-the-relationships-in-nixpkgs"><a class="anchor before" href="https://www.tweag.io/rss.xml#analyze-the-relationships-in-nixpkgs"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Analyze the relationships in nixpkgs</h2>
<p>Now let’s make use of this data.</p>
<p>The CLI of this project allows the user to customize the version of nixpkgs to be used.
Simply provide the full 40-character SHA-1 hash of a commit and the SHA256 of its tree.
The commit of nixpkgs used in this blog is <code class="language-text">481f9b246d200205d8bafab48f3bd1aeb62d775b</code>.</p>
<h3 id="some-basic-information"><a class="anchor before" href="https://www.tweag.io/rss.xml#some-basic-information"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Some basic information</h3>
<p>The final directed graph consists of 64205 nodes and 217579 edges.
Among them, the top 3 packages with the most direct dependencies are: <code class="language-text">pleroma-2.4.3</code>: 124, <code class="language-text">azure-cli-2.34.1</code>: 117, <code class="language-text">libreoffice-7.3.3.2</code>: 94.
And the most cited 3 nodes are: <code class="language-text">python3-3.10.6</code>: 7697, <code class="language-text">texinfo-6.8</code>: 5626, <code class="language-text">emacs-28.1</code>: 5553.
On average, a node has 3.35 direct dependencies.
And the longest chain of dependencies in nixpkgs consists of 41 nodes.</p>
<h3 id="use-gephi-for-visualization"><a class="anchor before" href="https://www.tweag.io/rss.xml#use-gephi-for-visualization"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Use Gephi for visualization</h3>
<p>Using the gexf format file provided by default after running with the CLI, we can draw the following image with Gephi.
As shown below, we set the color of the nodes according to the group they belong to.
And the size of each node is nonlinearly and positively related to its <a href="https://en.wikipedia.org/wiki/Directed_graph">in degree</a> (def: the number of edges coming into a node in a directed graph).</p>
<p>For the layout of the graph, the <a href="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0098679">atlas force 2</a> algorithm is used here.
It is a force simulation algorithm that contains both gravitational and repulsive forces.
The attractive forces pull the nodes toward their dependencies while the repulsive forces push high-degree nodes away from the nodes around them.
Thus we can see that packages belonging to the same ecosystem are clustered together because they have similar dependencies.
The nodes with high degree form a blank area around them.
In addition, just like the celestial bodies, there is a gravitational force that makes all the nodes clump together to form a circle.</p>
<p><span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;">
      <a class="gatsby-resp-image-link" href="https://www.tweag.io/static/1f4023b248a4dec5a30034657cf0b2c6/ce6cc/Gephi_00.png" rel="noopener" style="display: block;" target="_blank">
    <span class="gatsby-resp-image-background-image" style="display: block;"/>
  <img alt="Gephi0" class="gatsby-resp-image-image" src="https://www.tweag.io/static/1f4023b248a4dec5a30034657cf0b2c6/fcda8/Gephi_00.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Gephi0"/>
  </a>
    </span></p>
<h3 id="cycles-in-the-graph"><a class="anchor before" href="https://www.tweag.io/rss.xml#cycles-in-the-graph"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Cycles in the graph</h3>
<p>When I first designed the algorithm to calculate the longest chains in nixpkgs, the algorithm always failed to run.
After some analysis, I found that there are some simple cycles in nixpkgs.
Some cycles are of length 1, which means that some derivations have <code class="language-text">buildInputs</code> or <code class="language-text">propagatedBuildInputs</code> that contain themselves.
There are also some cycles of length 2 or 3. There are six cycles in total:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'chicken-5.3.0'</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">'chicken-4.13.0'</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">'mlton-20180207'</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">'gvfs-1.50.2'</span><span class="token punctuation">,</span> <span class="token string">'libgdata-0.18.1'</span><span class="token punctuation">,</span> <span class="token string">'gnome-online-accounts-3.44.0'</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">'gvfs-1.50.2'</span><span class="token punctuation">,</span> <span class="token string">'gnome-online-accounts-3.44.0'</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">'pipewire-0.3.51'</span><span class="token punctuation">,</span> <span class="token string">'ffmpeg-4.4.2'</span><span class="token punctuation">,</span> <span class="token string">'SDL2-2.0.20'</span><span class="token punctuation">]</span></code></pre></div>
<p>Specifically, to confirm if the error occurred when fetching the nixpkgs data, I accessed the raw nixpkgs data:</p>
<div class="gatsby-highlight"><pre class="language-nix"><code class="language-nix">nix show<span class="token operator">-</span><span class="token function">derivation</span> nixpkgs<span class="token comment">#chicken</span></code></pre></div>
<p>In the results given by nix there is the following information:</p>
<div class="gatsby-highlight"><pre class="language-json"><code class="language-json"><span class="token property">"/nix/store/1qlyycams6q39ll5r4p1sq57gcvhvgmn-chicken-5.3.0.drv"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    ...
    <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      ...
      <span class="token property">"buildInputs"</span><span class="token operator">:</span> <span class="token string">"/nix/store/c4ha2dqj3a1jp2dn962wdfq5wqy0gikv-chicken-5.3.0"</span><span class="token punctuation">,</span>
      ...
    <span class="token punctuation">}</span>
    ...
<span class="token punctuation">}</span></code></pre></div>
<p>This means that cycles do exist in the raw data of nixpkgs.</p>
<p>How is this possible?
If a derivation’s dependencies contained itself, then an infinite loop would occur during the build.
That is, building <code class="language-text">A</code> would require that the environment had already <code class="language-text">A</code>. Of course this is not possible.</p>
<p>When checking the full <code class="language-text">hash-pname-version</code> entry in the store, we can see it’s not actually the same package.
See example above for <code class="language-text">chicken</code>, it is what we call <a href="https://en.wikipedia.org/wiki/Bootstrapping_(compilers)">bootstrapping</a>.
Nix will first build an initial version of <code class="language-text">chicken</code> without <code class="language-text">chicken</code> in its dependencies.
Then use this initial version to install the final <code class="language-text">chicken</code>.
This is why we can see two <code class="language-text">chicken</code> with different hashes.
But since our id identification uses <code class="language-text">pname-version</code>, they are identified as one node, thus forming a cycle.</p>
<h3 id="query-the-graph-with-neo4j"><a class="anchor before" href="https://www.tweag.io/rss.xml#query-the-graph-with-neo4j"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Query the graph with <a href="https://neo4j.com/">Neo4j</a></h3>
<p>Gephi provides us with a nice visualization, but sometimes you may need some precise queries.
For this reason, we also provide the appropriate solution.</p>
<p>Neo4j is a tool to manipulate graphs with additional information, such as node and edge labels and properties.
More importantly, it allows querying these graphs through a query language called Cypher.
It is possible to query the graph by using three main keywords: <strong>MATCH</strong>, <strong>WHERE</strong>, <strong>RETURN</strong>.
The first keyword allows to match some nodes and edges following their types and their edges, the second one allows to check data property and the last one allows to return some result.</p>
<p>First let’s see how to export data from networkx to Neo4j.
The <a href="https://neo4j.com/docs/operations-manual/current/tools/neo4j-admin/neo4j-admin-import/">import file format</a> supported by Neo4j is mainly csv, which needs to read nodes and edges line by line.
But we have a simpler solution to make: let networkx output the graph in graphml format and then install the <a href="https://neo4j.com/labs/apoc/4.4/installation/">APOC</a> plugin for Neo4j to read it.
This plugin can be installed on both the desktop and server versions of Neo4j and is very easy to use.
If you happen to need to transfer data between networkx and neo4j, you can also refer to this method.</p>
<p>Now we can start playing with some commands to demonstrate the benefits of Neo4j.
For example if we want to know who the Python ecosystem directly relies on most, we can do this.</p>
<div class="gatsby-highlight"><pre class="language-cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> n<span class="token punctuation">.</span>group <span class="token keyword">STARTS</span> <span class="token keyword">WITH</span> <span class="token string">'python'</span> <span class="token keyword">AND</span> <span class="token keyword">NOT</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span>group <span class="token keyword">STARTS</span> <span class="token keyword">WITH</span> <span class="token string">'python'</span><span class="token punctuation">)</span>
<span class="token keyword">RETURN</span> <span class="token keyword">DISTINCT</span> m<span class="token punctuation">.</span>group <span class="token keyword">AS</span> group<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token keyword">AS</span> times
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> times <span class="token keyword">DESC</span>
<span class="token keyword">LIMIT</span> <span class="token number">10</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
<span class="token operator">|</span> group                 <span class="token operator">|</span> times <span class="token operator">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
<span class="token operator">|</span> <span class="token string">"nixpkgs"</span>             <span class="token operator">|</span> <span class="token number">8966</span>  <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token string">"gnuradio3_8Packages"</span> <span class="token operator">|</span> <span class="token number">5409</span>  <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token string">"xorg"</span>                <span class="token operator">|</span> <span class="token number">86</span>    <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token string">"libsForQt5"</span>          <span class="token operator">|</span> <span class="token number">41</span>    <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token string">"gst_all_1"</span>           <span class="token operator">|</span> <span class="token number">18</span>    <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token string">"gnome2"</span>              <span class="token operator">|</span> <span class="token number">9</span>     <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token string">"driversi686Linux"</span>    <span class="token operator">|</span> <span class="token number">6</span>     <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token string">"gnome"</span>               <span class="token operator">|</span> <span class="token number">5</span>     <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token string">"haskellPackages"</span>     <span class="token operator">|</span> <span class="token number">4</span>     <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token string">"llvmPackages"</span>        <span class="token operator">|</span> <span class="token number">3</span>     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span></code></pre></div>
<p>From the results we can see that Python ecosystem relies mainly on some separate derivations (<code class="language-text">nixpkgs</code> is the group for separate software).
This indicates that Python may rely on many separate programs or libraries, as we mentioned at the very beginning.
Secondly Python mainly references <code class="language-text">Gnuradio</code> (a software development toolkit that provides signal processing blocks to implement software radios).
This indicates that Python is widely used for signal processing applications.</p>
<p>To take this a step further, we can compare the differences between python39 and Python310 replacing the ‘python’ string by ‘python39’ and ‘python310’ in the previous query.
The results show that python’s references to gnuradio are mainly a Python 3.10 thing.</p>
<p>The above is just a preliminary use of Neo4j for the nixpkg graph.
But with this example we can see that the nixpkgs graph is able to show some macro features of the software world that is invisible when we’re just in parts of it.</p>
<h2 id="conclusion"><a class="anchor before" href="https://www.tweag.io/rss.xml#conclusion"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Conclusion</h2>
<p>The graph of nixpkgs on the one hand allows us to visualize through gephi and thus visualize the interactions between different software ecosystems. On the other hand, it allows us to perform precise queries through Neo4j.
In addition, with the help of Python’s modules networkx and pandas, we can obtain a lot of quantitative results, such as the average dependency of a software of 3.35.
This <a href="https://github.com/tweag/nixpkgs-graph/">project</a> provides users with raw materials and some tools that they can explore according to their needs to explore.</p>
<p>In closing, I would like to thank Tweag for giving me this internship opportunity.
The value of what I have learned here far outweighs the salary.
I would also like to thank all the Tweagers, including my mentor Mr. Guillaume Desforges, who have helped me in this internship program.
I hope to have the opportunity to work with you again.</p></div>
    </summary>
    <updated>2022-09-13T00:00:00Z</updated>
    <published>2022-09-13T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html"/>
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2022-09-15T11:54:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:63163766700b2b48274150b1</id>
    <link href="https://mmhaskell.com/blog/2022/9/12/my-new-favorite-monad" rel="alternate" type="text/html"/>
    <title>My New Favorite Monad?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In my <a href="https://www.mmhaskell.com/blog/2022/9/8/dijkstra-with-monads">last article</a>, I introduced a more complicated example of a problem using Dijkstra's algorithm and suggested <code>MonadLogger</code> as an approach to help debug some of the intricate helper functions.</p>
<p>But as I've started getting back to working on some of the "Advent of Code" type problems, I've come to the conclusion that this kind of logging might be more important than I initially realized. At the very least, it's gotten me thinking about improving my general problem solving process. Let's explore why.</p>
<h2 id="hitting-a-wall">Hitting a Wall</h2>
<p>Here's an experience I've had quite a few times, especially with Haskell. I'll be solving a problem, working through the ideas in my head and writing out code that seems to fit. And by using Haskell, a lot of problems will be resolved just from making the types work out.</p>
<p>And then, ultimately, the solution is wrong. I don't get the answer I expected, even though everything seems correct.</p>
<p>So how do I fix this problem? A lot of times (unfortunately), I just look at the code, think about it some more, and eventually realize an idea I missed in one of my functions. This is what I would call an <em>insight-based</em> approach to debugging.</p>
<p>Insight is a useful thing. But used on its own, it's probably one of the worst ways to debug code. Why do I say this? Because <strong>insight is not systematic</strong>. You have no process or guarantee that you'll eventually come to the right solution.</p>
<p>So what are systematic approaches you can take?</p>
<h2 id="systematic-approaches-to-debugging">Systematic Approaches to Debugging</h2>
<p>Three general approaches come to my mind when I think about <em>systematic</em> debugging methods. </p>
<ol>
<li>Writing unit tests</li>
<li>Using a debugging program (e.g. GDB)</li>
<li>Using log statements</li>
</ol>
<h3 id="unit-tests">Unit Tests</h3>
<p>The first approach is distinct from the other two in that it is a "black box" method. With unit tests, we provide a function with particular inputs and see if it produces the outputs we expect. We don't need to think about the specific implementation of the function in order to come up with these input/output pairs.</p>
<p>This approach has advantages. Most importantly, when we write unit tests, we will have an automated program that we can always run to verify that the function still behaves how we expect. So we can always refactor our function or try to improve its performance and still know that it's giving us the correct outputs.</p>
<p>Writing unit tests <em>proactively</em> (test driven development) can also force us to think about edge cases <em>before</em> we start programming, which will help us implement our function with these cases in mind.</p>
<p>However, unit testing has a few disadvantages as well. Sometimes it can be cumbersome to construct the inputs to unit-test intermediate functions. And sometimes it can be hard to develop non-trivial test cases that really exercise our code at scale, because we can't necessarily know the answer to harder cases beforehand. And sometimes, coming up with a unit test that will really find a good edge case takes the same kind of non-systematic insight that we were trying to avoid in the first place.</p>
<p>Unit tests can be tricky and time-consuming to do well, but for industry projects you should expect to unit test everything you can. So it's a good habit to get into.</p>
<h3 id="using-a-debugger">Using a Debugger</h3>
<p>The second approach on the list is more of a "white box" approach. Debuggers allow us to explore the interior state of our function while it is running and see if the values match our expectations.</p>
<p>So for example, the typical debugger can set a <strong>breakpoint</strong> so that the program pauses execution in the middle of our function. We can then explore all the values in scope at this point. And examining these values can tell us if the assumptions we're making about our code are correct. We can then step the program forward and see if these values update the way we expect.</p>
<p>However, it is a bit harder to use debugging programs with Haskell. With most imperative languages, the ordering of the machine code (at least when unoptimized) somewhat resembles the order of the code you write in the editor. But Haskell is not an imperative language, so the ordering of operations is more complicated. This is made even worse because of Haskell's laziness.</p>
<p>But debuggers are still worth pursuing! I'll be exploring this subject more in the future. For now, let's move on to our last approach.</p>
<h3 id="log-messages">Log Messages</h3>
<p>What are the advantages of using a logging approach? Are "print statements" really the way to go?</p>
<p>Well this is the quickest and easiest way to get some information about your program. Anyone who's done a technical interview knows this. When something isn't going right in that kind of fast-paced situation, you don't have time to write unit tests. And attaching a debugger isn't an option in interview environments like coderpad. So throwing a quick print statement in your code can help you get "unstuck" without spending too much time.</p>
<p>But generally speaking, you don't want your program to be printing out random values. Once you've resolved your issue, you'll often get rid of the debugging statements. Since these statements won't become part of your production code, they won't remain as a way to help others understand and debug your code, as unit tests do.</p>
<h2 id="logging-and-frustration-in-haskell">Logging and Frustration in Haskell</h2>
<p>Considering these three different methods, logging and print statements are the most common method for anyone who is first learning a language. Setting up a debugger can be a complex task that no beginner wants to go through. Nor does a novice typically want to spend the time to learn unit test frameworks just so they can solve basic problems.</p>
<p>This presents us with a conundrum in helping people to learn Haskell. Because <strong>logging is not intuitive in Haskell</strong>. Or rather, <em>proper</em> logging is not intuitive.</p>
<p>Showing someone the <code>main :: IO ()</code> and then using functions like <code>print</code> and <code>putStrLn</code> is easy enough. But once beginners start writing "pure" functions to solve problems, they'll get confused about how to use logging statements, since the <strong>whole point</strong> of pure functions is that we can't just add print statements to them.</p>
<p>There are, of course, "unsafe" ways to do this with the <a href="https://hackage.haskell.org/package/base-4.17.0.0/docs/Debug-Trace.html">trace library</a> and <a href="https://hackage.haskell.org/package/base-4.17.0.0/docs/System-IO-Unsafe.html"><code>unsafePerformIO</code></a>. But even these options use patterns that are unintuitive for beginners to the language.</p>
<h2 id="start-with-logger-monad">Start with Logger Monad</h2>
<p>With these considerations, I'm going to start an experiment for a while. As I write solutions to puzzle problems (the current focus of my Haskell activity), I'm going to write <strong>all my code with a <code>MonadLogger</code> constraint</strong>. And I would consider the idea of recommending a beginner to do the same. My hypothesis is that I'll solve problems much more quickly with <em>some</em> systematic approach rather than unsystematic insight-driven-development. So I want to see how this will go.</p>
<p>Using <code>MonadLogger</code> is much more "pure" than using <code>IO</code> everywhere. While the most common instances of the logger monad will use IO, it still has major advantages over just using the IO monad from a "purity" standpoint. The logging can be disabled. You can also put different <em>levels</em> of logging into your program. So you can actually use logging statements to log a full trace of your program, but restrict it so that the most verbose statements are at <code>DEBUG</code> and <code>INFO</code> levels. In production, you would disable those messages so that you only see <code>ERROR</code> and <code>WARN</code> messages.</p>
<p>Most importantly, you can't do arbitrary IO activity with just a <code>MonadLogger</code> constraint. You can't open files or send network requests.</p>
<p>Of course, the price of this approach for a beginner is that the newcomer would have to get comfortable with having monadic code with a typeclass constraint before they necessarily understand these topics. But I'm not sure that's worse than using <code>IO</code> everywhere. And if it relieves the frustration of "I can't inspect my program", then I think it could be worthwhile for someone starting out with Haskell.</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you want to see me using this approach on real problems, then tune into my <a href="https://twitch.tv/james_mml">Twitch Stream</a>! I usually stream 5 times a week for short periods. Some of these episodes will end up on my <a href="https://www.youtube.com/channel/UChXjh9JgFQMQQPf4u5hFgiA">YouTube channel</a> as well.</p>
<p>Meanwhile, you can also <a href="https://www.mmhaskell.com/subscribe">subscribe</a> to the mailing list for more updates! This will give you access to Monday Morning Haskell's <a href="https://www.mmhaskell.com/resources">subscriber resources</a>!</p></div>
    </summary>
    <updated>2022-09-12T14:30:00Z</updated>
    <published>2022-09-12T14:30:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html"/>
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml"/>
      <title>Blog - Monday Morning Haskell</title>
      <updated>2022-09-10T05:01:07Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/793-rec-def__Behind_the_scenes</id>
    <link href="http://www.joachim-breitner.de/blog/793-rec-def__Behind_the_scenes" rel="alternate" type="text/html"/>
    <title xml:lang="en">rec-def: Behind the scenes</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>A week ago I wrote about the <a href="https://hackage.haskell.org/package/rec-def"><code>rec-def</code></a> Haskell library, which allows you to write <a href="https://www.joachim-breitner.de/blog/792-More_recursive_definitions">more recursive definitions</a>, such as in this small example:</p>
<pre><code>let s1 = rInsert 23 s2
    s2 = rInsert 42 s1
in getR s1</code></pre>
<p>This will not loop (as it would if you’d just used <code>Data.Set</code>), but rather correctly return the set <code>S.fromList [23,42]</code>. See the previous blog post for more examples and discussion of the user-facing side of this.</p>
<p>For quick reference, these are the types of the functions involved here:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-1" tabindex="-1"><span class="ot">rInsert ::</span> a <span class="ot">-&gt;</span> <span class="dt">R</span> (<span class="dt">Set</span> a) <span class="ot">-&gt;</span> <span class="dt">R</span> (<span class="dt">Set</span> a)</a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-1" tabindex="-1">
<span id="cb2-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1"><span class="ot">getR ::</span> <span class="dt">R</span> (<span class="dt">Set</span> a) <span class="ot">-&gt;</span> <span class="dt">Set</span> a</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1">
<p>The type of <code>s1</code> and <code>s2</code> above is not <code>Set Int</code>, but rather <code>R (Set Int)</code>, and in this post I’ll explain how <code>R</code> works internally.</p>
<h3 id="propagators-in-general">Propagators, in general</h3>
<p>The conceptual model behind an recursive equation like above is</p>
<ul>
<li>There are a multiple <em>cells</em> that can hold values of an underlying type (here <code>Set</code>)</li>
<li>These cells have <em>relations</em> that explain how the values in the cells should relate to each other</li>
<li>After registering all the relations, some form of <em>solving</em> happens.</li>
<li>If the solving succeeds, we can read off the values from the cells, and they should satisfy the registered relation.</li>
</ul>
<p>This is sometimes called a <em>propagator network</em>, and is a quite general model that can support different kind of relations (e.g. equalities, inequalities, functions), there can be various solving strategies (iterative fixed-points, algebraic solution, unification, etc.) and information can flow on along the edges (and hyper-edges) possibly in multiple directions.</p>
<p>For our purposes, we only care about propagator networks where all relations are <em>functional</em>, so they have a single output cell that is declared to be a function of multiple (possibly zero) input cells, without affecting these input cells. Furthermore, every cell is the output of exactly one such relation.</p>
<h3 id="io-infested-propagator-interfaces">IO-infested propagator interfaces</h3>
<p>This suggests that an implementation of such a propagator network could provide an interface with the following three operations:</p>
<ul>
<li>Functions to declare cells</li>
<li>Functions to declare relations</li>
<li>Functions to read values off cells</li>
</ul>
<p>This is clearly an imperative interface, so we’ll see monads, and we’ll simply use <code>IO</code>. So concretely for our small example above, we might expect</p>
</a><div class="sourceCode" id="cb3"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1"><code class="sourceCode haskell"><span id="cb3-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-1" tabindex="-1"><span class="kw">data</span> <span class="dt">Cell</span> a
<span id="cb3-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1"><span class="ot">newCell ::</span> <span class="dt">IO</span> (<span class="dt">Cell</span> a)
<span id="cb3-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-3" tabindex="-1"><span class="co">-- declareInsert x c1 c2 declares that the value of c1 ought to be S.insert x c2</span>
<span id="cb3-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-4" tabindex="-1"><span class="ot">declareInsert ::</span> a <span class="ot">-&gt;</span> <span class="dt">Cell</span> a <span class="ot">-&gt;</span> <span class="dt">Cell</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
<span id="cb3-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-5" tabindex="-1"><span class="ot">getCell ::</span> <span class="dt">Cell</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Set</span> a)</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-5" tabindex="-1">
<p>There is no need for an explicit “solve” function: solving can happen when <code>declareInsert</code> or <code>getCell</code> is called – as a User I do not care about that.</p>
<p>You might be curious about the implementation of <code>newCell</code>, <code>declareInsert</code> and <code>getCell</code>, but I have to disappoint you: This is not the topic of this article. Instead, I want to discuss how to turn this IO-infested interface into the pure interface seen above?</p>
<h3 id="pure-but-too-strict">Pure, but too strict</h3>
<p>Obviously, we have to get rid of the <code>IO</code> somehow, and have to use <code>unsafePerformIO :: IO a -&gt; a</code> somehow. This dangerous function creates a pure-looking value that, when used the first time, will run the IO-action and turn into that action’s result.</p>
<p>So maybe we can simply write the following:</p>
</a><div class="sourceCode" id="cb4"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-5" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-5" tabindex="-1"><code class="sourceCode haskell"><span id="cb4-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-1" tabindex="-1"><span class="kw">type</span> <span class="dt">R</span> (<span class="dt">Set</span> a) <span class="ot">=</span> <span class="dt">Cell</span> a
<span id="cb4-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">rInsert x c2 <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb4-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-3" tabindex="-1">  c1 <span class="ot">&lt;-</span> newCell
<span id="cb4-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-4" tabindex="-1">  declareInsert x c1 c2
<span id="cb4-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-5" tabindex="-1">  <span class="fu">return</span> c1
<span id="cb4-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-6" tabindex="-1">getR c <span class="ot">=</span> unsafePerformIO <span class="op">$</span>
<span id="cb4-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-7" tabindex="-1">  getCell c</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-7" tabindex="-1">
<p>Indeed, the types line up, but if we try to use that code, nothing will happen. Our <code>rInsert</code> is <em>too strict</em> to be used recursively: It requires the value of <code>c2</code> (as it is passed to <code>declareInsert</code>, which we assume to be strict in its arguments) before it can return <code>c1</code>, so the recursive example at the top of this post will not make any progress.</p>
<h3 id="pure-lazy-but-forgetful">Pure, lazy, but forgetful</h3>
<p>To work around this, maybe it suffices if we do not run <code>declareInsert</code> right away, but just remember that we have to do it eventually? So let’s introduce a new data type for <code>R (Set a)</code> that contains not just the cell (<code>Cell a</code>), but also an action that we still have to run before getting a value:</p>
</a><div class="sourceCode" id="cb5"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-7" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-7" tabindex="-1"><code class="sourceCode haskell"><span id="cb5-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-1" tabindex="-1"><span class="kw">data</span> <span class="dt">R</span> (<span class="dt">Set</span> a) <span class="ot">=</span> <span class="dt">R</span> (<span class="dt">Cell</span> a) (<span class="dt">IO</span> ())
<span id="cb5-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-2" tabindex="-1">rInsert x r2 <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb5-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-3" tabindex="-1">  c1 <span class="ot">&lt;-</span> newCell
<span id="cb5-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-4" tabindex="-1">  <span class="kw">let</span> todo <span class="ot">=</span> <span class="kw">do</span>
<span id="cb5-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-5" tabindex="-1">    <span class="kw">let</span> (<span class="dt">R</span> c2 _) <span class="ot">=</span> r2
<span id="cb5-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-6" tabindex="-1">    declareInsert x c1 c2
<span id="cb5-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-7" tabindex="-1">  <span class="fu">return</span> (<span class="dt">R</span> c1 todo)
<span id="cb5-8"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-8" tabindex="-1">getR (<span class="dt">R</span> c todo) <span class="ot">=</span> unsafePerformIO <span class="op">$</span>
<span id="cb5-9"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-9" tabindex="-1">  todo
<span id="cb5-10"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-10" tabindex="-1">  getCell c</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-10" tabindex="-1">
<p>This is better: <code>rInsert</code> is now lazy in its arguments (for this it is crucial to pattern-match on <code>R</code> only inside the <code>todo</code> code, <em>not</em> in the pattern of <code>rInsert</code>!) This means that our recursive code above does not get stuck right away.</p>
<h3 id="pure-lazy-but-runs-in-circles">Pure, lazy, but runs in circles</h3>
<p>But it is still pretty bad: Note that we do not run <code>getR s2</code> in the example above, so that cell’s <code>todo</code>, which would <code>declareInsert 42</code>, will never run. This cannot work! We have to (eventually) run the declaration code from <em>all</em> involved cells before we can use <code>getCell</code>!</p>
<p>We can try to run the todo action of all the dependencies as part of a cell’s todo action:</p>
</a><div class="sourceCode" id="cb6"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-10" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-10" tabindex="-1"><code class="sourceCode haskell"><span id="cb6-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-1" tabindex="-1"><span class="kw">data</span> <span class="dt">R</span> (<span class="dt">Set</span> a) <span class="ot">=</span> <span class="dt">R</span> (<span class="dt">Cell</span> a) (<span class="dt">IO</span> ())
<span id="cb6-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-2" tabindex="-1">rInsert x r2 <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb6-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-3" tabindex="-1">  c1 <span class="ot">&lt;-</span> newCell
<span id="cb6-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-4" tabindex="-1">  <span class="kw">let</span> todo <span class="ot">=</span> <span class="kw">do</span>
<span id="cb6-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-5" tabindex="-1">    <span class="kw">let</span> (<span class="dt">R</span> c2 todo2) <span class="ot">=</span> r2
<span id="cb6-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-6" tabindex="-1">    declareInsert x c1 c2
<span id="cb6-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-7" tabindex="-1">    todo2
<span id="cb6-8"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-8" tabindex="-1">  <span class="fu">return</span> (<span class="dt">R</span> c1 todo)
<span id="cb6-9"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-9" tabindex="-1">getR (<span class="dt">R</span> c todo) <span class="ot">=</span> unsafePerformIO <span class="op">$</span>
<span id="cb6-10"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-10" tabindex="-1">  todo
<span id="cb6-11"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-11" tabindex="-1">  getCell c</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-11" tabindex="-1">
<p>Now we certainly won’t forget to run the second cell’s todo action, so that is good. But that cell’s todo action will run the first cell’s todo action, and that again the second cell’s, and so on.</p>
<h3 id="pure-lazy-terminating-but-not-thread-safe">Pure, lazy, terminating, but not thread safe</h3>
<p>This is silly: We only need (and should!) run that code once! So let’s keep track of whether we ran it already:</p>
</a><div class="sourceCode" id="cb7"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-11" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-11" tabindex="-1"><code class="sourceCode haskell"><span id="cb7-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-1" tabindex="-1"><span class="kw">data</span> <span class="dt">R</span> (<span class="dt">Set</span> a) <span class="ot">=</span> <span class="dt">R</span> (<span class="dt">Cell</span> a) (<span class="dt">IO</span> ()) (<span class="dt">IORef</span> <span class="dt">Bool</span>)
<span id="cb7-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-2" tabindex="-1">rInsert x r2 <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb7-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-3" tabindex="-1">  c1 <span class="ot">&lt;-</span> newCell
<span id="cb7-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-4" tabindex="-1">  done <span class="ot">&lt;-</span> newIORef <span class="dt">False</span>
<span id="cb7-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-5" tabindex="-1">  <span class="kw">let</span> todo <span class="ot">=</span> <span class="kw">do</span>
<span id="cb7-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-6" tabindex="-1">    is_done <span class="ot">&lt;-</span> readIORef done
<span id="cb7-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-7" tabindex="-1">    unless is_done <span class="op">$</span> <span class="kw">do</span>
<span id="cb7-8"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-8" tabindex="-1">      writeIORef done <span class="dt">True</span>
<span id="cb7-9"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-9" tabindex="-1">      <span class="kw">let</span> (<span class="dt">R</span> c2 todo2 _) <span class="ot">=</span> r2
<span id="cb7-10"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-10" tabindex="-1">      declareInsert x c1 c2
<span id="cb7-11"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-11" tabindex="-1">      todo2
<span id="cb7-12"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-12" tabindex="-1">  <span class="fu">return</span> (<span class="dt">R</span> c1 todo done)
<span id="cb7-13"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-13" tabindex="-1">getR (<span class="dt">R</span> c todo _) <span class="ot">=</span> unsafePerformIO <span class="op">$</span>
<span id="cb7-14"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-14" tabindex="-1">  todo
<span id="cb7-15"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-15" tabindex="-1">  getCell c</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-15" tabindex="-1">
<p>Ah, much better: It works! Our call to <code>getR c1</code> will trigger the first cell’s todo action, which will mark it as done <em>before</em> calling the second cell’s todo action. When that now invokes the first cell’s todo action, it is already marked done and we break the cycle, and by the time we reach <code>getCell</code>, all relations have been correctly registered.</p>
<p>In a single-threaded world, this would be all good and fine, but we have to worry about multiple threads running <code>getR</code> concurrently, on the same or on different cells.</p>
<p>In fact, because we use <code>unsafePerformIO</code>, we have to worry about this even when the program is not using threads.</p>
<p>And the above code has problems. Imagine a second call to <code>getR c1</code> while the first one has already marked it as done, but has not finished processing all the dependencies yet: It will call <code>getCell</code> before all relations are registered, which is bad.</p>
<h3 id="recursive-do-once-io-actions">Recursive do-once IO actions</h3>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-15" tabindex="-1">Making this thread-safe seems to be possible, but would clutter both the code and this blog post. So let’s hide that problem behind a nice and clean interface. Maybe there will be a separate blog post about its implementation (let me know if you are curious), or you can inspect the code in </a><a href="https://hackage.haskell.org/package/rec-def-0.1/docs/System-IO-RecThunk.html"><code>System.IO.RecThunk</code> module</a> yourself). The interface is simply</p>
<pre><code>data Thunk
thunk :: IO [Thunk] -&gt; IO Thunk
force :: Thunk -&gt; IO ()</code></pre>
<p>and the idea is that <code>thunk act</code> will defer the action <code>act</code> until the thunk is passed to <code>force</code> for the first time, and <code>force</code> will not return until the action has been performed (possibly waiting if another thread is doing that at the moment), and also until the actions of all the thunks returned by <code>act</code> have performed, recursively, without running into cycles.</p>
<p>We can use this in our definition of <code>R</code> and get to the final, working solution:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-1" tabindex="-1"><span class="kw">data</span> <span class="dt">R</span> (<span class="dt">Set</span> a) <span class="ot">=</span> <span class="dt">R</span> (<span class="dt">Cell</span> a) <span class="dt">Thunk</span></a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-1" tabindex="-1">
<span id="cb9-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-2" tabindex="-1">rInsert x r2 <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb9-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-3" tabindex="-1">  c1 <span class="ot">&lt;-</span> newCell
<span id="cb9-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-4" tabindex="-1">  t1 <span class="ot">&lt;-</span> thunk <span class="op">$</span> <span class="kw">do</span>
<span id="cb9-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-5" tabindex="-1">    <span class="kw">let</span> (<span class="dt">R</span> c2 t2) <span class="ot">=</span> r2
<span id="cb9-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-6" tabindex="-1">    declareInsert x c1 c2
<span id="cb9-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-7" tabindex="-1">    <span class="fu">return</span> [t2]
<span id="cb9-8"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-8" tabindex="-1">  <span class="fu">return</span> (<span class="dt">R</span> c1 t1)
<span id="cb9-9"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-9" tabindex="-1">getR (<span class="dt">R</span> c t) <span class="ot">=</span> unsafePerformIO <span class="op">$</span>
<span id="cb9-10"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-10" tabindex="-1">  force t
<span id="cb9-11"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-11" tabindex="-1">  getCell c</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-11" tabindex="-1">
<p>This snippet captures the essential ideas behind <code>rec-def</code>:</p>
<ul>
<li>Use laziness to allow recursive definition to describe the propagator graph naturally</li>
<li>Use a form of “explicit thunk” to register the propagator graph relations at the right time (not too early/strict, not too late)</li>
</ul>
<h3 id="and-thats-all">And that’s all?</h3>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-11" tabindex="-1">The actual implementation in <code>rec-def</code> in module </a><a href="https://hackage.haskell.org/package/rec-def-0.1/docs/Data-Recursive-R-Internal.html">Data.Recursive.R.Internal</a> has a few more moving parts.</p>
<p>In particular, it tries to support different value types (not just sets), possibly with different implementations, and even mixing them (e.g. in <a href="https://hackage.haskell.org/package/rec-def-0.1/docs/Data-Recursive-Set.html#v:rMember"><code>rMember :: Ord a =&gt; a -&gt; R (Set a) -&gt; R Bool</code></a>), so it uses <a href="https://hackage.haskell.org/package/rec-def-0.1/docs/Data-Recursive-Propagator-Class.html#t:HasPropagator">a type class</a> to select the concrete cell implementation for a value type.</p>
<p>I went back and forth on a few variants of the design here, including not even having a generic <code>R</code> type constructor, and instead offer <code>RSet</code>, <code>RBool</code>, <code>RDualBool</code> etc. So this interface may not be the final one.</p>
<h3 id="does-it-really-work">Does it really work?</h3>
<p>The big remaining question is certainly: Is this really safe and pure? Does it still behave like Haskell?</p>
<p>The answer to these questions certainly depends on the underlying propagator implementation. But it also depends on what we actually mean by “safe and pure”? For example, do we expect the Static Argument Transformation be semantics preserving? Or is it allowed to turn undefined values into defined ones (as it does here)?</p>
<p>I am unsure myself yet, so I’ll defer this discussion to a separate blog post, after I hopefully had good discussions about this here at ICFP 2022 in Ljubljana. If you are around and want to discuss, please hit me up!</p></div>
    </summary>
    <updated>2022-09-10T09:08:24Z</updated>
    <published>2022-09-10T09:08:24Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html"/>
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml"/>
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2022-09-15T10:00:55Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2022:/math/fibonacci-word</id>
    <link href="https://blog.plover.com/math/fibonacci-word.html" rel="alternate" type="text/html"/>
    <title>Pope Fibonacci</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>When Albino Luciani was crowned Pope, he chose his papal name by
concatenating the names of his two predecessors, John XXIII and
Paul VI, to become John Paul.  He died shortly after, and was
succeeded by 
Karol Wojtyła who also took the name John Paul.  Wojtyła missed a
great opportunity to adopt Luciani's strategy.  Had he concatenated
the names of his predecessors, he would have been Paul John Paul.  In
this alternatve universe his successor, Benedict XVI, would have been
John Paul Paul John Paul, and the current pope, Francis, would have
been Paul John Paul John Paul Paul John Paul.  Each pope would have
had a unique name, at the minor cost of having the names increase
exponentially in length.</p>

<p>(Now I wonder if any dynasty has ever adopted the less impractical
strategy of naming their rulers after binary numerals, say: </p>

<blockquote>
  <p>King Juan <br/>
    King Juan Cyril <br/>
    King Juan Juan <br/>
    King Juan Cyril Cyril <br/>
    King Juan Cyril Juan <br/>
    King Juan Juan Cyril <br/>
    (etc)</p>
</blockquote>

<p>Or perhaps <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%240%2c%201%2c%2000%2c%2001%2c%2010%2c%2011%2c%20000%2c%20%5cldots%24"/>.  There are many
variations, some actually reasonable.)</p>

<p>I sometimes fantasize that Philadelphia-area Interstate highways are
going to do this.  The main east-west highway around here is I-76.
(Not so-called, as many imagine, in honor of Philadelphia's role in
the American revolution of 1776, but simply because it lies south of
I-78 and north of I-74 and I-70.)   A connecting segment that branches off of
I-76 is known as I-676.  Driving to one or the other I often see <a href="https://goo.gl/maps/6MC7MBPHXLnSRUcx9">signs
that offer both</a>:</p>

<p><a href="https://goo.gl/maps/6MC7MBPHXLnSRUcx9"><img alt="Street view of Philadelphia.  In the center is a lamp post with two red and blue Interstate highway shields affixed, indicating that entrances to I-76 West and I-676 East are ahead." class="center" src="https://pic.blog.plover.com/math/fibonacci-word/76676.png"/></a></p>

<p>I often fantasize that this is a single sign for I-76676, and that
this implies an infinite sequence of highways designated I-67676676,
I-7667667676676, and so on.</p>

<p>Finally, I should mention the cleverly-named fibonacci salad, which
you make by combining the leftovers from yesterday's salad and the
previous day's.</p>

<p>[ Addendum: Do you know the name of the swagman in <em>Waltzing Matilda</em>?  It's Juan. The song says so: “Juan's a jolly swagman…” ]</p></div>
    </content>
    <updated>2022-09-08T14:41:00Z</updated>
    <published>2022-09-08T14:41:00Z</published>
    <category term="/math"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml"/>
      <link href="https://blog.plover.com" rel="alternate" type="text/html"/>
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2022-09-13T02:12:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:6313d7f942d54c4207b95cec</id>
    <link href="https://mmhaskell.com/blog/2022/9/8/dijkstra-with-monads" rel="alternate" type="text/html"/>
    <title>Dijkstra with Monads!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://www.mmhaskell.com/blog/2022/9/5/dijkstra-comparison-looking-at-the-library-function">Last time on the blog</a>, we considered this library version of Dijkstra's algorithm that you can find on <a href="https://hackage.haskell.org/package/search-algorithms-0.3.2/docs/Algorithm-Search.html">Hackage</a>.</p>
<pre><code class="lang-haskell">dijkstra ::
    (Foldable f, Num cost, Ord cost, Ord State)
  =&gt; (state -&gt; f state) -- Function to generate list of neighbors
  -&gt; (state -&gt; state -&gt; cost) -- Function for cost generation
  -&gt; (state -&gt; Bool) -- Destination predicate
  -&gt; state -- Initial state
  -&gt; Maybe (cost, [state]) -- Solution cost and path, Nothing if goal is unreachable</code></pre>
<p>However, there are a number of situations where this might be insufficient. In this article we'll consider some reasons why you would want to introduce <strong>monads</strong> into your solution for Dijkstra's algorithm. Let's explore some of these reasons!</p>
<p>Note! This is a "coding ideas" blog, rather than an "In Depth Tutorial" blog (see <a href="https://www.mmhaskell.com/blog/2022/8/15/whats-your-reading-style">this article</a> for a summary of different reading styles). Some of the code sampled are pretty well fleshed out, but some of them are more hypothetical ideas for you to try out on your own!</p>
<h2 id="the-monadic-version">The Monadic Version</h2>
<p>In addition to the "pure" version of Dijkstra's algorithm, the <a href="https://hackage.haskell.org/package/search-algorithms-0.3.2/docs/Algorithm-Search.html">Algorithm.Search</a> library also provides a "monadic" version. This version allows each of the input functions to act within a monad <code>m</code>, and of course gives its final result within this monad.</p>
<pre><code class="lang-haskell">dijkstraM ::
    (Monad m, Foldable f, Num cost, Ord cost, Ord State)
  =&gt; (state -&gt; m (f state))
  -&gt; (state -&gt; state -&gt;m cost)
  -&gt; (state -&gt; m Bool)
  -&gt; state
  -&gt; m (Maybe (cost, [state]))</code></pre>
<p>Now, if you've read our <a href="https://www.mmhaskell.com/monads">Monads Series</a>, you'll know that a monad is a <strong>computational context</strong>. What are the kinds of contexts we might find ourselves in while performing Dijkstra's algorithm? Here are a few ideas to start with.</p>
<ol>
<li>We're reading our graph from a global state (mutable or immutable)
2.Our graph functions require reading a file or making a network call</li>
<li>We would like to log the actions taken in our graph.</li>
</ol>
<p>Let's go through some pseudocode examples to see how each of these could be useful.</p>
<h2 id="using-a-global-state">Using a Global State</h2>
<p>A global mutable state is represented with (of course) the <code>State</code> monad. An immutable global state uses the <code>Reader</code> monad to represent this context. Now, taken in a simple way, the <code>Reader</code> context could allow us to "pass the graph" without actually including it as an argument:</p>
<pre><code class="lang-haskell">import qualified Data.Array as A
import Control.Monad.Reader
import Algorithm.Search (dijkstraM)

newtype Graph2D = Graph2D (A.Array (Int, Int) Int)

getNeighbors :: A.Array (Int, Int) Int -&gt; (Int, Int) -&gt; [(Int, Int)]

findShortestPath :: Graph2D -&gt; (Int, Int) -&gt; (Int, Int) -&gt; Maybe (Int, [(Int, Int)])
findShortestPath graph start end = runReader
  (dijkstraM neighbors cost (return . (== end)) start)
  graph
  where
    cost :: (Int, Int) -&gt; (Int, Int) -&gt; Reader Graph2D Int
    cost _ b = do
      (Graph2D gr) &lt;- ask
      return $ gr A.! b

    neighbors :: (Int, Int) -&gt; Reader Graph2D [(Int, Int)]
    neighbors source = do
      (Graph2D gr) &lt;- ask
      return $ getNeighbors gr source</code></pre>
<p>If we're already in this monad for whatever reason, then this could make sense. But on its own, it's not necessarily much of an improvement over partial function application.</p>
<p>A mutable state <em>could</em> be useful in certain circumstances as well. We likely wouldn't want to mutate the graph itself during iteration, as this would invalidate the algorithm. However, we could store certain metadata about what is happening during the search. For instance, we might want to track how often certain nodes are returned as a potential neighbor.</p>
<pre><code class="lang-haskell">import qualified Data.HashMap.Strict as HM
import Control.Monad.State
import Data.Maybe (fromMaybe)
import Data.Foldable (find)

newtype Graph = Graph
   { edges :: HM.HashMap String [(String, Int)] }

type Metadata = HM.HashMap String Int
incrementKey :: String -&gt; Metadata -&gt; Metadata
incrementKey k metadata = HM.insert k (count + 1) metadata
  where
    count = fromMaybe 0 (HM.lookup k metadata)

findShortestPath :: Graph -&gt; String -&gt; String -&gt; Maybe (Int, [String])
findShortestPath graph start end = evalState
  (dijkstraM neighbors cost (return . (== end)) start)
  HM.empty
  where
    cost :: String -&gt; String -&gt; State Metadata Int
    cost n1 n2 = 
      let assocs = fromMaybe [] (HM.lookup n1 (edges graph))
          costForN2 = find (\(n, _) -&gt; n == n2) assocs
      in  case costForN2 of
            Nothing -&gt; return maxBound
            Just (_, x) -&gt; return x
    neighbors :: String -&gt; State Metadata [String]
    neighbors node = do
      let neighbors = fst &lt;$&gt; fromMaybe [] (HM.lookup node (edges graph))
      metadata &lt;- get
      put $ foldr incrementKey metadata neighbors
      return neighbors</code></pre>
<p>In this implementation, we end up discarding our metadata, but if we wanted to we could include it as an additional output to help us understand what's happening in our search.</p>
<h2 id="reading-from-files">Reading from Files</h2>
<p>In many cases, our "graph" is actually too big to fit within memory. In various cases, the entire graph could be distributed across many files on our system. Consider this simplified example:</p>
<pre><code class="lang-haskell">data Location = Location
  { filename :: FilePath
  , tag :: String
  ...
  }</code></pre>
<p>Each file could track a certain "region" of your map, with references to certain locations "on the edge" whose primary data must be found in a different file. This means you'll need to have access to the file system to ensure you can find all the "neighbors" of a particular location: This means you'll need the IO monad in Haskell!</p>
<pre><code class="lang-haskell">getMapNeighbors :: Location -&gt; IO [Location]
-- Open original locations file
-- Find tag and include neighboring tags together with references to other files</code></pre>
<p>This matches the signature of the "neighbor generator" function in <code>dijkstraM</code>, so we'll be able to pass this function as the first argument.</p>
<h2 id="using-network-calls">Using Network Calls</h2>
<p>Here's a fun example. Consider <a href="https://en.wikipedia.org/wiki/Wikiracing">wiki-racing</a> - finding the shortest path between the Wikipedia pages of two topics using only the links in the bodies of those pages. You could (theoretically) write a program to do this for you. You might create a type like this:</p>
<pre><code class="lang-haskell">data WikiPage = WikiPage
  { pageTitle :: Text
  , url :: URL
  , bodyContentHtml :: Text
  }</code></pre>
<p>In order to find the "neighbors" of this page, you would first have to parse the body HTML and find all the wikipedia links within it. This could be done in a pure fashion. But in order to create the <code>WikiPage</code> objects for each of those links, you would then need to send an <code>HTML GET</code> request to get their body HTML. Such a network call would require the <code>IO</code> monad (or some other <code>MonadIO</code>), so you're function will necessarily look like:</p>
<pre><code class="lang-haskell">getWikiNeighbors :: WikiPage -&gt; IO [Wikipage]</code></pre>
<p>But if you successfully implement that function, it's very easy to apply <code>dijkstraM</code> because the "cost" of each hop is always 1!</p>
<pre><code class="lang-haskell">findShortestWikiPath :: Text -&gt; Text -&gt; IO (Maybe (Int, [WikiPage]))
findShortestWikiPath start end = do
  firstPage &lt;- findWikiPageFromTitle start
  dijkstraM getWikiNeighbors (\_ _ -&gt; return 1) (return . (== end)) firstPage

findWikiPageFromTitle :: Text -&gt; IO WikiPage
...</code></pre>
<p>Of course, <em>because the cost is always 1</em> this is actually a case where <strong>breadth first search</strong> would work more simply than Dijkstra's algorithm, so you could use the function <code>bfsM</code> <a href="https://hackage.haskell.org/package/search-algorithms-0.3.2/docs/Algorithm-Search.html#v:bfsM">from the same library</a>!</p>
<h2 id="logging">Logging</h2>
<p>Another common context for problem solving is the <strong>logging context</strong>. While we are solving our problem, we might want to record helpful statements telling us what is happening so that we can debug when things are going wrong. This happens using the <code>MonadLogger</code> typeclass, with a few interesting functions we can use, indicating different "levels" of logging.</p>
<pre><code class="lang-haskell">class MonadLogger m where
  ...

logDebugN

logInfoN

logWarnN

logErrorN</code></pre>
<p>Now, unlike the previous two examples, this doesn't <em>require</em> the IO monad. A couple of the most common implementations of this monad class will, in fact, use IO functionality (printing to the screen or logging to a file). But this isn't necessary. You can still do logging in a "pure" way by storing the log messages in a sequence or other structure so you can examine them at the end of your program.</p>
<p>When would we want this for Dijkstra's algorithm? Well, sometimes the process of determining neighbors and costs can be complicated! I'll motivate this by introducing a more complicated example of a Dijkstra's algorithm problem.</p>
<h2 id="a-complicated-example">A Complicated Example</h2>
<p>Here's an example from last year's <a href="https://adventofcode.com/2021/day/23">Advent of Code</a> challenge. You can read the full description on that page. This problem demonstrates a less intuitive use of Dijkstra's algorithm.</p>
<p>The problem input is a "map" of sorts, showing a diagram of 4 rooms leading into one shared hallway.</p>
<pre><code>#############
#...........#
###B#C#B#D###
  #A#D#C#A#
  #########</code></pre><p>Each of the four rooms is filled with "tokens", which come in 4 different varieties, <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>. (The Advent of Code description refers to them as "Amphipods", but that takes a while to write out, so I'm simplifying to "tokens").</p>
<p>We want to move the tokens around so that the <code>A</code> tokens end in the far left room, the <code>B</code> tokens in the room next to them, and so on.</p>
<pre><code>#############
#...........#
###A#B#C#D###
  #A#B#C#D#
  #########</code></pre><p>But there are rules on how these tokens move. You can only move each token twice. Once to get it into an empty space in the hallway, and once to get it from the hallway to its final room. And tokens can't move "past" each other within the hallway.</p>
<p>Now each token has a specific cost for each space it moves.</p>
<pre><code>A = 1 energy per move
B = 10 energy per move
C = 100 energy per move
D = 1000 energy per move</code></pre><p>So you want to move the token's into the final state with the lowest total cost.</p>
<h2 id="using-dijkstra-s-algorithm">Using Dijkstra's Algorithm</h2>
<p>It turns out the most efficient solution (especially at a larger scale) is to treat this like a graph problem and use Dijkstra's algorithm! Each "state" of the problem is like a node in our graph, and we can move to certain "neighboring" nodes by moving tokens at a certain cost.</p>
<p>But the implementation turns out to be quite tricky! To give you an idea of this, here are some of the data type names and functions I came up with. </p>
<pre><code class="lang-haskell">data Token = ...

data HallSpace = ...

data TokenGraphState = ...

tokenEdges :: TokenGraphState -&gt; [(TokenGraphState, Int)]

updateStateWithMoveFromRoom :: Token -&gt; HallSpace -&gt; Int -&gt; TokenGraphState -&gt; (TokenGraphState, Int)

updateStateWithMoveFromHall :: Token -&gt; HallSpace -&gt; Int -&gt; TokenGraphState -&gt; (TokenGraphState, Int)

validMovesToHall :: Token -&gt; TokenGraphState -&gt; [(HallSpace, Int)]

validMoveToRoom :: TokenGraphState -&gt; (HallSpace, TokenGraphState -&gt; Maybe Token) -&gt; Maybe (Int, Token, HallSpace)</code></pre>
<p>And these are just the functions with complex logic! There are even a few more simple helpers beyond this!</p>
<p>But when I ran this implementation, I didn't get the right answer! So how could I learn more about my solution and figure out what's going wrong? Unit testing and applying a formal debugger would be nice, but simply being able to print out what is going on in the problem is a quicker way to get started.</p>
<p>Haskell doesn't let you (safely) print from pure functions like I've written above, nor can you add values to a global logging state. So we can fix this by modifying the type signatures to instead use a <code>MonadLogger</code> constraint.</p>
<pre><code class="lang-haskell">tokenEdges :: (MonadLogger m) =&gt; TokenGraphState -&gt; m [(TokenGraphState, Int)]

updateStateWithMoveFromRoom :: (MonadLogger m) =&gt; Token -&gt; HallSpace -&gt; Int -&gt; TokenGraphState -&gt; (TokenGraphState, Int)

updateStateWithMoveFromHall :: (MonadLogger m) =&gt; Token -&gt; HallSpace -&gt; Int -&gt; TokenGraphState -&gt; m (TokenGraphState, Int)

validMovesToHall :: (MonadLogger m) =&gt; Token -&gt; TokenGraphState -&gt; m [(HallSpace, Int)]

validMoveToRoom :: (MonadLogger m) =&gt; TokenGraphState -&gt; (HallSpace, TokenGraphState -&gt; Maybe Token) -&gt; m (Maybe (Int, Token, HallSpace))</code></pre>
<p>Now it's simple enough to modify a function to give us some important information about what's happening. Hopefully this is enough to help us solve the problem.</p>
<p>We would like to limit the number of functions that "need" the monadic action. But in practice, it is frustrating to find you need a monad in a deeper function of your algorithm because you'll need to modify everything on its call stack. So it might be a good idea to add at least a basic monad constraint from the beginner!</p>
<h2 id="conclusion">Conclusion</h2>
<p>Next time, we'll start talking more generally about this idea of using monads to debug, especially <code>MonadLogger</code>. We'll consider the implementation pattern of "monads first" and different ways to approach this.</p>
<p>Make sure you're staying up to date with the latest news from Monday Morning Haskell by <a href="https://www.mmhaskell.com/subscribe">subscribing</a> to our mailing list! This will also give you access to our <a href="https://www.mmhaskell.com/resources">subscriber resources</a>!</p></div>
    </summary>
    <updated>2022-09-08T14:30:00Z</updated>
    <published>2022-09-08T14:30:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html"/>
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml"/>
      <title>Blog - Monday Morning Haskell</title>
      <updated>2022-09-10T05:01:07Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.well-typed.com/blog/2022/09/lockstep-with-quickcheck-dynamic</id>
    <link href="https://well-typed.com/blog/2022/09/lockstep-with-quickcheck-dynamic" rel="alternate" type="text/html"/>
    <title>Lockstep-style testing with quickcheck-dynamic</title>
    <summary>Recently IOG and QuviQ released a new library for testing stateful
systems called quickcheck-dynamic. In this blog post we will take a look
at this library, and how it relates to quickcheck-state-machine. We will
focus on the state machine testing aspect; quickcheck-dynamic also has
support for dynamic [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Recently <a href="https://iog.io/">IOG</a> and <a href="http://www.quviq.com/">QuviQ</a> released a new library for testing stateful systems called <a href="https://hackage.haskell.org/package/quickcheck-dynamic"><code>quickcheck-dynamic</code></a>. In this blog post we will take a look at this library, and how it relates to <a href="https://hackage.haskell.org/package/quickcheck-state-machine"><code>quickcheck-state-machine</code></a>. We will focus on the state machine testing aspect; <code>quickcheck-dynamic</code> also has support for dynamic logic, but we will not discuss that here.</p>
<p>Specifically, we will consider how we might do lockstep-style testing with <code>quickcheck-dynamic</code>. This is a particular approach to testing that we described in great detail in an earlier blog post, <a href="https://well-typed.com/blog/2019/01/qsm-in-depth/">An in-depth look at quickcheck-state-machine</a>. We will recap the general philosophy in this new blog post, but we will focus here on the <em>hows</em>, not necessarily the <em>whys</em>; it might be helpful to be familiar with the previous blog post to understand the larger context of what we’re trying to achieve.</p>
<p>We have developed a library called <a href="https://github.com/well-typed/quickcheck-lockstep"><code>quickcheck-lockstep</code></a> which builds on top of <code>quickcheck-dynamic</code> to provide an abstraction called <code>InLockstep</code> which provides support for lockstep-style testing. In this blog post we will describe this library in two parts:</p>
<ol type="1">
<li>In the first half we will show a test author’s perspective of how to <em>use</em> the abstraction.</li>
<li>In the second half we show how we can <em>implement</em> the abstraction on top of <code>quickcheck-dynamic</code>.</li>
</ol>
<p>Part one will suffice for users who simply want to use <code>quickcheck-lockstep</code>. Part two serves two purposes:</p>
<ul>
<li>It will give an illustrated example of how to use <code>quickcheck-dynamic</code> for state based testing. We will use most of the core features of the library to implement our abstraction on top of it.</li>
<li>Since the goal is to provide the end user with a very similar style of testing that we previously provided for <code>quickcheck-state-machine</code> (see specifically <a href="https://hackage.haskell.org/package/quickcheck-state-machine/docs/Test-StateMachine-Lockstep-NAry.html">Test.StateMachine.Lockstep.NAry</a>), the implementation will serve as a good test testbed for comparing the two libraries.</li>
</ul>

<p>NOTE: <code>quickcheck-lockstep</code> currently depends on an as-yet unreleased version of <code>quickcheck-dynamic</code>. Once this is released, we will also make a Hackage release of <code>quickcheck-lockstep</code>; at the moment, please refer to the <a href="https://github.com/well-typed/quickcheck-lockstep">GitHub repository</a> instead. The example that we discuss in part 1 is also available in that repository, as an example use case.</p>
<h2 id="part-1-lockstep-style-testing">Part 1: Lockstep-style testing</h2>
<p>In this section we will show how we can do lockstep-style testing using a new abstraction called <code>InLockstep</code>. In Part 2 we will see how we can <em>implement</em> this new abstraction.</p>
<h3 id="testing-philosophy">Testing philosophy</h3>
<p>Lockstep-style testing of stateful systems is quite simple:</p>
<ul>
<li>We have a stateful API that we want to test; this could be a database, a file system, etc.</li>
<li>We will <em>reify</em> that stateful API as a datatype with constructors for each of the API calls.</li>
<li>We then write two interpreters for this API: one against the system we want to test, and one against a <em>model</em>.</li>
<li>We regard the system as a <em>block box</em>: we cannot see the internal state of the database, the contents of the file system, etc. The <em>only</em> thing we can see is the results of the API calls.</li>
<li>Here is why we call this <em>lockstep</em> testing: to test the system, we generate an arbitrary sequence of commands, then execute those against the system under test and against the model. The only thing we check at each point is that both systems return the same results, modulo observability.</li>
<li>We cannot insist on <em>exactly</em> the same results: for example, opening a file might result in a file handle, which the model cannot reproduce. The model must be allowed to have its own type for “model handles” that is different from real handles, and we do not want to try and compare those to real handles. If the system somehow returns the “wrong” handle, then this will become evident later in the test when we <em>use</em> that handle.</li>
</ul>
<h3 id="running-example">Running example</h3>
<p>Our running example will be a file system: it will be precisely <a href="https://well-typed.com/blog/2019/01/qsm-in-depth/">the same example we used previously when discussing <code>quickcheck-state-machine</code></a>: same API, same model, same properties we want to test, same considerations regarding labelling tests and shrinking them—but a different testing framework. If you want to follow along, the <a href="https://github.com/well-typed/qsm-in-depth/blob/master/src/UsingQD.hs">code is available on GitHub</a>.</p>
<p>The model is a simple model for a file system. It consists of the following functions:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://well-typed.com/blog/rss2.xml#cb1-1" tabindex="-1"/><span class="ot">mMkDir ::</span> <span class="dt">Dir</span>               <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> ()      , <span class="dt">Mock</span>)</span>
<span id="cb1-2"><a href="https://well-typed.com/blog/rss2.xml#cb1-2" tabindex="-1"/><span class="ot">mOpen  ::</span> <span class="dt">File</span>              <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> <span class="dt">MHandle</span> , <span class="dt">Mock</span>)</span>
<span id="cb1-3"><a href="https://well-typed.com/blog/rss2.xml#cb1-3" tabindex="-1"/><span class="ot">mWrite ::</span> <span class="dt">MHandle</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> ()      , <span class="dt">Mock</span>)</span>
<span id="cb1-4"><a href="https://well-typed.com/blog/rss2.xml#cb1-4" tabindex="-1"/><span class="ot">mClose ::</span> <span class="dt">MHandle</span>           <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> ()      , <span class="dt">Mock</span>)</span>
<span id="cb1-5"><a href="https://well-typed.com/blog/rss2.xml#cb1-5" tabindex="-1"/><span class="ot">mRead  ::</span> <span class="dt">File</span>              <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> <span class="dt">String</span>  , <span class="dt">Mock</span>)</span></code></pre></div>
<h3 id="statemodel-implementation"><code>StateModel</code> implementation</h3>
<p><code>StateModel</code> is the central class in <code>quickcheck-dynamic</code> for stateful testing. Instances of <code>StateModel</code> define the datatype that describes the API, how to generate values of that datatype, how to interpret it, etc. When using the <code>InLockstep</code> infrastructure however, we only define the API datatype; everything else is delegated to <code>InLockstep</code>.</p>
<p>We will define the type of our model as</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://well-typed.com/blog/rss2.xml#cb2-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">FsState</span> <span class="ot">=</span> <span class="dt">FsState</span> <span class="dt">Mock</span> <span class="dt">Stats</span></span>
<span id="cb2-2"><a href="https://well-typed.com/blog/rss2.xml#cb2-2" tabindex="-1"/></span>
<span id="cb2-3"><a href="https://well-typed.com/blog/rss2.xml#cb2-3" tabindex="-1"/><span class="ot">initState ::</span> <span class="dt">FsState</span></span>
<span id="cb2-4"><a href="https://well-typed.com/blog/rss2.xml#cb2-4" tabindex="-1"/>initState <span class="ot">=</span> <span class="dt">FsState</span> Mock.emptyMock initStats</span></code></pre></div>
<p>Here, <code>Mock</code> is the mock file system implementation, and <code>Stats</code> keeps some statistics about the running test. We will see why we need this statistics when we discuss labelling.</p>
<p>Let’s now define two type synonyms. First, one of the type of actions:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="https://well-typed.com/blog/rss2.xml#cb3-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">FsAct</span> a <span class="ot">=</span> <span class="dt">Action</span> (<span class="dt">Lockstep</span> <span class="dt">FsState</span>) (<span class="dt">Either</span> <span class="dt">Err</span> a)</span></code></pre></div>
<p>Here, <code>Action</code> is the associated data type from <code>StateModel</code>, and <code>Lockstep</code> is an opaque datatype from the lockstep infrastructure. All our actions can return errors, and we want to make sure that the model and the real system agree on what those errors are. So, the result of an <code>FsAct</code> is always of the form <code>Either Err a</code>, where <code>Err</code> is also defined in the model.</p>
<p>Secondly, the type of <em>variables</em>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://well-typed.com/blog/rss2.xml#cb4-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">FsVar</span> a <span class="ot">=</span> <span class="dt">ModelVar</span> <span class="dt">FsState</span> a</span></code></pre></div>
<p>Variables are an essential part of stateful testing: a variable allows us to refer back to the result of a previously executed command. For example, if we want to write to a file, we need to generate an action that says “write this string to the handle that you got when you opened that file a while ago.” <code>ModelVar</code> are a special kind of variables provided by the lockstep infrastructure; we will discuss them in more detail later.</p>
<p>We can now give the <code>StateModel</code> instance:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://well-typed.com/blog/rss2.xml#cb5-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">FsVar</span> a <span class="ot">=</span> <span class="dt">ModelVar</span> <span class="dt">FsState</span> a</span>
<span id="cb5-2"><a href="https://well-typed.com/blog/rss2.xml#cb5-2" tabindex="-1"/><span class="kw">type</span> <span class="dt">FsAct</span> a <span class="ot">=</span> <span class="dt">Action</span> (<span class="dt">Lockstep</span> <span class="dt">FsState</span>) (<span class="dt">Either</span> <span class="dt">Err</span> a)</span>
<span id="cb5-3"><a href="https://well-typed.com/blog/rss2.xml#cb5-3" tabindex="-1"/></span>
<span id="cb5-4"><a href="https://well-typed.com/blog/rss2.xml#cb5-4" tabindex="-1"/><span class="kw">instance</span> <span class="dt">StateModel</span> (<span class="dt">Lockstep</span> <span class="dt">FsState</span>) <span class="kw">where</span></span>
<span id="cb5-5"><a href="https://well-typed.com/blog/rss2.xml#cb5-5" tabindex="-1"/>  <span class="kw">data</span> <span class="dt">Action</span> (<span class="dt">Lockstep</span> <span class="dt">FsState</span>) a <span class="kw">where</span></span>
<span id="cb5-6"><a href="https://well-typed.com/blog/rss2.xml#cb5-6" tabindex="-1"/>    <span class="dt">MkDir</span><span class="ot"> ::</span> <span class="dt">Dir</span>                        <span class="ot">-&gt;</span> <span class="dt">FsAct</span> ()</span>
<span id="cb5-7"><a href="https://well-typed.com/blog/rss2.xml#cb5-7" tabindex="-1"/>    <span class="dt">Open</span><span class="ot">  ::</span> <span class="dt">File</span>                       <span class="ot">-&gt;</span> <span class="dt">FsAct</span> (<span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>, <span class="dt">File</span>)</span>
<span id="cb5-8"><a href="https://well-typed.com/blog/rss2.xml#cb5-8" tabindex="-1"/>    <span class="dt">Write</span><span class="ot"> ::</span> <span class="dt">FsVar</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>  <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FsAct</span> ()</span>
<span id="cb5-9"><a href="https://well-typed.com/blog/rss2.xml#cb5-9" tabindex="-1"/>    <span class="dt">Close</span><span class="ot"> ::</span> <span class="dt">FsVar</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>            <span class="ot">-&gt;</span> <span class="dt">FsAct</span> ()</span>
<span id="cb5-10"><a href="https://well-typed.com/blog/rss2.xml#cb5-10" tabindex="-1"/>    <span class="dt">Read</span><span class="ot">  ::</span> <span class="dt">Either</span> (<span class="dt">FsVar</span> <span class="dt">File</span>) <span class="dt">File</span>   <span class="ot">-&gt;</span> <span class="dt">FsAct</span> <span class="dt">String</span></span>
<span id="cb5-11"><a href="https://well-typed.com/blog/rss2.xml#cb5-11" tabindex="-1"/></span>
<span id="cb5-12"><a href="https://well-typed.com/blog/rss2.xml#cb5-12" tabindex="-1"/>  initialState    <span class="ot">=</span> Lockstep.initialState initState</span>
<span id="cb5-13"><a href="https://well-typed.com/blog/rss2.xml#cb5-13" tabindex="-1"/>  nextState       <span class="ot">=</span> Lockstep.nextState</span>
<span id="cb5-14"><a href="https://well-typed.com/blog/rss2.xml#cb5-14" tabindex="-1"/>  precondition    <span class="ot">=</span> Lockstep.precondition</span>
<span id="cb5-15"><a href="https://well-typed.com/blog/rss2.xml#cb5-15" tabindex="-1"/>  arbitraryAction <span class="ot">=</span> Lockstep.arbitraryAction</span>
<span id="cb5-16"><a href="https://well-typed.com/blog/rss2.xml#cb5-16" tabindex="-1"/>  shrinkAction    <span class="ot">=</span> Lockstep.shrinkAction</span></code></pre></div>
<p>Some comments:</p>
<ul>
<li><code>Write</code> and <code>Close</code> both take a <em>variable</em> to a handle, rather than an actual handle. This is what enables us to refer the handles that we got from previous commands.</li>
<li>In both cases, the type of that variable is <code>FsVar IO.Handle</code>, but the model implementation requires mock handles instead; we will see how that is resolved in the next section when we discuss relating results from the real system to model results.</li>
<li><code>Open</code> returns the file path of the file it just opened along with the handle, and <code>Read</code> takes either a concrete file path as an argument or a variable <em>to</em> such a file path (e.g., one that might have been returned by <code>Open</code>). This allows us to express “read from the same file that you opened previously in the test”; see the section on <a href="https://well-typed.com/blog/2019/01/qsm-in-depth/#dependencies-between-commands">Dependencies between commands</a> from the previous post why this can lead to better (more minimal) counter examples.</li>
<li>The lockstep infrastructure provides default implementation for the methods of <code>StateModel</code>. In many cases you can just them as-is, like we did here, but of course you don’t <em>have</em> to. For example, the default precondition isn’t always strong enough.</li>
</ul>
<h3 id="from-real-results-to-model-results">From real results to model results</h3>
<p>When we open a file in the real file system, we get an <code>IO.Handle</code>, or possibly an exception. In the model however we have</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://well-typed.com/blog/rss2.xml#cb6-1" tabindex="-1"/><span class="ot">mOpen ::</span> <span class="dt">File</span> <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> <span class="dt">MHandle</span>, <span class="dt">Mock</span>)</span></code></pre></div>
<p>We can map the exception to an <code>Err</code>, so that’s not a problem, but we cannot map an <code>IO.Handle</code> to an <code>MHandle</code> or vice versa: we want to allow the model to return something of a different type here.</p>
<p>The <code>Action</code> datatype from <code>quickcheck-dynamic</code> is a GADT, where the type index describes the <em>result</em> of the action. For example, consider this method from the <code>StateModel</code> class:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://well-typed.com/blog/rss2.xml#cb7-1" tabindex="-1"/><span class="ot">postcondition ::</span> (state, state) <span class="ot">-&gt;</span> <span class="dt">Action</span> state a <span class="ot">-&gt;</span> <span class="dt">LookUp</span> m <span class="ot">-&gt;</span> <span class="dt">Realized</span> m a <span class="ot">-&gt;</span> m <span class="dt">Bool</span></span></code></pre></div>
<p>This method is the check that <code>quickcheck-dynamic</code> does every after action. It has the following parameters:</p>
<ol type="1">
<li>The before and after state of the model</li>
<li>The action that was executed</li>
<li>A way to look up the values of any variables in those actions</li>
<li>The result of the action in the system under test</li>
</ol>
<p>The type of the result is <code>Realized m a</code>; this is an abstraction introduced in <code>quickcheck-dynamic</code> 2.0 which allows to run the same tests with different test execution backends; for example, we might run our tests in the real IO monad, or in an <a href="https://github.com/input-output-hk/io-sim">IO monad simulator</a>. This is orthogonal to the abstractions provided by <code>InLockstep</code>: no matter the test execution backend, we will always run against the same model. For our purposes (and this will be true for most lockstep-style tests<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn1" id="fnref1"><sup>1</sup></a>), we will exclusively run our tests in <code>ReaderT r IO</code>, where <code>quickcheck-dynamic</code> already defines for us that</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="https://well-typed.com/blog/rss2.xml#cb8-1" tabindex="-1"/><span class="dt">Realized</span> (<span class="dt">ReaderT</span> r <span class="dt">IO</span>) a <span class="ot">=</span> a</span></code></pre></div>
<p>So for the purposes of this blogpost, whenever you see <code>Realized m a</code>, you can translate that to simply <code>a</code> in your head.</p>
<p>In lockstep-style testing, we want to compare that result of type <code>a</code> to the response from the model but, as we saw, the model might return something of a slightly different type. The <code>InLockstep</code> class therefore introduces an associated data type called <code>ModelValue</code>; the idea is that whenever the system under test returns something of type <code>a</code> (technically, <code>Realized m a</code>), we expect the model to return a result of type <code>ModelValue a</code>.</p>
<p>As before, we will define a type synonym:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://well-typed.com/blog/rss2.xml#cb9-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">FsVal</span> a <span class="ot">=</span> <span class="dt">ModelValue</span> <span class="dt">FsState</span> a</span></code></pre></div>
<p>Here’s the definition for <code>FsState</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="https://well-typed.com/blog/rss2.xml#cb10-1" tabindex="-1"/><span class="kw">instance</span> <span class="dt">InLockstep</span> <span class="dt">FsState</span> <span class="kw">where</span></span>
<span id="cb10-2"><a href="https://well-typed.com/blog/rss2.xml#cb10-2" tabindex="-1"/>  <span class="kw">data</span> <span class="dt">ModelValue</span> <span class="dt">FsState</span> a <span class="kw">where</span></span>
<span id="cb10-3"><a href="https://well-typed.com/blog/rss2.xml#cb10-3" tabindex="-1"/>    <span class="dt">MHandle</span><span class="ot"> ::</span> <span class="dt">Mock.MHandle</span> <span class="ot">-&gt;</span> <span class="dt">FsVal</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span></span>
<span id="cb10-4"><a href="https://well-typed.com/blog/rss2.xml#cb10-4" tabindex="-1"/></span>
<span id="cb10-5"><a href="https://well-typed.com/blog/rss2.xml#cb10-5" tabindex="-1"/>    <span class="co">-- Rest is regular:</span></span>
<span id="cb10-6"><a href="https://well-typed.com/blog/rss2.xml#cb10-6" tabindex="-1"/></span>
<span id="cb10-7"><a href="https://well-typed.com/blog/rss2.xml#cb10-7" tabindex="-1"/>    <span class="dt">MErr</span><span class="ot">    ::</span> <span class="dt">Err</span>    <span class="ot">-&gt;</span> <span class="dt">FsVal</span> <span class="dt">Err</span></span>
<span id="cb10-8"><a href="https://well-typed.com/blog/rss2.xml#cb10-8" tabindex="-1"/>    <span class="dt">MFile</span><span class="ot">   ::</span> <span class="dt">File</span>   <span class="ot">-&gt;</span> <span class="dt">FsVal</span> <span class="dt">File</span></span>
<span id="cb10-9"><a href="https://well-typed.com/blog/rss2.xml#cb10-9" tabindex="-1"/>    <span class="dt">MString</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FsVal</span> <span class="dt">String</span></span>
<span id="cb10-10"><a href="https://well-typed.com/blog/rss2.xml#cb10-10" tabindex="-1"/>    <span class="dt">MUnit</span><span class="ot">   ::</span> ()     <span class="ot">-&gt;</span> <span class="dt">FsVal</span> ()</span>
<span id="cb10-11"><a href="https://well-typed.com/blog/rss2.xml#cb10-11" tabindex="-1"/></span>
<span id="cb10-12"><a href="https://well-typed.com/blog/rss2.xml#cb10-12" tabindex="-1"/>    <span class="dt">MEither</span><span class="ot"> ::</span> <span class="dt">Either</span> (<span class="dt">FsVal</span> a) (<span class="dt">FsVal</span> b) <span class="ot">-&gt;</span> <span class="dt">FsVal</span> (<span class="dt">Either</span> a b)</span>
<span id="cb10-13"><a href="https://well-typed.com/blog/rss2.xml#cb10-13" tabindex="-1"/>    <span class="dt">MPair</span><span class="ot">   ::</span> (<span class="dt">FsVal</span> a, <span class="dt">FsVal</span> b)         <span class="ot">-&gt;</span> <span class="dt">FsVal</span> (a, b)</span>
<span id="cb10-14"><a href="https://well-typed.com/blog/rss2.xml#cb10-14" tabindex="-1"/></span>
<span id="cb10-15"><a href="https://well-typed.com/blog/rss2.xml#cb10-15" tabindex="-1"/>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>We see that an <code>FsVal a</code> is just a wrapper around an <code>a</code>, <em>unless</em> that <code>a</code> is an <code>IO.Handle</code> in which case <code>FsVal IO.Handle</code> instead wraps a <code>Mock.MHandle</code>.</p>
<p>Recall that we defined</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="https://well-typed.com/blog/rss2.xml#cb11-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">FsVar</span> a <span class="ot">=</span> <span class="dt">ModelVar</span> <span class="dt">FsState</span> a</span></code></pre></div>
<p>We can now be more precise: a <code>ModelVar s a</code> is a variable to a <code>ModelValue s a</code>.</p>
<h3 id="comparing-values">Comparing values</h3>
<p><code>ModelValue</code> allows the model to return something of a different type than the implementation, but when we <em>compare</em> the two, we need something of the <em>same</em> type.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn2" id="fnref2"><sup>2</sup></a> <code>InLockstep</code> therefore defines a second associated type <code>Observable</code>, which is the <em>observable</em> result. The definition is similar but a bit simpler:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="https://well-typed.com/blog/rss2.xml#cb12-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">FsObs</span> a <span class="ot">=</span> <span class="dt">Observable</span> <span class="dt">FsState</span> a</span>
<span id="cb12-2"><a href="https://well-typed.com/blog/rss2.xml#cb12-2" tabindex="-1"/></span>
<span id="cb12-3"><a href="https://well-typed.com/blog/rss2.xml#cb12-3" tabindex="-1"/><span class="kw">instance</span> <span class="dt">InLockstep</span> <span class="dt">FsState</span> <span class="kw">where</span></span>
<span id="cb12-4"><a href="https://well-typed.com/blog/rss2.xml#cb12-4" tabindex="-1"/>  <span class="kw">data</span> <span class="dt">Observable</span> <span class="dt">FsState</span> a <span class="kw">where</span></span>
<span id="cb12-5"><a href="https://well-typed.com/blog/rss2.xml#cb12-5" tabindex="-1"/>    <span class="dt">OHandle</span><span class="ot"> ::</span> <span class="dt">FsObs</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span></span>
<span id="cb12-6"><a href="https://well-typed.com/blog/rss2.xml#cb12-6" tabindex="-1"/>    <span class="dt">OId</span><span class="ot">     ::</span> (<span class="op">..</span>) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">FsObs</span> a</span>
<span id="cb12-7"><a href="https://well-typed.com/blog/rss2.xml#cb12-7" tabindex="-1"/>    <span class="dt">OEither</span><span class="ot"> ::</span> <span class="dt">Either</span> (<span class="dt">FsObs</span> a) (<span class="dt">FsObs</span> b) <span class="ot">-&gt;</span> <span class="dt">FsObs</span> (<span class="dt">Either</span> a b)</span>
<span id="cb12-8"><a href="https://well-typed.com/blog/rss2.xml#cb12-8" tabindex="-1"/>    <span class="dt">OPair</span><span class="ot">   ::</span> (<span class="dt">FsObs</span> a, <span class="dt">FsObs</span> b) <span class="ot">-&gt;</span> <span class="dt">FsObs</span> (a, b)</span>
<span id="cb12-9"><a href="https://well-typed.com/blog/rss2.xml#cb12-9" tabindex="-1"/></span>
<span id="cb12-10"><a href="https://well-typed.com/blog/rss2.xml#cb12-10" tabindex="-1"/>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>This follows a similar structure as <code>ModelValue</code>, with two differences:</p>
<ul>
<li>In the case of a handle, we don’t observe <em>anything</em>. If the system (or the model) returns the wrong handle, we cannot notice this when the open a file; we will only notice it later when we try to read <em>from</em> that file.</li>
<li>In the case of <code>ModelValue</code>, we need a guarantee that if we have a value of <code>FsVal IO.Handle</code>, that this is really an <code>Mock.MHandle</code>. We do not need that guarantee for <code>Observable</code>, and so it suffices to define a single constructor <code>OId</code> that can be used for <em>any</em> type at all where the model and the system have a result of the same type.</li>
</ul>
<p>We also have to explain how to translate from mock results to observable results:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://well-typed.com/blog/rss2.xml#cb13-1" tabindex="-1"/><span class="kw">instance</span> <span class="dt">InLockstep</span> <span class="dt">FsState</span> <span class="kw">where</span></span>
<span id="cb13-2"><a href="https://well-typed.com/blog/rss2.xml#cb13-2" tabindex="-1"/><span class="ot">  observeModel ::</span> <span class="dt">FsVal</span> a <span class="ot">-&gt;</span> <span class="dt">FsObs</span> a</span>
<span id="cb13-3"><a href="https://well-typed.com/blog/rss2.xml#cb13-3" tabindex="-1"/>  observeModel <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb13-4"><a href="https://well-typed.com/blog/rss2.xml#cb13-4" tabindex="-1"/>      <span class="dt">MHandle</span> _ <span class="ot">-&gt;</span> <span class="dt">OHandle</span></span>
<span id="cb13-5"><a href="https://well-typed.com/blog/rss2.xml#cb13-5" tabindex="-1"/>      <span class="dt">MErr</span>    x <span class="ot">-&gt;</span> <span class="dt">OId</span> x</span>
<span id="cb13-6"><a href="https://well-typed.com/blog/rss2.xml#cb13-6" tabindex="-1"/>      <span class="dt">MString</span> x <span class="ot">-&gt;</span> <span class="dt">OId</span> x</span>
<span id="cb13-7"><a href="https://well-typed.com/blog/rss2.xml#cb13-7" tabindex="-1"/>      <span class="dt">MUnit</span>   x <span class="ot">-&gt;</span> <span class="dt">OId</span> x</span>
<span id="cb13-8"><a href="https://well-typed.com/blog/rss2.xml#cb13-8" tabindex="-1"/>      <span class="dt">MFile</span>   x <span class="ot">-&gt;</span> <span class="dt">OId</span> x</span>
<span id="cb13-9"><a href="https://well-typed.com/blog/rss2.xml#cb13-9" tabindex="-1"/>      <span class="dt">MEither</span> x <span class="ot">-&gt;</span> <span class="dt">OEither</span> <span class="op">$</span> bimap observeModel observeModel x</span>
<span id="cb13-10"><a href="https://well-typed.com/blog/rss2.xml#cb13-10" tabindex="-1"/>      <span class="dt">MPair</span>   x <span class="ot">-&gt;</span> <span class="dt">OPair</span>   <span class="op">$</span> bimap observeModel observeModel x</span>
<span id="cb13-11"><a href="https://well-typed.com/blog/rss2.xml#cb13-11" tabindex="-1"/></span>
<span id="cb13-12"><a href="https://well-typed.com/blog/rss2.xml#cb13-12" tabindex="-1"/>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>We have to do the same for results from the system under test, but we will see that when we discuss actually running the tests. This is a bit of boilerplate, but not difficult to write.</p>
<h3 id="interpreter-for-the-model">Interpreter for the model</h3>
<p>We can now write the interpreter for the model: a function that takes a valid from our reified API, calls the corresponding functions from the model, and then wraps the result in the appropriate constructors of <code>ModelValue</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="https://well-typed.com/blog/rss2.xml#cb14-1" tabindex="-1"/><span class="ot">runMock ::</span></span>
<span id="cb14-2"><a href="https://well-typed.com/blog/rss2.xml#cb14-2" tabindex="-1"/>     <span class="dt">ModelLookUp</span> <span class="dt">FsState</span></span>
<span id="cb14-3"><a href="https://well-typed.com/blog/rss2.xml#cb14-3" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">Action</span> (<span class="dt">Lockstep</span> <span class="dt">FsState</span>) a</span>
<span id="cb14-4"><a href="https://well-typed.com/blog/rss2.xml#cb14-4" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">FsVal</span> a, <span class="dt">Mock</span>)</span>
<span id="cb14-5"><a href="https://well-typed.com/blog/rss2.xml#cb14-5" tabindex="-1"/>runMock lookUp <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb14-6"><a href="https://well-typed.com/blog/rss2.xml#cb14-6" tabindex="-1"/>    <span class="dt">MkDir</span> d   <span class="ot">-&gt;</span> wrap <span class="dt">MUnit</span>     <span class="op">.</span> Mock.mMkDir d</span>
<span id="cb14-7"><a href="https://well-typed.com/blog/rss2.xml#cb14-7" tabindex="-1"/>    <span class="dt">Open</span> f    <span class="ot">-&gt;</span> wrap (mOpen f) <span class="op">.</span> Mock.mOpen f</span>
<span id="cb14-8"><a href="https://well-typed.com/blog/rss2.xml#cb14-8" tabindex="-1"/>    <span class="dt">Write</span> h s <span class="ot">-&gt;</span> wrap <span class="dt">MUnit</span>     <span class="op">.</span> Mock.mWrite (getHandle <span class="op">$</span> lookUp h) s</span>
<span id="cb14-9"><a href="https://well-typed.com/blog/rss2.xml#cb14-9" tabindex="-1"/>    <span class="dt">Close</span> h   <span class="ot">-&gt;</span> wrap <span class="dt">MUnit</span>     <span class="op">.</span> Mock.mClose (getHandle <span class="op">$</span> lookUp h)</span>
<span id="cb14-10"><a href="https://well-typed.com/blog/rss2.xml#cb14-10" tabindex="-1"/>    <span class="dt">Read</span> f    <span class="ot">-&gt;</span> wrap <span class="dt">MString</span>   <span class="op">.</span> Mock.mRead (<span class="fu">either</span> (getFile <span class="op">.</span> lookUp) <span class="fu">id</span> f)</span>
<span id="cb14-11"><a href="https://well-typed.com/blog/rss2.xml#cb14-11" tabindex="-1"/>  <span class="kw">where</span></span>
<span id="cb14-12"><a href="https://well-typed.com/blog/rss2.xml#cb14-12" tabindex="-1"/><span class="ot">    wrap ::</span> (a <span class="ot">-&gt;</span> <span class="dt">FsVal</span> b) <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> a, <span class="dt">Mock</span>) <span class="ot">-&gt;</span> (<span class="dt">FsVal</span> (<span class="dt">Either</span> <span class="dt">Err</span> b), <span class="dt">Mock</span>)</span>
<span id="cb14-13"><a href="https://well-typed.com/blog/rss2.xml#cb14-13" tabindex="-1"/>    wrap f <span class="ot">=</span> first (<span class="dt">MEither</span> <span class="op">.</span> bimap <span class="dt">MErr</span> f)</span>
<span id="cb14-14"><a href="https://well-typed.com/blog/rss2.xml#cb14-14" tabindex="-1"/></span>
<span id="cb14-15"><a href="https://well-typed.com/blog/rss2.xml#cb14-15" tabindex="-1"/><span class="ot">    mOpen ::</span> <span class="dt">File</span> <span class="ot">-&gt;</span> <span class="dt">Mock.MHandle</span> <span class="ot">-&gt;</span> <span class="dt">FsVal</span> (<span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>, <span class="dt">File</span>)</span>
<span id="cb14-16"><a href="https://well-typed.com/blog/rss2.xml#cb14-16" tabindex="-1"/>    mOpen f h <span class="ot">=</span> <span class="dt">MPair</span> (<span class="dt">MHandle</span> h, <span class="dt">MFile</span> f)</span>
<span id="cb14-17"><a href="https://well-typed.com/blog/rss2.xml#cb14-17" tabindex="-1"/></span>
<span id="cb14-18"><a href="https://well-typed.com/blog/rss2.xml#cb14-18" tabindex="-1"/><span class="ot">    getHandle ::</span> <span class="dt">ModelValue</span> <span class="dt">FsState</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span> <span class="ot">-&gt;</span> <span class="dt">Mock.MHandle</span></span>
<span id="cb14-19"><a href="https://well-typed.com/blog/rss2.xml#cb14-19" tabindex="-1"/><span class="ot">    getFile   ::</span> <span class="dt">ModelValue</span> <span class="dt">FsState</span> <span class="dt">File</span>      <span class="ot">-&gt;</span> <span class="dt">File</span></span>
<span id="cb14-20"><a href="https://well-typed.com/blog/rss2.xml#cb14-20" tabindex="-1"/></span>
<span id="cb14-21"><a href="https://well-typed.com/blog/rss2.xml#cb14-21" tabindex="-1"/>    getHandle (<span class="dt">MHandle</span> h) <span class="ot">=</span> h</span>
<span id="cb14-22"><a href="https://well-typed.com/blog/rss2.xml#cb14-22" tabindex="-1"/>    getFile   (<span class="dt">MFile</span>   f) <span class="ot">=</span> f</span></code></pre></div>
<p>The only slightly non-trivial thing here is that when we encounter a command with variables, we need to <em>resolve</em> those variables. <code>InLockstep</code> gives us a function of type <code>ModelLookUp FsState</code>, which allows us to resolve any variable we see (the default <code>InLockstep</code> precondition guarantees that this resolution must always succeed). The result of looking up a variable of type <code>a</code> will be a value of type <code>FsVal a</code>; we then need to match on that to extract the wrapped value. In <code>getHandle</code> we see why it’s so important that a <code>FsVal IO.Handle</code> <em>must</em> contain a mock handle, rather than an <code>IO.Handle</code>.</p>
<p>With the interpreter defined, we can complete the next method definition of <code>InLockstep</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="https://well-typed.com/blog/rss2.xml#cb15-1" tabindex="-1"/><span class="kw">instance</span> <span class="dt">InLockstep</span> <span class="dt">FsState</span> <span class="kw">where</span></span>
<span id="cb15-2"><a href="https://well-typed.com/blog/rss2.xml#cb15-2" tabindex="-1"/><span class="ot">  modelNextState ::</span> <span class="kw">forall</span> a<span class="op">.</span></span>
<span id="cb15-3"><a href="https://well-typed.com/blog/rss2.xml#cb15-3" tabindex="-1"/>       <span class="dt">LockstepAction</span> <span class="dt">FsState</span> a</span>
<span id="cb15-4"><a href="https://well-typed.com/blog/rss2.xml#cb15-4" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">ModelLookUp</span> <span class="dt">FsState</span></span>
<span id="cb15-5"><a href="https://well-typed.com/blog/rss2.xml#cb15-5" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">FsState</span> <span class="ot">-&gt;</span> (<span class="dt">FsVal</span> a, <span class="dt">FsState</span>)</span>
<span id="cb15-6"><a href="https://well-typed.com/blog/rss2.xml#cb15-6" tabindex="-1"/>  modelNextState action lookUp (<span class="dt">FsState</span> mock stats) <span class="ot">=</span></span>
<span id="cb15-7"><a href="https://well-typed.com/blog/rss2.xml#cb15-7" tabindex="-1"/>      auxStats <span class="op">$</span> runMock lookUp action mock</span>
<span id="cb15-8"><a href="https://well-typed.com/blog/rss2.xml#cb15-8" tabindex="-1"/>    <span class="kw">where</span></span>
<span id="cb15-9"><a href="https://well-typed.com/blog/rss2.xml#cb15-9" tabindex="-1"/><span class="ot">      auxStats ::</span> (<span class="dt">FsVal</span> a, <span class="dt">Mock</span>) <span class="ot">-&gt;</span> (<span class="dt">FsVal</span> a, <span class="dt">FsState</span>)</span>
<span id="cb15-10"><a href="https://well-typed.com/blog/rss2.xml#cb15-10" tabindex="-1"/>      auxStats (result, state') <span class="ot">=</span></span>
<span id="cb15-11"><a href="https://well-typed.com/blog/rss2.xml#cb15-11" tabindex="-1"/>          (result, <span class="dt">FsState</span> state' <span class="op">$</span> updateStats action result stats)</span>
<span id="cb15-12"><a href="https://well-typed.com/blog/rss2.xml#cb15-12" tabindex="-1"/></span>
<span id="cb15-13"><a href="https://well-typed.com/blog/rss2.xml#cb15-13" tabindex="-1"/>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>All we do here is call the interpreter we just wrote, and then additionally update the statistics (discussed below).</p>
<h3 id="variables">Variables</h3>
<p>As discussed above, variables allow us to refer back to the results of previously executed commands. We have been glossing over an important detail, however. Recall the types of <code>Open</code> and <code>Close</code> (with the <code>FsAct</code> type synonym expanded):</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="https://well-typed.com/blog/rss2.xml#cb16-1" tabindex="-1"/><span class="dt">Open</span><span class="ot">  ::</span> <span class="dt">File</span>            <span class="ot">-&gt;</span> <span class="dt">Action</span> <span class="op">..</span> (<span class="dt">Either</span> <span class="dt">Err</span> (<span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>, <span class="dt">File</span>))</span>
<span id="cb16-2"><a href="https://well-typed.com/blog/rss2.xml#cb16-2" tabindex="-1"/><span class="dt">Close</span><span class="ot"> ::</span> <span class="dt">FsVar</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span> <span class="ot">-&gt;</span> <span class="dt">Action</span> <span class="op">..</span> (<span class="dt">Either</span> <span class="dt">Err</span> (<span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>, ()))</span></code></pre></div>
<p>The result of opening a file is either an error, or else a pair of a handle and a filepath. In <code>quickcheck-dynamic</code>, we get a <em>single</em> variable for the execution of each command, and this is (therefore) true also for the lockstep infrastructure.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn3" id="fnref3"><sup>3</sup></a> So, after opening a file, we have a variable of type <code>Either Err (IO.Handle, File)</code>, but we don’t want a variable of that type as the argument to <code>Close</code>: instead, we want a variable to a <code>IO.Handle</code>. Most importantly, we want to rule out the possibility of trying to a close a file that we never managed to open in the first place; such a test would be nonsensical.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn4" id="fnref4"><sup>4</sup></a></p>
<p>One of the most important features that the lockstep infrastructure adds on top of core <code>quickcheck-dynamic</code> is a concept of variables with a <code>Functor</code>-esque structure: they support an operation that allows us to change the type of that variable.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn5" id="fnref5"><sup>5</sup></a> The key datatype is a “generalized variable” <code>GVar</code>; the intuition is that a <code>GVar</code> of type <code>y</code> is actually a <code>Var</code> of some other type <code>x</code>, bundled with a function<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn6" id="fnref6"><sup>6</sup></a> from <code>x -&gt; Maybe y</code>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="https://well-typed.com/blog/rss2.xml#cb17-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">GVar</span><span class="ot"> ::</span> <span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span> <span class="kw">where</span> <span class="co">-- not the real definition</span></span>
<span id="cb17-2"><a href="https://well-typed.com/blog/rss2.xml#cb17-2" tabindex="-1"/>  <span class="dt">GVar</span><span class="ot"> ::</span> <span class="dt">Typeable</span> x <span class="ot">=&gt;</span> <span class="dt">Var</span> x <span class="ot">-&gt;</span> (x <span class="ot">-&gt;</span> <span class="dt">Maybe</span> y) <span class="ot">-&gt;</span> <span class="dt">GVar</span> y</span></code></pre></div>
<p>For technical reasons,<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn7" id="fnref7"><sup>7</sup></a> this doesn’t quite work. Instead of that function <code>x -&gt; Maybe y</code>, we instead have essentially a small DSL for defining such functions:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="https://well-typed.com/blog/rss2.xml#cb18-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">Op</span> a b <span class="kw">where</span></span>
<span id="cb18-2"><a href="https://well-typed.com/blog/rss2.xml#cb18-2" tabindex="-1"/>  <span class="dt">OpId</span><span class="ot">    ::</span> <span class="dt">Op</span> a a</span>
<span id="cb18-3"><a href="https://well-typed.com/blog/rss2.xml#cb18-3" tabindex="-1"/>  <span class="dt">OpFst</span><span class="ot">   ::</span> <span class="dt">Op</span> (a, b) a</span>
<span id="cb18-4"><a href="https://well-typed.com/blog/rss2.xml#cb18-4" tabindex="-1"/>  <span class="dt">OpSnd</span><span class="ot">   ::</span> <span class="dt">Op</span> (b, a) a</span>
<span id="cb18-5"><a href="https://well-typed.com/blog/rss2.xml#cb18-5" tabindex="-1"/>  <span class="dt">OpLeft</span><span class="ot">  ::</span> <span class="dt">Op</span> (<span class="dt">Either</span> a b) a</span>
<span id="cb18-6"><a href="https://well-typed.com/blog/rss2.xml#cb18-6" tabindex="-1"/>  <span class="dt">OpRight</span><span class="ot"> ::</span> <span class="dt">Op</span> (<span class="dt">Either</span> b a) a</span>
<span id="cb18-7"><a href="https://well-typed.com/blog/rss2.xml#cb18-7" tabindex="-1"/>  <span class="dt">OpComp</span><span class="ot">  ::</span> <span class="dt">Op</span> b c <span class="ot">-&gt;</span> <span class="dt">Op</span> a b <span class="ot">-&gt;</span> <span class="dt">Op</span> a c</span></code></pre></div>
<p>This DSL can be used to extract the left or right coordinate of a pair, as well as to pattern match on an <code>Either</code>. This will suffice for many test cases but not all, so <code>GVar</code> generalizes over the exact choice of DSL:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="https://well-typed.com/blog/rss2.xml#cb19-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">GVar</span> op f <span class="kw">where</span></span>
<span id="cb19-2"><a href="https://well-typed.com/blog/rss2.xml#cb19-2" tabindex="-1"/>  <span class="dt">GVar</span><span class="ot"> ::</span> <span class="dt">Typeable</span> x <span class="ot">=&gt;</span> <span class="dt">Var</span> x <span class="ot">-&gt;</span> op x y <span class="ot">-&gt;</span> <span class="dt">GVar</span> op y</span></code></pre></div>
<p><code>InLockstep</code> has an associated type family <code>ModelOp</code> which records the choice of DSL. It defaults to <code>Op</code>, which is just fine for our running example. We <em>do</em> have to specify how to execute this DSL against model values by giving an instance of this class:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="https://well-typed.com/blog/rss2.xml#cb20-1" tabindex="-1"/><span class="kw">class</span> <span class="dt">Operation</span> op <span class="ot">=&gt;</span> <span class="dt">InterpretOp</span> op f <span class="kw">where</span></span>
<span id="cb20-2"><a href="https://well-typed.com/blog/rss2.xml#cb20-2" tabindex="-1"/><span class="ot">  intOp ::</span> op a b <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (f b)</span></code></pre></div>
<p>The instance for our <code>FsVal</code> is straightforward:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="https://well-typed.com/blog/rss2.xml#cb21-1" tabindex="-1"/><span class="kw">instance</span> <span class="dt">InterpretOp</span> <span class="dt">Op</span> (<span class="dt">ModelValue</span> <span class="dt">FsState</span>) <span class="kw">where</span></span>
<span id="cb21-2"><a href="https://well-typed.com/blog/rss2.xml#cb21-2" tabindex="-1"/>  intOp <span class="dt">OpId</span>         <span class="ot">=</span> <span class="dt">Just</span></span>
<span id="cb21-3"><a href="https://well-typed.com/blog/rss2.xml#cb21-3" tabindex="-1"/>  intOp <span class="dt">OpFst</span>        <span class="ot">=</span> \<span class="kw">case</span> <span class="dt">MPair</span>   x <span class="ot">-&gt;</span> <span class="dt">Just</span> (<span class="fu">fst</span> x)</span>
<span id="cb21-4"><a href="https://well-typed.com/blog/rss2.xml#cb21-4" tabindex="-1"/>  intOp <span class="dt">OpSnd</span>        <span class="ot">=</span> \<span class="kw">case</span> <span class="dt">MPair</span>   x <span class="ot">-&gt;</span> <span class="dt">Just</span> (<span class="fu">snd</span> x)</span>
<span id="cb21-5"><a href="https://well-typed.com/blog/rss2.xml#cb21-5" tabindex="-1"/>  intOp <span class="dt">OpLeft</span>       <span class="ot">=</span> \<span class="kw">case</span> <span class="dt">MEither</span> x <span class="ot">-&gt;</span> <span class="fu">either</span> <span class="dt">Just</span> (<span class="fu">const</span> <span class="dt">Nothing</span>) x</span>
<span id="cb21-6"><a href="https://well-typed.com/blog/rss2.xml#cb21-6" tabindex="-1"/>  intOp <span class="dt">OpRight</span>      <span class="ot">=</span> \<span class="kw">case</span> <span class="dt">MEither</span> x <span class="ot">-&gt;</span> <span class="fu">either</span> (<span class="fu">const</span> <span class="dt">Nothing</span>) <span class="dt">Just</span> x</span>
<span id="cb21-7"><a href="https://well-typed.com/blog/rss2.xml#cb21-7" tabindex="-1"/>  intOp (<span class="dt">OpComp</span> g f) <span class="ot">=</span> intOp g <span class="op">&lt;=&lt;</span> intOp f</span></code></pre></div>
<p>The other variable-related thing we need to do in our <code>InLockstep</code> instead is that we need to define which variables are used in all commands:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="https://well-typed.com/blog/rss2.xml#cb22-1" tabindex="-1"/><span class="kw">instance</span> <span class="dt">InLockstep</span> <span class="dt">FsState</span> <span class="kw">where</span></span>
<span id="cb22-2"><a href="https://well-typed.com/blog/rss2.xml#cb22-2" tabindex="-1"/><span class="ot">  usedVars ::</span> <span class="dt">LockstepAction</span> <span class="dt">FsState</span> a <span class="ot">-&gt;</span> [<span class="dt">AnyGVar</span> (<span class="dt">ModelOp</span> <span class="dt">FsState</span>)]</span>
<span id="cb22-3"><a href="https://well-typed.com/blog/rss2.xml#cb22-3" tabindex="-1"/>  usedVars <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb22-4"><a href="https://well-typed.com/blog/rss2.xml#cb22-4" tabindex="-1"/>      <span class="dt">MkDir</span>{}        <span class="ot">-&gt;</span> []</span>
<span id="cb22-5"><a href="https://well-typed.com/blog/rss2.xml#cb22-5" tabindex="-1"/>      <span class="dt">Open</span>{}         <span class="ot">-&gt;</span> []</span>
<span id="cb22-6"><a href="https://well-typed.com/blog/rss2.xml#cb22-6" tabindex="-1"/>      <span class="dt">Write</span> h _      <span class="ot">-&gt;</span> [<span class="dt">SomeGVar</span> h]</span>
<span id="cb22-7"><a href="https://well-typed.com/blog/rss2.xml#cb22-7" tabindex="-1"/>      <span class="dt">Close</span> h        <span class="ot">-&gt;</span> [<span class="dt">SomeGVar</span> h]</span>
<span id="cb22-8"><a href="https://well-typed.com/blog/rss2.xml#cb22-8" tabindex="-1"/>      <span class="dt">Read</span> (<span class="dt">Left</span> h)  <span class="ot">-&gt;</span> [<span class="dt">SomeGVar</span> h]</span>
<span id="cb22-9"><a href="https://well-typed.com/blog/rss2.xml#cb22-9" tabindex="-1"/>      <span class="dt">Read</span> (<span class="dt">Right</span> _) <span class="ot">-&gt;</span> []</span>
<span id="cb22-10"><a href="https://well-typed.com/blog/rss2.xml#cb22-10" tabindex="-1"/></span>
<span id="cb22-11"><a href="https://well-typed.com/blog/rss2.xml#cb22-11" tabindex="-1"/>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p><code>SomeGVar</code> here is just a way to hide the type of the variable, so that we can have a list of variables of different types:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="https://well-typed.com/blog/rss2.xml#cb23-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">AnyGVar</span> op <span class="kw">where</span></span>
<span id="cb23-2"><a href="https://well-typed.com/blog/rss2.xml#cb23-2" tabindex="-1"/>  <span class="dt">SomeGVar</span><span class="ot"> ::</span> <span class="dt">GVar</span> op y <span class="ot">-&gt;</span> <span class="dt">AnyGVar</span> op</span></code></pre></div>
<p>Again, the definition of <code>usedVars</code> involves some boilerplate, but not difficult to write. It <em>is</em> important to get this function right; however. When a counter-example is found, <code>quickcheck-dynamic</code> will try to <em>shrink</em> the list of actions, to throw out any irrelevant detail. But if, say, a call to <code>Open</code> is removed, then any calls to <code>Close</code> which referenced that open should <em>also</em> be removed. This is done through preconditions, and the default precondition from <code>InLockstep</code> ensures that this will happen by staying that all <code>usedVars</code> must be defined. However, if <code>usedVars</code> misses some variables, the test will fail during shrinking with a confusing error message about undefined variables.</p>
<h3 id="generating-and-shrinking-actions">Generating and shrinking actions</h3>
<p>The type of the method for generating actions is</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="https://well-typed.com/blog/rss2.xml#cb24-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">ModelFindVariables</span> state <span class="ot">=</span> <span class="kw">forall</span> a<span class="op">.</span></span>
<span id="cb24-2"><a href="https://well-typed.com/blog/rss2.xml#cb24-2" tabindex="-1"/>          <span class="dt">Typeable</span> a</span>
<span id="cb24-3"><a href="https://well-typed.com/blog/rss2.xml#cb24-3" tabindex="-1"/>       <span class="ot">=&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> [<span class="dt">GVar</span> (<span class="dt">ModelOp</span> state) a]</span>
<span id="cb24-4"><a href="https://well-typed.com/blog/rss2.xml#cb24-4" tabindex="-1"/></span>
<span id="cb24-5"><a href="https://well-typed.com/blog/rss2.xml#cb24-5" tabindex="-1"/><span class="kw">class</span> (<span class="op">..</span>) <span class="ot">=&gt;</span> <span class="dt">InLockstep</span> state <span class="kw">where</span></span>
<span id="cb24-6"><a href="https://well-typed.com/blog/rss2.xml#cb24-6" tabindex="-1"/><span class="ot">  arbitraryWithVars ::</span></span>
<span id="cb24-7"><a href="https://well-typed.com/blog/rss2.xml#cb24-7" tabindex="-1"/>       <span class="dt">ModelFindVariables</span> state</span>
<span id="cb24-8"><a href="https://well-typed.com/blog/rss2.xml#cb24-8" tabindex="-1"/>    <span class="ot">-&gt;</span> state</span>
<span id="cb24-9"><a href="https://well-typed.com/blog/rss2.xml#cb24-9" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">Gen</span> (<span class="dt">Any</span> (<span class="dt">LockstepAction</span> state))</span>
<span id="cb24-10"><a href="https://well-typed.com/blog/rss2.xml#cb24-10" tabindex="-1"/></span>
<span id="cb24-11"><a href="https://well-typed.com/blog/rss2.xml#cb24-11" tabindex="-1"/>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>Thus, we need to generate an arbitrary action given the current state of the model and a way to find all available variables of a specified type. For example, if we previously executed an open command, then<code>ModelFindVariables</code> will tell us that we have a variable of type <code>Either Err (IO.Handle, File)</code>. If we have a such a variable, we can turn it into a variable of the type we need using:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="https://well-typed.com/blog/rss2.xml#cb25-1" tabindex="-1"/><span class="ot">handle ::</span> <span class="dt">GVar</span> <span class="dt">Op</span> (<span class="dt">Either</span> <span class="dt">Err</span> (<span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>, <span class="dt">File</span>)) <span class="ot">-&gt;</span> <span class="dt">GVar</span> <span class="dt">Op</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span></span>
<span id="cb25-2"><a href="https://well-typed.com/blog/rss2.xml#cb25-2" tabindex="-1"/>handle <span class="ot">=</span> mapGVar (\op <span class="ot">-&gt;</span> <span class="dt">OpFst</span> <span class="ot">`OpComp`</span> <span class="dt">OpRight</span> <span class="ot">`OpComp`</span> op)</span></code></pre></div>
<p>The situation for shrinking is very similar:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="https://well-typed.com/blog/rss2.xml#cb26-1" tabindex="-1"/><span class="kw">class</span> (<span class="op">..</span>) <span class="ot">=&gt;</span> <span class="dt">InLockstep</span> state <span class="kw">where</span></span>
<span id="cb26-2"><a href="https://well-typed.com/blog/rss2.xml#cb26-2" tabindex="-1"/><span class="ot">  shrinkWithVars ::</span></span>
<span id="cb26-3"><a href="https://well-typed.com/blog/rss2.xml#cb26-3" tabindex="-1"/>       <span class="dt">ModelFindVariables</span> state</span>
<span id="cb26-4"><a href="https://well-typed.com/blog/rss2.xml#cb26-4" tabindex="-1"/>    <span class="ot">-&gt;</span> state</span>
<span id="cb26-5"><a href="https://well-typed.com/blog/rss2.xml#cb26-5" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a</span>
<span id="cb26-6"><a href="https://well-typed.com/blog/rss2.xml#cb26-6" tabindex="-1"/>    <span class="ot">-&gt;</span> [<span class="dt">Any</span> (<span class="dt">LockstepAction</span> state)]</span>
<span id="cb26-7"><a href="https://well-typed.com/blog/rss2.xml#cb26-7" tabindex="-1"/></span>
<span id="cb26-8"><a href="https://well-typed.com/blog/rss2.xml#cb26-8" tabindex="-1"/>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>We will not show the full definition of the generator and the shrinker here. Apart from generating variables, they follow precisely the same lines as the <a href="https://well-typed.com/blog/2019/01/qsm-in-depth/">we showed previously with <code>quickcheck-state-machine</code></a>. You can find the full definition <a href="https://github.com/well-typed/quickcheck-lockstep/blob/main/test/Test/MockFS.hs">in the repository</a>.</p>
<h3 id="labelling">Labelling</h3>
<p>When we are testing with randomly generated test data, it is important that we understand what kind of data we are testing with. For example, we might want to verify that certain edge cases are being tested. Labelling is one way to do this: we label specific kind of test inputs, and then check that we see tests being executed with those labels.</p>
<p>For our running the example, the labels, or <em>tags</em>, that we <a href="https://well-typed.com/blog/2019/01/qsm-in-depth/">previously considered</a> were</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="https://well-typed.com/blog/rss2.xml#cb27-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">Tag</span> <span class="ot">=</span> <span class="dt">OpenTwo</span> <span class="op">|</span> <span class="dt">SuccessfulRead</span></span></code></pre></div>
<p>The idea was that a test would be labelled with <code>OpenTwo</code> if it opens at least two different files, and with <code>SuccessfulRead</code> if it manages to execute at least one read successfully.</p>
<p>The abstraction that <code>InLockstep</code> provides for tagging is</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="https://well-typed.com/blog/rss2.xml#cb28-1" tabindex="-1"/><span class="kw">class</span> (<span class="op">..</span>) <span class="ot">=&gt;</span> <span class="dt">InLockstep</span> state <span class="kw">where</span></span>
<span id="cb28-2"><a href="https://well-typed.com/blog/rss2.xml#cb28-2" tabindex="-1"/><span class="ot">  tagStep ::</span></span>
<span id="cb28-3"><a href="https://well-typed.com/blog/rss2.xml#cb28-3" tabindex="-1"/>       <span class="dt">Show</span> a</span>
<span id="cb28-4"><a href="https://well-typed.com/blog/rss2.xml#cb28-4" tabindex="-1"/>    <span class="ot">=&gt;</span> (state, state)</span>
<span id="cb28-5"><a href="https://well-typed.com/blog/rss2.xml#cb28-5" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a</span>
<span id="cb28-6"><a href="https://well-typed.com/blog/rss2.xml#cb28-6" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">ModelValue</span> state a</span>
<span id="cb28-7"><a href="https://well-typed.com/blog/rss2.xml#cb28-7" tabindex="-1"/>    <span class="ot">-&gt;</span> [<span class="dt">String</span>]</span>
<span id="cb28-8"><a href="https://well-typed.com/blog/rss2.xml#cb28-8" tabindex="-1"/></span>
<span id="cb28-9"><a href="https://well-typed.com/blog/rss2.xml#cb28-9" tabindex="-1"/>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>This enables us to take an action given the before and after state, the action, and its result; we do not see any previously executed actions.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn8" id="fnref8"><sup>8</sup></a> This means that for our <code>OpenTwo</code> tag we need to record in the <code>state</code> how many different files have been opened. This is the purpose of the <code>Stats</code>:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="https://well-typed.com/blog/rss2.xml#cb29-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">Stats</span> <span class="ot">=</span> <span class="dt">Set</span> <span class="dt">File</span></span>
<span id="cb29-2"><a href="https://well-typed.com/blog/rss2.xml#cb29-2" tabindex="-1"/></span>
<span id="cb29-3"><a href="https://well-typed.com/blog/rss2.xml#cb29-3" tabindex="-1"/><span class="ot">initStats ::</span> <span class="dt">Stats</span></span>
<span id="cb29-4"><a href="https://well-typed.com/blog/rss2.xml#cb29-4" tabindex="-1"/>initStats <span class="ot">=</span> Set.empty</span></code></pre></div>
<p>Updating the statistics is easy (recall that we used this function in <code>modelNextState</code> above). We just look at the action and its result: if the action is an <code>Open</code>, and the result is a <code>Right</code> value (indicating the <code>Open</code> was success), we insert the filename into the set:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="https://well-typed.com/blog/rss2.xml#cb30-1" tabindex="-1"/><span class="ot">updateStats ::</span> <span class="dt">LockstepAction</span> <span class="dt">FsState</span> a <span class="ot">-&gt;</span> <span class="dt">FsVal</span> a <span class="ot">-&gt;</span> <span class="dt">Stats</span> <span class="ot">-&gt;</span> <span class="dt">Stats</span></span>
<span id="cb30-2"><a href="https://well-typed.com/blog/rss2.xml#cb30-2" tabindex="-1"/>updateStats action result  <span class="ot">=</span></span>
<span id="cb30-3"><a href="https://well-typed.com/blog/rss2.xml#cb30-3" tabindex="-1"/>   <span class="kw">case</span> (action, result) <span class="kw">of</span></span>
<span id="cb30-4"><a href="https://well-typed.com/blog/rss2.xml#cb30-4" tabindex="-1"/>     (<span class="dt">Open</span> f, <span class="dt">MEither</span> (<span class="dt">Right</span> _)) <span class="ot">-&gt;</span> Set.insert f</span>
<span id="cb30-5"><a href="https://well-typed.com/blog/rss2.xml#cb30-5" tabindex="-1"/>     _otherwise                  <span class="ot">-&gt;</span> <span class="fu">id</span></span></code></pre></div>
<p>Tagging is now equally easy. If it’s a <code>Read</code>, we check to see if the result was successful, and if so we add the <code>SuccessfulRead</code> tag. If it’s an <code>Open</code>, we look at the statistics to see if we have opened at least two files:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="https://well-typed.com/blog/rss2.xml#cb31-1" tabindex="-1"/><span class="ot">tagFsAction ::</span> <span class="dt">Stats</span> <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> <span class="dt">FsState</span> a <span class="ot">-&gt;</span> <span class="dt">FsVal</span> a <span class="ot">-&gt;</span> [<span class="dt">Tag</span>]</span>
<span id="cb31-2"><a href="https://well-typed.com/blog/rss2.xml#cb31-2" tabindex="-1"/>tagFsAction openedFiles <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb31-3"><a href="https://well-typed.com/blog/rss2.xml#cb31-3" tabindex="-1"/>    <span class="dt">Read</span> _ <span class="ot">-&gt;</span> \v <span class="ot">-&gt;</span> [<span class="dt">SuccessfulRead</span> <span class="op">|</span> <span class="dt">MEither</span> (<span class="dt">Right</span> _) <span class="ot">&lt;-</span> [v]]</span>
<span id="cb31-4"><a href="https://well-typed.com/blog/rss2.xml#cb31-4" tabindex="-1"/>    <span class="dt">Open</span> _ <span class="ot">-&gt;</span> \_ <span class="ot">-&gt;</span> [<span class="dt">OpenTwo</span>        <span class="op">|</span> Set.size openedFiles <span class="op">&gt;=</span> <span class="dv">2</span>]</span>
<span id="cb31-5"><a href="https://well-typed.com/blog/rss2.xml#cb31-5" tabindex="-1"/>    _      <span class="ot">-&gt;</span> \_ <span class="ot">-&gt;</span> []</span></code></pre></div>
<h3 id="running-the-tests">Running the tests</h3>
<p>Before we can run any <code>quickcheck-dynamic</code> tests, we have to give an instance of the <code>RunModel</code> class. This class is somewhat confusingly named: it’s main method <code>perform</code> does not explain how to run the model, but rather how to run the system under test. Name aside, instances of <code>RunModel</code> are simple when using <code>quickcheck-lockstep</code>:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="https://well-typed.com/blog/rss2.xml#cb32-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">RealMonad</span> <span class="ot">=</span> <span class="dt">ReaderT</span> <span class="dt">FilePath</span> <span class="dt">IO</span></span>
<span id="cb32-2"><a href="https://well-typed.com/blog/rss2.xml#cb32-2" tabindex="-1"/></span>
<span id="cb32-3"><a href="https://well-typed.com/blog/rss2.xml#cb32-3" tabindex="-1"/><span class="kw">instance</span> <span class="dt">RunModel</span> (<span class="dt">Lockstep</span> <span class="dt">FsState</span>) <span class="dt">RealMonad</span> <span class="kw">where</span></span>
<span id="cb32-4"><a href="https://well-typed.com/blog/rss2.xml#cb32-4" tabindex="-1"/>  perform       <span class="ot">=</span> \_st <span class="ot">-&gt;</span> runIO</span>
<span id="cb32-5"><a href="https://well-typed.com/blog/rss2.xml#cb32-5" tabindex="-1"/>  postcondition <span class="ot">=</span> Lockstep.postcondition</span>
<span id="cb32-6"><a href="https://well-typed.com/blog/rss2.xml#cb32-6" tabindex="-1"/>  monitoring    <span class="ot">=</span> Lockstep.monitoring (<span class="dt">Proxy</span> <span class="op">@</span><span class="dt">RealMonad</span>)</span></code></pre></div>
<p>We have to choose a monad to run our system under test in; we choose <code>ReaderT FilePath IO</code>, where the <code>FilePath</code> is the root directory of the file system that we are simulating. The definitions of <code>postcondition</code> and <code>monitoring</code> come straight from <code>quickcheck-lockstep</code>; we just have to provide an interpreter for actions for the system under test:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="https://well-typed.com/blog/rss2.xml#cb33-1" tabindex="-1"/><span class="ot">runIO ::</span> <span class="dt">LockstepAction</span> <span class="dt">FsState</span> a <span class="ot">-&gt;</span> <span class="dt">LookUp</span> <span class="dt">RealMonad</span> <span class="ot">-&gt;</span> <span class="dt">RealMonad</span> (<span class="dt">Realized</span> <span class="dt">RealMonad</span> a)</span></code></pre></div>
<p>Writing this interpreter is straight-forward and we will not show it here; the only minor wrinkle is that we need to turn the lookup function for <code>Var</code> that <code>quickcheck-dynamic</code> gives us into a lookup function for <code>GVar</code>; <code>quickcheck-lockstep</code> provides this functionality:<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn9" id="fnref9"><sup>9</sup></a></p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="https://well-typed.com/blog/rss2.xml#cb34-1" tabindex="-1"/><span class="ot">lookUpGVar ::</span> (<span class="op">..</span>) <span class="ot">=&gt;</span> <span class="dt">Proxy</span> m <span class="ot">-&gt;</span> <span class="dt">LookUp</span> m <span class="ot">-&gt;</span> <span class="dt">GVar</span> op a <span class="ot">-&gt;</span> <span class="dt">Realized</span> m a</span></code></pre></div>
<p>The final thing we have to do is provide an instance of <code>RunLockstep</code>; this is a subclass of <code>InLockstep</code> with a single method <code>observeReal</code>; it is a separate class, because <code>RunLockstep</code> itself is not aware of the monad used to run the system under test:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="https://well-typed.com/blog/rss2.xml#cb35-1" tabindex="-1"/><span class="kw">instance</span> <span class="dt">RunLockstep</span> <span class="dt">FsState</span> <span class="dt">RealMonad</span> <span class="kw">where</span></span>
<span id="cb35-2"><a href="https://well-typed.com/blog/rss2.xml#cb35-2" tabindex="-1"/>  observeReal _proxy <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb35-3"><a href="https://well-typed.com/blog/rss2.xml#cb35-3" tabindex="-1"/>      <span class="dt">MkDir</span>{} <span class="ot">-&gt;</span> <span class="dt">OEither</span> <span class="op">.</span> bimap <span class="dt">OId</span> <span class="dt">OId</span></span>
<span id="cb35-4"><a href="https://well-typed.com/blog/rss2.xml#cb35-4" tabindex="-1"/>      <span class="dt">Open</span>{}  <span class="ot">-&gt;</span> <span class="dt">OEither</span> <span class="op">.</span> bimap <span class="dt">OId</span> (<span class="dt">OPair</span> <span class="op">.</span> bimap (<span class="fu">const</span> <span class="dt">OHandle</span>) <span class="dt">OId</span>)</span>
<span id="cb35-5"><a href="https://well-typed.com/blog/rss2.xml#cb35-5" tabindex="-1"/>      <span class="dt">Write</span>{} <span class="ot">-&gt;</span> <span class="dt">OEither</span> <span class="op">.</span> bimap <span class="dt">OId</span> <span class="dt">OId</span></span>
<span id="cb35-6"><a href="https://well-typed.com/blog/rss2.xml#cb35-6" tabindex="-1"/>      <span class="dt">Close</span>{} <span class="ot">-&gt;</span> <span class="dt">OEither</span> <span class="op">.</span> bimap <span class="dt">OId</span> <span class="dt">OId</span></span>
<span id="cb35-7"><a href="https://well-typed.com/blog/rss2.xml#cb35-7" tabindex="-1"/>      <span class="dt">Read</span>{}  <span class="ot">-&gt;</span> <span class="dt">OEither</span> <span class="op">.</span> bimap <span class="dt">OId</span> <span class="dt">OId</span></span></code></pre></div>
<p>To actually run our tests, we can make use of this function provided by <code>quickcheck-lockstep</code>:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="https://well-typed.com/blog/rss2.xml#cb36-1" tabindex="-1"/><span class="ot">runActionsBracket ::</span></span>
<span id="cb36-2"><a href="https://well-typed.com/blog/rss2.xml#cb36-2" tabindex="-1"/>     <span class="dt">RunLockstep</span> state (<span class="dt">ReaderT</span> st <span class="dt">IO</span>)</span>
<span id="cb36-3"><a href="https://well-typed.com/blog/rss2.xml#cb36-3" tabindex="-1"/>  <span class="ot">=&gt;</span> <span class="dt">Proxy</span> state</span>
<span id="cb36-4"><a href="https://well-typed.com/blog/rss2.xml#cb36-4" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">IO</span> st         <span class="co">-- ^ Initialisation</span></span>
<span id="cb36-5"><a href="https://well-typed.com/blog/rss2.xml#cb36-5" tabindex="-1"/>  <span class="ot">-&gt;</span> (st <span class="ot">-&gt;</span> <span class="dt">IO</span> ()) <span class="co">-- ^ Cleanup</span></span>
<span id="cb36-6"><a href="https://well-typed.com/blog/rss2.xml#cb36-6" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">Actions</span> (<span class="dt">Lockstep</span> state) <span class="ot">-&gt;</span> <span class="dt">Property</span></span></code></pre></div>
<p>For example, if we have a bug in our mock system such that get a “does not exist” error message instead of an “already exists” error when we create a directory that already exists, the test output might look something like this:</p>
<pre><code>*** Failed! Assertion failed (after 7 tests and 4 shrinks):
Actions
 [Var 4 := MkDir (Dir ["x"]),
  Var 6 := MkDir (Dir ["x"])]
State: FsState {.. state1 elided ..}
State: FsState {.. state2 elided ..}
System under test returned: OEither (Left (OId AlreadyExists))
but model returned:         OEither (Left (OId DoesNotExist))</code></pre>
<p>(where we have elided some output) We see the state of the system after every action, as well as the final failed postcondition.</p>
<h3 id="generating-labelled-examples">Generating labelled examples</h3>
<p>For generating labelled examples, <code>quickcheck-lockstep</code> provides</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb38-1"><a href="https://well-typed.com/blog/rss2.xml#cb38-1" tabindex="-1"/><span class="ot">tagActions ::</span>  <span class="dt">InLockstep</span> state <span class="ot">=&gt;</span> <span class="dt">Proxy</span> state <span class="ot">-&gt;</span> <span class="dt">Actions</span> (<span class="dt">Lockstep</span> state) <span class="ot">-&gt;</span> <span class="dt">Property</span></span></code></pre></div>
<p>(This functionality is not provided by <code>quickcheck-dynamic</code>.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn10" id="fnref10"><sup>10</sup></a>) We can use this with the <a href="https://hackage.haskell.org/package/QuickCheck/docs/Test-QuickCheck.html#v:labelledExamples">standard QuickCheck <code>labelledExamples</code> function</a>. As stated, this is very useful both for testing labelling, but also to test the shrinker, because QuickCheck will give us <em>minimal</em> labelled examples. For example, we might get the following minimal example for “successful read”</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="https://well-typed.com/blog/rss2.xml#cb39-1" tabindex="-1"/><span class="op">***</span> <span class="dt">Found</span> example <span class="kw">of</span> <span class="dt">Tags</span><span class="op">:</span> [<span class="st">"SuccessfulRead"</span>]</span>
<span id="cb39-2"><a href="https://well-typed.com/blog/rss2.xml#cb39-2" tabindex="-1"/><span class="dt">Actions</span></span>
<span id="cb39-3"><a href="https://well-typed.com/blog/rss2.xml#cb39-3" tabindex="-1"/> [<span class="dt">Var</span> <span class="dv">8</span> <span class="op">:=</span> <span class="dt">Open</span> (<span class="dt">File</span> {dir <span class="ot">=</span> <span class="dt">Dir</span> [], name <span class="ot">=</span> <span class="st">"t0"</span>}),</span>
<span id="cb39-4"><a href="https://well-typed.com/blog/rss2.xml#cb39-4" tabindex="-1"/>  <span class="dt">Var</span> <span class="dv">9</span> <span class="op">:=</span> <span class="dt">Close</span> (<span class="dt">GVar</span> (<span class="dt">Var</span> <span class="dv">8</span>) (<span class="fu">fst</span> <span class="op">.</span> fromRight <span class="op">.</span> <span class="fu">id</span>)),</span>
<span id="cb39-5"><a href="https://well-typed.com/blog/rss2.xml#cb39-5" tabindex="-1"/>  <span class="dt">Var</span> <span class="dv">51</span> <span class="op">:=</span> <span class="dt">Read</span> (<span class="dt">Left</span> (<span class="dt">GVar</span> (<span class="dt">Var</span> <span class="dv">8</span>) (<span class="fu">snd</span> <span class="op">.</span> fromRight <span class="op">.</span> <span class="fu">id</span>)))]</span></code></pre></div>
<p>The syntax might be a little difficult to read here, but we (1) open a file, then (2) close the file we opened in step (1), and finally (3) read the file that we opened in step (1).</p>
<h2 id="part-2-implementation">Part 2: Implementation</h2>
<p>Now that we have seen all the ingredients, let’s see how the lockstep abstraction is actually implemented. We will first describe which state we track, and then discuss all of the default implementations for the methods of <code>StateModel</code>; this will serve both as an explanation of the implementation, as well as an example of how to define <code>StateModel</code> instances. Fortunately, we have already seen most of the pieces; it’s just a matter of putting them together now.</p>
<h3 id="state">State</h3>
<p>During test execution, <code>quickcheck-dynamic</code> internally maintains a mapping from variables to the values as returned by the system under test:</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="https://well-typed.com/blog/rss2.xml#cb40-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">Env</span> m <span class="ot">=</span> [<span class="dt">EnvEntry</span> m]</span>
<span id="cb40-2"><a href="https://well-typed.com/blog/rss2.xml#cb40-2" tabindex="-1"/></span>
<span id="cb40-3"><a href="https://well-typed.com/blog/rss2.xml#cb40-3" tabindex="-1"/><span class="kw">data</span> <span class="dt">EnvEntry</span> m <span class="kw">where</span></span>
<span id="cb40-4"><a href="https://well-typed.com/blog/rss2.xml#cb40-4" tabindex="-1"/><span class="ot">  (:==) ::</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">Var</span> a <span class="ot">-&gt;</span> <span class="dt">Realized</span> m a <span class="ot">-&gt;</span> <span class="dt">EnvEntry</span> m</span></code></pre></div>
<p>Variables of different types are distinguished at runtime through dynamic typing; this is common for model testing libraries like this, and is not really visible to end users.</p>
<p>The state maintained by the lockstep infrastructure is the user defined model state, along with an environment similar to <code>Env</code>, but for the values returned by the <em>model</em>:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="https://well-typed.com/blog/rss2.xml#cb41-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">Lockstep</span> state <span class="ot">=</span> <span class="dt">Lockstep</span> {</span>
<span id="cb41-2"><a href="https://well-typed.com/blog/rss2.xml#cb41-2" tabindex="-1"/><span class="ot">      lockstepModel ::</span> state</span>
<span id="cb41-3"><a href="https://well-typed.com/blog/rss2.xml#cb41-3" tabindex="-1"/>    ,<span class="ot"> lockstepEnv   ::</span> <span class="dt">EnvF</span> (<span class="dt">ModelValue</span> state)</span>
<span id="cb41-4"><a href="https://well-typed.com/blog/rss2.xml#cb41-4" tabindex="-1"/>    }</span></code></pre></div>
<p>The definition of <code>EnvF</code> is similar to <code>Env</code>, but maps variables of type <code>a</code> to values of type <code>f a</code>:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="https://well-typed.com/blog/rss2.xml#cb42-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">EnvEntry</span> f <span class="kw">where</span></span>
<span id="cb42-2"><a href="https://well-typed.com/blog/rss2.xml#cb42-2" tabindex="-1"/>  <span class="dt">EnvEntry</span><span class="ot"> ::</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">Var</span> a <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> <span class="dt">EnvEntry</span> f</span>
<span id="cb42-3"><a href="https://well-typed.com/blog/rss2.xml#cb42-3" tabindex="-1"/></span>
<span id="cb42-4"><a href="https://well-typed.com/blog/rss2.xml#cb42-4" tabindex="-1"/><span class="kw">newtype</span> <span class="dt">EnvF</span> f <span class="ot">=</span> <span class="dt">EnvF</span> [<span class="dt">EnvEntry</span> f]</span></code></pre></div>
<h3 id="initialising-and-stepping-the-state">Initialising and stepping the state</h3>
<p>State initialisation is simple:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="https://well-typed.com/blog/rss2.xml#cb43-1" tabindex="-1"/><span class="ot">initialState ::</span> state <span class="ot">-&gt;</span> <span class="dt">Lockstep</span> state</span>
<span id="cb43-2"><a href="https://well-typed.com/blog/rss2.xml#cb43-2" tabindex="-1"/>initialState state <span class="ot">=</span> <span class="dt">Lockstep</span> {</span>
<span id="cb43-3"><a href="https://well-typed.com/blog/rss2.xml#cb43-3" tabindex="-1"/>      lockstepModel <span class="ot">=</span> state</span>
<span id="cb43-4"><a href="https://well-typed.com/blog/rss2.xml#cb43-4" tabindex="-1"/>    , lockstepEnv   <span class="ot">=</span> EnvF.empty</span>
<span id="cb43-5"><a href="https://well-typed.com/blog/rss2.xml#cb43-5" tabindex="-1"/>    }</span></code></pre></div>
<p><em>Stepping</em> the state (the implementation of <code>nextState</code>) is one of the functions at the heart of the abstraction, but we have actually already seen nearly all the ingredients:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb44-1"><a href="https://well-typed.com/blog/rss2.xml#cb44-1" tabindex="-1"/><span class="ot">nextState ::</span> <span class="kw">forall</span> state a<span class="op">.</span></span>
<span id="cb44-2"><a href="https://well-typed.com/blog/rss2.xml#cb44-2" tabindex="-1"/>     (<span class="dt">InLockstep</span> state, <span class="dt">Typeable</span> a)</span>
<span id="cb44-3"><a href="https://well-typed.com/blog/rss2.xml#cb44-3" tabindex="-1"/>  <span class="ot">=&gt;</span> <span class="dt">Lockstep</span> state</span>
<span id="cb44-4"><a href="https://well-typed.com/blog/rss2.xml#cb44-4" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a</span>
<span id="cb44-5"><a href="https://well-typed.com/blog/rss2.xml#cb44-5" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">Var</span> a</span>
<span id="cb44-6"><a href="https://well-typed.com/blog/rss2.xml#cb44-6" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">Lockstep</span> state</span>
<span id="cb44-7"><a href="https://well-typed.com/blog/rss2.xml#cb44-7" tabindex="-1"/>nextState (<span class="dt">Lockstep</span> state env) action var <span class="ot">=</span></span>
<span id="cb44-8"><a href="https://well-typed.com/blog/rss2.xml#cb44-8" tabindex="-1"/>    <span class="dt">Lockstep</span> state' <span class="op">$</span> EnvF.insert var modelResp env</span>
<span id="cb44-9"><a href="https://well-typed.com/blog/rss2.xml#cb44-9" tabindex="-1"/>  <span class="kw">where</span></span>
<span id="cb44-10"><a href="https://well-typed.com/blog/rss2.xml#cb44-10" tabindex="-1"/><span class="ot">    modelResp ::</span> <span class="dt">ModelValue</span> state a</span>
<span id="cb44-11"><a href="https://well-typed.com/blog/rss2.xml#cb44-11" tabindex="-1"/><span class="ot">    state'    ::</span> state</span>
<span id="cb44-12"><a href="https://well-typed.com/blog/rss2.xml#cb44-12" tabindex="-1"/>    (modelResp, state') <span class="ot">=</span> modelNextState (GVar.lookUpEnvF env) action state</span></code></pre></div>
<p>We are given the current state, an action to take, and a fresh variable to hold the result of this action, and must compute the result according to the model and new model state. The model result and the new model state come straight from the <code>modelNextState</code> method of <code>InLockstep</code>; the only other thing left to do is to add the variable binding to our environment.</p>
<h3 id="precondition-and-postcondition">Precondition and postcondition</h3>
<p>The only precondition that we have by default is that all variables must be well-defined. This means not only that they have a value, but also that the evaluation of the embedded <code>Op</code> will succeed too. This is verified by</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb45-1"><a href="https://well-typed.com/blog/rss2.xml#cb45-1" tabindex="-1"/><span class="ot">definedInEnvF ::</span> (<span class="op">..</span>) <span class="ot">=&gt;</span> <span class="dt">EnvF</span> f <span class="ot">-&gt;</span> <span class="dt">GVar</span> op a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span></code></pre></div>
<p>So the precondition is simply</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb46-1"><a href="https://well-typed.com/blog/rss2.xml#cb46-1" tabindex="-1"/><span class="ot">precondition ::</span></span>
<span id="cb46-2"><a href="https://well-typed.com/blog/rss2.xml#cb46-2" tabindex="-1"/>     <span class="dt">InLockstep</span> state</span>
<span id="cb46-3"><a href="https://well-typed.com/blog/rss2.xml#cb46-3" tabindex="-1"/>  <span class="ot">=&gt;</span> <span class="dt">Lockstep</span> state <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb46-4"><a href="https://well-typed.com/blog/rss2.xml#cb46-4" tabindex="-1"/>precondition (<span class="dt">Lockstep</span> _ env) <span class="ot">=</span></span>
<span id="cb46-5"><a href="https://well-typed.com/blog/rss2.xml#cb46-5" tabindex="-1"/>    <span class="fu">all</span> (\(<span class="dt">SomeGVar</span> var) <span class="ot">-&gt;</span> GVar.definedInEnvF env var) <span class="op">.</span> usedVars</span></code></pre></div>
<p>The postcondition is also simple: <code>quickcheck-dynamic</code> gives us the action and the result from the system under test; we (re)compute the result from the model and compare “up to observability,” as described above:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb47-1"><a href="https://well-typed.com/blog/rss2.xml#cb47-1" tabindex="-1"/><span class="ot">checkResponse ::</span> <span class="kw">forall</span> m state a<span class="op">.</span></span>
<span id="cb47-2"><a href="https://well-typed.com/blog/rss2.xml#cb47-2" tabindex="-1"/>     <span class="dt">RunLockstep</span> state m</span>
<span id="cb47-3"><a href="https://well-typed.com/blog/rss2.xml#cb47-3" tabindex="-1"/>  <span class="ot">=&gt;</span> <span class="dt">Proxy</span> m</span>
<span id="cb47-4"><a href="https://well-typed.com/blog/rss2.xml#cb47-4" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">Lockstep</span> state <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a <span class="ot">-&gt;</span> <span class="dt">Realized</span> m a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb47-5"><a href="https://well-typed.com/blog/rss2.xml#cb47-5" tabindex="-1"/>checkResponse p (<span class="dt">Lockstep</span> state env) action a <span class="ot">=</span></span>
<span id="cb47-6"><a href="https://well-typed.com/blog/rss2.xml#cb47-6" tabindex="-1"/>    compareEquality (observeReal p action a) (observeModel modelResp)</span>
<span id="cb47-7"><a href="https://well-typed.com/blog/rss2.xml#cb47-7" tabindex="-1"/>  <span class="kw">where</span></span>
<span id="cb47-8"><a href="https://well-typed.com/blog/rss2.xml#cb47-8" tabindex="-1"/><span class="ot">    modelResp ::</span> <span class="dt">ModelValue</span> state a</span>
<span id="cb47-9"><a href="https://well-typed.com/blog/rss2.xml#cb47-9" tabindex="-1"/>    modelResp <span class="ot">=</span> <span class="fu">fst</span> <span class="op">$</span> modelNextState (GVar.lookUpEnvF env) action state</span>
<span id="cb47-10"><a href="https://well-typed.com/blog/rss2.xml#cb47-10" tabindex="-1"/></span>
<span id="cb47-11"><a href="https://well-typed.com/blog/rss2.xml#cb47-11" tabindex="-1"/><span class="ot">    compareEquality ::</span>  <span class="dt">Observable</span> state a <span class="ot">-&gt;</span> <span class="dt">Observable</span> state a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb47-12"><a href="https://well-typed.com/blog/rss2.xml#cb47-12" tabindex="-1"/>    compareEquality real mock</span>
<span id="cb47-13"><a href="https://well-typed.com/blog/rss2.xml#cb47-13" tabindex="-1"/>      <span class="op">|</span> real <span class="op">==</span> mock <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb47-14"><a href="https://well-typed.com/blog/rss2.xml#cb47-14" tabindex="-1"/>      <span class="op">|</span> <span class="fu">otherwise</span>    <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> <span class="fu">concat</span> [</span>
<span id="cb47-15"><a href="https://well-typed.com/blog/rss2.xml#cb47-15" tabindex="-1"/>            <span class="st">"System under test returned: "</span></span>
<span id="cb47-16"><a href="https://well-typed.com/blog/rss2.xml#cb47-16" tabindex="-1"/>          , <span class="fu">show</span> real</span>
<span id="cb47-17"><a href="https://well-typed.com/blog/rss2.xml#cb47-17" tabindex="-1"/>          , <span class="st">"\nbut model returned:         "</span></span>
<span id="cb47-18"><a href="https://well-typed.com/blog/rss2.xml#cb47-18" tabindex="-1"/>          , <span class="fu">show</span> mock</span>
<span id="cb47-19"><a href="https://well-typed.com/blog/rss2.xml#cb47-19" tabindex="-1"/>          ]</span>
<span id="cb47-20"><a href="https://well-typed.com/blog/rss2.xml#cb47-20" tabindex="-1"/></span>
<span id="cb47-21"><a href="https://well-typed.com/blog/rss2.xml#cb47-21" tabindex="-1"/><span class="ot">postcondition ::</span> <span class="kw">forall</span> m state a<span class="op">.</span></span>
<span id="cb47-22"><a href="https://well-typed.com/blog/rss2.xml#cb47-22" tabindex="-1"/>     <span class="dt">RunLockstep</span> state m</span>
<span id="cb47-23"><a href="https://well-typed.com/blog/rss2.xml#cb47-23" tabindex="-1"/>  <span class="ot">=&gt;</span> (<span class="dt">Lockstep</span> state, <span class="dt">Lockstep</span> state)</span>
<span id="cb47-24"><a href="https://well-typed.com/blog/rss2.xml#cb47-24" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a</span>
<span id="cb47-25"><a href="https://well-typed.com/blog/rss2.xml#cb47-25" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">LookUp</span> m</span>
<span id="cb47-26"><a href="https://well-typed.com/blog/rss2.xml#cb47-26" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">Realized</span> m a</span>
<span id="cb47-27"><a href="https://well-typed.com/blog/rss2.xml#cb47-27" tabindex="-1"/>  <span class="ot">-&gt;</span> m <span class="dt">Bool</span></span>
<span id="cb47-28"><a href="https://well-typed.com/blog/rss2.xml#cb47-28" tabindex="-1"/>postcondition (before, _after) action _lookUp a <span class="ot">=</span></span>
<span id="cb47-29"><a href="https://well-typed.com/blog/rss2.xml#cb47-29" tabindex="-1"/>    <span class="fu">pure</span> <span class="op">$</span> isNothing <span class="op">$</span> checkResponse (<span class="dt">Proxy</span> <span class="op">@</span>m) before action a</span></code></pre></div>
<p>Unlike <code>postcondition</code>, which can only return a boolean, <code>checkResponse</code> actually gives a user-friendly error message in case the postcondition is not satisfied. We will reuse this in <code>monitoring</code> below to ensure that this error message is included in the test output.</p>
<h3 id="generation-shrinking-and-monitoring">Generation, shrinking and monitoring</h3>
<p>The definitions of <code>arbitraryAction</code> and <code>shrinkAction</code> are thin wrappers around the corresponding methods from <code>InLockstep</code>: we just need to pass them a way to find out which variables are available:</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb48-1"><a href="https://well-typed.com/blog/rss2.xml#cb48-1" tabindex="-1"/><span class="ot">varsOfType ::</span></span>
<span id="cb48-2"><a href="https://well-typed.com/blog/rss2.xml#cb48-2" tabindex="-1"/>     <span class="dt">InLockstep</span> state</span>
<span id="cb48-3"><a href="https://well-typed.com/blog/rss2.xml#cb48-3" tabindex="-1"/>  <span class="ot">=&gt;</span> <span class="dt">EnvF</span> (<span class="dt">ModelValue</span> state) <span class="ot">-&gt;</span> <span class="dt">ModelFindVariables</span> state</span>
<span id="cb48-4"><a href="https://well-typed.com/blog/rss2.xml#cb48-4" tabindex="-1"/>varsOfType env p <span class="ot">=</span> <span class="fu">map</span> GVar.fromVar <span class="op">$</span> EnvF.keysOfType p env</span></code></pre></div>
<p>This depends on</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb49-1"><a href="https://well-typed.com/blog/rss2.xml#cb49-1" tabindex="-1"/><span class="ot">keysOfType ::</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EnvF</span> f <span class="ot">-&gt;</span> [<span class="dt">Var</span> a]</span></code></pre></div>
<p>to find variables of the appropriate type. Action generation and shrinking are now trivial:</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb50-1"><a href="https://well-typed.com/blog/rss2.xml#cb50-1" tabindex="-1"/>arbitraryAction (<span class="dt">Lockstep</span> state env) <span class="ot">=</span> arbitraryWithVars (varsOfType env) state</span>
<span id="cb50-2"><a href="https://well-typed.com/blog/rss2.xml#cb50-2" tabindex="-1"/>shrinkAction    (<span class="dt">Lockstep</span> state env) <span class="ot">=</span> shrinkWithVars    (varsOfType env) state</span></code></pre></div>
<p>Finally, <code>quickcheck-dynamic</code> allows us to “monitor” test execution: we can add additional information to running tests. We will use this both to label tests with inferred tags, as well as to add the state after every step and the result of <code>checkResponse</code> to the test-output in case there is a test failure:</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb51-1"><a href="https://well-typed.com/blog/rss2.xml#cb51-1" tabindex="-1"/><span class="ot">monitoring ::</span> <span class="kw">forall</span> m state a<span class="op">.</span></span>
<span id="cb51-2"><a href="https://well-typed.com/blog/rss2.xml#cb51-2" tabindex="-1"/>     <span class="dt">RunLockstep</span> state m</span>
<span id="cb51-3"><a href="https://well-typed.com/blog/rss2.xml#cb51-3" tabindex="-1"/>  <span class="ot">=&gt;</span> <span class="dt">Proxy</span> m</span>
<span id="cb51-4"><a href="https://well-typed.com/blog/rss2.xml#cb51-4" tabindex="-1"/>  <span class="ot">-&gt;</span> (<span class="dt">Lockstep</span> state, <span class="dt">Lockstep</span> state)</span>
<span id="cb51-5"><a href="https://well-typed.com/blog/rss2.xml#cb51-5" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a</span>
<span id="cb51-6"><a href="https://well-typed.com/blog/rss2.xml#cb51-6" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">LookUp</span> m</span>
<span id="cb51-7"><a href="https://well-typed.com/blog/rss2.xml#cb51-7" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">Realized</span> m a</span>
<span id="cb51-8"><a href="https://well-typed.com/blog/rss2.xml#cb51-8" tabindex="-1"/>  <span class="ot">-&gt;</span> <span class="dt">Property</span> <span class="ot">-&gt;</span> <span class="dt">Property</span></span>
<span id="cb51-9"><a href="https://well-typed.com/blog/rss2.xml#cb51-9" tabindex="-1"/>monitoring p (before, after) action _lookUp realResp <span class="ot">=</span></span>
<span id="cb51-10"><a href="https://well-typed.com/blog/rss2.xml#cb51-10" tabindex="-1"/>      QC.counterexample (<span class="st">"State: "</span> <span class="op">++</span> <span class="fu">show</span> after)</span>
<span id="cb51-11"><a href="https://well-typed.com/blog/rss2.xml#cb51-11" tabindex="-1"/>    <span class="op">.</span> <span class="fu">maybe</span> <span class="fu">id</span> QC.counterexample (checkResponse p before action realResp)</span>
<span id="cb51-12"><a href="https://well-typed.com/blog/rss2.xml#cb51-12" tabindex="-1"/>    <span class="op">.</span> QC.tabulate <span class="st">"Tags"</span> tags</span>
<span id="cb51-13"><a href="https://well-typed.com/blog/rss2.xml#cb51-13" tabindex="-1"/>  <span class="kw">where</span></span>
<span id="cb51-14"><a href="https://well-typed.com/blog/rss2.xml#cb51-14" tabindex="-1"/><span class="ot">    tags ::</span> [<span class="dt">String</span>]</span>
<span id="cb51-15"><a href="https://well-typed.com/blog/rss2.xml#cb51-15" tabindex="-1"/>    tags <span class="ot">=</span> tagStep (lockstepModel before, lockstepModel after) action modelResp</span>
<span id="cb51-16"><a href="https://well-typed.com/blog/rss2.xml#cb51-16" tabindex="-1"/></span>
<span id="cb51-17"><a href="https://well-typed.com/blog/rss2.xml#cb51-17" tabindex="-1"/><span class="ot">    modelResp ::</span> <span class="dt">ModelValue</span> state a</span>
<span id="cb51-18"><a href="https://well-typed.com/blog/rss2.xml#cb51-18" tabindex="-1"/>    modelResp <span class="ot">=</span> <span class="fu">fst</span> <span class="op">$</span> modelNextState</span>
<span id="cb51-19"><a href="https://well-typed.com/blog/rss2.xml#cb51-19" tabindex="-1"/>                        (GVar.lookUpEnvF <span class="op">$</span> lockstepEnv before)</span>
<span id="cb51-20"><a href="https://well-typed.com/blog/rss2.xml#cb51-20" tabindex="-1"/>                        action</span>
<span id="cb51-21"><a href="https://well-typed.com/blog/rss2.xml#cb51-21" tabindex="-1"/>                        (lockstepModel before)</span></code></pre></div>
<h2 id="conclusions">Conclusions</h2>
<p>The interface for stateful testing provided by <code>quickcheck-dynamic</code> is fairly minimal. The key methods that a test must implement are:</p>
<ul>
<li>The initial state of the model, and a way to step that state given an action.</li>
<li>A precondition which is checked during generation and (importantly) during shrinking to rule out nonsensical tests.</li>
<li>A postcondition which is checked after every action and determines whether or not a test is considered successful.</li>
<li>Generation and shrinking of actions.</li>
<li>Optionally, a way to add additional information to a test.</li>
</ul>
<p>Although it’s nice to have a minimal API, it leaves end users with a lot of different ways in which they might structure their tests. Sometimes that is useful, but for many situations a more streamlined approach is useful. In this blog post we described the <code>quickcheck-lockstep</code> library, which provides support for “lockstep-style” model testing on top of <code>quickcheck-dynamic</code>. The key difference here is that the <code>postcondition</code> is always the same: we insist that the system under test and the model must return the same results, “up to observability.” By default, the precondition is also always the same: we only insist that all variables are defined.</p>
<p>We previously implemented the same kind of infrastructure for <code>quickcheck-state-machine</code>, so implementing it now for <code>quickcheck-dynamic</code> provided a good comparison point between the two libraries.</p>
<ul>
<li>In terms of model based testing, the two libraries basically have feature parity: they provide the same core functionality.</li>
<li>In addition to this core functionality <code>quickcheck-dynamic</code> additionally offers support for dynamic logic, which is absent from <code>quickcheck-state-machine</code>. Conversely, <code>quickcheck-state-machine</code> offers support for <em>parallel</em> test execution, which is currently absent from <code>quickcheck-dynamic</code>. We have not talked about either topic in this blog post.</li>
</ul>
<p>The differences between the two libraries are mostly technical in nature:</p>
<ul>
<li>Probably the most important downside of <code>quickcheck-dynamic</code> is there is precisely <em>one</em> variable that records the result of an action.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn11" id="fnref11"><sup>11</sup></a> This is not the case in <code>quickcheck-state-machine</code>, where the number of variables bound by an action is determined at runtime. We can use this to return <em>no</em> bound variables if the action failed, or indeed <em>multiple</em> bound variables if the action returned multiple values (such as our <code>Open</code> example). In <code>quickcheck-lockstep</code> we therefore provide the <code>GVar</code> abstraction, which provides a way to “map” over the type of variables. It might be useful to lift this abstraction into the main library at some point.</li>
<li>At the moment, <code>quickcheck-dynamic</code> does not provide explicit support for generating labelled examples. As we saw, we <em>can</em> implement this functionality on top of <code>quickcheck-dynamic</code> (<code>quickcheck-lockstep</code> offers it), but as with <code>GVar</code>, it might be useful to move (a version of) this functionality into to the main library.</li>
<li>In <code>quickcheck-state-machine</code> the types of variables are type-level arguments to actions and responses. This means that some functionality such as getting the list of variables used (<code>usedVars</code>) can be defined generically. Moreover, variables can be resolved by the framework, whereas in <code>quickcheck-dynamic</code> test authors are responsible for manually calling the <code>LookUp</code> function whenever necessary. However, we pay a price for this functionality in <code>quickcheck-state-machine</code>; especially when dealing with multiple types of variables, the required type-level machinery gets pretty sophisticated.</li>
<li>In <code>quickcheck-dynamic</code> the argument to tests is <code>Actions</code>, which is a list of steps where each step consists of a variable for that step and the action to execute. The corresponding datatype in <code>quickcheck-state-machine</code> is <code>Commands</code>; this is very similar, but in addition to the action, it also records the result of the action. This makes <code>Commands</code> a bit more useful for <code>Actions</code> for things like tagging commands, since we get the full history. In <code>quickcheck-dynamic</code>, <code>tagActions</code> must effectively re-run the full set of actions to construct the right test label.</li>
<li>Unlike <code>quickcheck-state-machine</code>, <code>quickcheck-dynamic</code> keeps the definition of the interpreter for <code>Action</code> (<code>RunModel</code>) separate from the <code>StateModel</code> class. This separation is useful, because running the test against the real system often needs some additional state (a database handle, for example) which is not necessary for many other parts of the test framework. In <code>quickcheck-state-machine</code> this can often lead to ugly <code>error "state unused"</code> calls.</li>
</ul>
<p>All in all, the libraries are quite similar in terms of the core state model testing functionality. For lockstep-style testing, however, <code>quickcheck-lockstep</code> is probably more user-friendly than <a href="https://hackage.haskell.org/package/quickcheck-state-machine/docs/Test-StateMachine-Lockstep-NAry.html">the corresponding functionality in quickcheck-state-machine</a> because there is less advanced type machinery required. The downside of the single-variable-per-command of <code>quickcheck-dynamic</code> is resolved by the <code>GVar</code> abstraction in <code>quickstep-lockstep</code>.</p>
<h5 id="footnotes">Footnotes</h5>
<section class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>If we wanted to execute lockstep-style tests against multiple execution backends, we would have to introduce another abstraction to ensure that we can compare model responses to system responses for all of those backends.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref1">↩︎</a></p></li>
<li id="fn2"><p><code>InLockstep</code> could alternatively require a function <code>compareResult :: a -&gt; ModelValue s a -&gt; Bool</code>, but writing such a function is often bit cumbersome, whereas equality for <code>Observable s</code> can be derived.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref2">↩︎</a></p></li>
<li id="fn3"><p>Core <code>quickcheck-dynamic</code> takes care of variables for the system under test, but not for the model.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref3">↩︎</a></p></li>
<li id="fn4"><p>For an <code>Action .. a</code>, all we see in <code>postcondition</code> is a value of type <code>Realized m a</code>. We want to ensure not just that the model and the system under test have the same behaviour when no exceptions are present, but also that they return the same errors. We <em>must</em> therefore reflect the possibility for an error in the result type of <code>Open</code>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref4">↩︎</a></p></li>
<li id="fn5"><p>Perhaps some of this functionality can be merged with the main library; it certainly seems useful beyond lockstep-style testing.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref5">↩︎</a></p></li>
<li id="fn6"><p>This is closely related to <a href="https://hackage.haskell.org/package/kan-extensions/docs/Data-Functor-Coyoneda.html">Coyoneda</a>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref6">↩︎</a></p></li>
<li id="fn7"><p>The <code>quickcheck-dynamic</code> infrastructure insists that actions have <code>Eq</code> and <code>Show</code> instances. Since variables occur in actions, the same must be true for <code>GVar</code>. Secondly, a function from <code>x -&gt; y</code> would not be enough; we would also need a second function of type <code>ModelValue s x -&gt; ModelValue s y</code>. The indirection through the DSL avoids both of these problems: operations have <code>Eq</code> and <code>Show</code> instances, and we can simply insist on two interpreters of <code>Op</code>: one for <code>Identity</code> and one for <code>ModelValue s</code>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref7">↩︎</a></p></li>
<li id="fn8"><p>We use <code>tagStep</code> not just in <code>labelledExamples</code>, but also in the standard <code>StateModel</code> method <code>monitoring</code>, to tag tests as they are executed. While the <em>former</em> would in principle allow us to tag an entire list of actions, the latter does not.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref8">↩︎</a></p></li>
<li id="fn9"><p>The proxy argument is necessary because <code>Realized</code> is a non-injective type family; <code>quickcheck-dynamic</code> relies on <code>AllowAmbiguousTypes</code> instead.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref9">↩︎</a></p></li>
<li id="fn10"><p>In <code>StateModel</code> we have <code>monitoring</code>, but <code>monitoring</code> cannot really be used with <code>label</code>, as this would result in lots of calls to <code>label</code> as the test executes (once per action) and each of those calls would result in a separate table in the test output. We must therefore use <code>tabulate</code> instead, but this is not supported by QuickCheck’s <code>labelledExamples</code>. Moreover, the only way to turn a list of actions into a <code>PropertyM</code> in <code>quickcheck-dynamic</code> is <code>runActions</code>, which requires the <code>RunModel</code> argument; but <code>RunModel</code> should not be needed for creating labelled examples. In the lockstep infrastructure we provide instead a function <code>tagActions :: Actions (Lockstep state) -&gt; Property</code>, which basically executes all of the actions, collecting the tags as it goes, and then makes a <em>single</em> call to <code>label</code> with the final list of tags. This then works well with the standard <code>labelledExamples</code> functionality from QuickCheck.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref10">↩︎</a></p></li>
<li id="fn11"><p>The registry example from <code>quickcheck-dynamic</code> skirts around the problem: some actions fail, and some actions return new <code>ModelThreadId</code>, but there are no actions that can fail <em>or</em> return a new <code>ModelThreadId</code>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref11">↩︎</a></p></li>
</ol>
</section></div>
    </content>
    <updated>2022-09-08T00:00:00Z</updated>
    <published>2022-09-08T00:00:00Z</published>
    <category term="coding"/>
    <category term="testing"/>
    <author>
      <name>edsko</name>
    </author>
    <source>
      <id>https://well-typed.com/blog/</id>
      <logo>https://well-typed.com/img/wtnlogoplain.svg</logo>
      <link href="https://well-typed.com/blog/rss2.xml" rel="self" type="application/rss+xml"/>
      <link href="https://well-typed.com/blog/" rel="alternate" type="text/html"/>
      <subtitle>Because Well-Typed Programs Don't Go Wrong</subtitle>
      <title>Well-Typed Blog</title>
      <updated>2022-09-08T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2022-09-08-fp1-typopaedia-pythonica/</id>
    <link href="https://tweag.io/blog/2022-09-08-fp1-typopaedia-pythonica/" rel="alternate" type="text/html"/>
    <title>Functional Python, Part I: Typopædia Pythonica</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Tweagers have an engineering mantra — Functional. Typed. Immutable. —
that begets composable software which can be reasoned about and avails
itself to static analysis. These are all “good things” for helping us
build robust software, which inevitably lead us to using languages such
as Haskell, OCaml and Rust. However, it would be remiss of us to snub
languages that don’t enforce the same disciplines, but are nonetheless
popular choices in industry. Ivory towers are lonely places, after all.</p>
<p>In this series of articles, I will discuss how some of the principles
and techniques learnt from typed functional languages can be applied to
Python<sup id="fnref-1"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-1">1</a></sup> to achieve the same results. We’ll see that, while Python
<a href="https://www.artima.com/weblogs/viewpost.jsp?thread=98196">famously eschews</a> the functional paradigm, we can build
pythonic(ish) equivalents relatively easily.</p>
<p>First up, I’ll look at typing discipline in Python.</p>
<h2 id="gradual-typing"><a class="anchor before" href="https://www.tweag.io/rss.xml#gradual-typing"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Gradual Typing</h2>
<p>Quickly. Tell me the type signature of the following function:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mystery</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">/</span> b</code></pre></div>
<p>You may be tempted to say that <code class="language-text">a</code> and <code class="language-text">b</code> are numeric… and that’s
probably true. However, Python is dynamically typed, so without further
documentation, the <em>only</em> thing we can actually say for sure is that <code class="language-text">a</code>
must implement the <a href="https://docs.python.org/3/reference/datamodel.html#object.__truediv__"><code class="language-text">__truediv__</code> interface</a> <em>at runtime</em>
(or <code class="language-text">b</code> implements <code class="language-text">__rtruediv__</code>). For instance:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mystery<span class="token punctuation">(</span>pathlib<span class="token punctuation">.</span>Path<span class="token punctuation">(</span><span class="token string">"/foo/bar"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"quux"</span><span class="token punctuation">)</span>
PosixPath<span class="token punctuation">(</span><span class="token string">"/foo/bar/quux"</span><span class="token punctuation">)</span></code></pre></div>
<p>This is a fairly well-behaved (if not contrived) example. However, I’m
sure you can relate to the shenanigans that some Python engineers get up
to; constructing opaque dictionaries where we’re lucky if we know the
keys without mentally running through the code in our heads.
Impenetrable. Unmaintainable. Chaos.</p>
<p>Fortunately for our (and future maintainers’) sanity, since Python 3.5,
syntax for <a href="https://peps.python.org/pep-0484">type hinting</a> has been introduced and continues to
improve in each subsequent release. We can thus annotate our function as
a form of standardised documentation:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">not_so_mysterious</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">/</span> b</code></pre></div>
<p>Python is <em>still</em> dynamically typed; these are just annotations and you
are free to flaunt them with reckless abandon. Presuming, however, that
you’re an upstanding citizen, this is an approach known as “gradual
typing”, which is a pragmatic solution to allow engineers to annotate
their code piecemeal, without the friction that comes from the
expectations of “all-or-nothing”.</p>
<p>So what’s the point, if it’s transparent to the Python interpreter?</p>
<p>Well, type checkers exist, such as:</p>
<ul>
<li><a href="http://mypy-lang.org/">mypy</a>, from the Python Software Foundation</li>
<li><a href="https://github.com/Microsoft/pyright">Pyright</a>, from Microsoft</li>
<li><a href="https://pyre-check.org">Pyre</a>, from Meta</li>
<li><a href="https://google.github.io/pytype">pytype</a>, from Google</li>
</ul>
<p>Any of these can (and should) be incorporated into an engineer’s setup,
or integrated into a project in much the same way as formatters, linters
and test runners. The more you annotate your code, the more leverage you
gain; type checkers can infer the type of code that isn’t annotated when
they have enough information. Having your editor scream at you, or your
CI fail if your code doesn’t type check is an easy win in the fight
against bugs.</p>
<p>Now, much ink has been spilt on the merits of typing — and I would
encourage you to read <a href="https://docs.python.org/3/library/typing.html">Python’s</a> and <a href="https://mypy.readthedocs.io/en/stable/">mypy’s</a>
documentation — so I won’t go into any more detail about the specifics.
Instead, we’ll see how we can use this to implement a keystone of
functional programming languages while reassuring ourselves of its
correctness.</p>
<h2 id="algebraic-data-types"><a class="anchor before" href="https://www.tweag.io/rss.xml#algebraic-data-types"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Algebraic Data Types</h2>
<p>Algebraic data types are structures formed by composition in
predictable, well-defined ways.<sup id="fnref-2"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-2">2</a></sup> Moreover, they can be nested,
allowing you to build up complex data structures from well-understood
parts. Why is this useful? While the concept may seem abstract,
modelling everyday data structures — both algorithmic and for business
logic — in this way turns out to be rather natural, where the same
arguments that favour modular code, which can be put together into a
more-meaningful whole, apply.</p>
<p>Data structures are at the heart of the software we write. For
functional programmers, it’s common to start implementing new
functionality by thinking about what types will be needed and how they
will interact with each other.</p>
<p>With that in mind, rather than waxing poetic, let’s get down to the
business of applying the same practice to our Python code. I’ll start
with “product types” as they’re simpler, both conceptually and in terms
of their Python implementation.</p>
<h3 id="product-types"><a class="anchor before" href="https://www.tweag.io/rss.xml#product-types"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Product Types</h3>
<p>A point on a plane can be represented, for example, by its <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>x</mi></mrow>&lt;annotation encoding="application/x-tex"&gt;x&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"/><span class="mord mathnormal">x</span></span></span></span></span> and <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>y</mi></mrow>&lt;annotation encoding="application/x-tex"&gt;y&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"/><span class="mord mathnormal">y</span></span></span></span></span>
coordinates relative to some origin. These two values can range
independently to cover the entire plane. This is known as the <a href="https://en.wikipedia.org/wiki/Cartesian_product">Cartesian
product</a>, which directly corresponds to a “product
type”. In the plane example, this would be expressed by its two numeric
components. However, nothing precludes you from having more components,
fewer components, or even heterogeneous components.</p>
<p>At its simplest, this can be represented by the juxtaposition of (zero
or more) types. In Python, this is a tuple, which is straightforwardly
annotated<sup id="fnref-3"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-3">3</a></sup> by its component types. For example:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python">point<span class="token punctuation">:</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

sql_statement<span class="token punctuation">:</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token string">"select * from foo where bar &gt; ? and quux = ?"</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span></code></pre></div>
<p>Furthermore, tuples are immutable in Python, which ensures that
unexpected changes — that can cause bugs and are hard to track down —
cannot happen. Less favourably, however, is that their component access
is positional, which elides useful information from the engineer. This
can lead to meaningless code:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python">do_something<span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># Destructuring helps, but is at best just a proxy</span>
stmt<span class="token punctuation">,</span> params <span class="token operator">=</span> sql_statement</code></pre></div>
<p>To resolve this, the fields can be named; a so-called “record type”, or
a <code class="language-text">struct</code> in C and Rust. Before Python 3.7, a record type could be
implemented using a <a href="https://docs.python.org/3/glossary.html#term-named-tuple">named tuple</a>; which gained type
annotation support in Python 3.6. Since Python 3.7, <a href="https://peps.python.org/pep-0557">data
classes</a><sup id="fnref-4"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-4">4</a></sup> were introduced which supplant this role. At first
blush, the two may seem equivalent, but an important distinction — that
will become necessary in the next episode — is that named tuples don’t
support multiple inheritance.</p>
<p>The implementation is facilitated through a class
<a href="https://docs.python.org/3/glossary.html#term-decorator">decorator</a>, which computes the type’s interface (e.g.,
constructor, equality matching, etc.) at runtime. It therefore offers a
lot of flexibility, such as specifying default values and setting
immutability; instantiation is like a normal Python class and field
access is through the familiar “dotted-attribute” pattern:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass

<span class="token decorator annotation punctuation">@dataclass</span><span class="token punctuation">(</span>frozen<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">ProgrammingLanguage</span><span class="token punctuation">:</span>
    name<span class="token punctuation">:</span> <span class="token builtin">str</span>
    strongly_typed<span class="token punctuation">:</span> <span class="token builtin">bool</span>
    statically_typed<span class="token punctuation">:</span> <span class="token builtin">bool</span>

haskell <span class="token operator">=</span> ProgrammingLanguage<span class="token punctuation">(</span><span class="token string">"Haskell"</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
python <span class="token operator">=</span> ProgrammingLanguage<span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token keyword">assert</span> haskell<span class="token punctuation">.</span>statically_typed <span class="token operator">!=</span> python<span class="token punctuation">.</span>statically_typed</code></pre></div>
<p>In this example, I use the anti-pattern of Boolean arguments, which
gives no clue as to what each argument refers. From Python 3.10 this
situation can be improved slightly — at the expense of verbosity — by
forcing the use of keyword arguments. However, perhaps there is a better
way…</p>
<h3 id="sum-types"><a class="anchor before" href="https://www.tweag.io/rss.xml#sum-types"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Sum Types</h3>
<p>Sum types can express a variety of types, but only one at a time. The
most common example of this is probably a Boolean: it’s either <code class="language-text">True</code> or
<code class="language-text">False</code>. That can be extended to an arbitrary number of simple branches
with an <a href="https://docs.python.org/3/library/enum.html"><code class="language-text">Enum</code></a>, introduced in <a href="https://peps.python.org/pep-0435">Python 3.4</a>. While
somewhat pointless<sup id="fnref-5"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-5">5</a></sup> beyond its illustrative power, we could thus
amend our previous example like so:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass
<span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token punctuation">,</span> auto

<span class="token keyword">class</span> <span class="token class-name">TypingDiscipline</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>
    StrongStatic <span class="token operator">=</span> auto<span class="token punctuation">(</span><span class="token punctuation">)</span>
    StrongDynamic <span class="token operator">=</span> auto<span class="token punctuation">(</span><span class="token punctuation">)</span>
    WeakStatic <span class="token operator">=</span> auto<span class="token punctuation">(</span><span class="token punctuation">)</span>
    WeakDynamic <span class="token operator">=</span> auto<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@dataclass</span><span class="token punctuation">(</span>frozen<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">ProgrammingLanguage</span><span class="token punctuation">:</span>
    name<span class="token punctuation">:</span> <span class="token builtin">str</span>
    type_discipline<span class="token punctuation">:</span> TypingDiscipline

javascript <span class="token operator">=</span> ProgrammingLanguage<span class="token punctuation">(</span><span class="token string">"JavaScript"</span><span class="token punctuation">,</span> TypingDiscipline<span class="token punctuation">.</span>WeakDynamic<span class="token punctuation">)</span></code></pre></div>
<p>While this is now clearer, it has limited utility. What <em>would</em> be
useful is a mixture of branch types, where individual components can
carry information besides their name. For example, say we wanted a
<code class="language-text">Shape</code> type which encoded different metrics for different types of
shape (e.g., side lengths for rectangles, radius for circles, etc.).
That can’t be done with an <code class="language-text">Enum</code>.</p>
<p>In object orientated programming languages, like Python, this pattern is
a class hierarchy: a root superclass, with any number of child classes
representing the branches. From Python 3.8, we can also make use of the
<code class="language-text">typing.final</code> decorator to get the type checker involved in enforcing
the correct structure. As for carrying data, we’ve already covered that
with product types:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass
<span class="token keyword">from</span> typing <span class="token keyword">import</span> final

<span class="token keyword">class</span> <span class="token class-name">Shape</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token decorator annotation punctuation">@final</span>
<span class="token decorator annotation punctuation">@dataclass</span><span class="token punctuation">(</span>frozen<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span>Shape<span class="token punctuation">)</span><span class="token punctuation">:</span>
    width<span class="token punctuation">:</span> <span class="token builtin">float</span>
    height<span class="token punctuation">:</span> <span class="token builtin">float</span>

<span class="token decorator annotation punctuation">@final</span>
<span class="token decorator annotation punctuation">@dataclass</span><span class="token punctuation">(</span>frozen<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span>Shape<span class="token punctuation">)</span><span class="token punctuation">:</span>
    radius<span class="token punctuation">:</span> <span class="token builtin">float</span></code></pre></div>
<p>This is approximately equivalent to a true sum type that can be defined
in functional languages. We’ve constructed it from smaller,
well-understood types to enable us to express data that is more than the
sum of its parts (pun intended). However, there are some caveats which
must be observed:</p>
<ul>
<li>
<p>The <code class="language-text">Shape</code> parent class is a bona fide type. This is perfect for type
annotating, but care should be taken not to mistakenly instantiate it.
Conversely, the subclasses are also bona fide types, but they’re less
useful for type annotation, yet <em>should</em> be instantiated.</p>
</li>
<li>
<p>Nothing prevents further subclassing of <code class="language-text">Rectangle</code> or <code class="language-text">Circle</code>
besides the <code class="language-text">final</code> decorator, which would only fail the type checker.
Deeper subclassing is meaningless with respect to the simulated sum
type, but will still type check against the root class.</p>
</li>
</ul>
<p>The instantiation and subclassing problems <em>could</em> be enforced with some
<a href="https://gist.github.com/Xophmeister/8d5ed64058e0191378d7f32a88e79564">metaclass trickery</a>, but this does more to
paint you into a corner than provide value. Not recommended. Instead,
this is where the judgement of the engineer comes in to play.</p>
<h3 id="recursive-types-and-pattern-matching"><a class="anchor before" href="https://www.tweag.io/rss.xml#recursive-types-and-pattern-matching"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Recursive Types and Pattern Matching</h3>
<p>When learning Haskell, the <a href="http://learnyouahaskell.com/making-our-own-types-and-typeclasses#recursive-data-structures">classic algebraic data type
example</a> is a cons-list: a homogeneous, singly-linked list
made up of <a href="https://en.wikipedia.org/wiki/Cons">cons</a> cells. This can be expressed as:</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token keyword">data</span> <span class="token constant">List</span> <span class="token hvariable">a</span> <span class="token operator">=</span> <span class="token constant">Cons</span> <span class="token hvariable">a</span> <span class="token punctuation">(</span><span class="token constant">List</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token constant">Nil</span></code></pre></div>
<p>Following the protocol I’ve outlined above, this can be translated
mechanically into Python:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Generic<span class="token punctuation">,</span> TypeVar<span class="token punctuation">,</span> final
<span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass

T <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">List</span><span class="token punctuation">(</span>Generic<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token decorator annotation punctuation">@final</span>
<span class="token decorator annotation punctuation">@dataclass</span><span class="token punctuation">(</span>frozen<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span>List<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    car<span class="token punctuation">:</span> T
    cdr<span class="token punctuation">:</span> List<span class="token punctuation">[</span>T<span class="token punctuation">]</span>

<span class="token decorator annotation punctuation">@final</span>
<span class="token keyword">class</span> <span class="token class-name">Nil</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div>
<p>Granted, it’s not one line of code any more and it may look a bit alien,
as far as Python code goes, but it is readable. It’s also worth
emphasising that this is again more illustrative than useful: Don’t
implement your Python lists like this! So let’s get on and illustrate by
defining some linked lists and showing how the type checker reacts:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token comment"># The type checker approves of this</span>
correct<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Cons<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Cons<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Cons<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> Nil<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># The type checker doesn't like these</span>
<span class="token comment"># mypy: Argument 1 to "Cons" has incompatible type "str"; expected "int"</span>
mistyped<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Cons<span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> Nil<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
hetero<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Cons<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Cons<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> Nil<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>
<p>“This seems like a lot of effort to go to,” I hear you cry. “Can we do
anything cool with this?”</p>
<p>The great thing about structures that follow a predictable pattern is
that they can be deconstructed in a predictable way. You see this all
the time in idiomatic Python code, with destructuring of tuples and
dictionaries to get at their parts. With our sum and product types, let
me give an example which allows you to go one step further:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable<span class="token punctuation">,</span> TypeVar

S <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">"S"</span><span class="token punctuation">)</span>
T <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">foldr</span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span>S<span class="token punctuation">,</span> T<span class="token punctuation">]</span><span class="token punctuation">,</span> T<span class="token punctuation">]</span><span class="token punctuation">,</span> acc<span class="token punctuation">:</span> T<span class="token punctuation">,</span> lst<span class="token punctuation">:</span> List<span class="token punctuation">[</span>S<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> T<span class="token punctuation">:</span>
    <span class="token keyword">match</span> lst<span class="token punctuation">:</span>
        <span class="token keyword">case</span> Nil<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> acc

        <span class="token keyword">case</span> Cons<span class="token punctuation">(</span>x<span class="token punctuation">,</span> xs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> fn<span class="token punctuation">(</span>x<span class="token punctuation">,</span> foldr<span class="token punctuation">(</span>fn<span class="token punctuation">,</span> acc<span class="token punctuation">,</span> xs<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>
<p><a href="https://peps.python.org/pep-0634">Structural pattern matching</a> landed in Python 3.10 and this is
where algebraic data types really shine. It allows us to leverage the
structural patterns that are naturally embedded within them without
having to write a lot of tiresome boilerplate. The above is a recursive
(strictly evaluated) implementation of a right <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)">fold</a>,<sup id="fnref-6"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-6">6</a></sup>
which is about as close to a perfect translation of the <a href="http://learnyouahaskell.com/higher-order-functions#folds">Haskell
equivalent</a> as you can get:</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token builtin">foldr</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">b</span> <span class="token operator">-&gt;</span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token hvariable">b</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span> <span class="token operator">-&gt;</span> <span class="token hvariable">b</span>
<span class="token builtin">foldr</span> <span class="token hvariable">_</span>  <span class="token hvariable">acc</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token hvariable">acc</span>
<span class="token builtin">foldr</span> <span class="token hvariable">fn</span> <span class="token hvariable">acc</span> <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">:</span><span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">fn</span> <span class="token hvariable">x</span> <span class="token punctuation">(</span><span class="token builtin">foldr</span> <span class="token hvariable">fn</span> <span class="token hvariable">acc</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span></code></pre></div>
<p>Let’s give it a spin:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foldr<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Cons<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Cons<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Cons<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> Nil<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">6</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foldr<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> Cons<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> Cons<span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">,</span> Nil<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string">'HelloWorld'</span></code></pre></div>
<p>In functional programming languages, many such abstractions exist —
so-called <a href="https://en.wikipedia.org/wiki/Higher-order_function">“higher-order functions”</a> — and are used as
component building blocks to compose useful software. As we can reason
about each component, we can reason about their composition. Functional
programming is all about composition and now we can do the same in our
Python code.</p>
<p>Of course, not all is sunshine and rainbows. There are some caveats:</p>
<ul>
<li>
<p>As mentioned previously, the root class (<code class="language-text">List</code>, here) is a genuine
type. The type checker realises that the <code class="language-text">match</code> clause is therefore
inexhaustive and so it (correctly) concludes that there’s a non-return
path through the function; which is a type error. It’s not as pretty,
but we can fix this easily by adding a dummy <code class="language-text">match</code> branch that is
never taken.</p>
</li>
<li>
<p>Pythonistas may baulk at the recursion… and for good reason: Python
does not do <a href="https://en.wikipedia.org/wiki/Tail_call">tail-call</a> optimisation — again, by
<a href="https://neopythonic.blogspot.com/2009/04/final-words-on-tail-calls.html">decree</a> — and so deep recursion can blow the stack. In the
next episode, I’ll show how we can resolve this.</p>
</li>
</ul>
<h2 id="conclusion"><a class="anchor before" href="https://www.tweag.io/rss.xml#conclusion"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Conclusion</h2>
<p>Functional programming takes many of its cues from mathematics, where
larger, more-specific structures (programs) are built from smaller,
more-general ones. You start from the bottom and work your way up. This
ensures the correctness at each level of abstraction and is a robust
philosophy for writing well-behaved software.</p>
<p>I have shown that the axiomatic level — types — can now be imitated in
the Python ecosystem to achieve the same end. In the next episode, I’ll
generalise this further and implement some nifty computer science
concepts to assuage Python’s “mechanical sympathies”.</p>
<p><em>Thanks to Gala Camacho, Simeon Carstens, Guillaume Desforges, Clément
Hurlin, Steve Purcell and Noon van der Silk for their reviews of this
article.</em></p>


<div class="footnotes">
<hr/>
<ol>
<li id="fn-1">We are not limited to Python; these techniques can be applied in
any language with suitable support, libraries and tooling.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-1">↩</a></li>
<li id="fn-2">Why they’re “algebraic” is because algebraic data types form a
<a href="https://en.wikipedia.org/wiki/Semiring">semiring</a>; a structure from abstract algebra. Bartosz
Milewski <a href="https://bartoszmilewski.com/2015/01/13/simple-algebraic-data-types">goes into depth</a> on this, with a slight
Haskell bent.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-2">↩</a></li>
<li id="fn-3">Since Python 3.9, standard collections <a href="https://peps.python.org/pep-0585">can be used</a> as
their own type annotations. Prior to this, collection types could be
found in the <a href="https://docs.python.org/3/library/typing.html"><code class="language-text">typing</code></a> standard library module.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-3">↩</a></li>
<li id="fn-4">The <a href="https://www.attrs.org"><code class="language-text">attrs</code></a> library is a common dependency that
achieves a similar goal, while <code class="language-text">dataclasses</code> fulfils the <a href="https://en.wikipedia.org/wiki/Pareto_principle">“Pareto
principle”</a> from within the Python standard library.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-4">↩</a></li>
<li id="fn-5">It would be more useful here to split the <code class="language-text">TypingDiscipline</code>
enumeration into two <code class="language-text">Enums</code>: one for strong/weak and the other for
static/dynamic. As I say, it’s just an example!<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-5">↩</a></li>
<li id="fn-6">You may be familiar with Python’s <a href="https://docs.python.org/3/library/functools.html#functools.reduce"><code class="language-text">functools.reduce</code></a>,
which is a <em>left</em> fold.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-6">↩</a></li>
</ol>
</div></div>
    </summary>
    <updated>2022-09-08T00:00:00Z</updated>
    <published>2022-09-08T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html"/>
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2022-09-15T11:54:12Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-1777990983847811806.post-8136329259991133570</id>
    <link href="https://www.haskellforall.com/feeds/8136329259991133570/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="https://www.haskellforall.com/2022/09/nix-serve-ng-faster-more-reliable-drop.html#comment-form" rel="replies" title="0 Comments" type="text/html"/>
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/8136329259991133570" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/8136329259991133570" rel="self" type="application/atom+xml"/>
    <link href="https://www.haskellforall.com/2022/09/nix-serve-ng-faster-more-reliable-drop.html" rel="alternate" title="nix-serve-ng: A faster, more reliable, drop-in replacement for nix-serve" type="text/html"/>
    <title>nix-serve-ng: A faster, more reliable, drop-in replacement for nix-serve</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">nix-serve-ng    <p>Our team at <a href="https://www.arista.com/en/">Arista Networks</a>is happy to announce nix-serve-ng, a backwards-compatible Haskell   rewrite of <a href="https://github.com/edolstra/nix-serve">nix-serve</a>  (a service for hosting a <code>/nix/store</code> as a binary cache). It provides better reliability and performance than nix-serve (ranging from ≈ 1.5× to 32× faster). We wrote nix-serve-ng to fix scaling bottlenecks in our cache and we expect other large-scale deployments might be interested in this project, too.</p><p>This post will focus more on the background behind the development process and comparisons to other Nix cache implementations. If you don’t care about any of that then you can get started by following the instructions in <a href="https://github.com/aristanetworks/nix-serve-ng#nix-serve-ng">the repository’s <code>README</code></a>.</p><h4 id="background">Background</h4><p>Before we began this project there were at least two other open source rewrites of <code>nix-serve-ng</code> that we could have adopted instead of <code>nix-serve</code>:</p><ul><li><p><a href="https://github.com/thoughtpolice/eris"><code>eris</code></a> - A Perl rewrite of <code>nix-serve</code></p><p>Note: the original <code>nix-serve</code> is implemented in Perl, and eris is also implemented in Perl using a different framework.</p></li><li><p><a href="https://github.com/helsinki-systems/harmonia"><code>harmonia</code></a>- A Rust rewrite of <code>nix-serve</code></p></li></ul><p>The main reason we did not go with these two alternatives is because they are not drop-in replacements for the original <code>nix-serve</code>. We could have fixed that, but given <a href="https://github.com/edolstra/nix-serve/blob/master/nix-serve.psgi">how simple <code>nix-serve</code> is</a> I figured that it would be simpler to just create our own. <code>nix-serve-ng</code> only took a couple of days for the initial version and maybe a week of follow-up fixes and performance tuning.</p><p>We did not evaluate the performance or reliability of <code>eris</code> or <code>harmonia</code> before embarking on our own <code>nix-serve</code> replacement. However, after <code>nix-serve-ng</code> was done we learned that it was significantly faster than the alternatives (see the <a href="https://www.haskellforall.com/feeds/posts/default#performance">Performance</a> section below). Some of those performance differences are probably fixable, especially for <code>harmonia</code>. That said, we are very happy with the quality of our solution.</p><h4 id="backwards-compatibility">Backwards compatibility</h4><p>One important design goal for this project is to be significantly backwards compatible with <code>nix-serve</code>. We went to great lengths to preserve compatibility, including:</p><ul><li><p>Naming the built executable <code>nix-serve</code></p><p>Yes, even though the project name is <code>nix-serve-ng</code>, the executable built by the project is named <code>nix-serve</code>.</p></li><li><p>Preserving most of the original command-line options, including legacy options</p><p>… even though some are unused.</p></li></ul><p>In most cases you can literally replace <code>pkgs.nix-serve</code>with <code>pkgs.nix-serve-ng</code> and it will “just work”. You can even continue to use the existing <code>services.nix-serve</code> NixOS options.</p><p>The biggest compatibility regression is that <code>nix-serve-ng</code> cannot be built on MacOS. It is extremely close to supporting MacOS save for this one bug in Haskell’s <code>hsc2hs</code> tool: <a href="https://github.com/haskell/hsc2hs/issues/26"><code>haskell/hsc2hs</code>- #26</a>. We left in all of the MacOS shims so that if that bug is ever fixed then we can get MacOS support easily.</p><p>For more details on the exact differences compared to <code>nix-serve</code>, see the <a href="https://github.com/aristanetworks/nix-serve-ng#results">Result / Backwards-compatibility</a> section of the <code>README</code>.</p><h4 id="performance">Performance</h4><p><code>nix-serve-ng</code> is faster than all of the alternatives according to both our formal benchmarks and also informal testing. The <a href="https://github.com/aristanetworks/nix-serve-ng#benchmarks">“Benchmarks” section of our <code>README</code></a> has the complete breakdown but the relevant part is this table:</p><p>Speedups (compared to <code>nix-serve</code>):<table><colgroup><col style="width: 28%;"/><col style="width: 18%;"/><col style="width: 18%;"/><col style="width: 18%;"/><col style="width: 18%;"/></colgroup><thead><tr class="header"><th>Benchmark</th><th><code>nix-serve</code></th><th><code>eris</code></th><th><code>harmonia</code></th><th><code>nix-serve-ng</code></th></tr></thead><tbody><tr class="odd"><td>Fetch present NAR info ×10</td><td>1.0</td><td>0.05</td><td>1.33</td><td>1.58</td></tr><tr class="even"><td>Fetch absent NAR info ×1</td><td>1.0</td><td>0.06</td><td>1.53</td><td>1.84</td></tr><tr class="odd"><td>Fetch empty NAR ×10</td><td>1.0</td><td>0.67</td><td>0.59</td><td>31.80</td></tr><tr class="even"><td>Fetch 10 MB NAR ×10</td><td>1.0</td><td>0.64</td><td>0.60</td><td>3.35</td></tr></tbody></table></p><p>… which I can summarize like this:</p><ul><li><code>nix-serve-ng</code> is faster than all of the alternatives across all use cases</li><li><code>eris</code> is slower than the original <code>nix-serve</code>across all use cases</li><li><code>harmonia</code> is faster than the original <code>nix-serve</code> for NAR info lookups, but slower for fetching NARs</li></ul><p>These performance results were surprising for a few reasons:</p><ul><li><p>I was not expecting <code>eris</code> to be slower than the original <code>nix-serve</code> implementation</p><p>… especially not NAR info lookups to be ≈ 20× slower. This is significant because NAR info lookups typically dominate a Nix cache’s performance. In my (informal) experience, the majority of a Nix cache’s time is spent addressing failed cache lookups.</p></li><li><p>I was not expecting <code>harmonia</code> (the Rust rewrite) to be slower than the original <code>nix-serve</code> for fetching NARs</p><p>This seems like something that should be fixable. <code>harmonia</code> will probably eventually match our performance because Rust has a high performance ceiling.</p></li><li><p>I was not expecting a ≈ 30x speedup for <code>nix-serve-ng</code>fetching small NARs</p><p>I had to triple-check that neither <code>nix-serve-ng</code> nor the benchmark were broken when I saw this speedup.</p></li></ul><p>So I investigated these performance differences to help inform other implementations what to be mindful of.</p><h4 id="performance-insights">Performance insights</h4><p>We didn’t get these kinds of speed-ups by being completely oblivious to performance. Here are the things that we paid special attention to to keep things efficient, in order of lowest-hanging to highest-hanging fruit:</p><ul><li><p>Don’t read the secret key file on every NAR fetch</p><p>This is a silly thing that <a href="https://github.com/edolstra/nix-serve/blob/8501f2e44e7963eb1fb20146a055cfe7242a2ac4/nix-serve.psgi#L38-L40">the original <code>nix-serve</code> does</a> that is the easiest thing to fix.</p><p><code>eris</code> and <code>harmonia</code> also fix this, so this optimization is not unique to our rewrite.</p></li><li><p>We bind directly to the Nix C++ API for fetching NARs</p><p><code>nix-serve</code>, <code>eris</code>, and <code>harmonia</code>all shell out to a subprocess to fetch NARs, by invoking either <code>nix dump-path</code> or <code>nix-store --dump</code> to do the heavy lifting. In contrast, <code>nix-serve-ng</code> binds to the Nix C++ API for this purpose.</p><p>This would definitely explain some of the performance difference when fetching NARs. Creating a subprocess has a fixed overhead regardless of the size of the NAR, which explains why we see the largest performance difference when fetching tiny NARs since the overhead of creating a subprocess would dominate the response time.</p><p>This may also affect throughput for serving large NAR files, too, by adding unnecessary memory copies/buffering as part of streaming the subprocess output.</p></li><li><p>We minimize memory copies when fetching NARs</p><p>We go to great lengths to minimize the number of intermediate buffers and copies when streaming the contents of a NAR to a client. To do this, we exploit the fact that Haskell’s foreign function interface works in both directions: Haskell code can call C++ code but also C++ code can call Haskell code. This means that we can <a href="https://github.com/aristanetworks/nix-serve-ng/blob/ba2028f9d7fd2f93a04e1ca9677811f461fe6676/cbits/nix.cpp#L173-L185">create a Nix C++ streaming sink from a Haskell callback function</a> and this eliminates the need for intermediate buffers.</p><p>This likely also improves the throughput for serving NAR files. Only <code>nix-serve-ng</code> performs this optimization (since <code>nix-serve-ng</code> is the only one that uses the C++ API for streaming NAR contents).</p></li><li><p>Hand-write the API routing logic</p><p>We hand-write all of the API routing logic to prioritize and optimize the hot path (fetching NAR info).</p><p>For example, a really simple thing that the original <code>nix-serve</code> does inefficiently is to check if the path matches <code>/nix-cache-info</code> first, even though that is an extremely infrequently used path. In our API routing logic we move that check straight to the very end.</p><p>These optimizations likely improve the performance of NAR info requests. As far as I can tell, only <code>nix-serve-ng</code> performs these optimizations.</p></li></ul><p>I have not benchmarked the performance impact of each of these changes in isolation, though. These observations are purely based on my intuition.</p><h4 id="features">Features</h4><p><code>nix-serve-ng</code> is not all upsides. In particular, <code>nix-serve-ng</code> is missing features that some of the other rewrites provide, such as:</p><ul><li>Greater configurability</li><li>Improved authentication support</li><li>Monitoring/diagnostics/status APIs</li></ul><p>Our focus was entirely on scalability, so the primary reason to use <code>nix-serve-ng</code> is if you prioritize performance and uptime.</p><h4 id="conclusion">Conclusion</h4><p>We’ve been using <code>nix-serve-ng</code> long enough internally that we feel confident endorsing its use outside our company. We run a particularly large Nix deployment internally (which is why we needed this in the first place), so we have stress tested <code>nix-serve-ng</code> considerably under heavy and realistic usage patterns.</p><p>You can get started by following these <a href="https://github.com/aristanetworks/nix-serve-ng/blob/main/README.md#quick-start">these instructions</a> and let us know if you run into any issues or difficulties.</p><p>Also, I want to thank <a href="https://www.arista.com/en/">Arista Networks</a> for graciously sponsoring our team to work on and open source this project</p></div>
    </content>
    <updated>2022-09-07T15:56:33Z</updated>
    <published>2022-09-07T13:53:00Z</published>
    <author>
      <name>Gabriella Gonzalez</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/01917800488530923694</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-1777990983847811806</id>
      <author>
        <name>Gabriella Gonzalez</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/01917800488530923694</uri>
      </author>
      <link href="https://www.haskellforall.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default" rel="self" type="application/atom+xml"/>
      <link href="https://www.haskellforall.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Haskell for all</title>
      <updated>2022-09-14T10:40:09Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6757805.post-8163870137030553372</id>
    <link href="http://kenta.blogspot.com/feeds/8163870137030553372/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=6757805&amp;postID=8163870137030553372&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/>
    <link href="http://www.blogger.com/feeds/6757805/posts/default/8163870137030553372" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/6757805/posts/default/8163870137030553372" rel="self" type="application/atom+xml"/>
    <link href="http://kenta.blogspot.com/2022/09/aybvgyej-prime-binary-truncations.html" rel="alternate" title="[aybvgyej] prime binary truncations" type="text/html"/>
    <title>[aybvgyej] prime binary truncations</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>consider a number N.  if N is odd, test whether N is prime.  if N is even, test whether N+1 is prime.  set N := floor(N/2) and repeat primality testing until N=0.  of all the bitwise right shifts, how may are prime?</p>  <p>for example, start at N := 1580011307924772.  N+1 is prime (1)<br/>  N := floor(N/2) = 790005653962386.  N+1 is prime (2)<br/>  N := floor(N/2) = 395002826981193.<br/>  N := floor(N/2) = 197501413490596.  N+1 is prime (3)<br/>  N := floor(N/2) = 98750706745298.<br/>  N := floor(N/2) = 49375353372649.<br/>  N := floor(N/2) = 24687676686324.<br/>  N := floor(N/2) = 12343838343162.<br/>  N := floor(N/2) = 6171919171581.<br/>  N := floor(N/2) = 3085959585790.  N+1 is prime (4)<br/>  N := floor(N/2) = 1542979792895.<br/>  N := floor(N/2) = 771489896447.  N is prime (5)<br/>  N := floor(N/2) = 385744948223.  N is prime (6)<br/>  N := floor(N/2) = 192872474111.  N is prime (7)<br/>  N := floor(N/2) = 96436237055.<br/>  N := floor(N/2) = 48218118527.  N is prime (8)<br/>  N := floor(N/2) = 24109059263.  N is prime (9)<br/>  N := floor(N/2) = 12054529631.<br/>  N := floor(N/2) = 6027264815.<br/>  N := floor(N/2) = 3013632407.  N is prime (10)<br/>  N := floor(N/2) = 1506816203.  N is prime (11)<br/>  N := floor(N/2) = 753408101.  N is prime (12)<br/>  N := floor(N/2) = 376704050.<br/>  N := floor(N/2) = 188352025.<br/>  N := floor(N/2) = 94176012.  N+1 is prime (13)<br/>  N := floor(N/2) = 47088006.  N+1 is prime (14)<br/>  N := floor(N/2) = 23544003.<br/>  N := floor(N/2) = 11772001.<br/>  N := floor(N/2) = 5886000.<br/>  N := floor(N/2) = 2943000.  N+1 is prime (15)<br/>  N := floor(N/2) = 1471500.  N+1 is prime (16)<br/>  N := floor(N/2) = 735750.  N+1 is prime (17)<br/>  N := floor(N/2) = 367875.<br/>  N := floor(N/2) = 183937.<br/>  N := floor(N/2) = 91968.  N+1 is prime (18)<br/>  N := floor(N/2) = 45984.<br/>  N := floor(N/2) = 22992.  N+1 is prime (19)<br/>  N := floor(N/2) = 11496.  N+1 is prime (20)<br/>  N := floor(N/2) = 5748.  N+1 is prime (21)<br/>  N := floor(N/2) = 2874.<br/>  N := floor(N/2) = 1437.<br/>  N := floor(N/2) = 718.  N+1 is prime (22)<br/>  N := floor(N/2) = 359.  N is prime (23)<br/>  N := floor(N/2) = 179.  N is prime (24)<br/>  N := floor(N/2) = 89.  N is prime (25)<br/>  N := floor(N/2) = 44.<br/>  N := floor(N/2) = 22.  N+1 is prime (26)<br/>  N := floor(N/2) = 11.  N is prime (27)<br/>  N := floor(N/2) = 5.  N is prime (28)<br/>  N := floor(N/2) = 2.  N+1 is prime (29)<br/>  N := floor(N/2) = 1.<br/>  N := floor(N/2) = 0.</p>  <p>thus, the number produces 29 primes, which is the most (a record) among numbers up to that starting N.</p><p>when examining N=1, we've arbitrarily chosen not to count N+1 = 2 being prime.</p>  <p>previously, <a href="http://kenta.blogspot.com/2022/07/wohoromh-factoring-binary-square-root.html">factoring truncations of irrational numbers in binary</a>.</p> <p>the Pari/GP code below is brute force for pedagogical purposes:</p>  <p>countp(p)=my(numprimes=0); my(bitwidth=0); while(p&gt;0, if(p%2, if(isprime(p), numprimes+=1); p=(p-1)/2, if(isprime(p+1), numprimes+=1); p/=2); bitwidth+=1); [numprimes, bitwidth]</p>  <p>best=0; for(n=0,+oo, a=countp(n); if(a[1]&gt;best, best=a[1]; printbinary(n); print(" ",n," ",a," ",n+1)))</p> <p>here are starting N which set records of producing increasing number of primes.  we give the number in binary (using period to signify zero) (illustrating rich veins of primes which work for a while, peter out, and later revive), in decimal, the number of primes, starting bitwidth, and N+1 (which I think is always prime).</p>    <p><code>1. 2 [1, 2] 3
<br/>1.. 4 [2, 3] 5
<br/>1.1. 10 [3, 4] 11
<br/>1.11. 22 [4, 5] 23
<br/>1.111. 46 [5, 6] 47
<br/>1.1..11. 166 [6, 8] 167
<br/>1.11..11. 358 [7, 9] 359
<br/>1.11..111. 718 [8, 10] 719
<br/>1.11..1111. 1438 [9, 11] 1439
<br/>1.11..11111. 2878 [10, 12] 2879
<br/>1.11..1111111. 11518 [11, 14] 11519
<br/>1.11..11111111. 23038 [12, 15] 23039
<br/>1.11..11111111... 92152 [13, 17] 92153
<br/>1.11..11111111..... 368608 [14, 19] 368609
<br/>1.111111.1....1111.. 783420 [15, 20] 783421
<br/>1.111111.1....1111..... 6267360 [16, 23] 6267361
<br/>1.111111.1....1111...... 12534720 [17, 24] 12534721
<br/>1.111111.1.....111.1111111. 100273918 [18, 27] 100273919
<br/>1.11..11111111111111.1..11... 377487000 [19, 29] 377487001
<br/>1.11..11111111111111.1..11.... 754974000 [20, 30] 754974001
<br/>1.11..11111111111111.1..11...... 3019896000 [21, 32] 3019896001
<br/>1.11..11111.1..11111...1.11.1111... 24147626872 [22, 35] 24147626873
<br/>1.11..11111.1..11111...1.11.1111...1. 96590507490 [23, 37] 96590507491
<br/>1.11..111.1......11....11..1.111111111. 385744948222 [24, 39] 385744948223
<br/>1.11..111.1......11....11..1.1111111111. 771489896446 [25, 40] 771489896447
<br/>1.11..111.1......11....11..1.111111111111. 3085959585790 [26, 42] 3085959585791
<br/>1.11..111.1......11....11..1.1111111111111... 24687676686328 [27, 45] 24687676686329
<br/>1.111111.1....11111....111..11..1.11..11..11111. 210298272002878 [28, 48] 210298272002879
<br/>1.11..111.1......11....11..1.111111111111.1..1..1.. 1580011307924772 [29, 51] 1580011307924773
<br/>1.11..111.1......11....11..1.1111111111111...1.1.1111. 12640090463400286 [30, 54] 12640090463400287
<br/>1.111111.1....1111.......1111..11.1.1.11.11111..1..111. 26918107252899406 [31, 55] 26918107252899407
  </code></p>  <p>what is the asymptotic growth rate of the records?  it appears worse than O(2^n).</p>  <p>the later entries were calculated with a <a href="http://web.mit.edu/kenta/www/three/prime-binary-shr/aybvgyej/">Haskell program doing branch-and-bound</a>, which is much more efficient than brute force.  below is the key routine.  searching all binary numbers of a given bitwidth is equivalent to traversing a full binary tree of a given height.  because we are looking for records, we know what previous record we need to exceed.  when exploring a node in the middle of the tree, we know how many primes (or primes minus 1) we already have in the path back to the root.  the upper bound of the number of primes left, down to the leaf, is the height above the leaves.  these can be combined to yield an upper bound for the number of primes on this branch of the tree.  if the upper bound is less than the goal, we can prune, abandoning this branch (mzero).</p>  <p>binary numbers are represented as little-endian lists of Bool.  searching the False branch first searches smaller numbers first.  (future work: it's probably better to store the "path so far" as a bitstring.)</p>  <p>dosearch :: forall m . (MonadPlus m) =&gt; Integer -&gt; ([Bool], Integer) -&gt; Integer -&gt; m[Bool];<br/>  dosearch goal (_, primessofar) numleft | primessofar+numleft &lt; goal = Monad.mzero;<br/>  dosearch _ (pathsofar, _) 0 = return pathsofar;<br/>  dosearch goal (pathsofar, primessofar) numleft = let {<br/>    nextodd :: [Bool] = True:pathsofar;<br/>    nextprimesofar :: Integer = if isPrime $ binarytointeger nextodd<br/>     then 1+primessofar<br/>     else primessofar;<br/>    nextsearch :: [Bool] -&gt; m [Bool];<br/>    nextsearch path = dosearch goal (path, nextprimesofar) (pred numleft);<br/>  } in nextsearch (False:pathsofar) `Monad.mplus` nextsearch nextodd;</p>  <p><a href="http://kenta.blogspot.com/2022/07/pcljyxvx-infix-notation-decreases.html">(the infix application of mplus eliminates some parentheses.)</a></p>  <p>future work: parallelize, faster primality testing.</p>  <p>below is a list that includes numbers that tie (not necessarily exceed) the record number of primes.  these were found by brute force, so the list does not go as far as above.  the last number produces 21 primes.  no longer are all starting numbers prime or one less than a prime.</p>  <p>0 1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 20 21 22 23 36 37 40 41 42 43 44 45 46 47 72 73 82 83 88 89 92 93 94 95 106 107 144 145 146 147 148 149 150 151 156 157 162 163 164 165 166 167 178 179 190 191 292 293 312 313 330 331 332 333 334 335 346 347 352 353 356 357 358 359 382 383 586 587 660 661 716 717 718 719 1320 1321 1432 1433 1436 1437 1438 1439 2876 2877 2878 2879 5756 5757 5758 5759 6120 6121 11278 11279 11496 11497 11512 11513 11514 11515 11516 11517 11518 11519 12240 12241 22992 22993 23026 23027 23028 23029 23036 23037 23038 23039 24480 24481 46072 46073 46076 46077 46078 46079 48960 48961 48962 48963 84718 84719 90238 90239 91968 91969 92040 92041 92106 92107 92110 92111 92118 92119 92144 92145 92146 92147 92152 92153 97926 97927 184080 184081 184290 184291 184304 184305 184306 184307 184308 184309 195852 195853 195854 195855 195862 195863 360946 360947 360952 360953 360958 360959 367878 367879 368160 368161 368162 368163 368398 368399 368442 368443 368446 368447 368578 368579 368580 368581 368582 368583 368608 368609 391710 391711 737158 737159 737216 737217 737218 737219 783412 783413 783420 783421 1474432 1474433 1474438 1474439 1566826 1566827 1566840 1566841 1566842 1566843 1566846 1566847 2943000 2943001 2948712 2948713 2948864 2948865 2948866 2948867 2948872 2948873 2948876 2948877 2948878 2948879 2949118 2949119 3133642 3133643 3133652 3133653 3133654 3133655 3133680 3133681 3133682 3133683 3133684 3133685 3133686 3133687 3133692 3133693 3133694 3133695 3136512 3136513 4864080 4864081 5775126 5775127 5775148 5775149 5775270 5775271 5775336 5775337 5886000 5886001 5886002 5886003 5886006 5886007 5890582 5890583 5890606 5890607 5895118 5895119 5895166 5895167 5895366 5895367 5895418 5895419 5897250 5897251 5897266 5897267 5897278 5897279 5897424 5897425 5897426 5897427 5897728 5897729 5897730 5897731 5897732 5897733 5897734 5897735 5897744 5897745 5897746 5897747 5897752 5897753 5897754 5897755 5897756 5897757 5897758 5897759 5897760 5897761 5897766 5897767 5897806 5897807 5897818 5897819 5897832 5897833 5897952 5897953 5898236 5898237 5898238 5898239 6237598 6237599 6259972 6259973 6266926 6266927 6267060 6267061 6267070 6267071 6267076 6267077 6267082 6267083 6267284 6267285 6267286 6267287 6267298 6267299 6267304 6267305 6267306 6267307 6267308 6267309 6267310 6267311 6267346 6267347 6267360 6267361 6267366 6267367 6267388 6267389 11550298 11550299 11550540 11550541 11781166 11781167 11795460 11795461 11795470 11795471 11795518 11795519 12534142 12534143 12534568 12534569 12534616 12534617 12534618 12534619 12534720 12534721 12534778 12534779 25068286 25068287 25069138 25069139 25069440 25069441 25069442 25069443 25069468 25069469 25069556 25069557 25069558 25069559 34214398 34214399 47124666 47124667 47124862 47124863 47161342 47161343 47178132 47178133 47178238 47178239 47181960 47181961 50136572 50136573 50136574 50136575 50136660 50136661 50136958 50136959 50138276 50138277 50138278 50138279 50138470 50138471 50138478 50138479 50138880 50138881 50138882 50138883 50138884 50138885 50138886 50138887 50138926 50138927 50138936 50138937 50138938 50138939 50139112 50139113 50139114 50139115 50139116 50139117 50139118 50139119 68428792 68428793 68428796 68428797 68428798 68428799 92402388 92402389 92404198 92404199 92404342 92404343 94176000 94176001 94176012 94176013 94176028 94176029 94176772 94176773 94176778 94176779 94249332 94249333 94249334 94249335 94249338 94249339 94249720 94249721 94249722 94249723 94249724 94249725 94249726 94249727 94321342 94321343 94322684 94322685 94322686 94322687 94325866 94325867 94326666 94326667 94326718 94326719 94356022 94356023 94356264 94356265 94356266 94356267 94356476 94356477 94356478 94356479 94356570 94356571 94358800 94358801 94358808 94358809 94358826 94358827 94363656 94363657 94363680 94363681 94363692 94363693 94363728 94363729 94363768 94363769 94363920 94363921 94363922 94363923 94364026 94364027 94365888 94365889 94365892 94365893 94371750 94371751 100273056 100273057 100273138 100273139 100273140 100273141 100273144 100273145 100273146 100273147 100273148 100273149 100273150 100273151 100273152 100273153 100273320 100273321 100273322 100273323 100273912 100273913 100273916 100273917 100273918 100273919 100277766 100277767 100277872 100277873 188353558 188353559 188727312 188727313 188727456 188727457 188731786 188731787 188743500 188743501 200546302 200546303 200546640 200546641 200547836 200547837 200547838 200547839 200553106 200553107 200553108 200553109 200555520 200555521 200555526 200555527 200555532 200555533 200555534 200555535 200555542 200555543 200555566 200555567 200555700 200555701 200555712 200555713 200555744 200555745 200555746 200555747 200555752 200555753 273715192 273715193 342841318 342841319 369616798 369616799 369617340 369617341 369621540 369621541 376704000 376704001 376704006 376704007 376707116 376707117 376707118 376707119 376707480 376707481 376997280 376997281 376997338 376997339 376997352 376997353 376998406 376998407 376998888 376998889 376998898 376998899 376998900 376998901 377289658 377289659 377303040 377303041 377303470 377303471 377303532 377303533 377306668 377306669 377425056 377425057 377425912 377425913 377426280 377426281 377454624 377454625 377454626 377454627 377454628 377454629 377454768 377454769 377454912 377454913 377454914 377454915 377454996 377454997 377455692 377455693 377456110 377456111 377463552 377463553 377463570 377463571 377463572 377463573 377463574 377463575 377487000 377487001 401111040 401111041 401111068 401111069 401111400 401111401 401111506 401111507 753408000 753408001 754613338 754613339 754850112 754850113 754851826 754851827 754852560 754852561 754909828 754909829 754927140 754927141 754974000 754974001 1509948000 1509948001 1509948002 1509948003 1604444220 1604444221 1604446026 1604446027 3013632406 3013632407 3018453358 3018453359 3019410240 3019410241 3019708566 3019708567 3019896000 3019896001 6036906718 6036906719 6039792000 6039792001 6039792002 6039792003 6039792006 6039792007 6417777072 6417777073 6417807238 6417807239 12073713072 12073713073 12073813436 12073813437 12073813438 12073813439 12077629236 12077629237 12078563326 12078563327 12078595558 12078595559 12078834268 12078834269 12079584000 12079584001 12079584002 12079584003 12079584004 12079584005 12079584006 12079584007 12079584012 12079584013 12079584014 12079584015 12079584016 12079584017 12079584028 12079584029 12079584046 12079584047 12079584052 12079584053 12834985258 12834985259 12835553760 12835553761 12835553770 12835553771 12835554144 12835554145 12835554146 12835554147 12835554232 12835554233 12835587846 12835587847 12835614476 12835614477 12835614478 12835614479</p></div>
    </content>
    <updated>2022-09-07T00:33:49Z</updated>
    <published>2022-09-07T00:33:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="cs"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="done"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="haskell"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6757805</id>
      <category term="cs"/>
      <category term="soc"/>
      <category term="plot"/>
      <category term="game"/>
      <category term="crypto"/>
      <category term="geom"/>
      <category term="sci"/>
      <category term="ui"/>
      <category term="wr"/>
      <category term="time"/>
      <category term="sex"/>
      <category term="speech"/>
      <category term="teach"/>
      <category term="haskell"/>
      <category term="edu"/>
      <category term="prod"/>
      <category term="transport"/>
      <category term="et"/>
      <category term="dance"/>
      <category term="ai"/>
      <category term="done"/>
      <category term="qi"/>
      <category term="answer"/>
      <category term="jour"/>
      <category term="food"/>
      <author>
        <name>Unknown</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://kenta.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/6757805/posts/default/-/haskell" rel="self" type="application/atom+xml"/>
      <link href="http://kenta.blogspot.com/search/label/haskell" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/6757805/posts/default/-/haskell/-/haskell?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>mostly on computers and mathematics</subtitle>
      <title>Ken's blog</title>
      <updated>2022-09-14T11:47:02Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:6311385722c9a236e63f5a71</id>
    <link href="https://mmhaskell.com/blog/2022/9/5/dijkstra-comparison-looking-at-the-library-function" rel="alternate" type="text/html"/>
    <title>Dijkstra Comparison: Looking at the Library Function</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In the last few articles I've gone through my approach for generalizing Dijkstra's algorithm in Haskell. The previous parts of this included:</p>
<ol>
<li><a href="https://www.mmhaskell.com/blog/2022/8/22/dijkstras-algorithm-in-haskell">Simple Form of Dijkstra's Algorithm</a></li>
<li><a href="https://www.mmhaskell.com/blog/2022/8/25/generalizing-dijkstras-algorithm">Generalizing with a Multi-Param Typeclass</a></li>
<li><a href="https://www.mmhaskell.com/blog/2022/8/29/dijkstra-with-type-families">Generalizing with a Type Family</a></li>
<li><a href="https://www.mmhaskell.com/blog/2022/9/1/dijkstra-in-a-2d-grid">A 2D Graph example</a></li>
</ol>
<p>But of course I wasn't the first person to think about coming up with a general form of Dijkstra's algorithm in Haskell. Today, we'll look at the API for a <a href="https://hackage.haskell.org/package/search-algorithms-0.3.2/docs/Algorithm-Search.html">library implementation</a> of this algorithm and compare it to the implementations I thought up.</p>
<h2 id="comparing-types">Comparing Types</h2>
<p>So let's look at the type signature for the library version of Dijkstra's algorithm.</p>
<pre><code class="lang-haskell">dijkstra ::
    (Foldable f, Num cost, Ord cost, Ord State)
  =&gt; (state -&gt; f state) -- Function to generate list of neighbors
  -&gt; (state -&gt; state -&gt; cost) -- Function for cost generation
  -&gt; (state -&gt; Bool) -- Destination predicate
  -&gt; state -- Initial state
  -&gt; Maybe (cost, [state]) -- Solution cost and path, Nothing if goal is unreachable</code></pre>
<p>We'd like to compare this against the implementations in this series, but it's also useful to think about the second version of this function from the library: <code>dijkstraAssoc</code>. This version combines the functions for generating neighbors and costs:</p>
<pre><code class="lang-haskell">dijkstraAssoc ::
    (Num cost, Ord cost, Ord state)
  =&gt; (state -&gt; [(state, cost)])
  -&gt; (state -&gt; Bool)
  -&gt; state
  -&gt; Maybe (cost, [state])</code></pre>
<p>And now here's the signature for the Multi-Param typeclass version I wrote:</p>
<pre><code class="lang-haskell">findShortestDistance ::
    (Hashable node, Eq node, Num cost, Ord cost, DijkstraGraph graph)
  =&gt; graph -&gt; node -&gt; node -&gt; Distance cost</code></pre>
<p>We can start the comparison by pointing out a few surface-level differences.. </p>
<p>First, the library uses <code>Nothing</code> to represent a failure to reach the destination, instead of a <code>Distance</code> type with <code>Infinity</code>. This is a sensible choice to spare API users from incorporating an internal type into their own code. However, it does make some of the internal code more cumbersome.</p>
<p>Second, the library function also includes the full path in its result which is, of course, very helpful most of the time. The implementation details for this aren't too complicated, but it requires tracking an extra structure, so I have omitted it so far in this series.</p>
<p>Third, the library function takes a predicate for its goal, instead of relying on an equality. This helps a lot with situations where you might have many potential destinations.</p>
<h2 id="functional-vs-object-oriented-design">Functional vs. Object Oriented Design</h2>
<p>But the main structural difference between our functions is, of course, the complete lack of a "graph" type in the library implementation! Our version provides the graph object and adds a typeclass constraint so that we can get the neighboring edges. The library version just includes this function as a separate argument to the main function.</p>
<p>Without meaning to, I created an implementation that is more "object oriented". That is, it is oriented around the "object" of the graph. The library implementation is more "functional" in that it relies on passing important information as higher order functions, rather than associating the function specifically with the graph object.</p>
<p>Clearly the library implementation is more in keeping with Haskell's functional nature. Perhaps my mind gravitated towards an object oriented approach because my day job involves C++ and Python.</p>
<p>But the advantages of the functional approach are clear. It's much easier to generalize an algorithm in terms of functions, rather than with objects. By removing the object from the equation entirely, it's one less item that needs to have a parameterized (or templated) type in our final solution.</p>
<p>However, this only works well when functions are first class items that we can pass as input parameters. Languages like C++ and Java have been moving in the direction of making this easier, but the syntax is not nearly as clean as Haskell's.</p>
<p>Partial function application also makes this a lot easier. If we have a function that <em>is</em> written in terms of our graph type, we can still use this with the library function (see the examples below!). It is most convenient if the graph is our <em>first</em> argument, and then we can partially apply the function and get the right input for, say, <code>dijkstraAssoc</code>.</p>
<h2 id="applying-the-library-function">Applying The Library Function</h2>
<p>To close this article, let's see these library functions in action with our two basic examples. Recall our original graph type:</p>
<pre><code class="lang-haskell">import Data.HashMap.Strict (HashMap)
import qualified Data.HashMap.Strict as HM

data Distance a = Dist a | Infinity
  deriving (Show, Eq)

newtype Graph = Graph
   { edges :: HashMap String [(String, Int)] }

graph1 :: Graph
graph1 = Graph $ HM.fromList
  [ ("A", [("D", 100), ("B", 1), ("C", 20)])
  , ("B", [("D", 50)])
  , ("C", [("D", 20)])
  , ("D", [])
  ]</code></pre>
<p>To fill in our <code>findShortestDistance</code> function, we can easily use <code>dijkstraAssoc</code>, using the <code>edges</code> field of our object to supply the <code>assoc</code> function.</p>
<pre><code class="lang-haskell">import Algorithm.Search (dijkstraAssoc)
import Data.Maybe (fromMaybe)

findShortestDistance :: Graph -&gt; String -&gt; String -&gt; Distance Int
findShortestDistance graph start end = case answer of
  Just (dist, path) -&gt; Dist dist
  Nothing -&gt; Infinity
  where
    costFunction node = fromMaybe [] (HM.lookup node (edges graph))
    answer = dijkstraAssoc costFunction (== end) start

...

&gt;&gt; findShortestDistance graph1 "A" "D"
Distance 40</code></pre>
<p>But of course, we can also just skip our in-between function and use the full output of the library function. This is a little more cumbersome in our case, but it still works.</p>
<pre><code class="lang-haskell">&gt;&gt; let costFunction node = fromMaybe [] (HM.lookup node (edges graph1))
&gt;&gt; dikjstraAssoc costFunction (== "D") "A"
Just (40, ["C", "D"]</code></pre>
<p>Notice that the library function <em>omits</em> the initial state when providing the final path.</p>
<h2 id="graph-2d-example">Graph 2D Example</h2>
<p>Now let's apply it to our 2D graph example as well. This time it's easier to use the original <code>dijkstra</code> function, rather than the version with "assoc" pairs.</p>
<pre><code class="lang-haskell">import qualified Data.Array as A

newtype Graph2D = Graph2D (A.Array (Int, Int) Int)

getNeighbors :: A.Array (Int, Int) Int -&gt; (Int, Int) -&gt; [(Int, Int)]
getNeighbors input (row, col) = catMaybes [maybeUp, maybeDown, maybeLeft, maybeRight]
  where
    (maxRow, maxCol) = snd . A.bounds $ input
    maybeUp = if row &gt; 0 then Just (row - 1, col) else Nothing
    maybeDown = if row &lt; maxRow then Just (row + 1, col) else Nothing
    maybeLeft = if col &gt; 0 then Just (row, col - 1) else Nothing
    maybeRight = if col &lt; maxCol then Just (row, col + 1) else Nothing

graph2d :: Graph2D
graph2d = Graph2D $ A.listArray ((0, 0), (4, 4))
  [ 0, 2, 1, 3, 2
  , 1, 1, 8, 1, 4
  , 1, 8, 8, 8, 1
  , 1, 9, 9, 9, 1
  , 1, 4, 1, 9, 1
  ]

findShortestPath2D :: Graph2D -&gt; (Int, Int) -&gt; (Int, Int) -&gt; Maybe (Int, [(Int, Int)])
findShortestPath2D (Graph2D graph) start end = dijkstra
  (getNeighbors graph)
  (\_ b -&gt; graph A.! b)
  (== end)
  start

...

&gt;&gt; findShortestDistance2D graph2d (0, 0) (4, 4)
Just (14, [(0, 1), (0, 2), (0, 3), (1, 3), (1, 4), (2, 4), (3, 4), (4, 4)]</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>Next time we'll have one more example that is specifically about Dijkstra's algorithm. We'll consider the "monadic" versions of these functions and why someone would want to use them. After that, we'll consider more generally how we can use monadic functions in our code.</p>
<p>If you enjoyed this article, make sure to <a href="https://www.mmhaskell.com/subscribe">subscribe</a> to our mailing list! This will keep you up to date on all the latest news about the site, as well as giving you access to our <a href="https://www.mmhaskell.com/resources">subscriber resources</a> that will help you on your Haskell journey!</p>
<h2 id="appendix-full-code">Appendix - Full Code</h2>
<p>You can also see the complete code <a href="https://github.com/MondayMorningHaskell/HaskellDijkstra/blob/bd69bf5e52216af7cf526aed47b59ad9653209eb/src/DijkstraLib.hs">on GitHub</a>!</p>
<pre><code class="lang-haskell">module DijkstraLib where

import qualified Data.Array as A
import Data.HashMap.Strict (HashMap)
import qualified Data.HashMap.Strict as HM
import Data.Maybe (catMaybes, fromMaybe)
import Algorithm.Search (dijkstra, dijkstraAssoc)

data Distance a = Dist a | Infinity
  deriving (Show)

newtype Graph = Graph
   { edges :: HashMap String [(String, Int)] }

graph1 :: Graph
graph1 = Graph $ HM.fromList
  [ ("A", [("D", 100), ("B", 1), ("C", 20)])
  , ("B", [("D", 50)])
  , ("C", [("D", 20)])
  , ("D", [])
  ]

findShortestDistance :: Graph -&gt; String -&gt; String -&gt; Distance Int
findShortestDistance graph start end = case answer of
  Just (dist, path) -&gt; Dist dist
  Nothing -&gt; Infinity
  where
    costFunction node = fromMaybe [] (HM.lookup node (edges graph))
    answer = dijkstraAssoc costFunction (== end) start

newtype Graph2D = Graph2D (A.Array (Int, Int) Int)

getNeighbors :: A.Array (Int, Int) Int -&gt; (Int, Int) -&gt; [(Int, Int)]
getNeighbors input (row, col) = catMaybes [maybeUp, maybeDown, maybeLeft, maybeRight]
  where
    (maxRow, maxCol) = snd . A.bounds $ input
    maybeUp = if row &gt; 0 then Just (row - 1, col) else Nothing
    maybeDown = if row &lt; maxRow then Just (row + 1, col) else Nothing
    maybeLeft = if col &gt; 0 then Just (row, col - 1) else Nothing
    maybeRight = if col &lt; maxCol then Just (row, col + 1) else Nothing

graph2d :: Graph2D
graph2d = Graph2D $ A.listArray ((0, 0), (4, 4))
  [ 0, 2, 1, 3, 2
  , 1, 1, 8, 1, 4
  , 1, 8, 8, 8, 1
  , 1, 9, 9, 9, 1
  , 1, 4, 1, 9, 1
  ]

findShortestPath2D :: Graph2D -&gt; (Int, Int) -&gt; (Int, Int) -&gt; Maybe (Int, [(Int, Int)])
findShortestPath2D (Graph2D graph) start end = dijkstra
  (getNeighbors graph)
  (\_ b -&gt; graph A.! b)
  (== end)
  start</code></pre></div>
    </summary>
    <updated>2022-09-05T14:30:00Z</updated>
    <published>2022-09-05T14:30:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html"/>
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml"/>
      <title>Blog - Monday Morning Haskell</title>
      <updated>2022-09-10T05:01:07Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/792-More_recursive_definitions</id>
    <link href="http://www.joachim-breitner.de/blog/792-More_recursive_definitions" rel="alternate" type="text/html"/>
    <title xml:lang="en">More recursive definitions</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Haskell is a pure and lazy programming language, and the laziness allows us to write some algorithms very elegantly, by recursively referring to already calculated values. A typical example is the following definition of the Fibonacci numbers, as an infinite stream:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1">fibs <span class="ot">=</span> <span class="dv">0</span> <span class="op">:</span> <span class="dv">1</span> <span class="op">:</span> <span class="fu">zipWith</span> (<span class="op">+</span>) fibs (<span class="fu">tail</span> fibs)</a></span></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1">
<h3 id="elegant-graph-traversals">Elegant graph traversals</h3>
<p>A maybe more practical example is the following calculation of the transitive closure of a graph:</p>
</a><div class="sourceCode" id="cb2"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1"><code class="sourceCode haskell"><span id="cb2-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-1" tabindex="-1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Set</span> <span class="kw">as</span> <span class="dt">S</span>
<span id="cb2-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">M</span>
<span id="cb2-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-3" tabindex="-1">
<span id="cb2-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-4" tabindex="-1"><span class="kw">type</span> <span class="dt">Graph</span> <span class="ot">=</span> <span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">Int</span>]
<span id="cb2-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-5" tabindex="-1">
<span id="cb2-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-6" tabindex="-1"><span class="ot">transitive1 ::</span> <span class="dt">Graph</span> <span class="ot">-&gt;</span> <span class="dt">Graph</span>
<span id="cb2-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-7" tabindex="-1">transitive1 g <span class="ot">=</span> M.map S.toList sets
<span id="cb2-8"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-8" tabindex="-1">  <span class="kw">where</span>
<span id="cb2-9"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-9" tabindex="-1"><span class="ot">    sets ::</span> <span class="dt">M.Map</span> <span class="dt">Int</span> (<span class="dt">S.Set</span> <span class="dt">Int</span>)
<span id="cb2-10"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-10" tabindex="-1">    sets <span class="ot">=</span> M.mapWithKey (\v vs <span class="ot">-&gt;</span> S.insert v (S.unions [ sets <span class="op">M.!</span> v' <span class="op">|</span> v' <span class="ot">&lt;-</span> vs ])) g</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-10" tabindex="-1">
<p>We represent graphs as maps from vertex to their successors vertex, and define the resulting map <code>sets</code> recursively: The set of reachable vertices from a vertex <code>v</code> is <code>v</code> itself, plus those reachable by its successors <code>vs</code>, for which we query <code>sets</code>.</p>
<p>And, despite this apparent self-referential recursion, it works!</p>
</a><div class="sourceCode" id="cb3"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-10" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-10" tabindex="-1"><code class="sourceCode haskell"><span id="cb3-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-1" tabindex="-1">ghci<span class="op">&gt;</span> transitive1 <span class="op">$</span> M.fromList [(<span class="dv">1</span>,[<span class="dv">3</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">3</span>]),(<span class="dv">3</span>,[])]
<span id="cb3-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1">fromList [(<span class="dv">1</span>,[<span class="dv">1</span>,<span class="dv">3</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]),(<span class="dv">3</span>,[<span class="dv">3</span>])]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1">
<h3 id="cyclic-graphs-ruin-it-all">Cyclic graphs ruin it all</h3>
<p>These tricks can be very impressive … until someone tries to use it on a <em>cyclic</em> graph and the program just hangs until we abort it:</p>
</a><div class="sourceCode" id="cb4"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1"><code class="sourceCode haskell"><span id="cb4-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-1" tabindex="-1">ghci<span class="op">&gt;</span> transitive1 <span class="op">$</span> M.fromList [(<span class="dv">1</span>,[<span class="dv">2</span>,<span class="dv">3</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">3</span>]),(<span class="dv">3</span>,[])]
<span id="cb4-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">fromList [(<span class="dv">1</span>,fromList <span class="op">^</span><span class="dt">CInterrupted</span><span class="op">.</span></a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">
<p>At this point we are thrown back to implement a more pedestrian graph traversal, typically keeping explicit track of vertices that we have seen already:</p>
</a><div class="sourceCode" id="cb5"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1"><code class="sourceCode haskell"><span id="cb5-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-1" tabindex="-1"><span class="ot">transitive2 ::</span> <span class="dt">Graph</span> <span class="ot">-&gt;</span> <span class="dt">Graph</span>
<span id="cb5-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-2" tabindex="-1">transitive2 g <span class="ot">=</span> M.fromList [ (v, S.toList (go S.empty [v])) <span class="op">|</span> v <span class="ot">&lt;-</span> M.keys g ]
<span id="cb5-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-3" tabindex="-1">  <span class="kw">where</span>
<span id="cb5-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-4" tabindex="-1"><span class="ot">    go ::</span> <span class="dt">S.Set</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">S.Set</span> <span class="dt">Int</span>
<span id="cb5-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-5" tabindex="-1">    go seen [] <span class="ot">=</span> seen
<span id="cb5-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-6" tabindex="-1">    go seen (v<span class="op">:</span>vs) <span class="op">|</span> v <span class="ot">`S.member`</span> seen <span class="ot">=</span> go seen vs
<span id="cb5-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-7" tabindex="-1">    go seen (v<span class="op">:</span>vs) <span class="ot">=</span> go (S.insert v seen) (g <span class="op">M.!</span> v <span class="op">++</span> vs)</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-7" tabindex="-1">
<p>I have written that <code>seen</code>/<code>todo</code> recursion idiom so often in the past, I can almost write it blindly And indeed, this code handles cyclic graphs just fine:</p>
<pre><code>ghci&gt; transitive2 $ M.fromList [(1,[2,3]),(2,[1,3]),(3,[])]
fromList [(1,[1,2,3]),(2,[1,2,3]),(3,[3])]</code></pre>
<p>But this is a bit anticlimactic – Haskell is supposed to be a declarative language, and <code>transitive1</code> declares my intent just fine!</p>
<h3 id="we-can-have-it-all">We can have it all</h3>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-7" tabindex="-1">It seems there actually is a way to write essentially the code in <code>transitive1</code>, and still get the right result in all cases, and I have just published a possible implementation as </a><a href="https://hackage.haskell.org/package/rec-def"><code>rec-def</code></a>. In the module <a href="https://hackage.haskell.org/package/rec-def-0.1/docs/Data-Recursive-Set.html"><code>Data.Recursive.Set</code></a> we find an API that resembles that of <code>Set</code>, with a type <code>R (Set a)</code>, and in addition to conversion functions from and to sets, we find the two operations that we needed in <code>transitive1</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-1" tabindex="-1"><span class="ot">rInsert ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">R</span> (<span class="dt">Set</span> a) <span class="ot">-&gt;</span> <span class="dt">R</span> (<span class="dt">Set</span> a)</a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-1" tabindex="-1">
<span id="cb7-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-2" tabindex="-1"><span class="ot">rUnions ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [<span class="dt">R</span> (<span class="dt">Set</span> a)] <span class="ot">-&gt;</span> <span class="dt">R</span> (<span class="dt">Set</span> a)
<span id="cb7-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-3" tabindex="-1"><span class="ot">getR ::</span> <span class="dt">HasPropagator</span> a <span class="ot">=&gt;</span> <span class="dt">R</span> a <span class="ot">-&gt;</span> a</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-3" tabindex="-1">
<p>Let’s try that:</p>
</a><div class="sourceCode" id="cb8"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-3" tabindex="-1"/><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-3" tabindex="-1"><code class="sourceCode haskell"><span id="cb8-1"/></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-1" tabindex="-1"><span class="kw">import</span> <span class="dt">Data.Recursive.Set</span>
<span id="cb8-2"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-2" tabindex="-1">
<span id="cb8-3"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-3" tabindex="-1"><span class="ot">transitive2 ::</span> <span class="dt">Graph</span> <span class="ot">-&gt;</span> <span class="dt">Graph</span>
<span id="cb8-4"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-4" tabindex="-1">transitive2 g <span class="ot">=</span> M.map (S.toList <span class="op">.</span> getR) sets
<span id="cb8-5"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-5" tabindex="-1">  <span class="kw">where</span>
<span id="cb8-6"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-6" tabindex="-1"><span class="ot">    sets ::</span> <span class="dt">M.Map</span> <span class="dt">Int</span> (<span class="dt">R</span> (<span class="dt">S.Set</span> <span class="dt">Int</span>))
<span id="cb8-7"/></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-7" tabindex="-1">    sets <span class="ot">=</span> M.mapWithKey (\v vs <span class="ot">-&gt;</span> rInsert v (rUnions [ sets <span class="op">M.!</span> v' <span class="op">|</span> v' <span class="ot">&lt;-</span> vs ])) g</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-7" tabindex="-1">
<p>And indeed it works! Magic!</p>
<pre><code>ghci&gt; transitive2 $ M.fromList [(1,[3]),(2,[1,3]),(3,[])]
fromList [(1,[1,3]),(2,[1,2,3]),(3,[3])]
ghci&gt; transitive2 $ M.fromList [(1,[2,3]),(2,[1,3]),(3,[])]
fromList [(1,[1,2,3]),(2,[1,2,3]),(3,[3])]</code></pre>
<p>To show off some more, here are small examples:</p>
<pre><code>ghci&gt; let s = rInsert 42 s in getR s
fromList [42]
ghci&gt; :{
  let s1 = rInsert 23 s2
      s2 = rInsert 42 s1
  in getR s1
 :}
fromList [23,42]</code></pre>
<h3 id="how-is-that-possible-is-it-still-haskell">How is that possible? Is it still Haskell?</h3>
<p>The internal workings of the <code>R (Set a)</code> type will be the topic of a future blog post; let me just briefly mention that it uses unsafe features under the hood, and just keeps applying the equations you gave until a fixed-point is reached. Because it starts with the empty set and all operations provided by <code>Data.Recursive.Set</code> are monotonous (e.g. no <code>difference</code>) it will eventually find the least fixed point.</p>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-7" tabindex="-1">Despite the unsafe machinery under the hood, I claim that <code>Data.Recursive.Set</code> is itself nicely safe, and does not destroy Haskell’s nice properties like purity, referential transparency and equational reasoning. If you disagree, I’d like to hear about it (here, on </a><a href="https://mobile.twitter.com/nomeata/status/1566063939762458625">Twitter</a>, <a href="https://www.reddit.com/r/haskell/comments/x4v6x7/pure_recursively_defined_sets_without_looping/">Reddit</a> or <a href="https://discourse.haskell.org/t/solving-cyclic-boolean-implications-with-pure-code-and-laziness/4951/20?u=nomeata">Discourse</a>)! There is a brief discussion at the end of the <a href="https://hackage.haskell.org/package/rec-def-0.1/docs/Data-Recursive-Examples.html">tutorial in <code>Data.Recursive.Example</code></a>.</p>
<h3 id="more-than-sets">More than sets</h3>
<p>The library also provides <code>Data.Recursive.Bool</code> for recursive equations with booleans (preferring <code>False</code>) and <code>Data.Recursive.DualBool</code> (preferring <code>True</code>), and some operations like <code>rMember :: Ord a =&gt; a -&gt; R (Set a) -&gt; R Bool</code> can actually connect different types. I plan to add other data types (natural numbers, maps, <code>Maybe</code>, with suitable orders) as demand arises and as I come across nice small example use-cases for the documentation (e.g. finding shortest paths in a graph).</p>
<p>I believe this idiom is practically useful in a wide range of applications (which of course all have some underlying graph structure – but then almost everything in Computer Science is a graph). My original motivation was a program analysis. Imagine you want to find out from where in your program you can run into a division by zero. As long as your program does not have recursion, you can simply keep track of a boolean flag while you traverse the program, keeping track a mapping from function names to whether they can divide by zero – all nice and elegant. But once you allow mutually recursive functions, things become tricky. Unless you use <code>R (Bool)</code>! Simply use laziness, pass the analysis result down when analyzing the function’s right-hand sides, and it just works!</p></div>
    </summary>
    <updated>2022-09-03T12:31:51Z</updated>
    <published>2022-09-03T12:31:51Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html"/>
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml"/>
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2022-09-15T10:00:55Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://byorgey.wordpress.com/?p=2468</id>
    <link href="https://byorgey.wordpress.com/2022/09/01/competitive-programming-in-haskell-infinite-2d-array/" rel="alternate" type="text/html"/>
    <link href="https://byorgey.wordpress.com/2022/09/01/competitive-programming-in-haskell-infinite-2d-array/#comments" rel="replies" type="text/html"/>
    <link href="https://byorgey.wordpress.com/2022/09/01/competitive-programming-in-haskell-infinite-2d-array/feed/atom/" rel="replies" type="application/atom+xml"/>
    <title xml:lang="en">Competitive programming in Haskell: Infinite 2D array</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml">If you like number theory, combinatorics, and/or optimizing Haskell code, I challenge you to solve Infinite 2D Array using Haskell. Level 1: can you come up with a general formula to compute ? Level 2: In general, how can you … <a href="https://byorgey.wordpress.com/2022/09/01/competitive-programming-in-haskell-infinite-2d-array/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>If you like number theory, combinatorics, and/or optimizing Haskell code, I challenge you to solve <a href="https://open.kattis.com/problems/infinite2darray">Infinite 2D Array</a> using Haskell.</p>
<ul>
<li>Level 1: can you come up with a general formula to compute <img alt="F_{x,y}" class="latex" src="https://s0.wp.com/latex.php?latex=F_%7Bx%2Cy%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/>?</li>
<li>Level 2: In general, how can you efficiently compute <img alt="F_{x,y} \pmod {10^9 + 7}" class="latex" src="https://s0.wp.com/latex.php?latex=F_%7Bx%2Cy%7D+%5Cpmod+%7B10%5E9+%2B+7%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/>?</li>
<li>Level 3: Now implement the above ideas in Haskell so your solution actually fits within the 1 second time limit.</li>
</ul>
<p>I have solved it but it was definitely challenging. In a subsequent blog post Iâ€™ll talk about my solution and ask for other optimization ideas.</p></div>
    </content>
    <updated>2022-09-01T17:04:53Z</updated>
    <published>2022-09-01T17:04:53Z</published>
    <category scheme="https://byorgey.wordpress.com" term="competitive programming"/>
    <category scheme="https://byorgey.wordpress.com" term="haskell"/>
    <category scheme="https://byorgey.wordpress.com" term="Kattis"/>
    <category scheme="https://byorgey.wordpress.com" term="number"/>
    <author>
      <name>Brent</name>
      <uri>http://ozark.hendrix.edu/~yorgey/</uri>
    </author>
    <source>
      <id>http://byorgey.wordpress.com/feed/atom/</id>
      <link href="https://byorgey.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://byorgey.wordpress.com/feed/atom/" rel="self" type="application/atom+xml"/>
      <link href="https://byorgey.wordpress.com/osd.xml" rel="search" title="blog :: Brent -&gt; [String]" type="application/opensearchdescription+xml"/>
      <link href="https://s1.wp.com/opensearch.xml" rel="search" title="WordPress.com" type="application/opensearchdescription+xml"/>
      <link href="https://byorgey.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title xml:lang="en">blog :: Brent -&gt; [String]</title>
      <updated>2022-09-01T17:04:53Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:6304453656b6ba0679e2f72a</id>
    <link href="https://mmhaskell.com/blog/2022/9/1/dijkstra-in-a-2d-grid" rel="alternate" type="text/html"/>
    <title>Dijkstra in a 2D Grid</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>We've now spent the last few articles looking at implementations of Dijkstra's algorithm in Haskell, with an emphasis on how to generalize the algorithm so it works for different graph types. Here's a quick summary in case you'd like to revisit some of this code, (since this article depends on these implementations).</p>
<h3 id="simple-implementation">Simple Implementation</h3>
<p><a href="https://www.mmhaskell.com/blog/2022/8/22/dijkstras-algorithm-in-haskell">Article</a></p>
<p><a href="https://github.com/MondayMorningHaskell/HaskellDijkstra/blob/main/src/DijkstraSimple.hs">GitHub Code</a></p>
<h3 id="generalized-with-a-multi-param-typeclass">Generalized with a Multi-param Typeclass</h3>
<p><a href="https://www.mmhaskell.com/blog/2022/8/25/generalizing-dijkstras-algorithm">Article</a></p>
<p><a href="https://github.com/MondayMorningHaskell/HaskellDijkstra/blob/main/src/Dijkstra2.hs">GitHub Code</a></p>
<h3 id="generalized-with-a-type-family">Generalized with a Type Family</h3>
<p><a href="https://www.mmhaskell.com/blog/2022/8/29/dijkstra-with-type-families">Article</a></p>
<p><a href="https://github.com/MondayMorningHaskell/HaskellDijkstra/blob/main/src/Dijkstra3.hs">GitHub Code</a></p>
<h2 id="generalized-dijkstra-example">Generalized Dijkstra Example</h2>
<p>But now that we have a couple different examples of how we can generalize this algorithm, it's useful to actually see this generalization in action! Recall that our original implementation could only work with this narrowly defined <code>Graph</code> type:</p>
<pre><code class="lang-haskell">newtype Graph = Graph
   { edges :: HashMap String [(String, Int)] }</code></pre>
<p>We could add type parameters to make this <em>slightly</em> more general, but the structure remains the same.</p>
<pre><code class="lang-haskell">newtype Graph node cost = Graph
   { edges :: HashMap node [(node, cost)] }</code></pre>
<p>Suppose instead of this kind of explicit graph structure, we had a different kind of graph. Suppose we had a 2D grid of numbers to move through, and the "cost" of moving through each "node" was simply the value at that index in the grid. For example, we could have a grid like this:</p>
<pre><code class="lang-haskell">[ [0, 2, 1, 3, 2]
  , [1, 1, 8, 1, 4]
  , [1, 8, 8, 8, 1]
  , [1, 9, 9, 9, 1]
  , [1, 4, 1, 9, 1]
  ]</code></pre>
<p>The lowest cost path through this grid uses the following cells, for a total cost of 14:</p>
<pre><code class="lang-haskell">[ [0, 2, 1, 3, x]
  , [x, x, x, 1, 4]
  , [x, x, x, x, 1]
  , [x, x, x, x, 1]
  , [x, x, x, x, 1]
  ]</code></pre>
<p>We can make a "graph" type out of this grid in Haskell with a <code>newtype</code> wrapper over an <code>Array</code>. The index of our array will be a tuple of 2 integers, indicating row and column.</p>
<pre><code class="lang-haskell">import qualified Data.Array as A

newtype Graph2D = Graph2D (A.Array (Int, Int) Int)</code></pre>
<p>For simplicity, we'll assume that our array starts at <code>(0, 0)</code>.</p>
<h2 id="getting-the-edges">Getting the "Edges"</h2>
<p>Because we now have the notion of a <code>DijkstraGraph</code>, all we need to do for this type to make it eligible for our shortest path function is make an instance of the class. The tricky part of this is the function for <code>dijkstraEdges</code>.</p>
<p>We'll start with a more generic function to get the "neighbors" of a cell in a 2D grid. Most cells will have 4 neighbors. But cells along the edge will have 3, and those in the corner will only have 2. We start such a function by defining our type signature and the bounds of the array.</p>
<pre><code class="lang-haskell">getNeighbors :: A.Array (Int, Int) Int -&gt; (Int, Int) -&gt; [(Int, Int)]
getNieghbors input (row, col) = ...
  where
    (maxRow, maxCol) = snd . A.bounds $ input
    ...</code></pre>
<p>Now we calculate the <code>Maybe</code> for a cell in each direction. We compare against the possible bounds in that direction and return <code>Nothing</code> if it's out of bounds.</p>
<pre><code class="lang-haskell">getNeighbors :: A.Array (Int, Int) Int -&gt; (Int, Int) -&gt; [(Int, Int)]
getNeighbors input (row, col) = ...
  where
    (maxRow, maxCol) = snd . A.bounds $ input
    maybeUp = if row &gt; 0 then Just (row - 1, col) else Nothing
    maybeDown = if row &lt; maxRow then Just (row + 1, col) else Nothing
    maybeLeft = if col &gt; 0 then Just (row, col - 1) else Nothing
    maybeRight = if col &lt; maxCol then Just (row, col + 1) else Nothing</code></pre>
<p>And as a last step, we use <code>catMaybes</code> to get all the "valid" neighbors.</p>
<pre><code class="lang-haskell">getNeighbors :: A.Array (Int, Int) Int -&gt; (Int, Int) -&gt; [(Int, Int)]
getNeighbors input (row, col) = catMaybes [maybeUp, maybeDown, maybeLeft, maybeRight]
  where
    (maxRow, maxCol) = snd . A.bounds $ input
    maybeUp = if row &gt; 0 then Just (row - 1, col) else Nothing
    maybeDown = if row &lt; maxRow then Just (row + 1, col) else Nothing
    maybeLeft = if col &gt; 0 then Just (row, col - 1) else Nothing
    maybeRight = if col &lt; maxCol then Just (row, col + 1) else Nothing</code></pre>
<h2 id="writing-class-instances">Writing Class Instances</h2>
<p>With this function, it becomes very easy to fill in our class instances! Let's start with the Multi-param class. We have to start by specifying the <code>node</code> type, and the <code>cost</code> type. As usual, our cost is a simple <code>Int</code>. But the node in this case is the index of our array - a tuple.</p>
<pre><code class="lang-haskell">{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE FlexibleInstances #-}

instance DijkstraGraph Graph2D (Int, Int) Int where
  ...</code></pre>
<p>To complete the instance, we get our neighbors and combine them with the distance, which is calculated strictly from accessing the array at the index.</p>
<pre><code class="lang-haskell">instance DijkstraGraph Graph2D (Int, Int) Int where
  dijkstraEdges (Graph2D arr) cell = [(n, arr A.! n) | n &lt;- neighbors]
    where
      neighbors = getNeighbors arr cell</code></pre>
<p>Now we can find the shortest distance! As before though, we have to be more explicit with certain types, as inference doesn't seem to work as well with these multi-param typeclasses.</p>
<pre><code class="lang-haskell">dijkstraInput2D :: Graph2D
dijkstraInput2D = Graph2D $ A.listArray ((0, 0), (4, 4))
  [ 0, 2, 1, 3, 2
  , 1, 1, 8, 1, 4
  , 1, 8, 8, 8, 1
  , 1, 9, 9, 9, 1
  , 1, 4, 1, 9, 1
  ]

-- Dist 14
cost2 :: Distance Int
cost2 = findShortestDistance dijkstraInput2D (0 :: Int, 0 :: Int) (4, 4)</code></pre>
<h2 id="type-family-instance">Type Family Instance</h2>
<p>Filling in the type family version is essentially the same. All that's different is listing the node and cost types inside the definition instead of using separate parameters.</p>
<pre><code class="lang-haskell">{-# LANGUAGE TypeFamilies #-}

instance DijkstraGraph Graph2D where
  type DijkstraNode Graph2D = (Int, Int)
  type DijkstraCost Graph2D = Int
  dijkstraEdges (Graph2D arr) cell = [(n, arr A.! n) | n &lt;- neighbors]
    where
      neighbors = getNeighbors arr cell</code></pre>
<p>And calling our shortest path function works here as well, this time without needing extra type specifications.</p>
<pre><code class="lang-haskell">dijkstraInput2D :: Graph2D
dijkstraInput2D = Graph2D $ A.listArray ((0, 0), (4, 4))
  [ 0, 2, 1, 3, 2
  , 1, 1, 8, 1, 4
  , 1, 8, 8, 8, 1
  , 1, 9, 9, 9, 1
  , 1, 4, 1, 9, 1
  ]

-- Dist 14
cost3 :: Distance Int
cost3 = findShortestDistance dijkstraInput2D (0, 0) (4, 4)</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>Next time, we'll look at an even more complicated example for this problem. In the meantime, make sure you <a href="https://www.mmhaskell.com/subscribe">subscribe</a> to our mailing list so you can stay up to date with the latest news!</p>
<p>As usual, the full code is in the appendix below. Note though that it depends on code from our previous parts: <a href="https://github.com/MondayMorningHaskell/HaskellDijkstra/blob/main/src/Dijkstra2.hs">Dijkstra 2</a> (the Multi-param typeclass implementation) and <a href="https://github.com/MondayMorningHaskell/HaskellDijkstra/blob/main/src/Dijkstra3.hs">Dijkstra 3</a>, the version with a type family.</p>
<h2 id="appendix">Appendix</h2>
<p>You can also find this code <a href="https://github.com/MondayMorningHaskell/HaskellDijkstra/blob/main/src/Graph2D.hs">right here on GitHub</a>.</p>
<pre><code class="lang-haskell">{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE TypeFamilies #-}

module Graph2D where

import qualified Data.Array as A
import Data.Maybe (catMaybes)

import qualified Dijkstra2 as D2
import qualified Dijkstra3 as D3

newtype Graph2D = Graph2D (A.Array (Int, Int) Int)

instance D2.DijkstraGraph Graph2D (Int, Int) Int where
  dijkstraEdges (Graph2D arr) cell = [(n, arr A.! n) | n &lt;- neighbors]
    where
      neighbors = getNeighbors arr cell

instance D3.DijkstraGraph Graph2D where
  type DijkstraNode Graph2D = (Int, Int)
  type DijkstraCost Graph2D = Int
  dijkstraEdges (Graph2D arr) cell = [(n, arr A.! n) | n &lt;- neighbors]
    where
      neighbors = getNeighbors arr cell

getNeighbors :: A.Array (Int, Int) Int -&gt; (Int, Int) -&gt; [(Int, Int)]
getNeighbors input (row, col) = catMaybes [maybeUp, maybeDown, maybeLeft, maybeRight]
  where
    (maxRow, maxCol) = snd . A.bounds $ input
    maybeUp = if row &gt; 0 then Just (row - 1, col) else Nothing
    maybeDown = if row &lt; maxRow then Just (row + 1, col) else Nothing
    maybeLeft = if col &gt; 0 then Just (row, col - 1) else Nothing
    maybeRight = if col &lt; maxCol then Just (row, col + 1) else Nothing

dijkstraInput2D :: Graph2D
dijkstraInput2D = Graph2D $ A.listArray ((0, 0), (4, 4))
  [ 0, 2, 1, 3, 2
  , 1, 1, 8, 1, 4
  , 1, 8, 8, 8, 1
  , 1, 9, 9, 9, 1
  , 1, 4, 1, 9, 1
  ]

cost2 :: D2.Distance Int
cost2 = D2.findShortestDistance dijkstraInput2D (0 :: Int, 0 :: Int) (4, 4)

cost3 :: D3.Distance Int
cost3 = D3.findShortestDistance dijkstraInput2D (0, 0) (4, 4)</code></pre></div>
    </summary>
    <updated>2022-09-01T14:30:00Z</updated>
    <published>2022-09-01T14:30:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html"/>
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml"/>
      <title>Blog - Monday Morning Haskell</title>
      <updated>2022-09-10T05:01:07Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2022-09-01-unit-test-your-nix-code/</id>
    <link href="https://tweag.io/blog/2022-09-01-unit-test-your-nix-code/" rel="alternate" type="text/html"/>
    <title>Unit Test Your Nix Code</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>At Tweag, we write a lot of code using the <a href="https://nixos.org/manual/nix/stable/language/index.html">Nix language</a>. Most of that code produces derivations or packages but occasionally we write small helper functions that are algorithmic in nature. As diligent developers and when appropriate, we should write unit tests to ensure the correctness and maintainability of our code. This post will demonstrate and compare various ways available in the Nix ecosystem to add unit testing to your Nix code — specifically Nix functions.</p>
<h2 id="minimal-examples"><a class="anchor before" href="https://www.tweag.io/rss.xml#minimal-examples"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Minimal Examples</h2>
<p>We will start with minimal working examples from 3 different frameworks and then show off some extra features and capabilities. If you would like to test out these examples yourself, you can find them all <a href="https://github.com/tweag/nix-unit-testing">here</a>.</p>
<h3 id="nixpkgs-runtests"><a class="anchor before" href="https://www.tweag.io/rss.xml#nixpkgs-runtests"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Nixpkgs Runtests</h3>
<p>Below we have our <code class="language-text">math.nix</code> file; it returns an attribute set with a single function, <code class="language-text">isEven</code>. If we import this file with a statement like <code class="language-text">math = import ./math.nix {inherit lib;};</code>, we would have access to our function like so: <code class="language-text">math.isEven</code>.</p>
<div class="gatsby-highlight"><pre class="language-nix"><code class="language-nix"><span class="token comment"># math.nix</span>
<span class="token punctuation">{</span>lib<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token comment"># Returns true if integer is even.</span>
  isEven <span class="token operator">=</span> x<span class="token punctuation">:</span> lib<span class="token punctuation">.</span>mod x <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre></div>
<p>Below we have our <code class="language-text">test.nix</code> file which we will use to test our <code class="language-text">isEven</code> function. <code class="language-text">nixpkgs.lib.debug</code> has a useful function <a href="https://nixos.org/manual/nixpkgs/stable/#function-library-lib.debug.runTests"><code class="language-text">runTests</code></a>. It takes an attribute set of tests where a test is an attribute set with the attribute names <code class="language-text">expr</code> and <code class="language-text">expected</code>. <code class="language-text">expr</code> is the expression we want to test and <code class="language-text">expected</code> is, as its name suggests, the value we expect from our expression. <code class="language-text">runTests</code> will return an empty list if all the tests pass. Otherwise, the list will be populated with information telling you which test failed.</p>
<div class="gatsby-highlight"><pre class="language-nix"><code class="language-nix"><span class="token comment"># test.nix</span>
<span class="token punctuation">{</span> pkgs <span class="token operator">?</span> <span class="token function">import</span> <span class="token operator">&lt;</span>nixpkgs<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">:</span>
<span class="token keyword">let</span>
  <span class="token keyword">inherit</span> <span class="token punctuation">(</span>pkgs<span class="token punctuation">)</span> lib<span class="token punctuation">;</span>
  <span class="token keyword">inherit</span> <span class="token punctuation">(</span>lib<span class="token punctuation">)</span> runTests<span class="token punctuation">;</span>
  math <span class="token operator">=</span> <span class="token function">import</span> <span class="token url">./math.nix</span> <span class="token punctuation">{</span><span class="token keyword">inherit</span> lib<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  runTests <span class="token punctuation">{</span>
    testIsEven_1 <span class="token operator">=</span> <span class="token punctuation">{</span>
      expr <span class="token operator">=</span> math<span class="token punctuation">.</span>isEven <span class="token number">2</span><span class="token punctuation">;</span>
      expected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    testIsEven_2 <span class="token operator">=</span> <span class="token punctuation">{</span>
      expr <span class="token operator">=</span> math<span class="token punctuation">.</span>isEven <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      expected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre></div>
<p>I have purposefully left an error in our test. Let us evaluate the <code class="language-text">test.nix</code> file and examine the output; we can do so with the <code class="language-text">nix eval</code> command and it returns the following.</p>
<div class="gatsby-highlight"><pre class="language-shell"><code class="language-shell">$ nix <span class="token builtin class-name">eval</span> --impure --expr <span class="token string">'import ./test.nix {}'</span>
<span class="token punctuation">[</span> <span class="token punctuation">{</span> expected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> name <span class="token operator">=</span> <span class="token string">"testIsEven_2"</span><span class="token punctuation">;</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span></code></pre></div>
<p>You can see in the returned list, there is a single attribute set with the name of the test that failed, what it expected, and what the actual result was. After correcting the expected value for <code class="language-text">testIsEven_2</code>, if we evaluate our test again, we get <code class="language-text">[ ]</code>. Perfect!</p>
<h3 id="nixt"><a class="anchor before" href="https://www.tweag.io/rss.xml#nixt"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Nixt</h3>
<p><a href="https://github.com/nix-community/nixt">Nixt</a> is a CLI unit testing framework for the Nix language. The way Nixt creates tests is a bit different from <code class="language-text">runTests</code>; you create test suites with multiple test cases. Below is the code from a file called <code class="language-text">test.nixt</code>. Notice the file extension; Nixt has a <a href="https://github.com/nix-community/nixt#writing-tests">few special rules</a> for how test files should be named.</p>
<div class="gatsby-highlight"><pre class="language-nix"><code class="language-nix"><span class="token comment"># test.nixt</span>
<span class="token punctuation">{</span>
  pkgs <span class="token operator">?</span> <span class="token function">import</span> <span class="token operator">&lt;</span>nixpkgs<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  nixt<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token keyword">let</span>
  <span class="token keyword">inherit</span> <span class="token punctuation">(</span>pkgs<span class="token punctuation">)</span> lib<span class="token punctuation">;</span>
  math <span class="token operator">=</span> <span class="token function">import</span> <span class="token url">./math.nix</span> <span class="token punctuation">{</span><span class="token keyword">inherit</span> lib<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  nixt<span class="token punctuation">.</span>mkSuite <span class="token string">"check isEven"</span> <span class="token punctuation">{</span>
    <span class="token string">"even number"</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>isEven <span class="token number">2</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token string">"odd number"</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>isEven <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre></div>
<p>I have purposefully left the same error as before so we can see how Nixt reports errors in comparison to <code class="language-text">runTests</code>. We can run Nixt tests with the following command:</p>
<div class="gatsby-highlight"><pre class="language-shell"><code class="language-shell">$ nix run github:nix-community/nixt -- test.nixt

Found <span class="token number">2</span> cases <span class="token keyword">in</span> <span class="token number">1</span> suites over <span class="token number">1</span> files.

  ✗ <span class="token number">1</span> cases failed.

┏ /home/bakerdn/dev/nix-unit-testing/impure/test.nixt
┃   check isEven
┗     ✗ odd number</code></pre></div>
<p>Note that instead of a single test file <code class="language-text">test.nixt</code>, we could pass a directory path, and Nixt would evaluate all Nixt test files in that directory and its subdirectories.</p>
<p>Nixt provides an absolute path to the offending file along with the suite and case names. If we fix the test and run it again, we get the following:</p>
<div class="gatsby-highlight"><pre class="language-shell"><code class="language-shell">Found <span class="token number">2</span> cases <span class="token keyword">in</span> <span class="token number">1</span> suites over <span class="token number">1</span> files.

  ✓ <span class="token number">0</span> cases failed.

┏ /home/bakerdn/dev/nix-unit-testing/impure/test.nixt</code></pre></div>
<h3 id="pythonix"><a class="anchor before" href="https://www.tweag.io/rss.xml#pythonix"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Pythonix</h3>
<p><a href="https://github.com/Mic92/pythonix">Pythonix</a> is Python package that uses Nix language internals to evaluate Nix expressions. This allows us to use any Python unit testing framework we like to test our Nix code. Below we have our <code class="language-text">test_isEven.py</code> file and we will use the same <code class="language-text">math.nix</code> file from before. At the time of writing this post, the Pythonix maintainer has archived the project; if this project is meaningful to you, contact them about adopting the project.</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token comment"># test_isEven.py</span>
<span class="token keyword">import</span> nix
<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path

<span class="token triple-quoted-string string">'''Note that the path to the file we want to test was declared in Python.
pythonix has some issues evaluating relative file paths.'''</span>
test_file <span class="token operator">=</span> Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token string">"math.nix"</span>

<span class="token keyword">def</span> <span class="token function">isEven_expr</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">:</span> Path<span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''Note that we could use f-strings here but we would have to escape all
    the curly braces which makes it more difficult to read.'''</span>
    <span class="token keyword">return</span> <span class="token triple-quoted-string string">'''
    (
      {pkgs ? import &lt;nixpkgs&gt; {}}: let
        inherit (pkgs) lib;
        math = import %s {inherit lib;};
      in
        math.isEven (%s)
    ) {}
    '''</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">test_isEven_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    expr <span class="token operator">=</span> nix<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>isEven_expr<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span>test_file<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> expr <span class="token operator">==</span> <span class="token boolean">True</span>

<span class="token keyword">def</span> <span class="token function">test_isEven_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    expr <span class="token operator">=</span> nix<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>isEven_expr<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span>test_file<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> expr <span class="token operator">==</span> <span class="token boolean">True</span>
</code></pre></div>
<p>Just as before, I have purposefully left the same error so we can compare the error reports. I am using pytest to evaluate the test file and we can do so with the following command:</p>
<div class="gatsby-highlight"><pre class="language-shell"><code class="language-shell">$ nix shell --impure --expr <span class="token string">'(import &lt;nixpkgs&gt; {}).python3.withPackages (p: with p; [ pytest pythonix ])'</span> --command pytest test_isEven.py

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
platform linux -- Python <span class="token number">3.9</span>.12, pytest-6.2.5, py-1.10.0, pluggy-1.0.0
rootdir: /home/bakerdn/dev/nix-unit-testing/impure
collected <span class="token number">2</span> items

test_isEven.py .F                                                       <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
________________________________ test_isEven_2 ________________________________

    def test_isEven_2<span class="token punctuation">(</span><span class="token punctuation">)</span>:
        <span class="token function">expr</span> <span class="token operator">=</span> nix.eval<span class="token punctuation">(</span>isEven_expr<span class="token punctuation">(</span>file<span class="token operator">=</span>test_file, <span class="token assign-left variable">value</span><span class="token operator">=</span>-3<span class="token punctuation">))</span>
<span class="token operator">&gt;</span>       assert <span class="token function">expr</span> <span class="token operator">==</span> True
E       assert False <span class="token operator">==</span> True

test_isEven.py:32: AssertionError
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> short <span class="token builtin class-name">test</span> summary info <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
FAILED test_isEven.py::test_isEven_2 - assert False <span class="token operator">==</span> True
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span> failed, <span class="token number">1</span> passed <span class="token keyword">in</span> <span class="token number">0</span>.20s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span></code></pre></div>
<p>Note that pytest also has rules for how test files and test functions are named so be aware when writing your tests. It can also be pointed at a directory to search its subdirectories for tests and evaluate them.</p>
<p>pytest is very verbose; it has given us all the information we need to rework the failing test. After fixing the test and running the command to evaluate again, we get the following:</p>
<div class="gatsby-highlight"><pre class="language-shell"><code class="language-shell"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
platform linux -- Python <span class="token number">3.9</span>.12, pytest-6.2.5, py-1.10.0, pluggy-1.0.0
rootdir: /home/bakerdn/dev/nix-unit-testing/impure
collected <span class="token number">2</span> items

test_isEven.py <span class="token punctuation">..</span>                                                       <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token number">2</span> passed <span class="token keyword">in</span> <span class="token number">0</span>.19s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span></code></pre></div>
<h2 id="going-further"><a class="anchor before" href="https://www.tweag.io/rss.xml#going-further"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Going Further</h2>
<h3 id="nixt-1"><a class="anchor before" href="https://www.tweag.io/rss.xml#nixt-1"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Nixt</h3>
<p>Nixt has some extra features that are worth mentioning. There are the <code class="language-text">--list</code> and <code class="language-text">--verbose</code> flags which, when used with the <code class="language-text">nixt</code> command, will find and list all the test cases. You can see an example of this below. Additionally, it has a <code class="language-text">--watch</code> flag which will continuously watch a specified file or directory for changes and reevaluate the tests.</p>
<div class="gatsby-highlight"><pre class="language-shell"><code class="language-shell">$ nix run github:nix-community/nixt -- <span class="token builtin class-name">.</span> --list --verbose

Found <span class="token number">2</span> cases <span class="token keyword">in</span> <span class="token number">1</span> suites over <span class="token number">1</span> files.


┏ /home/bakerdn/dev/nix-unit-testing/impure/test.nixt
┃   check isEven
┃     - even number
┗     - odd number</code></pre></div>
<h3 id="pythonix-1"><a class="anchor before" href="https://www.tweag.io/rss.xml#pythonix-1"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Pythonix</h3>
<p>Using pythonix with Python allows for new unit testing capabilities: test strategies and exception handling. To showcase these capabilities, I have created a new <code class="language-text">math.nix</code> file as shown below. It implements a factorial function with some cases that throw exceptions.</p>
<div class="gatsby-highlight"><pre class="language-nix"><code class="language-nix"><span class="token comment"># math.nix</span>
<span class="token punctuation">{</span> pkgs <span class="token operator">?</span> <span class="token function">import</span> <span class="token operator">&lt;</span>nixpkgs<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">:</span>
<span class="token keyword">let</span>
  <span class="token keyword">inherit</span> <span class="token punctuation">(</span>pkgs<span class="token punctuation">)</span> lib<span class="token punctuation">;</span>
<span class="token keyword">in</span> rec <span class="token punctuation">{</span>
  <span class="token comment"># Returns the factorial of a non-negative integer.</span>
  factorial <span class="token operator">=</span> x<span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">builtins</span><span class="token punctuation">.</span><span class="token function">isInt</span> x<span class="token punctuation">)</span>
    <span class="token keyword">then</span> <span class="token function">throw</span> <span class="token string">"factorial only takes non-negative integers, got x = <span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span><span class="token function">toString</span> x<span class="token punctuation">}</span></span>"</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span>
    <span class="token keyword">then</span> <span class="token number">1</span>
    <span class="token keyword">else</span> x * factorial <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre></div>
<p>Below we have our <code class="language-text">test_math.py</code> file with a new import, <a href="https://hypothesis.readthedocs.io/en/latest/">Hypothesis</a>, a property-based testing library. With Hypothesis, we can setup testing strategies that test behaviour rather than explicit test cases. In our <code class="language-text">test_positive_integers</code> test case, we have instructed Hypothesis to randomly sample integers inclusively between 0 and 20. Similarly, for the <code class="language-text">test_negative_integers</code> test case, we have instructed Hypothesis to randomly sample integers that are less than zero. Normally, we would not be able to do this within Nix. However, because we are using Pythonix, we can capture the exception with <code class="language-text">pytest.raises</code>.</p>
<p>Note I have left two errors in this test. The assertion for <code class="language-text">test_positive_integers</code> is <code class="language-text">assert expr &lt; 100</code> and the factorial function quickly surpasses 100. Additionally, for <code class="language-text">test_negative_integers</code>, I have commented out <code class="language-text">with pytest.raises(nix.NixError):</code> which would have caught a <code class="language-text">nix.NixError</code> exception.</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token comment"># test_math.py</span>
<span class="token keyword">import</span> nix
<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path
<span class="token keyword">from</span> hypothesis <span class="token keyword">import</span> given<span class="token punctuation">,</span> strategies <span class="token keyword">as</span> st
<span class="token keyword">import</span> pytest

test_file <span class="token operator">=</span> Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token string">"math.nix"</span>

<span class="token keyword">def</span> <span class="token function">expression</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">:</span> Path<span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
  <span class="token keyword">return</span> <span class="token triple-quoted-string string">'''
  ( {pkgs ? import &lt;nixpkgs&gt; {}}: let
      math = import %s {inherit pkgs;};
    in
      math.factorial (%s)
  ) {}
  '''</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># max value limited to 20 because larger values go beyond 64-bit precision</span>
<span class="token decorator annotation punctuation">@given</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>integers<span class="token punctuation">(</span>min_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max_value<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_positive_integers</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    expr <span class="token operator">=</span> nix<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>expression<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span>test_file<span class="token punctuation">,</span> value<span class="token operator">=</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> expr <span class="token operator">&lt;</span> <span class="token number">100</span>

<span class="token decorator annotation punctuation">@given</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>integers<span class="token punctuation">(</span>max_value<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_negative_integers</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># with pytest.raises(nix.NixError):</span>
        expr <span class="token operator">=</span> nix<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>expression<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span>test_file<span class="token punctuation">,</span> value<span class="token operator">=</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>
<p>Because we added Hypothesis to our unit testing, we do have to modify the command to include the <code class="language-text">hypothesis</code> Python package. We can evaluate our test file with the following command:</p>
<div class="gatsby-highlight"><pre class="language-shell"><code class="language-shell">$ nix shell --impure --expr <span class="token string">'(import &lt;nixpkgs&gt; {}).python3.withPackages (p: with p; [ hypothesis pytest pythonix ])'</span> --command pytest test_math.py
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
platform linux -- Python <span class="token number">3.9</span>.12, pytest-6.2.5, py-1.10.0, pluggy-1.0.0
rootdir: /home/bakerdn/dev/nix-unit-testing/hypothesis
plugins: hypothesis-6.24.5
collected <span class="token number">2</span> items

test_math.py FF                                                         <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
___________________________ test_positive_integers ____________________________

    @given<span class="token punctuation">(</span>st.integers<span class="token punctuation">(</span>min_value<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">max_value</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">))</span>
<span class="token operator">&gt;</span>   def test_positive_integers<span class="token punctuation">(</span>x<span class="token punctuation">)</span>:

test_math.py:23:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

x <span class="token operator">=</span> <span class="token number">5</span>

    @given<span class="token punctuation">(</span>st.integers<span class="token punctuation">(</span>min_value<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">max_value</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">))</span>
    def test_positive_integers<span class="token punctuation">(</span>x<span class="token punctuation">)</span>:
        <span class="token function">expr</span> <span class="token operator">=</span> nix.eval<span class="token punctuation">(</span>expression<span class="token punctuation">(</span>file<span class="token operator">=</span>test_file, <span class="token assign-left variable">value</span><span class="token operator">=</span>x<span class="token punctuation">))</span>
<span class="token operator">&gt;</span>       assert <span class="token function">expr</span> <span class="token operator">&lt;</span> <span class="token number">100</span>
E       assert <span class="token number">120</span> <span class="token operator">&lt;</span> <span class="token number">100</span>

test_math.py:25: AssertionError
--------------------------------- Hypothesis ----------------------------------
Falsifying example: test_positive_integers<span class="token punctuation">(</span>
    <span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token number">5</span>,
<span class="token punctuation">)</span>
___________________________ test_negative_integers ____________________________

    @given<span class="token punctuation">(</span>st.integers<span class="token punctuation">(</span>max_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">))</span>
<span class="token operator">&gt;</span>   def test_negative_integers<span class="token punctuation">(</span>x<span class="token punctuation">)</span>:

test_math.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

x <span class="token operator">=</span> <span class="token number">0</span>

    @given<span class="token punctuation">(</span>st.integers<span class="token punctuation">(</span>max_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">))</span>
    def test_negative_integers<span class="token punctuation">(</span>x<span class="token punctuation">)</span>:
        <span class="token comment"># with pytest.raises(nix.NixError):</span>
<span class="token operator">&gt;</span>           <span class="token function">expr</span> <span class="token operator">=</span> nix.eval<span class="token punctuation">(</span>expression<span class="token punctuation">(</span>file<span class="token operator">=</span>test_file, <span class="token assign-left variable">value</span><span class="token operator">=</span>x<span class="token punctuation">))</span>
E           nix.NixError: factorial only takes positive integers. got x <span class="token operator">=</span> <span class="token number">0</span>

test_math.py:30: NixError
--------------------------------- Hypothesis ----------------------------------
Falsifying example: test_negative_integers<span class="token punctuation">(</span>
    <span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token number">0</span>,
<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> short <span class="token builtin class-name">test</span> summary info <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
FAILED test_math.py::test_positive_integers - assert <span class="token number">120</span> <span class="token operator">&lt;</span> <span class="token number">100</span>
FAILED test_math.py::test_negative_integers - nix.NixError: factorial only t<span class="token punctuation">..</span>.
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token number">2</span> failed <span class="token keyword">in</span> <span class="token number">0</span>.09s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span></code></pre></div>
<p>Hypothesis helped us identify a simple counter example, specifically that 120 or 5! is not less than 100. Also, our test for negative numbers failed because we did not let pytest know that there would be an exception. If we fix our assertion for <code class="language-text">test_positive_integers</code> to <code class="language-text">assert expr &gt; 0</code> and uncomment the exception catch in <code class="language-text">test_negative_integers</code>, we get the following:</p>
<div class="gatsby-highlight"><pre class="language-shell"><code class="language-shell"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
platform linux -- Python <span class="token number">3.9</span>.12, pytest-6.2.5, py-1.10.0, pluggy-1.0.0
rootdir: /home/bakerdn/dev/nix-unit-testing/hypothesis
plugins: hypothesis-6.24.5
collected <span class="token number">2</span> items

test_math.py <span class="token punctuation">..</span>                                                         <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token number">2</span> passed <span class="token keyword">in</span> <span class="token number">0</span>.17s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span></code></pre></div>
<h2 id="conclusion"><a class="anchor before" href="https://www.tweag.io/rss.xml#conclusion"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Conclusion</h2>
<p>Each unit testing methodology has its pros and cons. If your needs are simple and you are comfortable with the Nix language, then <code class="language-text">runTests</code> might be the right choice. If the previous applies but you want a little more from error messages and continuous test evaluation is desirable, then Nixt might be a better choice. Lastly, if you need the extra capabilities of Pytest and Hypothesis, then you will probably want to go with Pythonix. What you need to decide is what level of testing does your project need and how much effort you and your team are willing to dedicate to maintaining your tests.</p>
<table>
<thead>
<tr>
<th align="center"/>
<th align="center">runTests</th>
<th align="center">nixt</th>
<th align="center">pythonix</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Available in nixpkgs</td>
<td align="center">yes</td>
<td align="center">no</td>
<td align="center">no</td>
</tr>
<tr>
<td align="center">Can test eval failures</td>
<td align="center">no</td>
<td align="center">no</td>
<td align="center">yes</td>
</tr>
<tr>
<td align="center">Maintained</td>
<td align="center">yes</td>
<td align="center">yes</td>
<td align="center">no</td>
</tr>
</tbody>
</table></div>
    </summary>
    <updated>2022-09-01T00:00:00Z</updated>
    <published>2022-09-01T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html"/>
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2022-09-15T11:54:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:63042e0c7966940564c5f309</id>
    <link href="https://mmhaskell.com/blog/2022/8/29/dijkstra-with-type-families" rel="alternate" type="text/html"/>
    <title>Dijkstra with Type Families</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In the <a href="https://www.mmhaskell.com/blog/2022/8/25/generalizing-dijkstras-algorithm">previous part</a> of this series, I wrote about a more general form of Dijkstra’s Algorithm in Haskell. <a href="https://github.com/MondayMorningHaskell/HaskellDijkstra/blob/main/src/Dijkstra2.hs">This implementation</a> used a <strong>Multi-param Typeclass</strong> to encapsulate the behavior of a “graph” type in terms of its node type and the cost/distance type. This is a perfectly valid implementation, but I wanted to go one step further and try out a different approach to generalization.</p>
<h2 id="type-holes">Type Holes</h2>
<p>In effect, I view this algorithm as having three “type holes”. In order to create a generalized algorithm, we want to allow the user to specify their own “graph” type. But we need to be able to refer to two related types (the node and the cost) in order to make our algorithm work. So we can regard each of these as a “hole” in our algorithm.</p>
<p>The multi-param typeclass fills all three of these holes at the “top level” of the instance definition.</p>
<pre><code class="lang-haskell">class DijkstraGraph graph node cost where
    ...</code></pre>
<p>But there’s a different way to approach this pattern of “one general class and two related types”. This is to use a <strong>type family</strong>.</p>
<h2 id="type-families">Type Families</h2>
<p>A type family is an extension of a typeclass. While a typeclass allows you to specify functions and expressions related to the “target” type of the class, a type family allows you to associate other <strong>types</strong> with the target type. We start our definition the same way we would with a normal typeclass, except we’ll need a special compiler extension:</p>
<pre><code class="lang-haskell">{-# LANGUAGE TypeFamilies #-}

class DijkstraGraph graph where
  ...</code></pre>
<p>So we’re only specifying <code>graph</code> as the “target type” of this class. We can then specify names for different types associated with this class using the <code>type</code> keyword.</p>
<pre><code class="lang-haskell">class DijkstraGraph graph where
  type DijkstraNode graph :: *
  type DijkstraCost graph :: *
  ...</code></pre>
<p>For each type, instead of specifying a type signature after the colons (<code>::</code>), we specify the <em>kind</em> of that type. We just want base-level types for these, so they are <code>*</code>. (As a different example, a monad type like <code>IO</code> would have the kind <code>* -&gt; *</code> because it takes a type parameter).</p>
<p>Once we’ve specified these type names, we can then use them within type signatures for functions in the class. So the last piece we need is the <code>edges</code> function, which we can write in terms of our types.</p>
<pre><code class="lang-haskell">class DijkstraGraph graph where
  type DijkstraNode graph :: *
  type DijkstraCost graph :: *
  dijkstraEdges :: graph -&gt; DijkstraNode graph -&gt; [(DijkstraNode graph, DijkstraCost graph)]</code></pre>
<h2 id="making-an-instance-of-the-type-family">Making an Instance of the Type Family</h2>
<p>It’s not hard now to make an instance for this class, using our existing <code>Graph String Int</code> concept. We again use the <code>type</code> keyword to specify that we are filling in the type holes, and define the edges function as we have before:</p>
<pre><code class="lang-haskell">{-# LANGUAGE FlexibleInstances #-}

instance DijkstraGraph (Graph String Int) where
    type DijkstraNode (Graph String Int) = String
    type DijkstraCost (Graph String Int) = Int
    dijkstraEdges graph node = fromMaybe [] (HM.lookup node (edges graph))</code></pre>
<p>This hasn’t fixed the “re-statement of parameters” issue I mentioned last time. In fact we now restate them twice. But with a more general type, we wouldn’t necessarily have to parameterize our <code>Graph</code> type anymore.</p>
<h2 id="updating-the-type-signature">Updating the Type Signature</h2>
<p>The last thing to do now is update the type signatures within our function. Instead of using separate <code>graph</code>, <code>node</code>, and <code>cost</code> parameters, we’ll just use one parameter <code>g</code> for the graph, and define everything in terms of <code>g</code>, <code>DijkstraNode g</code>, and <code>DijkstraCost g</code>.</p>
<p>First, let’s remind ourselves what this looked like for the multi-param typeclass version:</p>
<pre><code class="lang-haskell">findShortestDistance ::
  forall graph node cost. (Hashable node, Eq node, Num cost, Ord cost, DijkstraGraph graph node cost) =&gt;
  graph -&gt; node -&gt; node -&gt; Distance cost</code></pre>
<p>And now with the type family version:</p>
<pre><code class="lang-haskell">findShortestDistance ::
  forall g. (Hashable (DijkstraNode g), Eq (DijkstraNode g), Num (DijkstraCost g), Ord (DijkstraCost g), DijkstraGraph g) =&gt;
  g -&gt; DijkstraNode g -&gt; DijkstraNode g -&gt; Distance (DijkstraCost g)</code></pre>
<p>The “simpler” typeclass ends up being shorter. But the type family version actually has fewer type arguments (just <code>g</code> instead of <code>graph</code>, <code>node</code>, and <code>cost</code>). It’s up to you which you prefer.</p>
<p>And don’t forget, type signatures within the function will also need to change:</p>
<pre><code class="lang-haskell">processQueue ::
  DijkstraState (DijkstraNode g) (DijkstraCost g) -&gt;
  HashMap (DijkstraNode g) (Distance (DijkstraCost g))</code></pre>
<p>Aside from that, the rest of this function works!</p>
<pre><code class="lang-haskell">graph1 :: Graph String Int
graph1 = Graph $ HM.fromList
  [ ("A", [("D", 100), ("B", 1), ("C", 20)])
  , ("B", [("D", 50)])
  , ("C", [("D", 20)])
  , ("D", [])
  ]

...

&gt;&gt; findShortestDistance graph1 “A” “D”
Dist 40</code></pre>
<p>Unlike the multi-param typeclass version, this one has no need of specifying the final result type in the expression. Type inference seems to work better here.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Is this version better than the multi-param typeclass version? Maybe, maybe not, depending on your taste. It has some definite weaknesses in that type families are more of a foreign concept to more Haskellers, and they require more language extensions. The type signatures are also a bit more cumbersome. But, in my opinion, the semantics are more correct by making the graph type the primary target and the node and cost types as simply “associated” types.</p>
<p>In the next couple parts of this series, we’ll apply these different approaches to some different graph types. This will demonstrate that the approach is truly general and can be used for many different problems!</p>
<p>Below you can find the full code, or you can <a href="https://github.com/MondayMorningHaskell/HaskellDijkstra/blob/main/src/Dijkstra3.hs">follow this link</a> to see everything on GitHub!</p>
<h2 id="appendix-full-code">Appendix - Full Code</h2>
<pre><code class="lang-haskell">{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE ScopedTypeVariables #-}

module Dijkstra3 where

import Data.Hashable (Hashable)
import qualified Data.Heap as H
import Data.Heap (MinPrioHeap)
import qualified Data.HashSet as HS
import Data.HashSet (HashSet)
import Data.HashMap.Strict (HashMap)
import qualified Data.HashMap.Strict as HM
import Data.Maybe (fromMaybe)

data Distance a = Dist a | Infinity
  deriving (Show, Eq)

instance (Ord a) =&gt; Ord (Distance a) where
  Infinity &lt;= Infinity = True
  Infinity &lt;= Dist x = False
  Dist x &lt;= Infinity = True
  Dist x &lt;= Dist y = x &lt;= y

addDist :: (Num a) =&gt; Distance a -&gt; Distance a -&gt; Distance a
addDist (Dist x) (Dist y) = Dist (x + y)
addDist _ _ = Infinity

(!??) :: (Hashable k, Eq k) =&gt; HashMap k (Distance d) -&gt; k -&gt; Distance d
(!??) distanceMap key = fromMaybe Infinity (HM.lookup key distanceMap)

newtype Graph node cost = Graph
   { edges :: HashMap node [(node, cost)] }

class DijkstraGraph graph where
  type DijkstraNode graph :: *
  type DijkstraCost graph :: *
  dijkstraEdges :: graph -&gt; DijkstraNode graph -&gt; [(DijkstraNode graph, DijkstraCost graph)]

instance DijkstraGraph (Graph String Int) where
    type DijkstraNode (Graph String Int) = String
    type DijkstraCost (Graph String Int) = Int
    dijkstraEdges graph node = fromMaybe [] (HM.lookup node (edges graph))

data DijkstraState node cost = DijkstraState
  { visitedSet :: HashSet node
  , distanceMap :: HashMap node (Distance cost)
  , nodeQueue :: MinPrioHeap (Distance cost) node
  }

findShortestDistance :: forall g. (Hashable (DijkstraNode g), Eq (DijkstraNode g), Num (DijkstraCost g), Ord (DijkstraCost g), DijkstraGraph g) =&gt; g -&gt; DijkstraNode g -&gt; DijkstraNode g -&gt; Distance (DijkstraCost g)
findShortestDistance graph src dest = processQueue initialState !?? dest
  where
    initialVisited = HS.empty
    initialDistances = HM.singleton src (Dist 0)
    initialQueue = H.fromList [(Dist 0, src)]
    initialState = DijkstraState initialVisited initialDistances initialQueue

    processQueue :: DijkstraState (DijkstraNode g) (DijkstraCost g) -&gt; HashMap (DijkstraNode g) (Distance (DijkstraCost g))
    processQueue ds@(DijkstraState v0 d0 q0) = case H.view q0 of
      Nothing -&gt; d0
      Just ((minDist, node), q1) -&gt; if node == dest then d0
        else if HS.member node v0 then processQueue (ds {nodeQueue = q1})
        else
          -- Update the visited set
          let v1 = HS.insert node v0
          -- Get all unvisited neighbors of our current node
              allNeighbors = dijkstraEdges graph node
              unvisitedNeighbors = filter (\(n, _) -&gt; not (HS.member n v1)) allNeighbors
          -- Fold each neighbor and recursively process the queue
          in  processQueue $ foldl (foldNeighbor node) (DijkstraState v1 d0 q1) unvisitedNeighbors
    foldNeighbor current ds@(DijkstraState v1 d0 q1) (neighborNode, cost) =
      let altDistance = addDist (d0 !?? current) (Dist cost)
      in  if altDistance &lt; d0 !?? neighborNode
            then DijkstraState v1 (HM.insert neighborNode altDistance d0) (H.insert (altDistance, neighborNode) q1)
            else ds

graph1 :: Graph String Int
graph1 = Graph $ HM.fromList
  [ ("A", [("D", 100), ("B", 1), ("C", 20)])
  , ("B", [("D", 50)])
  , ("C", [("D", 20)])
  , ("D", [])
  ]</code></pre></div>
    </summary>
    <updated>2022-08-29T14:30:00Z</updated>
    <published>2022-08-29T14:30:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html"/>
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml"/>
      <title>Blog - Monday Morning Haskell</title>
      <updated>2022-09-10T05:01:07Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-1777990983847811806.post-906620765110929969</id>
    <link href="https://www.haskellforall.com/feeds/906620765110929969/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="https://www.haskellforall.com/2022/08/stop-calling-everything-nix.html#comment-form" rel="replies" title="0 Comments" type="text/html"/>
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/906620765110929969" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/906620765110929969" rel="self" type="application/atom+xml"/>
    <link href="https://www.haskellforall.com/2022/08/stop-calling-everything-nix.html" rel="alternate" title="Stop calling everything &quot;Nix&quot;" type="text/html"/>
    <title>Stop calling everything "Nix"</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">nix-terminology    <p>One of my pet peeves is when people abuse the term “Nix” without qualification when trying to explain the various components of the Nix ecosystem.</p><p>As a concrete example, a person might say:</p><p>“I hate Nix’s syntax”</p><p>… and when you dig into this criticism you realize that they’re actually complaining about the Nixpkgs API, which is not the same thing as the syntax of the Nix expression language.</p><p>So one of the goals of this post is to introduce some unambiguous terminology that people can use to refer to the various abstraction layers of the Nix ecosystem in order to avoid confusion. I’ll introduce each abstraction layer from the lowest level abstractions to the highest level abstractions.</p><p>Another reason I explain “Nix” in terms of these abstraction layers is because this helps people consult the correct manual. The Nix ecosystem provides three manuals that you will commonly need to refer to in order to become more proficient:</p><ul><li>The <a href="https://nixos.org/manual/nix/stable/">Nix manual</a></li><li>The <a href="https://nixos.org/manual/nixpkgs/stable/">Nixpkgs manual</a></li><li>The <a href="https://nixos.org/manual/nixos/stable/">NixOS manual</a></li></ul><p>… and I hope by the end of this post it will be clearer which manual interests you for any given question.</p><p>Edit: <a href="https://twitter.com/domenkozar/status/1564241948319404032">Domen Kožar pointed out</a> that there is an ongoing effort to standardize terminology here:</p><ul><li><a href="https://github.com/NixOS/nix.dev/issues/275"><code>NixOS/nix.dev</code>#275 - establish nomenclature</a></li></ul><p>I’ll update the post to match the agreed-upon terminology when that is complete.</p><h4 id="layer-0-the-nix-store">Layer #0: The Nix store</h4><p>I use the term “Nix store” to mean essentially everything you can manage with the <code>nix-store</code> command-line tool.</p><p>That is the simplest definition, but to expand upon that, I mean the following files:</p><ul><li>Derivations: <code>/nix/store/*.drv</code></li><li>Build products: <code>/nix/store/*</code> without a <code>.drv</code> extension</li><li>Log files: <code>/nix/var/log/nix/drvs/**</code></li><li>Garbage collection roots: <code>/nix/var/nix/gcroots/**</code></li></ul><p>… and the following operations:</p><ul><li><p>Realizing a derivation</p><p>i.e. converting a <code>.drv</code> file to the corresponding build products using <code>nix-store --realise</code></p></li><li><p>Adding static files to the <code>/nix/store</code></p><p>i.e. <code>nix-store --add</code></p></li><li><p>Creating GC roots for build products</p><p>i.e. the <code>--add-root</code> option to <code>nix-store</code></p></li><li><p>Garbage collecting derivations not protected by a GC root</p><p>i.e. <code>nix-store --gc</code></p></li></ul><p>There are other things the Nix store supports (like profile management), but these are the most important operations.</p><p><strong>CAREFULLY NOTE:</strong> the “Nix store” is independent of the “Nix language” (which we’ll define below). In other words, you could replace the front-end Nix programming language with another language (e.g. Guile scheme, as Guix does). This is because the Nix derivation format (the <code>.drv</code> files) and the <code>nix-store</code>command-line interface are both agnostic of the Nix expression language. I have a talk which delves a bit more into this subject:</p><ul><li><a href="https://www.youtube.com/watch?v=GMQPzv3Sx58">Nix: Under the hood</a></li></ul><h4 id="layer-1-the-nix-language">Layer #1: The Nix language</h4><p>I use the term “Nix language” to encompass three things:</p><ul><li>The programming language: source code we typically store in <code>.nix</code> files</li><li>Instantiation: the interpretation of Nix code to generate <code>.drv</code> files</li><li><a href="https://nixos.wiki/wiki/Flakes">Flakes</a>: pure evaluation and instantiation caching</li></ul><p>To connect this with the previous section, the typical pipeline for converting Nix source code to a build product is:</p><pre><code>Nix source code (*.nix)            │ Nix language<br/>      ↓ Instantiation              ├─────────────<br/>Nix derivation (/nix/store/*.drv)  │<br/>      ↓ Realization                │ Nix store<br/>Nix build product (/nix/store/*)   │</code></pre><p>In isolation, the Nix language is “just” a purely functional programming language with simple language constructs. For example, here is a sample Nix REPL session:</p><pre class="nix"><code>nix-repl&gt; 2 + 2<br/>4<br/><br/>nix-repl&gt; x = "world"   <br/><br/>nix-repl&gt; "Hello, " + x  <br/>"Hello, world"<br/><br/>nix-repl&gt; r = { a = 1; b = true; }<br/><br/>nix-repl&gt; if r.b then r.a else 0<br/>1</code></pre><p>However, as we go up the abstraction ladder the idiomatic Nix code we’ll encounter will begin to stray from that simple functional core.</p><p><strong>NOTE:</strong> Some people will disagree with my choice to include flakes at this abstraction layer since flakes are sometimes marketed as a dependency manager (similar to <code>niv</code>). I don’t view them in this way and I treat flakes as primarily as mechanism for purifying evaluation and caching instantiation, as outlined in this post:</p><ul><li><a href="https://www.tweag.io/blog/2020-06-25-eval-cache/">Nix Flakes, Part 2: Evaluation Caching</a></li></ul><p>… and if you view flakes in that capacity then they are a feature of the Nix language since evaluation/instantiation are the primary purpose of the programming language.</p><h4 id="layer-2-the-nix-build-tool">Layer #2: The Nix build tool</h4><p>This layer encompasses the command-line interface to both the “Nix store” and the “Nix language”.</p><p>This includes (but is not limited to):</p><ul><li><code>nix-store</code> (the command, not the underlying store)</li><li><code>nix-instantiate</code></li><li><code>nix-build</code></li><li><code>nix-shell</code></li><li><code>nix</code> subcommands, including: <ul><li><code>nix build</code></li><li><code>nix run</code></li><li><code>nix develop</code></li><li><code>nix log</code></li><li><code>nix flake</code></li></ul></li></ul><p>I make this distinction because the command-line interface enables some additional niceties that are not inherent to the underlying layers. For example, the <code>nix build</code> command has some flake integration so that you can say <code>nix build someFlake#somePackage</code> and this command-line API nicety is not necessarily inherent to flakes (in my view).</p><p>Also, many of these commands operate at both Layer 0 and Layer 1, which can blur the distinction between the two. For example the <code>nix-build</code> command can accept a layer 1 Nix program (i.e. a <code>.nix</code> file) or a layer 0 derivation (i.e. a <code>.drv</code> file).</p><p>Another thing that blurs the distinction is that the Nix manual covers all three of the layers introduced so far, ranging from the Nix store to the command-line interface. However, if you want to better understand these three layers then that is correct place to begin:</p><ul><li><a href="https://nixos.org/manual/nix/stable/introduction.html">Nix manual</a></li></ul><h4 id="layer-3-nixpkgs">Layer #3: Nixpkgs</h4><p>Nixpkgs is a software distribution (a.k.a. “distro”) for Nix. Specifically, all of the packaging logic for Nixpkgs is hosted on GitHub here:</p><ul><li><a href="https://github.com/NixOS/nixpkgs">GitHub - <code>NixOS/nix</code></a></li></ul><p>This repository contains a large number of Nix expressions for building packages across several platforms. If the “Nix language” is a programming language then “Nixpkgs” is a gigantic “library” authored within that language. There are other Nix “libraries” outside of Nixpkgs but Nixpkgs is the one you will interact with the most.</p><p>The Nixpkgs repository establishes several widespread idioms and conventions, including:</p><ul><li>The standard environment (a.k.a. <code>stdenv</code>) for authoring a package <ul><li>There are also language-specific standard-environments, too</li></ul></li><li>A domain-specific language for overriding individual packages or sets of packages</li></ul><p>When people complain about “Nix’s syntax”, most of the time they’re actually complaining about Nixpkgs and more specifically complaining about the Nixpkgs system for overriding packages. However, I can see how people might mistake the two.</p><p>The reason for the confusion is that the Nixpkgs support for overrides is essentially an embedded domain-specific language, meaning that you still express everything in the Nix language (layer 1), but the ways in which you express things is fundamentally different than if you were simply using low-level Nix language features.</p><p>As a contrived example, this “layer 1” Nix code:</p><pre class="nix"><code>let<br/>  x = 1;<br/><br/>  y = x + 2;</code></pre><p>… would roughly correspond to the following “layer 3” Nixpkgs overlay:</p><pre class="nix"><code>self: super: {<br/>  x = 1;<br/><br/>  y = self.x + 2;<br/>}</code></pre><p>The reason why Nixpkgs doesn’t do the simpler “layer 1” thing is because Nixpkgs is designed to support “late binding” of expressions, meaning that everything can be overridden, even dependencies deep within the dependency tree. Moreover, this overriding is done in such a way that everything “downstream” of the overrride (i.e. all reverse dependencies) pick up the change correctly.</p><p>As a more realistic example, the following program:</p><pre class="nix"><code>let<br/>  pkgs = import &lt;nixpkgs&gt; { };<br/><br/>  fast-tags =<br/>    pkgs.haskell.lib.justStaticExecutables pkgs.haskellPackages.fast-tags;<br/><br/>  fast-tags-no-tests =<br/>    pkgs.haskell.lib.dontCheck fast-tags;<br/><br/>in<br/>  fast-tags-no-tests</code></pre><p>… is simpler, but is not an idiomatic use of Nixpkgs because it is not using the overlay system and therefore does not support late binding. The more idiomatic analog would be:</p><pre class="nix"><code>let<br/>  overlay = self: super: {<br/>    fast-tags =<br/>      self.haskell.lib.justStaticExecutables self.haskellPackages.fast-tags;<br/><br/>    fast-tags-no-tests =<br/>      self.haskell.lib.dontCheck self.fast-tags;<br/>  };<br/><br/>  pkgs = import &lt;nixpkgs&gt; { overlays = [ overlay ]; };<br/><br/>in<br/>  pkgs.fast-tags-no-tests</code></pre><p>You can learn more about this abstraction layer by consulting the Nixpkgs manual:</p><ul><li><a href="https://nixos.org/manual/nixpkgs/stable/">Nixpkgs manual</a></li></ul><h4 id="layer-4-nixos">Layer #4: NixOS</h4><p>NixOS is an operating system that is (literally) built on Nixpkgs. Specifically, there is a <code>./nixos/</code> subdirectory of the Nixpkgs repository for all of the NixOS-related logic.</p><p>NixOS is based on the NixOS module system, which is yet another embedded domain-specific language. In other words, you configure NixOS with Nix code, but the idioms of that Nix code depart even more wildly from straightforward “layer 1” Nix code.</p><p>NixOS modules were designed to look more like Terraform modules than Nix code, but they are still technically Nix code. For example, this is what the NixOS module for the <code>lorri</code> service looks like at the time of this writing:</p><pre class="nix"><code>{ config, lib, pkgs, ... }:<br/><br/>let<br/>  cfg = config.services.lorri;<br/>  socketPath = "lorri/daemon.socket";<br/>in {<br/>  options = {<br/>    services.lorri = {<br/>      enable = lib.mkOption {<br/>        default = false;<br/>        type = lib.types.bool;<br/>        description = lib.mdDoc ''<br/>          Enables the daemon for `lorri`, a nix-shell replacement for project<br/>          development. The socket-activated daemon starts on the first request<br/>          issued by the `lorri` command.<br/>        '';<br/>      };<br/>      package = lib.mkOption {<br/>        default = pkgs.lorri;<br/>        type = lib.types.package;<br/>        description = lib.mdDoc ''<br/>          The lorri package to use.<br/>        '';<br/>        defaultText = lib.literalExpression "pkgs.lorri";<br/>      };<br/>    };<br/>  };<br/><br/>  config = lib.mkIf cfg.enable {<br/>    systemd.user.sockets.lorri = {<br/>      description = "Socket for Lorri Daemon";<br/>      wantedBy = [ "sockets.target" ];<br/>      socketConfig = {<br/>        ListenStream = "%t/${socketPath}";<br/>        RuntimeDirectory = "lorri";<br/>      };<br/>    };<br/><br/>    systemd.user.services.lorri = {<br/>      description = "Lorri Daemon";<br/>      requires = [ "lorri.socket" ];<br/>      after = [ "lorri.socket" ];<br/>      path = with pkgs; [ config.nix.package git gnutar gzip ];<br/>      serviceConfig = {<br/>        ExecStart = "${cfg.package}/bin/lorri daemon";<br/>        PrivateTmp = true;<br/>        ProtectSystem = "strict";<br/>        ProtectHome = "read-only";<br/>        Restart = "on-failure";<br/>      };<br/>    };<br/><br/>    environment.systemPackages = [ cfg.package ];<br/>  };<br/>}</code></pre><p>You might wonder how NixOS relates to the underlying layers. For example, if Nix is a build system, then how do you “build” NixOS? I have another post which elaborates on that subject here:</p><ul><li><a href="https://www.haskellforall.com/2018/08/nixos-in-production.html">NixOS in production</a></li></ul><p>Also, you can learn more about this abstraction layer by consulting the NixOS manual:</p><ul><li><a href="https://nixos.org/manual/nixos/stable/">NixOS manual</a></li></ul><h4 id="nix-ecosystem">Nix ecosystem</h4><p>I use the term “Nix ecosystem” to describe all of the preceding layers and other stuff not mentioned so far (like <code>hydra</code>, the continuous integration service).</p><p>This is not a layer of its own, but I mention this because I prefer to use “Nix ecosystem” instead of “Nix” to avoid ambiguity, since the latter can easily be mistaken for an individual abstraction layer (especially the Nix language or the Nix build tool).</p><p>However, when I do hear people say “Nix”, then I generally understand it to mean the “Nix ecosystem” unless they clarify otherwise.</p><h4 id="conclusion">Conclusion</h4><p>Hopefully this passive aggressive post helps people express themselves a little more precisely when discussing the Nix ecosystem.</p><p>If you enjoy this post, you will probably also like this other post of mine:</p><ul><li><a href="https://www.haskellforall.com/2022/03/the-hard-part-of-type-checking-nix.html">The hard part of type-checking Nix</a></li></ul><p>… since that touches on the Nixpkgs and NixOS embedded domain-specific languages and how they confound the user experience.</p><p>I’ll conclude this post with the following obligatory joke:</p><blockquote><p>I’d just like to interject for a moment. What you’re refering to as Nix, is in fact, NixOS, or as I’ve recently taken to calling it, Nix plus OS. Nix is not an operating system unto itself, but rather another free component of a fully functioning ecosystem made useful by the Nix store, Nix language, and Nix build tool comprising a full OS as defined by POSIX.</p><p>Many Guix users run a modified version of the Nix ecosystem every day, without realizing it. Through a peculiar turn of events, the operating system based on Nix which is widely used today is often called Nix, and many of its users are not aware that it is basically the Nix ecosystem, developed by the NixOS foundation.</p><p>There really is a Nix, and these people are using it, but it is just a part of the system they use. Nix is the expression language: the program in the system that specifies the services and programs that you want to build and run. The language is an essential part of the operating system, but useless by itself; it can only function in the context of a complete operating system. Nix is normally used in combination with an operating system: the whole system is basically an operating system with Nix added, or NixOS. All the so-called Nix distributions are really distributions of NixOS!</p></blockquote></div>
    </content>
    <updated>2022-08-29T14:20:38Z</updated>
    <published>2022-08-29T13:16:00Z</published>
    <author>
      <name>Gabriella Gonzalez</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/01917800488530923694</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-1777990983847811806</id>
      <author>
        <name>Gabriella Gonzalez</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/01917800488530923694</uri>
      </author>
      <link href="https://www.haskellforall.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default" rel="self" type="application/atom+xml"/>
      <link href="https://www.haskellforall.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Haskell for all</title>
      <updated>2022-09-14T10:40:09Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://www.fpcomplete.com/blog/partnership-portworx-pure-storage/</id>
    <link href="https://www.fpcomplete.com/blog/partnership-portworx-pure-storage/" rel="alternate" type="text/html"/>
    <title xml:lang="en">FP Complete Corporation Announces Partnership with Portworx by Pure Storage</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p><strong>FP Complete Corporation Announces Partnership with Portworx by Pure Storage to Streamline World-Class DevOps Consulting Services with State-of-the-Art, End-To-End Storage and Data Management Solution for Kubernetes Projects.</strong></p>
<p><strong>Charlotte, North Carolina (August 31, 2022)</strong> – FP Complete Corporation, a global technology  partner that specializes in DevSecOps, Cloud Native Computing, and Advanced Server-Side Programming Languages today announced that it has partnered with Portworx by Pure Storage  to bring an integrated solution to customers seeking DevSecOps consulting services for the  management of persistent storage, data protection, disaster recovery, data security, and hybrid  data migrations.</p>
<p>The partnership between FP Complete Corporation and Portworx will be integral in providing FP  Complete's DevSecOps and Cloud Enablement clients with a data storage platform designed to  run in a container that supports any cloud physical storage on any Kubernetes distribution.</p>
<p>Portworx Enterprise gets right to the heart of what developers and Kubernetes admins want:  data to behave like a cloud service. Developers and Admins wish to request Storage based on  their requirements (capacity, performance level, resiliency level, security level, access,  protection level, and more) and let the data management layer figure out all the details.  Portworx PX-Backup adds enterprise-grade point-and-click backup and recovery for all  applications running on Kubernetes, even if they are stateless.</p>
<p>Portworx shortens development timelines and headaches for companies moving from on-prem to cloud. In addition, the integration between FP Complete Corporation and Portworx allows  the easy exchange of best practices information, so design and storage run in parallel.</p>
<p>Gartner predicts that by 2025, more than 85% of global organizations will be running  containerized applications in production, up from less than 35% in 2019<sup>1</sup>. As container  adoption increases and more applications are being deployed in the enterprise, these  organizations want more options to manage stateful and persistent data associated with these  modern applications.</p>
<p>"It is my pleasure to announce that Pure Storage can now be utilized by our world-class  engineers needing a fully integrated, end-to-end storage and data management solution for our  DevSecOps clients with complicated Kubernetes projects. Pure Storage is known globally for its  strength in the storage industry, and this partnership offers strong support for our business," said Wes Crook, CEO of FP Complete Corporation.</p>
<p>“There can be zero doubt that most new cloud-native apps are built on containers and  orchestrated by Kubernetes. Unfortunately, the early development on containers resulted in  lots of data access and availability issues due to a lack of enterprise-grade persistent storage  data management and low data visibility. With Portworx and the aid of Kubernetes experts like FP Complete, we can offer customers a rock-solid, enterprise-class, cloud-native development  platform that delivers end-to-end application and data lifecycle management that significantly  lowers the risks and costs of operating cloud-native application infrastructure,” said Venkat  Ramakrishnan, VP, Engineering, Cloud Native Business Unit, Pure Storage.</p>
<div><u><strong>About FP Complete Corporation</strong></u></div>
Founded in 2012 by Aaron Contorer, former Microsoft executive, FP Complete Corporation is  known globally as the one-stop, full-stack technology shop that delivers agile, reliable,  repeatable, and highly secure software. In 2019, we launched our flagship platform, Kube360®,  which is a fully managed enterprise Kubernetes-based DevOps ecosystem. With Kube360, FP  Complete is now well positioned to provide a complete suite of products and solutions to our  clients on their journey towards cloudification, containerization, and DevOps best practices.  The Company's mission is to deliver superior software engineering to build great software for  our clients. FP Complete Corporation serves over 200+ global clients and employs over 70 people worldwide. It has won many awards and made the Inc. 5000 list in 2020 for being one of  the 5000 fastest-growing private companies in America. For more information about FP  Complete Corporation, visit its website at [www.fpcomplete.com](https://www.fpcomplete.com/).
<p><sup>1</sup> <small>Arun Chandrasekaran, <a href="https://www.gartner.com/en/documents/3988395">Best Practices for Running Containers and Kubernetes in Production</a>, Gartner, August 2020</small></p></div>
    </content>
    <updated>2022-08-29T00:00:00Z</updated>
    <published>2022-08-29T00:00:00Z</published>
    <source>
      <id>https://www.fpcomplete.com/atom.xml</id>
      <author>
        <name>FP Complete</name>
      </author>
      <link href="https://www.fpcomplete.com/atom.xml" rel="self" type="application/atom+xml"/>
      <link href="https://www.fpcomplete.com" rel="alternate" type="text/html"/>
      <subtitle xml:lang="en">Blog posts from FP Complete, focusing on Rust, Haskell, and DevOps</subtitle>
      <title xml:lang="en">FP Complete Blog</title>
      <updated>2022-08-29T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-1777990983847811806.post-2613892908644813447</id>
    <link href="https://www.haskellforall.com/feeds/2613892908644813447/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="https://www.haskellforall.com/2022/08/incrementally-package-haskell-program.html#comment-form" rel="replies" title="4 Comments" type="text/html"/>
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/2613892908644813447" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/2613892908644813447" rel="self" type="application/atom+xml"/>
    <link href="https://www.haskellforall.com/2022/08/incrementally-package-haskell-program.html" rel="alternate" title="Incrementally package a Haskell program using Nix" type="text/html"/>
    <title>Incrementally package a Haskell program using Nix</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">incremental-nix    <p>This post walks through how to take a standalone Haskell file and progressively package the file using Nix. In other words, we will tour a spectrum of packaging options ranging from simple to fancy.</p><p>The running example will be the following standalone single-file Haskell program:</p><ul><li><a href="https://github.com/Gabriella439/spire/blob/5a35feb5629df27d9c973d36d9bf940dd85445eb/Spire.hs">GitHub - Gabriella439/spire - Spire.hs</a></li></ul><p>I won’t go into detail about what that program does, although you can study the program if you are curious. Essentially, I’m planning to deliver a talk based on that program at <a href="https://munihac.de/2022.html">this year’s MuniHac</a> and I wanted to package it up so that other people could collaborate on the program with me during the hackathon.</p><p>When I began writing this post, there was no packaging logic for this program; it’s a standalone Haskell file. However, this file has several dependencies outside of Haskell’s standard library, so up until now I needed some way to obtain those dependencies for development.</p><h4 id="stage-0-ghc.withpackages">Stage 0: <code>ghc.withPackages</code></h4><p>The most low-tech way that you can hack on a Haskell program using Nix is to use <code>nix-shell</code> to obtain a transient development environment (this is what I had done up until now).</p><p>Specifically, you can do something like this:</p><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-1" tabindex="-1"/><span class="ex">$</span> nix-shell <span class="at">--packages</span> <span class="st">'ghc.withPackages (pkgs: [ pkgs.mtl pkgs.MemoTrie pkgs.containers pkgs.pretty-show ])'</span></span></code></pre></div><p>… where <code>pkgs.mtl</code> and <code>pkgs.MemoTrie</code> indicate that I want to include the <code>mtl</code> and <code>MemoTrie</code>packages in my Haskell development environment.</p><p>Inside of that development environment I can build and run the file using <code>ghc</code>. For example, I can use <code>ghc -O</code> to build an executable to run:</p><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-1" tabindex="-1"/><span class="ex">[nix-shell]$</span> ghc <span class="at">-O</span> Spire.hs</span><br/><span id="cb2-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-2" tabindex="-1"/><span class="ex">[nix-shell]$</span> ./Spire</span><br/><span id="cb2-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-3" tabindex="-1"/><span class="ex">…</span></span></code></pre></div><p>… or if I don’t care about optimizations I can interpret the file using <code>runghc</code>:</p><div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-1" tabindex="-1"/><span class="ex">$</span> runghc Spire.hs</span><br/><span id="cb3-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-2" tabindex="-1"/><span class="ex">…</span></span></code></pre></div><h4 id="stage-1-ide-support">Stage 1: IDE support</h4><p>Once I’m inside a Nix shell I can begin to take advantage of integrated development environment (IDE) support.</p><p>The two most common tools Haskell developers use for rapid feedback are <code>ghcid</code> and <code>haskell-language-server</code>:</p><ul><li><p><code>ghcid</code> provides a command-line interface for fast type-checking feedback but doesn’t provide other IDE-like features</p></li><li><p><code>haskell-language-server</code> is more of a proper IDE that you use in conjunction with some editor</p></li></ul><p>I can obtain either tool by exiting from the shell and creating a new shell that includes the desired tool.</p><p>For example, if I want to use <code>ghcid</code> then I recreate the <code>nix-shell</code> using the following command:</p><div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-1" tabindex="-1"/><span class="ex">$</span> nix-shell <span class="at">--packages</span> ghcid <span class="st">'ghc.withPackages (pkgs: [ pkgs.mtl pkgs.MemoTrie pkgs.containers pkgs.pretty-show ])'</span></span></code></pre></div><p>… and then I can tell <code>ghcid</code> to continuously type-check my file using:</p><div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-1" tabindex="-1"/><span class="ex">[nix-shell]$</span> ghcid Spire.hs</span><br/><span id="cb5-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-2" tabindex="-1"/><span class="ex">…</span></span></code></pre></div><p>If I want to use <code>haskell-language-server</code>, then I recreate the <code>nix-shell</code> using this command:</p><div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-1" tabindex="-1"/><span class="ex">$</span> nix-shell <span class="at">--packages</span> haskell-language-server <span class="st">'ghc.withPackages (pkgs: [ pkgs.mtl pkgs.MemoTrie pkgs.containers pkgs.pretty-show ])'</span></span></code></pre></div><p>… and then I can explore the code in any editor that supports the language server protocol.</p><p>Note that if you use VSCode as your editor then you may need to install some additional plugins:</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=justusadam.language-haskell">Haskell Syntax Highlighting</a> plugin</li><li><a href="https://marketplace.visualstudio.com/items?itemName=haskell.haskell">Haskell</a>plugin</li></ul><p>… and the next section will show how to install VSCode and those plugins using Nix.</p><p>However, once you do install those plugins then you can open the file in VSCode from within the <code>nix-shell</code> using:</p><div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-1" tabindex="-1"/><span class="ex">[nix-shell]$</span> code Spire.hs</span></code></pre></div><p>… and once you <a href="https://code.visualstudio.com/docs/editor/workspace-trust">trust the file</a> the IDE features will kick in.</p><h4 id="stage-2-global-development-environment">Stage 2: Global development environment</h4><p>Sometimes I like to globally install development tools that are commonly shared between projects. For example, if I use <code>ghcid</code> or <code>haskell-language-server</code> across all my projects then I don’t want to have to explicitly enumerate that tool in each project’s Nix shell.</p><p>Moreover, my tool preferences might not be shared by other developers. If I share my <code>nix-shell</code> with other developers for a project then I probably don’t want to add editors/IDEs or other command-line tools to that environment because then they have to download those tools regardless of whether they plan to use them.</p><p>However, I don’t want to globally install development tools like this:</p><div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-1" tabindex="-1"/><span class="ex">$</span> nix-env <span class="at">--install</span> <span class="at">--file</span> <span class="st">'&lt;nixpkgs&gt;'</span> <span class="at">--attr</span> ghcid</span><br/><span id="cb8-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-2" tabindex="-1"/><span class="ex">$</span> nix-env <span class="at">--install</span> <span class="at">--file</span> <span class="st">'&lt;nixpkgs&gt;'</span> <span class="at">--attr</span> haskell-language-server</span></code></pre></div><p>Part of the reason I use Nix is to avoid imperatively managing my development environment. Fortunately, though, <code>nix-env</code>supports a more declarative way of managing dependencies.</p><p>What you can do instead is save a file like this to <code>~/default.nix</code>:</p><pre class="nix"><code>let<br/>  # For VSCode<br/>  config = { allowUnfree = true; };<br/><br/>  overlay = pkgsNew: pkgsOld: {<br/>    # Here's an example of how to use Nix to install VSCode with plugins managed<br/>    # by Nix, too<br/>    vscode-with-extensions = pkgsOld.vscode-with-extensions.override {<br/>      vscodeExtensions = [<br/>        pkgsNew.vscode-extensions.haskell.haskell<br/>        pkgsNew.vscode-extensions.justusadam.language-haskell<br/>      ]; <br/>    };<br/>  };<br/><br/>  pkgs = import &lt;nixpkgs&gt; { inherit config; overlays = [ overlay ]; };<br/><br/>in      <br/>  { inherit (pkgs)<br/>      # I included some sample useful development tools for Haskell.  Feel free<br/>      # to customize.<br/>      cabal-install<br/>      ghcid<br/>      haskell-language-server<br/>      stylish-haskell<br/>      vscode-with-extensions <br/>    ; <br/>  }     </code></pre><p>… and once you create that file you have two options.</p><p>The first option is that you can set your global development environment to match the file by running:</p><div class="sourceCode" id="cb10"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb10-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-1" tabindex="-1"/><span class="ex">$</span> nix-env <span class="at">--remove-all</span> <span class="at">--install</span> <span class="at">--file</span> ~/default.nix</span></code></pre></div><blockquote><p>NOTE: At the time of this writing you may also need to add <code>--system x86_64-darwin</code> if you are trying out these examples on an M1 Macbook. For more details, see:</p><ul><li><a href="https://evanrelf.com/building-x86-64-packages-with-nix-on-apple-silicon">Building x86-64 Packages With Nix on Apple Silicon</a></li></ul></blockquote><p>Carefully note the <code>--remove-all</code>, which resets your development environment to match the file, so that nothing from your old development environment is accidentally carried over into your new development environment. This makes our use of the <code>nix-env</code>command truly declarative.</p><p>The second option is that you can change the file to create a valid shell, like this:</p><pre class="nix"><code>let<br/>  config = { allowUnfree = true; };<br/><br/>  overlay = pkgsNew: pkgsOld: {<br/>    vscode-with-extensions = pkgsOld.vscode-with-extensions.override {<br/>      vscodeExtensions = [<br/>        pkgsNew.vscode-extensions.haskell.haskell<br/>        pkgsNew.vscode-extensions.justusadam.language-haskell<br/>      ];<br/>    };<br/>  };<br/><br/>  pkgs = import &lt;nixpkgs&gt; { inherit config; overlays = [ overlay ]; };<br/><br/>in<br/>  pkgs.mkShell {<br/>    packages = [<br/>      pkgs.ghcid<br/>      pkgs.haskell-language-server<br/>      pkgs.stylish-haskell<br/>      pkgs.vscode-with-extensions<br/>      pkgs.cabal-install<br/>    ];<br/>  }</code></pre><p>… and then run:</p><div class="sourceCode" id="cb12"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb12-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-1" tabindex="-1"/><span class="ex">$</span> nix-shell ~/default.nix</span></code></pre></div><p>Or, even better, you can rename the file to <code>~/shell.nix</code>and then if you’re already in your home directory (e.g. you just logged into your system), then you can run:</p><div class="sourceCode" id="cb13"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb13-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-1" tabindex="-1"/><span class="ex">$</span> nix-shell</span></code></pre></div><p>… which will select <code>~/shell.nix</code> by default. This lets you get a completely transient development environment so that you never have to install anything development tools globally.</p><p>These <code>nix-shell</code> commands stack, so you can first run <code>nix-shell</code> to obtain your global development environment and then use <code>nix-shell</code> a second time to obtain project-specific dependencies.</p><p>My personal preference is to use the declarative <code>nix-env</code>trick for installing global development tools. In my opinion it’s just as elegant as <code>nix-shell</code> and slightly less hassle.</p><h4 id="stage-3-cabal">Stage 3: Cabal</h4><p>Anyway, enough about global development tools. Back to our Haskell project!</p><p>So <code>ghc.withPackages</code> is a great way to just start hacking on a standalone Haskell program when you don’t want to worry about packaging up the program. However, at some point you might want to share the program with the others or do a proper job of packaging if you’re trying to <a href="https://en.wiktionary.org/wiki/productionize">productionize</a>the code.</p><p>That brings us to the next step, which is packaging our Haskell program with a Cabal file (a Haskell package manifest). We’ll need the <code>cabal-install</code> command-line tool before we proceed further, so you’ll want to add that tool to your global development environment (see the previous section).</p><p>To create our <code>.cabal</code> file we can run the following command from the top-level directory of our Haskell project:</p><div class="sourceCode" id="cb14"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb14-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-1" tabindex="-1"/><span class="ex">$</span> cabal init <span class="at">--interactive</span></span><br/><span id="cb14-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-2" tabindex="-1"/><span class="ex">Should</span> I generate a simple project with sensible defaults<span class="pp">?</span> [default: y] n</span><br/><span id="cb14-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-3" tabindex="-1"/><span class="ex">…</span></span></code></pre></div><p>… and follow the prompts to create a starting point for our <code>.cabal</code> file.</p><p>After completing those choices and trimming down the <code>.cabal</code> file (to keep the example simple), I get a file that looks like this:</p><pre class="cabal"><code>cabal-version:      2.4<br/>name:               spire<br/>version:            1.0.0<br/>license:            BSD-3-Clause<br/>license-file:       LICENSE<br/><br/>executable spire<br/>    main-is:          Spire.hs<br/>    build-depends:    base ^&gt;=4.14.3.0<br/>    default-language: Haskell2010</code></pre><p>The only thing I’m going change for now is to add dependencies to the <code>build-depends</code> section and increase the upper bound on <code>base</code>::</p><pre class="cabal"><code>cabal-version:      2.4<br/>name:               spire<br/>version:            1.0.0<br/>license:            BSD-3-Clause<br/>license-file:       LICENSE<br/><br/>executable spire<br/>    main-is:          Spire.hs<br/>    build-depends:    base &gt;=4.14.3.0 &amp;&amp; &lt; 5<br/>                    , MemoTrie<br/>                    , containers<br/>                    , mtl<br/>                    , pretty-show<br/>                    , transformers<br/>    default-language: Haskell2010</code></pre><h4 id="stage-4-cabal2nix---shell">Stage 4: <code>cabal2nix --shell</code></h4><p>Adding a <code>.cabal</code> file suffices to share our Haskell package with other Haskell developers if they’re not using Nix. However, if we want to Nix-enable package our package then we have a few options.</p><p>The simplest option is to run the following command from the top-level of the Haskell project:</p><pre><code>$ cabal2nix --shell . &gt; shell.nix</code></pre><p>That will create something similar to the following <code>shell.nix</code> file:</p><pre class="nix"><code>{ nixpkgs ? import &lt;nixpkgs&gt; {}, compiler ? "default", doBenchmark ? false }:<br/><br/>let<br/><br/>  inherit (nixpkgs) pkgs;<br/><br/>  f = { mkDerivation, base, containers, lib, MemoTrie, mtl<br/>      , pretty-show, transformers<br/>      }:<br/>      mkDerivation {<br/>        pname = "spire";<br/>        version = "1.0.0";<br/>        src = ./.;<br/>        isLibrary = false;<br/>        isExecutable = true;<br/>        executableHaskellDepends = [<br/>          base containers MemoTrie mtl pretty-show transformers<br/>        ];<br/>        license = lib.licenses.bsd3;<br/>      };<br/><br/>  haskellPackages = if compiler == "default"<br/>                       then pkgs.haskellPackages<br/>                       else pkgs.haskell.packages.${compiler};<br/><br/>  variant = if doBenchmark then pkgs.haskell.lib.doBenchmark else pkgs.lib.id;<br/><br/>  drv = variant (haskellPackages.callPackage f {});<br/><br/>in<br/><br/>  if pkgs.lib.inNixShell then drv.env else drv</code></pre><p>… and if you run <code>nix-shell</code> within the same directory the shell environment will have the Haskell dependencies you need to build and run project using <code>cabal</code>:</p><div class="sourceCode" id="cb19"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb19-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-1" tabindex="-1"/><span class="ex">$</span> nix-shell</span><br/><span id="cb19-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-2" tabindex="-1"/><span class="ex">[nix-shell]$</span> cabal run</span><br/><span id="cb19-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-3" tabindex="-1"/><span class="ex">…</span></span></code></pre></div><p>… and tools like <code>ghcid</code> and <code>haskell-language-server</code> will also work within this shell, too. The only difference is that <code>ghcid</code> now takes no arguments, since it will auto-detect the cabal project in the current directory:</p><div class="sourceCode" id="cb20"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb20-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-1" tabindex="-1"/><span class="ex">[nix-shell]$</span> ghcid</span></code></pre></div><p>Note that this <code>nix-shell</code> will <strong>NOT</strong>include <code>cabal</code> by default. You will need to globally install <code>cabal</code> (see the prior section on “Global development environment”).</p><p>This <code>cabal2nix --shell</code> workflow is sufficiently lightweight that you can Nixify other people’s projects on the fly when hacking on them locally. A common thing I do if I need to make a change to a person’s project is to clone their repository, run:</p><div class="sourceCode" id="cb21"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb21-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-1" tabindex="-1"/><span class="ex">$</span> cabal2nix <span class="at">--shell</span> . <span class="op">&gt;</span> shell.nix</span><br/><span id="cb21-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-2" tabindex="-1"/><span class="ex">$</span> nix-shell</span></code></pre></div><p>… and start hacking away. I don’t even need to upstream the <code>shell.nix</code> file I created in this way; I just keep it around locally for my own hacking.</p><p>In fact, I typically don’t want to upstream such a <code>shell.nix</code> file (even if the upstream author were receptive to Nix), because there are more robust Nix expressions we can upstream instead.</p><h4 id="stage-5-custom-shell.nix-file">Stage 5: Custom <code>shell.nix</code> file</h4><p>One disadvantage of <code>cabal2nix --shell</code> is that you have to re-run the command any time your dependencies change. However, if you’re willing to hand-write your own <code>shell.nix</code> file then you can create something more stable:</p><pre class="nix"><code>let<br/>  overlay = pkgsNew: pkgsOld: {<br/>    haskellPackages = pkgsOld.haskellPackages.override (old: {<br/>      overrides = pkgsNew.haskell.lib.packageSourceOverrides {<br/>        spire = ./.;<br/>      };<br/>    });<br/>  };<br/><br/>  pkgs = import &lt;nixpkgs&gt; { overlays = [ overlay ]; };<br/><br/>in<br/>  pkgs.haskellPackages.spire.env</code></pre><p>The <code>packageSourceOverrides</code> is the key bit. Under the hood, that essentially runs <code>cabal2nix</code> for you any time your project changes and then generates your development environment from the result. You can also use <code>packageSourceOverrides</code> to specify non-default versions of dependencies, too:</p><pre class="nix"><code>let<br/>  overlay = pkgsNew: pkgsOld: {<br/>    haskellPackages = pkgsOld.haskellPackages.override (old: {<br/>      overrides = pkgsNew.haskell.lib.packageSourceOverrides {<br/>        spire = ./.;<br/><br/>        # Example of how to pin a dependency to a non-defaul version<br/>        pretty-show = "1.9.5";<br/>      };<br/>    });<br/>  };<br/><br/>  pkgs = import &lt;nixpkgs&gt; { overlays = [ overlay ]; };<br/><br/>in<br/>  pkgs.haskellPackages.spire.env</code></pre><p>… although that will only work for packages that have been released prior to the version of Nixpkgs that you’re depending on.</p><p>If you want something a bit more robust, you can do something like this:</p><pre class="nix"><code>let<br/>  overlay = pkgsNew: pkgsOld: {<br/>    haskellPackages = pkgsOld.haskellPackages.override (old: {<br/>      overrides =<br/>        pkgsNew.lib.fold<br/>          pkgsNew.lib.composeExtensions<br/>          (old.overrides or (_: _: { }))<br/>          [ (pkgsNew.haskell.lib.packageSourceOverrides {<br/>              spire = ./.;<br/>            })<br/>            (pkgsNew.haskell.lib.packagesFromDirectory {<br/>              directory = ./packages;<br/>            })<br/>          ];<br/>    });<br/>  };<br/><br/>  pkgs = import &lt;nixpkgs&gt; { overlays = [ overlay ]; };<br/><br/>in<br/>  pkgs.haskellPackages.spire.env</code></pre><p>… and then you have the option to also depend on any dependency that <code>cabal2nix</code> knows how to generate:</p><div class="sourceCode" id="cb25"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb25-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-1" tabindex="-1"/><span class="ex">$</span> mkdir packages</span><br/><span id="cb25-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-2" tabindex="-1"/></span><br/><span id="cb25-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-3" tabindex="-1"/><span class="ex">$</span> <span class="co"># Add the following file to version control to preserve the directory</span></span><br/><span id="cb25-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-4" tabindex="-1"/><span class="ex">$</span> touch packages/.gitkeep</span><br/><span id="cb25-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-5" tabindex="-1"/></span><br/><span id="cb25-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-6" tabindex="-1"/><span class="ex">$</span> cabal update</span><br/><span id="cb25-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-7" tabindex="-1"/></span><br/><span id="cb25-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-8" tabindex="-1"/><span class="ex">$</span> cabal2nix cabal://<span class="va">${PACKAGE_NAME}</span>-<span class="va">${VERSION}</span> <span class="op">&gt;</span> ./packages/<span class="va">${PACKAGE_NAME}</span>.nix</span></code></pre></div><p>… and that works even on bleeding-edge Haskell packages that Nixpkgs hasn’t picked up, yet.</p><h4 id="stage-6-pinning-nixpkgs">Stage 6: Pinning Nixpkgs</h4><p>All of the prior examples are “impure”, meaning that they depend on the ambient <code>nixpkgs</code> channel installed on the developer’s system. This <code>nixpkgs</code> channel might vary from system to system, meaning that each system might have different versions of <code>nixpkgs</code> installed, and then you run into issues reproducing each other’s builds.</p><p>For example, if you have a newer version of <code>nixpkgs</code>installed your Nix build for the above Haskell project might succeed, but then another developer might attempt to build your project with an older version of <code>nixpkgs</code>, which might select an older incompatible version of one of your Haskell dependencies.</p><p>Or, vice versa, the examples in this blog post might succeed at the time of this writing for the current version of <code>nixpkgs</code> but then as time goes on the examples might begin to fail for future versions of <code>nixpkgs</code>.</p><p>You can fix that by pinning Nixpkgs, which this post covers:</p><ul><li><a href="https://nixos.wiki/wiki/How_to_fetch_Nixpkgs_with_an_empty_NIX_PATH">How to fetch Nixpkgs with an empty <code>NIX_PATH</code></a></li></ul><p>For example, we could pin <code>nixpkgs</code> for our global <code>~/default.nix</code> like this:</p><pre class="nix"><code>let<br/>  nixpkgs = builtins.fetchTarball {<br/>    url    = "https://github.com/NixOS/nixpkgs/archive/0ba2543f8c855d7be8e90ef6c8dc89c1617e8a08.tar.gz";<br/>    sha256 = "14ann7vz7qgfrw39ji1s19n1p0likyf2ag8h7rh8iwp3iv5lmprl";<br/>  };<br/><br/>  config = { allowUnfree = true; };<br/><br/>  overlay = pkgsNew: pkgsOld: {<br/>    vscode-with-extensions = pkgsOld.vscode-with-extensions.override {<br/>      vscodeExtensions = [<br/>        pkgsNew.vscode-extensions.haskell.haskell<br/>        pkgsNew.vscode-extensions.justusadam.language-haskell<br/>      ];<br/>    };<br/>  };<br/><br/>  pkgs = import nixpkgs { inherit config; overlays = [ overlay ]; };<br/><br/>in<br/>  { inherit (pkgs)<br/>      cabal-install<br/>      ghcid<br/>      haskell-language-server<br/>      stylish-haskell<br/>      vscode-with-extensions<br/>    ;<br/>  }</code></pre><p>… which pins us to the tip of the <code>release-22.05</code> branch at the time of this writing.</p><p>We can likewise pin <code>nixpkgs</code> for our project-local <code>shell.nix</code> like this:</p><pre class="nix"><code>let<br/>  nixpkgs = builtins.fetchTarball {<br/>    url    = "https://github.com/NixOS/nixpkgs/archive/0ba2543f8c855d7be8e90ef6c8dc89c1617e8a08.tar.gz";<br/>    sha256 = "14ann7vz7qgfrw39ji1s19n1p0likyf2ag8h7rh8iwp3iv5lmprl";<br/>  };<br/><br/>  overlay = pkgsNew: pkgsOld: {<br/>    haskellPackages = pkgsOld.haskellPackages.override (old: {<br/>      overrides = pkgsNew.haskell.lib.packageSourceOverrides {<br/>        spire = ./.;<br/>      };<br/>    });<br/>  };<br/><br/>  pkgs = import nixpkgs { overlays = [ overlay ]; };<br/><br/>in<br/>  pkgs.haskellPackages.spire.env</code></pre><h4 id="flakes">Flakes</h4><p>The final improvement we can make is the most important one of all: we can convert our project into a Nix flake:</p><ul><li><a href="https://nixos.wiki/wiki/Flakes">NixOS Wiki - Flakes</a></li></ul><p>There are two main motivations for flake-enabling our project:</p><ul><li>To simplify managing inputs that we need to lock (e.g. <code>nixpkgs</code>)</li><li>To speed up our shell</li></ul><p>To flake-enable our project, we’ll save the following code to <code>flake.nix</code>:</p><pre class="nix"><code>{ inputs = {<br/>    nixpkgs.url = github:NixOS/nixpkgs/release-22.05;<br/><br/>    utils.url = github:numtide/flake-utils;<br/>  };<br/><br/>  outputs = { nixpkgs, utils, ... }:<br/>    utils.lib.eachDefaultSystem (system:<br/>      let<br/>        config = { };<br/><br/>        overlay = pkgsNew: pkgsOld: {<br/>          spire =<br/>            pkgsNew.haskell.lib.justStaticExecutables<br/>              pkgsNew.haskellPackages.spire;<br/><br/>          haskellPackages = pkgsOld.haskellPackages.override (old: {<br/>            overrides = pkgsNew.haskell.lib.packageSourceOverrides {<br/>              spire = ./.;<br/>            };<br/>          });<br/>        };<br/><br/>        pkgs =<br/>          import nixpkgs { inherit config system; overlays = [ overlay ]; };<br/><br/>      in<br/>        rec {<br/>          packages.default = pkgs.haskellPackages.spire;<br/><br/>          apps.default = {<br/>            type = "app";<br/><br/>            program = "${pkgs.spire}/bin/spire";<br/>          };<br/><br/>          devShells.default = pkgs.haskellPackages.spire.env;<br/>        }<br/>    );<br/>}</code></pre><p>… and then we can delete our old <code>shell.nix</code> because we don’t need it anymore.</p><p>Now we can obtain a development environment by running:</p><div class="sourceCode" id="cb29"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb29-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb29-1" tabindex="-1"/><span class="ex">$</span> nix develop</span></code></pre></div><p>… and the above flake also makes it possible to easily build and run the program, too:</p><div class="sourceCode" id="cb30"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb30-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb30-1" tabindex="-1"/><span class="ex">$</span> nix run    <span class="co"># Run the program</span></span><br/><span id="cb30-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb30-2" tabindex="-1"/><span class="ex">$</span> nix build  <span class="co"># Build the project</span></span></code></pre></div><p>In fact, you can even run a flake without having to clone a repository. For example, you can run the example code from this blog post by typing:</p><div class="sourceCode" id="cb31"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb31-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-1" tabindex="-1"/><span class="ex">$</span> nix run github:Gabriella439/spire</span></code></pre></div><p>Moreover, we no longer have to take care of managing hashes for, say, Nixpkgs. The flake machinery takes care of that automatically for you and generates a <code>flake.lock</code> file which you can then add to version control. For example, the lock file I got was:</p><div class="sourceCode" id="cb32"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb32-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-1" tabindex="-1"/><span class="fu">{</span></span><br/><span id="cb32-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-2" tabindex="-1"/>  <span class="dt">"nodes"</span><span class="fu">:</span> <span class="fu">{</span></span><br/><span id="cb32-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-3" tabindex="-1"/>    <span class="dt">"nixpkgs"</span><span class="fu">:</span> <span class="fu">{</span></span><br/><span id="cb32-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-4" tabindex="-1"/>      <span class="dt">"locked"</span><span class="fu">:</span> <span class="fu">{</span></span><br/><span id="cb32-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-5" tabindex="-1"/>        <span class="dt">"lastModified"</span><span class="fu">:</span> <span class="dv">1661617163</span><span class="fu">,</span></span><br/><span id="cb32-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-6" tabindex="-1"/>        <span class="dt">"narHash"</span><span class="fu">:</span> <span class="st">"sha256-NN9Ky47j8ohgPhA9JZyfkYIbbAo6RJkGz+7h8/exVpE="</span><span class="fu">,</span></span><br/><span id="cb32-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-7" tabindex="-1"/>        <span class="dt">"owner"</span><span class="fu">:</span> <span class="st">"NixOS"</span><span class="fu">,</span></span><br/><span id="cb32-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-8" tabindex="-1"/>        <span class="dt">"repo"</span><span class="fu">:</span> <span class="st">"nixpkgs"</span><span class="fu">,</span></span><br/><span id="cb32-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-9" tabindex="-1"/>        <span class="dt">"rev"</span><span class="fu">:</span> <span class="st">"0ba2543f8c855d7be8e90ef6c8dc89c1617e8a08"</span><span class="fu">,</span></span><br/><span id="cb32-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-10" tabindex="-1"/>        <span class="dt">"type"</span><span class="fu">:</span> <span class="st">"github"</span></span><br/><span id="cb32-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-11" tabindex="-1"/>      <span class="fu">},</span></span><br/><span id="cb32-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-12" tabindex="-1"/>      <span class="dt">"original"</span><span class="fu">:</span> <span class="fu">{</span></span><br/><span id="cb32-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-13" tabindex="-1"/>        <span class="dt">"owner"</span><span class="fu">:</span> <span class="st">"NixOS"</span><span class="fu">,</span></span><br/><span id="cb32-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-14" tabindex="-1"/>        <span class="dt">"ref"</span><span class="fu">:</span> <span class="st">"release-22.05"</span><span class="fu">,</span></span><br/><span id="cb32-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-15" tabindex="-1"/>        <span class="dt">"repo"</span><span class="fu">:</span> <span class="st">"nixpkgs"</span><span class="fu">,</span></span><br/><span id="cb32-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-16" tabindex="-1"/>        <span class="dt">"type"</span><span class="fu">:</span> <span class="st">"github"</span></span><br/><span id="cb32-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-17" tabindex="-1"/>      <span class="fu">}</span></span><br/><span id="cb32-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-18" tabindex="-1"/>    <span class="fu">},</span></span><br/><span id="cb32-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-19" tabindex="-1"/>    <span class="dt">"root"</span><span class="fu">:</span> <span class="fu">{</span></span><br/><span id="cb32-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-20" tabindex="-1"/>      <span class="dt">"inputs"</span><span class="fu">:</span> <span class="fu">{</span></span><br/><span id="cb32-21"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-21" tabindex="-1"/>        <span class="dt">"nixpkgs"</span><span class="fu">:</span> <span class="st">"nixpkgs"</span><span class="fu">,</span></span><br/><span id="cb32-22"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-22" tabindex="-1"/>        <span class="dt">"utils"</span><span class="fu">:</span> <span class="st">"utils"</span></span><br/><span id="cb32-23"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-23" tabindex="-1"/>      <span class="fu">}</span></span><br/><span id="cb32-24"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-24" tabindex="-1"/>    <span class="fu">},</span></span><br/><span id="cb32-25"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-25" tabindex="-1"/>    <span class="dt">"utils"</span><span class="fu">:</span> <span class="fu">{</span></span><br/><span id="cb32-26"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-26" tabindex="-1"/>      <span class="dt">"locked"</span><span class="fu">:</span> <span class="fu">{</span></span><br/><span id="cb32-27"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-27" tabindex="-1"/>        <span class="dt">"lastModified"</span><span class="fu">:</span> <span class="dv">1659877975</span><span class="fu">,</span></span><br/><span id="cb32-28"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-28" tabindex="-1"/>        <span class="dt">"narHash"</span><span class="fu">:</span> <span class="st">"sha256-zllb8aq3YO3h8B/U0/J1WBgAL8EX5yWf5pMj3G0NAmc="</span><span class="fu">,</span></span><br/><span id="cb32-29"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-29" tabindex="-1"/>        <span class="dt">"owner"</span><span class="fu">:</span> <span class="st">"numtide"</span><span class="fu">,</span></span><br/><span id="cb32-30"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-30" tabindex="-1"/>        <span class="dt">"repo"</span><span class="fu">:</span> <span class="st">"flake-utils"</span><span class="fu">,</span></span><br/><span id="cb32-31"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-31" tabindex="-1"/>        <span class="dt">"rev"</span><span class="fu">:</span> <span class="st">"c0e246b9b83f637f4681389ecabcb2681b4f3af0"</span><span class="fu">,</span></span><br/><span id="cb32-32"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-32" tabindex="-1"/>        <span class="dt">"type"</span><span class="fu">:</span> <span class="st">"github"</span></span><br/><span id="cb32-33"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-33" tabindex="-1"/>      <span class="fu">},</span></span><br/><span id="cb32-34"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-34" tabindex="-1"/>      <span class="dt">"original"</span><span class="fu">:</span> <span class="fu">{</span></span><br/><span id="cb32-35"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-35" tabindex="-1"/>        <span class="dt">"owner"</span><span class="fu">:</span> <span class="st">"numtide"</span><span class="fu">,</span></span><br/><span id="cb32-36"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-36" tabindex="-1"/>        <span class="dt">"repo"</span><span class="fu">:</span> <span class="st">"flake-utils"</span><span class="fu">,</span></span><br/><span id="cb32-37"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-37" tabindex="-1"/>        <span class="dt">"type"</span><span class="fu">:</span> <span class="st">"github"</span></span><br/><span id="cb32-38"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-38" tabindex="-1"/>      <span class="fu">}</span></span><br/><span id="cb32-39"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-39" tabindex="-1"/>    <span class="fu">}</span></span><br/><span id="cb32-40"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-40" tabindex="-1"/>  <span class="fu">},</span></span><br/><span id="cb32-41"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-41" tabindex="-1"/>  <span class="dt">"root"</span><span class="fu">:</span> <span class="st">"root"</span><span class="fu">,</span></span><br/><span id="cb32-42"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-42" tabindex="-1"/>  <span class="dt">"version"</span><span class="fu">:</span> <span class="dv">7</span></span><br/><span id="cb32-43"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-43" tabindex="-1"/><span class="fu">}</span></span></code></pre></div><p>… and you can easily upgrade to, say, a newer revision of Nixpkgs if you need to.</p><p>Additionally, all of the Nix commands are now <em>faster</em>. Specifically, the first time you run a command Nix still needs to download and/or build dependencies, but subsequent runs are faster because Nix can skip the instantiation phase. For more details, see:</p><ul><li><a href="https://www.tweag.io/blog/2020-06-25-eval-cache/">Nix Flakes, Part 2: Evaluation Caching</a></li></ul><h4 id="conclusion">Conclusion</h4><p>Flakes are our final destination, so that’s as far as this post will go. There are technically some more ways that we can overengineer things, but in my experience the idioms highlighted in this post are the ones that provide the highest power-to-weight ratio.</p><p>The key thing to take away is that the Nixpkgs Haskell infrastructure lets you smoothly transition from simpler approaches to more powerful approaches, and even the final flake-enabled approach is actually not that complicated.</p></div>
    </content>
    <updated>2022-08-28T15:56:26Z</updated>
    <published>2022-08-28T15:23:00Z</published>
    <author>
      <name>Gabriella Gonzalez</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/01917800488530923694</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-1777990983847811806</id>
      <author>
        <name>Gabriella Gonzalez</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/01917800488530923694</uri>
      </author>
      <link href="https://www.haskellforall.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default" rel="self" type="application/atom+xml"/>
      <link href="https://www.haskellforall.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Haskell for all</title>
      <updated>2022-09-14T10:40:09Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://byorgey.wordpress.com/?p=2453</id>
    <link href="https://byorgey.wordpress.com/2022/08/27/types-for-top-level-definitions/" rel="alternate" type="text/html"/>
    <link href="https://byorgey.wordpress.com/2022/08/27/types-for-top-level-definitions/#comments" rel="replies" type="text/html"/>
    <link href="https://byorgey.wordpress.com/2022/08/27/types-for-top-level-definitions/feed/atom/" rel="replies" type="application/atom+xml"/>
    <title xml:lang="en">Types for top-level definitions</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml">I’ve come up with idea for a type system for first-class (global) definitions, which can serve as a very lightweight alternative to a proper module system. I’m posting it here in the hopes of getting some feedback and pointers to … <a href="https://byorgey.wordpress.com/2022/08/27/types-for-top-level-definitions/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve come up with idea for a type system for first-class (global) definitions, which can serve as a very lightweight alternative to a proper module system. I’m posting it here in the hopes of getting some feedback and pointers to related work.</p>
<h2 id="commands-and-expressions">Commands and expressions</h2>
<p>The programming language of <a href="https://github.com/swarm-game/swarm/">Swarm</a> (for lack of a better term I will hereafter refer to it as <em>Swarmlang</em>) has a bunch of imperative commands, and standard monadic sequencing constructs. For example,</p>
<pre><code>move; move</code></pre>
<p>does two <code>move</code> commands in sequence, and</p>
<pre><code>thing &lt;- grab; give friend thing</code></pre>
<p>first executes <code>grab</code>, binding the variable <code>thing</code> to the result, then executes <code>give friend thing</code>. Of course, there is also a rich language of pure expressions, with things like arithmetic, strings, lambdas and function application, pairs, sums, and so on.</p>
<p>Some languages make a syntactic distinction between statements and expressions, but Swarmlang does not: everything is an expression, and some expressions happen to have a command type. If <code>t</code> is a type, then <code>cmd t</code> is the type of an imperative command which, when executed, can have some effects and then returns a result of type <code>t</code>. (Of course this should feel very familiar to Haskell programmers; <code>cmd</code> has many similarities to <code>IO</code>.) This approach makes many things simpler and means that commands are first-class values.</p>
<h2 id="typechecking-definitions">Typechecking definitions</h2>
<p>Swarmlang has <em>definitions</em>, which are just expressions with a command type. If <code>e</code> is an expression, then</p>
<pre><code>def x = e end</code></pre>
<p>has type <code>cmd ()</code>. When executed, it should have the effect of binding the name <code>x</code> to the expression <code>e</code>, and bringing <code>x</code> into scope for all subsequent commands. Thus, it is valid to sequence this first definition with a second definition that mentions <code>x</code>, like so:</p>
<pre><code>def x = e end;
def y = foo bar x end</code></pre>
<p>Of course, this means that while typechecking the definition of <code>y</code>, we must be able to look up the type of <code>x</code>. However, the type of the first <code>def</code> command is simply <code>cmd ()</code>, which does not tell us anything about <code>x</code> or its type. Normally, the typing rule for sequencing of commands would be something like</p>
<div style="text-align: center;">
<p><img alt="\displaystyle \frac{\Gamma \vdash c_1 : \mathrm{cmd}\; \tau_1 \qquad \Gamma \vdash c_2 : \mathrm{cmd}\; \tau_2}{\Gamma \vdash c_1 ; c_2 : \mathrm{cmd}\;\tau_2}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cfrac%7B%5CGamma+%5Cvdash+c_1+%3A+%5Cmathrm%7Bcmd%7D%5C%3B+%5Ctau_1+%5Cqquad+%5CGamma+%5Cvdash+c_2+%3A+%5Cmathrm%7Bcmd%7D%5C%3B+%5Ctau_2%7D%7B%5CGamma+%5Cvdash+c_1+%3B+c_2+%3A+%5Cmathrm%7Bcmd%7D%5C%3B%5Ctau_2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/></p>
</div>
<p>but this does not work for <code>def</code> commands, since it does not take into account the new names brought into scope. Up until now, I have dealt with this in a somewhat ad-hoc manner, with some special typechecking rules for <code>def</code> and some ad-hoc restrictions to ensure that <code>def</code> can only syntactically show up at the top level. However, I would <a href="https://github.com/swarm-game/swarm/issues/636">really like to put everything on a more solid theoretical basis</a> (which will hopefully simplify the code as well).</p>
<h2 id="decorating-command-types">Decorating command types</h2>
<p>The basic idea is to decorate the <img alt="\mathrm{cmd}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/> type with extra information about names bound by definitions. As usual, let <img alt="\Gamma" class="latex" src="https://s0.wp.com/latex.php?latex=%5CGamma&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/> denote a generic <em>context</em>, that is, a finite mapping from variable names to their types. Then we extend the <code>cmd</code> type by adding a context to it:</p>
<div style="text-align: center;">
<p><img alt="\mathrm{cmd}\; \tau \Rightarrow \Gamma" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%5Ctau+%5CRightarrow+%5CGamma&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/></p>
</div>
<p>is the type of a command which yields a result of type <img alt="\tau" class="latex" src="https://s0.wp.com/latex.php?latex=%5Ctau&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/> <em>and produces global bindings for some names whose types are recorded in <img alt="\Gamma" class="latex" src="https://s0.wp.com/latex.php?latex=%5CGamma&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/></em>. (Of course, we can continue to use <img alt="\mathrm{cmd}\; \tau" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%5Ctau&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/> as an abbreviation for <img alt="\mathrm{cmd}\; \tau \Rightarrow \varnothing" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%5Ctau+%5CRightarrow+%5Cvarnothing&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/>.) So, for example, <code>def x = 3 end</code> no longer has type <img alt="\mathrm{cmd}\; ()" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%28%29&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/>, but rather something like <img alt="\mathrm{cmd}\; () \Rightarrow \{x : \mathrm{int}\}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%28%29+%5CRightarrow+%5C%7Bx+%3A+%5Cmathrm%7Bint%7D%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/>, representing the fact that although <code>def x = 3 end</code> does not result in an interesting value, it does bind a name, <code>x</code>, whose type is <code>int</code>.</p>
<p>This is slightly unusual in the fact that types and contexts are now mutually recursive, but that doesn’t seem like a big problem. We can now write down a proper typing rule for sequencing that takes definitions into account, something like this:</p>
<div style="text-align: center;">
<p><img alt="\displaystyle \frac{\Gamma \vdash c_1 : \mathrm{cmd} \; \tau_1 \Rightarrow \Gamma_1 \qquad \Gamma, \Gamma_1 \vdash c_2 : \mathrm{cmd} \; \tau_2 \Rightarrow \Gamma_2}{\Gamma \vdash c_1 ; c_2 : \mathrm{cmd} \; \tau_2 \Rightarrow \Gamma, \Gamma_1, \Gamma_2}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cfrac%7B%5CGamma+%5Cvdash+c_1+%3A+%5Cmathrm%7Bcmd%7D+%5C%3B+%5Ctau_1+%5CRightarrow+%5CGamma_1+%5Cqquad+%5CGamma%2C+%5CGamma_1+%5Cvdash+c_2+%3A+%5Cmathrm%7Bcmd%7D+%5C%3B+%5Ctau_2+%5CRightarrow+%5CGamma_2%7D%7B%5CGamma+%5Cvdash+c_1+%3B+c_2+%3A+%5Cmathrm%7Bcmd%7D+%5C%3B+%5Ctau_2+%5CRightarrow+%5CGamma%2C+%5CGamma_1%2C+%5CGamma_2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/></p>
</div>
<p>And of course the typing rule for <code>def</code> looks like this:</p>
<div style="text-align: center;">
<p><img alt="\displaystyle \frac{\Gamma \vdash e : \tau}{\Gamma \vdash \texttt{def}\; x = e\; \texttt{end} : \mathrm{cmd}\; () \Rightarrow \{x : \tau\}}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cfrac%7B%5CGamma+%5Cvdash+e+%3A+%5Ctau%7D%7B%5CGamma+%5Cvdash+%5Ctexttt%7Bdef%7D%5C%3B+x+%3D+e%5C%3B+%5Ctexttt%7Bend%7D+%3A+%5Cmathrm%7Bcmd%7D%5C%3B+%28%29+%5CRightarrow+%5C%7Bx+%3A+%5Ctau%5C%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/></p>
</div>
<p>These rules together can now correctly typecheck an expression like</p>
<pre><code>def x = 3 end;
def y = 2 + x end</code></pre>
<p>where the second definition refers to the name defined by the first. The whole thing would end up having type <img alt="\mathrm{cmd}\; () \Rightarrow \{ x : \mathrm{int}, y : \mathrm{int} \}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%28%29+%5CRightarrow+%5C%7B+x+%3A+%5Cmathrm%7Bint%7D%2C+y+%3A+%5Cmathrm%7Bint%7D+%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/>.</p>
<h2 id="with-polymorphism">…with polymorphism?</h2>
<p>All this seems straightforward with only first-order types, as in my example typing rules above. But once you add parametric polymorphism my brain starts to hurt. Clearly, the context associated to a command type could bind variables to polytypes. For example, <code>def id = \x.x end</code> has type <img alt="\mathrm{cmd}\; () \Rightarrow \{id : \forall \alpha. \alpha \to \alpha\}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%28%29+%5CRightarrow+%5C%7Bid+%3A+%5Cforall+%5Calpha.+%5Calpha+%5Cto+%5Calpha%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"/>. But should the context associated to a command type <em>always</em> contain polytypes, or only when the command type is itself a polytype? In other words, how do we deal with the associated contexts in the monotypes that show up during type inference? And what would it mean to <em>unify</em> two command types with their contexts (and would that ever even be necessary)? I hope it’s actually simple and I just need to think about it some more, but I haven’t wrapped my brain around it yet.</p>
<h2 id="ideas-and-pointers-welcome">Ideas and pointers welcome!</h2>
<p>I’d be very happy to hear anyone’s ideas, or (especially) pointers to published work that seems related or relevant! Feel free to comment either here, or <a href="https://github.com/swarm-game/swarm/issues/636">on the relevant github issue</a>.</p></div>
    </content>
    <updated>2022-08-27T12:47:50Z</updated>
    <published>2022-08-27T12:47:50Z</published>
    <category scheme="https://byorgey.wordpress.com" term="projects"/>
    <category scheme="https://byorgey.wordpress.com" term="context"/>
    <category scheme="https://byorgey.wordpress.com" term="definition"/>
    <category scheme="https://byorgey.wordpress.com" term="types"/>
    <author>
      <name>Brent</name>
      <uri>http://ozark.hendrix.edu/~yorgey/</uri>
    </author>
    <source>
      <id>http://byorgey.wordpress.com/feed/atom/</id>
      <link href="https://byorgey.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://byorgey.wordpress.com/feed/atom/" rel="self" type="application/atom+xml"/>
      <link href="https://byorgey.wordpress.com/osd.xml" rel="search" title="blog :: Brent -&gt; [String]" type="application/opensearchdescription+xml"/>
      <link href="https://s1.wp.com/opensearch.xml" rel="search" title="WordPress.com" type="application/opensearchdescription+xml"/>
      <link href="https://byorgey.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title xml:lang="en">blog :: Brent -&gt; [String]</title>
      <updated>2022-09-01T17:04:53Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-9757377.post-635673596498308069</id>
    <link href="https://wadler.blogspot.com/feeds/635673596498308069/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=9757377&amp;postID=635673596498308069" rel="replies" title="4 Comments" type="text/html"/>
    <link href="https://www.blogger.com/feeds/9757377/posts/default/635673596498308069" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/9757377/posts/default/635673596498308069" rel="self" type="application/atom+xml"/>
    <link href="https://wadler.blogspot.com/2022/08/help-please-do-you-know-any.html" rel="alternate" title="Help, please! Do you know any applications of my work?" type="text/html"/>
    <title>Help, please! Do you know any applications of my work?</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p/><div class="separator" style="clear: both; text-align: center;"><a href="https://markallenassets.blob.core.windows.net/communitycare/2020/02/theory-practice.jpg" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="400" src="https://markallenassets.blob.core.windows.net/communitycare/2020/02/theory-practice.jpg" width="640"/></a></div><br/>When writing an application, it sometimes help if I can point out that monads and type classes, which my research contributed to, are used to process every post on Facebook. (Via <a href="https://hackage.haskell.org/package/haxl">Haxl</a>. Thanks, Simon Marlow!)<p/><p>Do you know of other applications of my work? If so, please email me or list them in the comments. (You can find my email at the bottom of my <a href="https://homepages.inf.ed.ac.uk/wadler/">home page</a>.)</p><p>Possible example: I gather Twitter uses monads and implicits in Scala (where implicits were influenced by type classes), but it's hard to find confirmation online. Do you know whether they are used, and how heavily? (It's easier to find such confirmation for <a href="https://www.theguardian.com/info/developer-blog/2016/dec/22/parental-advisory-implicit-content">The Guardian</a>.)</p><p>Possible example: Do you make heavy use of generics in Java? I contributed to their design.</p><p>Possible example: I gather protocols in Swift are in part inspired by type classes, but it is hard to find confirmation online. Can you point me to confirmation?</p><p>There are many other possibilities. I hope you know some I haven't dreamed of!</p><p>Many thanks for your help. Answers are welcome at any time, but would be most useful if they can be provided by 2 September 2022.</p><p><br/></p></div>
    </content>
    <updated>2022-08-26T13:25:46Z</updated>
    <published>2022-08-26T13:25:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="F#"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Functional Programming"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Gender"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Haskell"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Java"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="JavaScript"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Lego"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Object-Oriented"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Programming Languages"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Scala"/>
    <author>
      <name>Philip Wadler</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/12009347515095774366</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-9757377</id>
      <category term="Politics"/>
      <category term="Functional Programming"/>
      <category term="Programming Languages"/>
      <category term="Scotland"/>
      <category term="Computing"/>
      <category term="Independence"/>
      <category term="Yes!"/>
      <category term="Haskell"/>
      <category term="UK"/>
      <category term="Academia"/>
      <category term="Edinburgh"/>
      <category term="Cycling"/>
      <category term="Graphics"/>
      <category term="Mathematics"/>
      <category term="Science"/>
      <category term="Types"/>
      <category term="Logic"/>
      <category term="US"/>
      <category term="Covid-19"/>
      <category term="Security"/>
      <category term="Web"/>
      <category term="EU"/>
      <category term="Comics"/>
      <category term="Theory"/>
      <category term="Climate Change"/>
      <category term="Israel"/>
      <category term="Blockchain"/>
      <category term="Education"/>
      <category term="IOHK"/>
      <category term="Internet"/>
      <category term="SIGPLAN"/>
      <category term="Scala"/>
      <category term="Status"/>
      <category term="University"/>
      <category term="ACM"/>
      <category term="Comedy"/>
      <category term="Concurrency"/>
      <category term="Cryptocurrency"/>
      <category term="DSL"/>
      <category term="Databases"/>
      <category term="Dynamic and Static Typing"/>
      <category term="F#"/>
      <category term="Green"/>
      <category term="JavaScript"/>
      <category term="Lego"/>
      <category term="Privacy"/>
      <category term="Recursion"/>
      <category term="Session Types"/>
      <category term="Strange Loop"/>
      <category term="Writing"/>
      <category term="Agda"/>
      <category term="Category Theory"/>
      <category term="Developers"/>
      <category term="Formal Methods"/>
      <category term="Java"/>
      <category term="Object-Oriented"/>
      <category term="Technology"/>
      <category term="Architecture"/>
      <category term="Copyright"/>
      <category term="Distributed Computing"/>
      <category term="Europe"/>
      <category term="Productivity"/>
      <category term="Racket"/>
      <category term="Science Fiction"/>
      <category term="BLM"/>
      <category term="Brexit"/>
      <category term="DRM"/>
      <category term="Environment"/>
      <category term="Erlang"/>
      <category term="Finance"/>
      <category term="Gender"/>
      <category term="Theatre"/>
      <category term="BDS"/>
      <category term="Books"/>
      <category term="Cinema"/>
      <category term="Communication"/>
      <category term="Japan"/>
      <category term="Net Neutrality"/>
      <category term="Open Access"/>
      <category term="Palestine"/>
      <category term="Pyret"/>
      <category term="Scheme"/>
      <category term="Sweden"/>
      <author>
        <name>Philip Wadler</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/12009347515095774366</uri>
      </author>
      <link href="https://wadler.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom" rel="self" type="application/atom+xml"/>
      <link href="https://wadler.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom&amp;start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Wadler's Blog</title>
      <updated>2022-09-07T12:38:25Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2022-08-25-scalable-build-systems-team/</id>
    <link href="https://tweag.io/blog/2022-08-25-scalable-build-systems-team/" rel="alternate" type="text/html"/>
    <title>Introducing the Scalable Build Systems Team</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">
<p>In this post I will introduce the <em>Scalable Build Systems</em> team at Tweag and
describe our goals and our work.</p>
<p>We believe that correct, efficient, and reliable builds are critical for
developers to work and collaborate effectively. And that the size and
complexity of a project should not be bounded by its build
system, but by what is best to achieve the goal of the project.</p>
<p>Whether you have a large codebase or a small one, whether your project is
polyglot or monolingual, and whether you work in an enterprise organization or
on an open source project - the build system you have available should provide
correct, efficient, reliable builds.</p>
<h1 id="open-source"><a class="anchor before" href="https://www.tweag.io/rss.xml#open-source"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Open Source</h1>
<p>We believe that the open source build system <a href="https://bazel.build/">Bazel</a> takes a leap in the
right direction and establishes important values like correctness,
reproducibility, and scalability in the industry. Therefore, we invested into
the Bazel ecosystem, by contributing to Bazel extensions and to Bazel itself,
as well as into our own Bazel extensions <a href="https://github.com/tweag/rules_haskell"><code class="language-text">rules_haskell</code></a>, to
build Haskell code with Bazel, and <a href="https://github.com/tweag/rules_sh"><code class="language-text">rules_sh</code></a>, to import standard
shell tools into Bazel.</p>
<p>To achieve reproducibility and correctness we must not stop at a project’s
boundaries, but must manage system dependencies and the developer
environment as well. Therefore, we developed <a href="https://github.com/tweag/rules_nixpkgs"><code class="language-text">rules_nixpkgs</code></a> to <a href="https://www.tweag.io/blog/2020-09-16-implicit-build-dependencies/">make
implicit dependencies explicit</a> by providing them through
<a href="https://nixos.org/">Nix</a>.</p>
<p>Developer experience matters and the build system
and tooling around it should help developers work more productively.
Therefore, we work on developer tooling, such as automation to achieve
<a href="https://www.tweag.io/blog/2022-06-23-haskell-module/">fine-grained incremental builds with Haskell</a>.</p>
<p>Our goal is to help the open source ecosystem lead the state of the art of
build systems and make the necessary tools and infrastructure readily available
and accessible for anyone from open source to enterprise projects.</p>
<h1 id="community"><a class="anchor before" href="https://www.tweag.io/rss.xml#community"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Community</h1>
<p>Sharing knowledge is necessary for the industry to build software effectively.
You can read about our work on our <a href="https://www.tweag.io/blog/tags/bazel">blog</a>, you can meet
us in the <a href="https://bazel.build/help.md">Bazel community channels</a>, for example in the
mailing list or on Slack, and you can meet us at conferences related to Bazel.</p>
<p>We co-organized <a href="https://skillsmatter.com/conferences/13682-bazel-exchange#skillscasts">Bazel eXchange 2022</a> as a
partner of <a href="https://skillsmatter.com/go/partners">SkillsMatter</a>. And we contributed to the program
with talks by Alexei Drake about <a href="https://skillsmatter.com/skillscasts/17631-building-rust-projects-with-nix-and-bazel">Building Rust with
Nix+Bazel</a> and Guillaume Maudoux about <a href="https://skillsmatter.com/skillscasts/17673-remote-execution-with-rules-nixpkgs">Remote execution
with <code class="language-text">rules_nixpkgs</code></a>, and the end of day panels. Don’t miss the other talks either, since the conference had an
excellent program!</p>
<p>We are happy to say that this first instance of Bazel eXchange was a success!
We had 115 participants with a fantastic rate of 80% of sign-ups attending! The event
was held online, but nonetheless, participants were very engaged, contributed
great questions, and got in touch on the chat and in the networking session. We
hope that the next instance of the conference can be held in person.</p>
<p>Continuing on our commitment to the community we are thrilled to announce that
we are starting a build systems newsletter. <a href="https://build.news">Sign up</a> and we will
keep you up-to-date on developments in and around the Bazel
ecosystem, as well as upcoming events.</p>
<h1 id="services"><a class="anchor before" href="https://www.tweag.io/rss.xml#services"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Services</h1>
<p>Do you share our vision on build systems and developer productivity? Our team
has experienced, versatile engineers with a broad range of
backgrounds and we are Google’s first Bazel Community Expert. We’d love to help you build your software
correctly, efficiently, and reliably, and make the required tools available to everyone.</p>
<p><a href="https://www.tweag.io/contact">Get in touch</a>, we can help you with the following and more:</p>
<ul>
<li><strong>Assessment</strong>
We assess your project, if and how it can benefit from a scalable build
system, what improvements you can expect, what resources may be required, and
what challenges may lie on the way.</li>
<li><strong>Migration</strong>
We can lead your build system migration or help you along the way. We’ll
embed our engineers in your team, collaborating with them directly on your code and sharing all relevant knowledge.</li>
<li><strong>Tuning</strong>
We can tune your build system to improve its performance and boost your team’s
productivity.</li>
<li><strong>Upstream</strong>
We can improve the open source tools you use and contribute the changes upstream,
to make them available for the industry – your potential customers and employees.</li>
<li><strong>Training</strong>
We can show your team how to work productively with your new build system,
and how to get the most out of these tools.</li>
</ul></div>
    </summary>
    <updated>2022-08-25T00:00:00Z</updated>
    <published>2022-08-25T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html"/>
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2022-09-15T11:54:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.well-typed.com/blog/2022/08/plutus-initial-conditions</id>
    <link href="https://well-typed.com/blog/2022/08/plutus-initial-conditions" rel="alternate" type="text/html"/>
    <title>Verifying initial conditions in Plutus</title>
    <summary>On a UTxO-style blockchain such as Cardano, transaction outputs are
normally to the (hash) of a public key; in order to spend such an
output, the spending transaction must be signed with the corresponding
private key as evidence that the party creating the transaction has the
right to spend the output. [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>On a UTxO-style blockchain such as Cardano, transaction outputs are normally to the (hash) of a public key; in order to spend such an output, the spending transaction must be signed with the corresponding private key as evidence that the party creating the transaction has the right to spend the output.</p>
<p>The <a href="https://iohk.io/en/research/library/papers/the-extended-utxo-model/">extended UTxO model</a> introduces a second kind of output: an output to a <em>smart contract</em>: a piece of code <code>f</code>. Along with the contract itself, the output also contains an additional argument <code>d</code>, known as the <em>datum</em>. When a transaction spends such an output, <code>f(d)</code> is executed; when <code>f</code> indicates that all is fine, the transaction is approved; otherwise, it is rejected.</p>
<p>An immediate consequence of this model is that outputs are only verified <em>when they are spent</em>, not when they are created. This can lead to some tricky-to-verify initial conditions. We will explore this problem in this blog post, and suggest some ways in which we can solve it. Along the way, we will recap some often misunderstood Plutus concepts.</p>
<p>This work was done as part of the development of <a href="https://www.be.exchange/">Be, a (smart) contract platform</a>.</p>

<h2 id="stage-restriction-datums-vs-parameters">Stage restriction: datums vs parameters</h2>
<p>Script outputs consist of three things: the value at the output, the hash of the script, and a datum or datum hash. We will ignore the value in the rest of this section.</p>
<p>We can think of a script hash and a datum as a pair of a function <code>f</code> and an argument datum <code>d</code>, which we might write as <code>f(d)</code>. Scripts often have arguments other than the datum too; we might write this as <code>f<sub>x1, .., xN</sub>(d)</code>. These additional arguments are commonly referred to as <em>parameters</em>.</p>
<p>The difference between parameters and the datum is one of <em>stage</em>: parameters are applied at the stage of script <em>compilation</em>, whereas the datum is applied at the stage of script <em>execution</em>. Let’s consider this from a few different angles.</p>
<ul>
<li><p>(Data) values<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn1" id="fnref1"><sup>1</sup></a> that must be computed off-chain should be parameters; values that must be computed on-chain should be in the datum.</p>
<p>For example, stateful scripts often have to compute their next state. Since this computation happens on-chain, this state must therefore live in the script’s datum.</p></li>
<li><p>From the on-chain code’s perspective, <code>f<sub>x</sub></code> and <code>f<sub>x’</sub></code> are different scripts with different hashes, whereas <code>f(d)</code> and <code>f(d')</code> look like the <em>same</em> script, applied to different datums.</p></li>
<li><p>Sometimes there are reasons to prefer that a particular value is a parameter rather than a datum: after all, datums are just values and cannot <em>a priori</em> be trusted (we will come back to this in detail later). In principle it’s not <em>impossible</em> to compute a parameter on-chain, but it’s difficult: we must have sufficient information on-chain to be able to compute, for a given <code>x</code>, the hash of <code>f<sub>x</sub></code> (that is, the hash of the serialised source code of <code>f<sub>x</sub></code>). In practice, on Cardano this is currently impossible, because the appropriate hashing algorithm is not available on-chain.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn2" id="fnref2"><sup>2</sup></a></p></li>
<li><p>Conversely, sometimes we might prefer that a value is stored in the datum rather than is passed as a parameter. Off-chain code can easily recognize outputs to <code>f(d)</code> in the current UTxO set without needing to be aware of <code>d</code>; however, outputs to <code>f<sub>x</sub></code> cannot be recognized as such without <code>x</code>, since the hash of <code>f<sub>x</sub></code> is different for every <code>x</code>.</p></li>
</ul>
<h2 id="self-reference-direct-and-indirect-recursion">Self-reference: direct and indirect recursion</h2>
<p>Scripts often need to be aware of their own hash. For example, a script <code>f</code> may need to check that any transaction spending an output to <code>f</code> also contains an output back to <code>f</code>:</p>
<center>
<svg height="15.165619pt" version="1.1" viewBox="123.734816 -15.153664 139.892408 15.165619" width="139.892408pt">
<title>   (f, d, V) \xrightarrow{\mspace{30mu}\mathit{Tx}\mspace{30mu}}   (f, d&amp;39;, V&amp;39;) </title>
<defs/>
<g>
<path d="M127.620246-.083686C127.620246-.119552 127.620246-.143462 127.417008-.3467C126.221491-1.554172 125.552002-3.526775 125.552002-5.965629C125.552002-8.284932 126.113895-10.281445 127.500694-11.692154C127.620246-11.799751 127.620246-11.823661 127.620246-11.859527C127.620246-11.931258 127.56047-11.955168 127.51265-11.955168C127.357232-11.955168 126.376909-11.094396 125.791105-9.92279C125.181392-8.715318 124.906423-7.436115 124.906423-5.965629C124.906423-4.901619 125.073795-3.478954 125.695464-2.199751C126.400819-.765131 127.381143 .011955 127.51265 .011955C127.56047 .011955 127.620246-.011955 127.620246-.083686Z"/>
<path d="M133.619147-7.79477C133.858251-7.79477 133.953892-7.79477 133.953892-8.021918C133.953892-8.141469 133.858251-8.141469 133.643058-8.141469H132.674689C132.901837-9.372852 133.069209-10.221669 133.164851-10.604234C133.236582-10.891158 133.48764-11.166127 133.798475-11.166127C134.049533-11.166127 134.300592-11.058531 134.420143-10.950934C133.953892-10.903113 133.81043-10.556413 133.81043-10.353176C133.81043-10.114072 133.989757-9.97061 134.216906-9.97061C134.456009-9.97061 134.814664-10.173848 134.814664-10.628144C134.814664-11.130262 134.312547-11.40523 133.78652-11.40523C133.272447-11.40523 132.77033-11.022665 132.531227-10.556413C132.316034-10.137983 132.196482-9.707597 131.921513-8.141469H131.120517C130.893369-8.141469 130.773817-8.141469 130.773817-7.926276C130.773817-7.79477 130.845548-7.79477 131.084652-7.79477H131.849782C131.634589-6.682939 131.144427-3.981071 130.869459-2.701868C130.666221-1.661768 130.486893-.789041 129.889135-.789041C129.853269-.789041 129.506569-.789041 129.291376-1.016189C129.90109-1.06401 129.90109-1.590037 129.90109-1.601993C129.90109-1.841096 129.721762-1.984558 129.494614-1.984558C129.255511-1.984558 128.896856-1.78132 128.896856-1.327024C128.896856-.812951 129.422883-.549938 129.889135-.549938C131.108562-.549938 131.610679-2.737733 131.742186-3.335492C131.957379-4.25604 132.543182-7.436115 132.602958-7.79477H133.619147Z"/>
<path d="M137.014504-2.940971C137.014504-3.634371 136.787356-4.148443 136.297194-4.148443C135.914629-4.148443 135.723346-3.837609 135.723346-3.574595S135.902674-2.988792 136.309149-2.988792C136.464567-2.988792 136.596073-3.036613 136.70367-3.144209C136.72758-3.16812 136.739535-3.16812 136.751491-3.16812C136.775401-3.16812 136.775401-3.000747 136.775401-2.940971C136.775401-2.546451 136.70367-1.769365 136.01027-.992279C135.878763-.848817 135.878763-.824907 135.878763-.800996C135.878763-.74122 135.938539-.681445 135.998315-.681445C136.093956-.681445 137.014504-1.566127 137.014504-2.940971Z"/>
<path d="M145.940855-10.9868C145.95281-11.03462 145.97672-11.106351 145.97672-11.166127C145.97672-11.285679 145.857169-11.285679 145.833258-11.285679C145.821303-11.285679 145.2355-11.237858 145.175724-11.225903C144.972486-11.213948 144.793159-11.190037 144.577966-11.178082C144.279087-11.154172 144.1954-11.142217 144.1954-10.927024C144.1954-10.807472 144.291042-10.807472 144.458414-10.807472C145.044217-10.807472 145.056173-10.699875 145.056173-10.580324C145.056173-10.508593 145.032262-10.412951 145.020307-10.377086L144.291042-7.47198C144.159535-7.782814 143.836745-8.261021 143.215077-8.261021C141.864143-8.261021 140.405612-6.515567 140.405612-4.746202C140.405612-3.56264 141.099012-2.86924 141.911963-2.86924C142.569498-2.86924 143.13139-3.383313 143.466135-3.777833C143.585687-3.072478 144.14758-2.86924 144.506235-2.86924S145.151814-3.084433 145.367007-3.514819C145.55829-3.921295 145.725662-4.65056 145.725662-4.698381C145.725662-4.758157 145.677841-4.805978 145.60611-4.805978C145.498514-4.805978 145.486559-4.746202 145.438738-4.566874C145.25941-3.861519 145.032262-3.108344 144.5421-3.108344C144.1954-3.108344 144.17149-3.419178 144.17149-3.658281C144.17149-3.706102 144.17149-3.957161 144.255176-4.291905L145.940855-10.9868ZM143.525911-4.411457C143.466135-4.208219 143.466135-4.184309 143.298763-3.957161C143.035749-3.622416 142.509722-3.108344 141.947829-3.108344C141.457667-3.108344 141.182698-3.550685 141.182698-4.25604C141.182698-4.913574 141.553308-6.252553 141.780456-6.75467C142.186932-7.591532 142.748825-8.021918 143.215077-8.021918C144.004118-8.021918 144.159535-7.041594 144.159535-6.945953C144.159535-6.933998 144.123669-6.77858 144.111714-6.75467L143.525911-4.411457Z"/>
<path d="M148.341356-2.940971C148.341356-3.634371 148.114208-4.148443 147.624046-4.148443C147.241481-4.148443 147.050198-3.837609 147.050198-3.574595S147.229526-2.988792 147.636001-2.988792C147.791418-2.988792 147.922925-3.036613 148.030522-3.144209C148.054432-3.16812 148.066387-3.16812 148.078342-3.16812C148.102253-3.16812 148.102253-3.000747 148.102253-2.940971C148.102253-2.546451 148.030522-1.769365 147.337122-.992279C147.205615-.848817 147.205615-.824907 147.205615-.800996C147.205615-.74122 147.265391-.681445 147.325167-.681445C147.420808-.681445 148.341356-1.566127 148.341356-2.940971Z"/>
<path d="M158.654506-9.827148C159.060982-10.472727 159.431592-10.759651 160.041306-10.807472C160.160858-10.819427 160.256499-10.819427 160.256499-11.03462C160.256499-11.082441 160.232589-11.154172 160.124992-11.154172C159.909799-11.154172 159.395727-11.130262 159.180534-11.130262C158.833834-11.130262 158.475179-11.154172 158.140434-11.154172C158.044793-11.154172 157.925241-11.154172 157.925241-10.927024C157.925241-10.819427 158.032838-10.807472 158.080658-10.807472C158.522999-10.771606 158.57082-10.556413 158.57082-10.412951C158.57082-10.233624 158.403448-9.958655 158.391493-9.9467L154.63757-3.993026L153.800708-10.436862C153.800708-10.783562 154.422377-10.807472 154.553884-10.807472C154.733211-10.807472 154.840808-10.807472 154.840808-11.03462C154.840808-11.154172 154.709301-11.154172 154.673435-11.154172C154.470197-11.154172 154.231094-11.130262 154.027856-11.130262H153.358367C152.48564-11.130262 152.126985-11.154172 152.115029-11.154172C152.043298-11.154172 151.899836-11.154172 151.899836-10.938979C151.899836-10.807472 151.983523-10.807472 152.174805-10.807472C152.784519-10.807472 152.820384-10.699875 152.85625-10.400996L153.812663-3.024658C153.848529-2.773599 153.848529-2.737733 154.015901-2.737733C154.159363-2.737733 154.219139-2.773599 154.338691-2.964882L158.654506-9.827148Z"/>
<path d="M164.051294-5.965629C164.051294-6.874222 163.931742-8.356663 163.262253-9.743462C162.556898-11.178082 161.576574-11.955168 161.445067-11.955168C161.397246-11.955168 161.33747-11.931258 161.33747-11.859527C161.33747-11.823661 161.33747-11.799751 161.540708-11.596513C162.736225-10.389041 163.405715-8.416438 163.405715-5.977584C163.405715-3.658281 162.843822-1.661768 161.457022-.251059C161.33747-.143462 161.33747-.119552 161.33747-.083686C161.33747-.011955 161.397246 .011955 161.445067 .011955C161.600484 .011955 162.580808-.848817 163.166611-2.020423C163.776325-3.239851 164.051294-4.531009 164.051294-5.965629Z"/>
<path d="M189.845375-14.603726C189.909136-14.8508 189.964927-14.86674 190.020717-14.87471C190.076508-14.89065 190.323582-14.89065 190.475014-14.89065C191.256085-14.89065 191.566919-14.8508 191.566919-14.276952C191.566919-14.197251 191.558949-14.14146 191.550979-14.069729L191.487218-13.551671V-13.511821C191.487218-13.503851 191.495188-13.47994 191.487218-13.47197C191.479248-13.45603 191.463308-13.344449 191.63068-13.344449C191.766172-13.344449 191.774142-13.400239 191.790082-13.511821L192.013245-14.930501L192.021215-15.042082C192.021215-15.153664 191.917604-15.153664 191.798052-15.153664H187.454341C187.278999-15.153664 187.255088-15.153664 187.207268-15.010202L186.721091-13.591522C186.68124-13.487911 186.68124-13.47197 186.68124-13.45603C186.68124-13.344449 186.792822-13.344449 186.832673-13.344449C186.864553-13.344449 186.912374-13.344449 186.944254-13.368359C186.968164-13.384299 186.968164-13.400239 187.039895-13.615432C187.446371-14.763129 187.685475-14.89065 188.75347-14.89065C188.912872-14.89065 189.112125-14.89065 189.231676-14.87471C189.223706-14.763129 189.223706-14.739218 189.191826-14.619666L188.147741-10.435358C188.06804-10.116553 188.020219-10.028882 187.294939-10.028882H187.191328C187.047866-10.028882 186.952224-10.028882 186.952224-9.87745C186.952224-9.845569 186.968164-9.765868 187.087716-9.765868C187.39058-9.765868 187.701415-9.789779 188.012249-9.789779H188.594067C188.912872-9.789779 189.247616-9.765868 189.558451-9.765868C189.614242-9.765868 189.725823-9.765868 189.725823-9.9173C189.725823-10.028882 189.630182-10.028882 189.50266-10.028882H189.399049C189.263557-10.028882 189.136035-10.036852 189.000543-10.044822C188.80926-10.068732 188.75347-10.084673 188.75347-10.188284C188.75347-10.236105 188.77738-10.315806 188.77738-10.323776L189.845375-14.603726Z"/>
<path d="M193.336737-10.849803C193.265006-10.58679 193.097634-9.90933 192.595517-9.90933C192.420174-9.90933 192.284682-9.981061 192.236862-10.020912C192.396264-10.084673 192.515816-10.228135 192.515816-10.403477C192.515816-10.63461 192.324533-10.674461 192.236862-10.674461C192.005729-10.674461 191.830386-10.475208 191.830386-10.236105C191.830386-9.853539 192.236862-9.686167 192.587547-9.686167C192.946202-9.686167 193.209215-9.90933 193.400498-10.188284C193.53599-9.89339 193.838854-9.686167 194.22142-9.686167C195.050311-9.686167 195.528518-10.674461 195.528518-10.913564C195.528518-11.009206 195.408966-11.009206 195.377086-11.009206C195.273474-11.009206 195.241594-10.985295 195.217684-10.905594C194.96264-10.084673 194.468493-9.90933 194.23736-9.90933C193.990286-9.90933 193.822914-10.084673 193.822914-10.411447C193.822914-10.58679 193.918555-10.969355 193.990286-11.240339C194.069988-11.591024 194.157659-11.933739 194.24533-12.276454C194.372852-12.7706 194.643836-13.057525 194.9467-13.057525C195.153923-13.057525 195.289415-12.953913 195.305355-12.945943C195.233624-12.922033 195.026401-12.794511 195.026401-12.563378C195.026401-12.340214 195.201743-12.292394 195.305355-12.292394C195.456787-12.292394 195.703861-12.403975 195.703861-12.73075C195.703861-13.169106 195.217684-13.280688 194.95467-13.280688C194.627895-13.280688 194.356912-13.097375 194.141719-12.778571C194.046077-12.969853 193.806974-13.280688 193.320797-13.280688C192.483935-13.280688 192.013699-12.276454 192.013699-12.061261C192.013699-11.957649 192.11731-11.957649 192.165131-11.957649C192.268742-11.957649 192.292653-11.981559 192.316563-12.061261C192.563636-12.850302 193.041843-13.057525 193.304857-13.057525S193.719303-12.850302 193.719303-12.555407C193.719303-12.396005 193.679452-12.228633 193.591781-11.885918L193.336737-10.849803Z"/>
<path d="M176.431547-5.738481C176.634785-5.738481 176.849978-5.738481 176.849978-5.977584S176.634785-6.216687 176.431547-6.216687H169.963801C169.760563-6.216687 169.54537-6.216687 169.54537-5.977584S169.760563-5.738481 169.963801-5.738481H176.431547Z"/>
<path d="M180.093702-5.738481C180.29694-5.738481 180.512133-5.738481 180.512133-5.977584S180.29694-6.216687 180.093702-6.216687H173.625956C173.422718-6.216687 173.207525-6.216687 173.207525-5.977584S173.422718-5.738481 173.625956-5.738481H180.093702Z"/>
<path d="M186.735528-5.738481C186.938766-5.738481 187.153959-5.738481 187.153959-5.977584S186.938766-6.216687 186.735528-6.216687H180.267782C180.064544-6.216687 179.849351-6.216687 179.849351-5.977584S180.064544-5.738481 180.267782-5.738481H186.735528Z"/>
<path d="M193.377354-5.738481C193.580592-5.738481 193.795785-5.738481 193.795785-5.977584S193.580592-6.216687 193.377354-6.216687H186.909608C186.70637-6.216687 186.491177-6.216687 186.491177-5.977584S186.70637-5.738481 186.909608-5.738481H193.377354Z"/>
<path d="M200.01918-5.738481C200.222418-5.738481 200.437611-5.738481 200.437611-5.977584S200.222418-6.216687 200.01918-6.216687H193.551434C193.348196-6.216687 193.133003-6.216687 193.133003-5.977584S193.348196-5.738481 193.551434-5.738481H200.01918Z"/>
<path d="M206.661006-5.738481C206.864244-5.738481 207.079437-5.738481 207.079437-5.977584S206.864244-6.216687 206.661006-6.216687H200.19326C199.990022-6.216687 199.774829-6.216687 199.774829-5.977584S199.990022-5.738481 200.19326-5.738481H206.661006Z"/>
<path d="M212.415178-5.738481C211.757644-5.236364 211.434855-4.746202 211.339213-4.590785C210.801231-3.765878 210.705589-3.012702 210.705589-3.000747C210.705589-2.857285 210.849051-2.857285 210.944693-2.857285C211.147931-2.857285 211.159886-2.881196 211.207706-3.096389C211.482675-4.267995 212.18803-5.272229 213.538964-5.822167C213.682426-5.869988 213.718292-5.893898 213.718292-5.977584S213.646561-6.097136 213.62265-6.109091C213.096623-6.312329 211.650048-6.910087 211.195751-8.918555C211.159886-9.062017 211.147931-9.097883 210.944693-9.097883C210.849051-9.097883 210.705589-9.097883 210.705589-8.954421C210.705589-8.930511 210.813186-8.177335 211.315303-7.376339C211.554406-7.017684 211.901106-6.599253 212.415178-6.216687H203.532489C203.317295-6.216687 203.102102-6.216687 203.102102-5.977584S203.317295-5.738481 203.532489-5.738481H212.415178Z"/>
<path d="M221.606026-.083686C221.606026-.119552 221.606026-.143462 221.402788-.3467C220.207271-1.554172 219.537782-3.526775 219.537782-5.965629C219.537782-8.284932 220.099675-10.281445 221.486474-11.692154C221.606026-11.799751 221.606026-11.823661 221.606026-11.859527C221.606026-11.931258 221.54625-11.955168 221.498429-11.955168C221.343012-11.955168 220.362688-11.094396 219.776885-9.92279C219.167171-8.715318 218.892203-7.436115 218.892203-5.965629C218.892203-4.901619 219.059575-3.478954 219.681244-2.199751C220.386599-.765131 221.366922 .011955 221.498429 .011955C221.54625 .011955 221.606026-.011955 221.606026-.083686Z"/>
<path d="M227.604927-7.79477C227.84403-7.79477 227.939672-7.79477 227.939672-8.021918C227.939672-8.141469 227.84403-8.141469 227.628837-8.141469H226.660469C226.887617-9.372852 227.054989-10.221669 227.15063-10.604234C227.222361-10.891158 227.47342-11.166127 227.784254-11.166127C228.035313-11.166127 228.286371-11.058531 228.405923-10.950934C227.939672-10.903113 227.79621-10.556413 227.79621-10.353176C227.79621-10.114072 227.975537-9.97061 228.202685-9.97061C228.441789-9.97061 228.800444-10.173848 228.800444-10.628144C228.800444-11.130262 228.298327-11.40523 227.772299-11.40523C227.258227-11.40523 226.75611-11.022665 226.517007-10.556413C226.301814-10.137983 226.182262-9.707597 225.907293-8.141469H225.106297C224.879149-8.141469 224.759597-8.141469 224.759597-7.926276C224.759597-7.79477 224.831328-7.79477 225.070431-7.79477H225.835562C225.620369-6.682939 225.130207-3.981071 224.855238-2.701868C224.652-1.661768 224.472673-.789041 223.874914-.789041C223.839049-.789041 223.492349-.789041 223.277156-1.016189C223.88687-1.06401 223.88687-1.590037 223.88687-1.601993C223.88687-1.841096 223.707542-1.984558 223.480394-1.984558C223.24129-1.984558 222.882635-1.78132 222.882635-1.327024C222.882635-.812951 223.408663-.549938 223.874914-.549938C225.094342-.549938 225.596459-2.737733 225.727965-3.335492C225.943158-4.25604 226.528962-7.436115 226.588738-7.79477H227.604927Z"/>
<path d="M231.000284-2.940971C231.000284-3.634371 230.773136-4.148443 230.282974-4.148443C229.900409-4.148443 229.709126-3.837609 229.709126-3.574595S229.888453-2.988792 230.294929-2.988792C230.450346-2.988792 230.581853-3.036613 230.68945-3.144209C230.71336-3.16812 230.725315-3.16812 230.73727-3.16812C230.761181-3.16812 230.761181-3.000747 230.761181-2.940971C230.761181-2.546451 230.68945-1.769365 229.99605-.992279C229.864543-.848817 229.864543-.824907 229.864543-.800996C229.864543-.74122 229.924319-.681445 229.984095-.681445C230.079736-.681445 231.000284-1.566127 231.000284-2.940971Z"/>
<path d="M239.926635-10.9868C239.93859-11.03462 239.9625-11.106351 239.9625-11.166127C239.9625-11.285679 239.842948-11.285679 239.819038-11.285679C239.807083-11.285679 239.22128-11.237858 239.161504-11.225903C238.958266-11.213948 238.778938-11.190037 238.563745-11.178082C238.264866-11.154172 238.18118-11.142217 238.18118-10.927024C238.18118-10.807472 238.276821-10.807472 238.444194-10.807472C239.029997-10.807472 239.041952-10.699875 239.041952-10.580324C239.041952-10.508593 239.018042-10.412951 239.006087-10.377086L238.276821-7.47198C238.145315-7.782814 237.822525-8.261021 237.200856-8.261021C235.849922-8.261021 234.391392-6.515567 234.391392-4.746202C234.391392-3.56264 235.084792-2.86924 235.897743-2.86924C236.555277-2.86924 237.11717-3.383313 237.451915-3.777833C237.571466-3.072478 238.133359-2.86924 238.492014-2.86924S239.137594-3.084433 239.352787-3.514819C239.544069-3.921295 239.711442-4.65056 239.711442-4.698381C239.711442-4.758157 239.663621-4.805978 239.59189-4.805978C239.484293-4.805978 239.472338-4.746202 239.424518-4.566874C239.24519-3.861519 239.018042-3.108344 238.52788-3.108344C238.18118-3.108344 238.15727-3.419178 238.15727-3.658281C238.15727-3.706102 238.15727-3.957161 238.240956-4.291905L239.926635-10.9868ZM237.511691-4.411457C237.451915-4.208219 237.451915-4.184309 237.284542-3.957161C237.021529-3.622416 236.495501-3.108344 235.933608-3.108344C235.443447-3.108344 235.168478-3.550685 235.168478-4.25604C235.168478-4.913574 235.539088-6.252553 235.766236-6.75467C236.172712-7.591532 236.734605-8.021918 237.200856-8.021918C237.989897-8.021918 238.145315-7.041594 238.145315-6.945953C238.145315-6.933998 238.109449-6.77858 238.097494-6.75467L237.511691-4.411457Z"/>
<path d="M242.107958-11.702811C242.147808-11.806423 242.179689-11.862213 242.179689-11.941914C242.179689-12.204928 241.940585-12.380271 241.717422-12.380271C241.398618-12.380271 241.310947-12.101317 241.279066-11.989735L240.266862-8.554617C240.234981-8.458975 240.234981-8.435065 240.234981-8.427095C240.234981-8.355364 240.282802-8.339424 240.362503-8.315513C240.505965-8.251753 240.521905-8.251753 240.537846-8.251753C240.561756-8.251753 240.609577-8.251753 240.665367-8.387244L242.107958-11.702811Z"/>
<path d="M245.122212-2.940971C245.122212-3.634371 244.895063-4.148443 244.404901-4.148443C244.022336-4.148443 243.831053-3.837609 243.831053-3.574595S244.010381-2.988792 244.416857-2.988792C244.572274-2.988792 244.703781-3.036613 244.811377-3.144209C244.835288-3.16812 244.847243-3.16812 244.859198-3.16812C244.883108-3.16812 244.883108-3.000747 244.883108-2.940971C244.883108-2.546451 244.811377-1.769365 244.117977-.992279C243.986471-.848817 243.986471-.824907 243.986471-.800996C243.986471-.74122 244.046246-.681445 244.106022-.681445C244.201664-.681445 245.122212-1.566127 245.122212-2.940971Z"/>
<path d="M255.435362-9.827148C255.841837-10.472727 256.212448-10.759651 256.822161-10.807472C256.941713-10.819427 257.037354-10.819427 257.037354-11.03462C257.037354-11.082441 257.013444-11.154172 256.905847-11.154172C256.690654-11.154172 256.176582-11.130262 255.961389-11.130262C255.614689-11.130262 255.256034-11.154172 254.921289-11.154172C254.825648-11.154172 254.706096-11.154172 254.706096-10.927024C254.706096-10.819427 254.813693-10.807472 254.861514-10.807472C255.303855-10.771606 255.351676-10.556413 255.351676-10.412951C255.351676-10.233624 255.184303-9.958655 255.172348-9.9467L251.418425-3.993026L250.581563-10.436862C250.581563-10.783562 251.203232-10.807472 251.334739-10.807472C251.514067-10.807472 251.621663-10.807472 251.621663-11.03462C251.621663-11.154172 251.490156-11.154172 251.454291-11.154172C251.251053-11.154172 251.011949-11.130262 250.808712-11.130262H250.139222C249.266495-11.130262 248.90784-11.154172 248.895885-11.154172C248.824154-11.154172 248.680692-11.154172 248.680692-10.938979C248.680692-10.807472 248.764378-10.807472 248.955661-10.807472C249.565374-10.807472 249.60124-10.699875 249.637105-10.400996L250.593519-3.024658C250.629384-2.773599 250.629384-2.737733 250.796756-2.737733C250.940218-2.737733 250.999994-2.773599 251.119546-2.964882L255.435362-9.827148Z"/>
<path d="M259.572871-11.702811C259.612722-11.806423 259.644602-11.862213 259.644602-11.941914C259.644602-12.204928 259.405499-12.380271 259.182336-12.380271C258.863531-12.380271 258.77586-12.101317 258.74398-11.989735L257.731775-8.554617C257.699895-8.458975 257.699895-8.435065 257.699895-8.427095C257.699895-8.355364 257.747716-8.339424 257.827417-8.315513C257.970879-8.251753 257.986819-8.251753 258.002759-8.251753C258.02667-8.251753 258.07449-8.251753 258.130281-8.387244L259.572871-11.702811Z"/>
<path d="M263.627225-5.965629C263.627225-6.874222 263.507673-8.356663 262.838184-9.743462C262.132829-11.178082 261.152505-11.955168 261.020998-11.955168C260.973177-11.955168 260.913402-11.931258 260.913402-11.859527C260.913402-11.823661 260.913402-11.799751 261.116639-11.596513C262.312156-10.389041 262.981646-8.416438 262.981646-5.977584C262.981646-3.658281 262.419753-1.661768 261.032953-.251059C260.913402-.143462 260.913402-.119552 260.913402-.083686C260.913402-.011955 260.973177 .011955 261.020998 .011955C261.176415 .011955 262.156739-.848817 262.742542-2.020423C263.352256-3.239851 263.627225-4.531009 263.627225-5.965629Z"/>
</g>
</svg>
</center>
<p>Clearly, the source of <code>f</code> cannot <em>literally</em> contain the hash of that very same source code: the hash would be uncomputable. Scripts <em>must</em> therefore be <em>told</em> their own hash when they run. This has some important consequences.</p>
<p>For example, suppose we have a parameterized minting policy <code>π<sub>f</sub></code>, such that <code>π<sub>f</sub></code> only allows minting of tokens if those tokens are output to <code>f</code>. Suppose furthermore that <code>f</code> needs to check if particular inputs contain <code>π<sub>f</sub></code> tokens. In principle this should be fine: since <code>f</code> is told its own hash, it should be able to compute the hash of <code>π<sub>f</sub></code>. However, we run into the stage restriction discussed above: the script’s own hash is a run-time value, whereas the parameter to <code>π</code> must be provided at compile time. Again, it’s not in <em>principle</em> impossible to solve this problem<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn3" id="fnref3"><sup>3</sup></a>, but in practice it’s difficult, and as we saw, in fact currently impossible on Cardano for technical reasons.</p>
<p>We must therefore <em>tell</em> script <code>f</code> what the hash of <code>π<sub>f</sub></code> is. This cannot be a parameter, because this would lead to uncomputable self-referential hashes again. Indeed, even our notation would break down here:</p>
<center>
<svg height="27.146205pt" style="vertical-align: 0.996264pt;" version="1.1" viewBox="174.669072 -28.142469 35.237921 27.146205" width="35.237921pt">
<title> f_{\displaystyle \pi_{f_{\pi_{f_{\ddots}}}}} </title>
<defs/>
<g>
<path d="M180.001077-24.532008C180.240181-24.532008 180.335822-24.532008 180.335822-24.759156C180.335822-24.878708 180.240181-24.878708 180.024988-24.878708H179.056619C179.283767-26.11009 179.45114-26.958907 179.546781-27.341473C179.618512-27.628397 179.869571-27.903365 180.180405-27.903365C180.431463-27.903365 180.682522-27.795769 180.802074-27.688172C180.335822-27.640352 180.19236-27.293652 180.19236-27.090414C180.19236-26.851311 180.371688-26.707849 180.598836-26.707849C180.837939-26.707849 181.196594-26.911086 181.196594-27.365383C181.196594-27.8675 180.694477-28.142469 180.16845-28.142469C179.654378-28.142469 179.15226-27.759903 178.913157-27.293652C178.697964-26.875221 178.578412-26.444835 178.303444-24.878708H177.502447C177.275299-24.878708 177.155747-24.878708 177.155747-24.663515C177.155747-24.532008 177.227478-24.532008 177.466582-24.532008H178.231712C178.016519-23.420177 177.526358-20.718309 177.251389-19.439106C177.048151-18.399007 176.868823-17.52628 176.271065-17.52628C176.235199-17.52628 175.8885-17.52628 175.673307-17.753428C176.28302-17.801248 176.28302-18.327276 176.28302-18.339231C176.28302-18.578334 176.103693-18.721796 175.876544-18.721796C175.637441-18.721796 175.278786-18.518558 175.278786-18.064262C175.278786-17.55019 175.804813-17.287176 176.271065-17.287176C177.490492-17.287176 177.992609-19.474972 178.124116-20.07273C178.339309-20.993278 178.925112-24.173353 178.984888-24.532008H180.001077Z"/>
<path d="M183.535449-22.439866H184.886383C184.563594-21.100887 184.360356-20.22816 184.360356-19.271746C184.360356-19.104374 184.360356-17.813216 184.850518-17.813216C185.101576-17.813216 185.31677-18.040364 185.31677-18.243602C185.31677-18.303378 185.31677-18.327288 185.233083-18.506615C184.910294-19.331522 184.910294-20.359667 184.910294-20.443353C184.910294-20.515084 184.910294-21.363901 185.161352-22.439866H186.500331C186.655748-22.439866 187.050269-22.439866 187.050269-22.822431C187.050269-23.085445 186.823121-23.085445 186.607928-23.085445H182.674677C182.399708-23.085445 181.993233-23.085445 181.443295-22.499642C181.132461-22.152942 180.749895-21.519318 180.749895-21.447587S180.809671-21.351945 180.881402-21.351945C180.965088-21.351945 180.977043-21.387811 181.036819-21.459542C181.658488-22.439866 182.280157-22.439866 182.579036-22.439866H183.260481C182.997467-21.543228 182.698588-20.503129 181.718264-18.410974C181.622623-18.219691 181.622623-18.195781 181.622623-18.12405C181.622623-17.872992 181.837816-17.813216 181.945412-17.813216C182.292112-17.813216 182.387753-18.12405 182.531215-18.626167C182.722498-19.235881 182.722498-19.259791 182.84205-19.737998L183.535449-22.439866Z"/>
<path d="M190.131935-19.311609H190.873155C191.032557-19.311609 191.128199-19.311609 191.128199-19.463041C191.128199-19.574623 191.024587-19.574623 190.889095-19.574623H190.179755C190.307277-20.291933 190.386978-20.746229 190.46668-21.104884C190.49856-21.240376 190.52247-21.328047 190.642022-21.423689C190.745633-21.51136 190.809394-21.5273 190.897066-21.5273C191.016617-21.5273 191.144139-21.50339 191.247751-21.439629C191.2079-21.423689 191.160079-21.399778 191.120229-21.375868C190.984737-21.304137 190.889095-21.160675 190.889095-21.001273C190.889095-20.81796 191.032557-20.706379 191.2079-20.706379C191.439033-20.706379 191.654226-20.905631 191.654226-21.184585C191.654226-21.559181 191.271661-21.750463 190.889095-21.750463C190.618112-21.750463 190.115995-21.622941 189.860951-20.889691C189.78922-20.706379 189.78922-20.690438 189.574027-19.574623H188.976269C188.816866-19.574623 188.721225-19.574623 188.721225-19.423191C188.721225-19.311609 188.824836-19.311609 188.960328-19.311609H189.526206L188.952358-16.219205C188.800926-15.414224 188.681374-14.736765 188.258958-14.736765C188.235048-14.736765 188.067676-14.736765 187.916244-14.832406C188.282869-14.920077 188.282869-15.254822 188.282869-15.262792C188.282869-15.446105 188.139407-15.557686 187.964064-15.557686C187.748871-15.557686 187.517738-15.374374 187.517738-15.071509C187.517738-14.736765 187.860453-14.513601 188.258958-14.513601C188.745135-14.513601 189.07988-15.023689 189.183491-15.222941C189.470416-15.748969 189.653728-16.745233 189.669668-16.824934L190.131935-19.311609Z"/>
<path d="M193.179879-17.295171H193.915122C193.789593-16.769143 193.711884-16.3806 193.711884-15.992057C193.711884-15.6872 193.79557-15.083464 194.076517-15.083464C194.231934-15.083464 194.369418-15.226926 194.369418-15.358433C194.369418-15.412232 194.33953-15.460052 194.327575-15.48994C194.106405-15.884461 194.070539-16.267026 194.070539-16.571883C194.070539-16.667524 194.070539-16.930538 194.148248-17.295171H194.937289C195.00902-17.295171 195.266056-17.295171 195.266056-17.540252C195.266056-17.719579 195.098684-17.719579 194.997065-17.719579H192.617986C192.498434-17.719579 192.229443-17.719579 191.906654-17.4207C191.721349-17.24735 191.506156-16.960426 191.506156-16.90065C191.506156-16.816964 191.589842-16.816964 191.613752-16.816964C191.679505-16.816964 191.691461-16.828919 191.733304-16.882717C191.834923-17.026179 192.068048-17.295171 192.55821-17.295171H192.946753C192.743515-16.55395 192.33704-15.746976 192.259331-15.591559C192.205533-15.495918 192.127824-15.346478 192.127824-15.286702C192.127824-15.161173 192.223466-15.083464 192.343017-15.083464C192.552233-15.083464 192.623964-15.29268 192.689717-15.483963C192.809269-15.86055 192.809269-15.872506 192.892955-16.195295L193.179879-17.295171Z"/>
<path d="M198.067931-15.3883H198.677645C198.797196-15.3883 198.880882-15.3883 198.880882-15.53774C198.880882-15.627403 198.803174-15.627403 198.695577-15.627403H198.109774C198.289102-16.607727 198.289102-16.619682 198.313012-16.727279C198.3429-16.858786 198.354855-16.912584 198.444519-16.984315C198.51625-17.038113 198.570048-17.062024 198.659712-17.062024C198.755353-17.062024 198.850994-17.050068 198.934681-17.008225C198.815129-16.960405 198.707532-16.828898 198.707532-16.685436C198.707532-16.559906 198.809151-16.458288 198.952613-16.458288C199.108031-16.458288 199.293336-16.589794 199.293336-16.82292C199.293336-17.151687 198.922725-17.259284 198.659712-17.259284C198.39072-17.259284 197.984245-17.133755 197.804917-16.535996C197.757097-16.386557 197.739164-16.267005 197.697321-16.051812C197.667433-15.878462 197.655478-15.800753 197.619612-15.627403H197.12945C197.009899-15.627403 196.926212-15.627403 196.926212-15.477964C196.926212-15.3883 197.003921-15.3883 197.111517-15.3883H197.577769C197.344643-14.049321 197.260957-13.589047 197.237047-13.481451C197.051742-12.453306 197.021854-12.39353 196.968055-12.291911C196.884369-12.148449 196.78275-12.028898 196.633311-12.028898C196.597445-12.028898 196.465938-12.040853 196.370297-12.082696C196.489849-12.130517 196.597445-12.262024 196.597445-12.405486C196.597445-12.531015 196.495826-12.632634 196.352364-12.632634C196.196947-12.632634 196.011642-12.501127 196.011642-12.268001C196.011642-11.933256 196.38823-11.831637 196.627333-11.831637C196.9561-11.831637 197.189226-12.100629 197.296823-12.232136C197.559836-12.584813 197.685366-13.296146 197.697321-13.349944L198.067931-15.3883Z"/>
<path d="M201.706362-7.559651C201.706362-7.882441 201.431393-8.133499 201.132514-8.133499C200.785814-8.133499 200.546711-7.858531 200.546711-7.559651C200.546711-7.200996 200.84559-6.973848 201.120559-6.973848C201.443348-6.973848 201.706362-7.224907 201.706362-7.559651Z"/>
<path d="M205.806678-4.570859C205.806678-4.893649 205.531709-5.144707 205.23283-5.144707C204.88613-5.144707 204.647027-4.869738 204.647027-4.570859C204.647027-4.212204 204.945906-3.985056 205.220875-3.985056C205.543664-3.985056 205.806678-4.236115 205.806678-4.570859Z"/>
<path d="M209.906994-1.582067C209.906994-1.904857 209.632025-2.155915 209.333146-2.155915C208.986446-2.155915 208.747342-1.880946 208.747342-1.582067C208.747342-1.223412 209.046222-.996264 209.321191-.996264C209.64398-.996264 209.906994-1.247323 209.906994-1.582067Z"/>
</g>
</svg>
</center>
<p>We <em>can</em> put (the hash of) <code>π<sub>f</sub></code> in the datum <code>d</code> instead; <code>(f, (π<sub>f</sub>, d), V)</code> is unproblematic for hash computations, but now we have a different problem: <code>f</code> has no way of <em>verifying</em> that the datum contains the right hash. We will come back to back this point below.</p>
<p>It may also be possible to break the mutual dependency between <code>f</code> and <code>π<sub>f</sub></code> in different ways. For example, perhaps <code>f</code> has an associated <code>NFT<sub>o</sub></code>, so that we could parameterize both <code>f</code> and <code>π</code> by <code>NFT<sub>o</sub></code> instead. As we shall see, this is also not without problems.</p>
<h2 id="stateful-scripts">Stateful scripts</h2>
<p>In the EUTxO model, state is never actually updated; instead, old state is consumed and new state is created. Typically, this state resides in the datum of a script:</p>
<center>
<svg height="15.165619pt" version="1.1" viewBox="123.878565 -15.153664 139.604874 15.165619" width="139.604874pt">
<title>   (f, \; d_\mathit{old}) \xrightarrow{\mspace{30mu}\mathit{Tx}\mspace{30mu}}   (f, \; d_\mathit{new}) </title>
<defs/>
<g>
<path d="M127.763994-.083686C127.763994-.119552 127.763994-.143462 127.560756-.3467C126.365239-1.554172 125.69575-3.526775 125.69575-5.965629C125.69575-8.284932 126.257643-10.281445 127.644442-11.692154C127.763994-11.799751 127.763994-11.823661 127.763994-11.859527C127.763994-11.931258 127.704218-11.955168 127.656398-11.955168C127.50098-11.955168 126.520657-11.094396 125.934853-9.92279C125.32514-8.715318 125.050171-7.436115 125.050171-5.965629C125.050171-4.901619 125.217543-3.478954 125.839212-2.199751C126.544567-.765131 127.524891 .011955 127.656398 .011955C127.704218 .011955 127.763994-.011955 127.763994-.083686Z"/>
<path d="M133.762895-7.79477C134.001999-7.79477 134.09764-7.79477 134.09764-8.021918C134.09764-8.141469 134.001999-8.141469 133.786806-8.141469H132.818437C133.045585-9.372852 133.212958-10.221669 133.308599-10.604234C133.38033-10.891158 133.631388-11.166127 133.942223-11.166127C134.193281-11.166127 134.44434-11.058531 134.563892-10.950934C134.09764-10.903113 133.954178-10.556413 133.954178-10.353176C133.954178-10.114072 134.133505-9.97061 134.360654-9.97061C134.599757-9.97061 134.958412-10.173848 134.958412-10.628144C134.958412-11.130262 134.456295-11.40523 133.930268-11.40523C133.416195-11.40523 132.914078-11.022665 132.674975-10.556413C132.459782-10.137983 132.34023-9.707597 132.065261-8.141469H131.264265C131.037117-8.141469 130.917565-8.141469 130.917565-7.926276C130.917565-7.79477 130.989296-7.79477 131.2284-7.79477H131.99353C131.778337-6.682939 131.288175-3.981071 131.013207-2.701868C130.809969-1.661768 130.630641-.789041 130.032883-.789041C129.997017-.789041 129.650317-.789041 129.435124-1.016189C130.044838-1.06401 130.044838-1.590037 130.044838-1.601993C130.044838-1.841096 129.86551-1.984558 129.638362-1.984558C129.399259-1.984558 129.040604-1.78132 129.040604-1.327024C129.040604-.812951 129.566631-.549938 130.032883-.549938C131.25231-.549938 131.754427-2.737733 131.885934-3.335492C132.101127-4.25604 132.68693-7.436115 132.746706-7.79477H133.762895Z"/>
<path d="M137.158252-2.940971C137.158252-3.634371 136.931104-4.148443 136.440942-4.148443C136.058377-4.148443 135.867094-3.837609 135.867094-3.574595S136.046422-2.988792 136.452897-2.988792C136.608315-2.988792 136.739821-3.036613 136.847418-3.144209C136.871328-3.16812 136.883284-3.16812 136.895239-3.16812C136.919149-3.16812 136.919149-3.000747 136.919149-2.940971C136.919149-2.546451 136.847418-1.769365 136.154018-.992279C136.022511-.848817 136.022511-.824907 136.022511-.800996C136.022511-.74122 136.082287-.681445 136.142063-.681445C136.237704-.681445 137.158252-1.566127 137.158252-2.940971Z"/>
<path d="M149.405432-10.9868C149.417388-11.03462 149.441298-11.106351 149.441298-11.166127C149.441298-11.285679 149.321746-11.285679 149.297836-11.285679C149.285881-11.285679 148.700077-11.237858 148.640302-11.225903C148.437064-11.213948 148.257736-11.190037 148.042543-11.178082C147.743664-11.154172 147.659978-11.142217 147.659978-10.927024C147.659978-10.807472 147.755619-10.807472 147.922992-10.807472C148.508795-10.807472 148.52075-10.699875 148.52075-10.580324C148.52075-10.508593 148.49684-10.412951 148.484884-10.377086L147.755619-7.47198C147.624112-7.782814 147.301323-8.261021 146.679654-8.261021C145.32872-8.261021 143.87019-6.515567 143.87019-4.746202C143.87019-3.56264 144.563589-2.86924 145.376541-2.86924C146.034075-2.86924 146.595968-3.383313 146.930713-3.777833C147.050264-3.072478 147.612157-2.86924 147.970812-2.86924S148.616391-3.084433 148.831584-3.514819C149.022867-3.921295 149.190239-4.65056 149.190239-4.698381C149.190239-4.758157 149.142419-4.805978 149.070688-4.805978C148.963091-4.805978 148.951136-4.746202 148.903315-4.566874C148.723988-3.861519 148.49684-3.108344 148.006678-3.108344C147.659978-3.108344 147.636068-3.419178 147.636068-3.658281C147.636068-3.706102 147.636068-3.957161 147.719754-4.291905L149.405432-10.9868ZM146.990488-4.411457C146.930713-4.208219 146.930713-4.184309 146.76334-3.957161C146.500327-3.622416 145.974299-3.108344 145.412406-3.108344C144.922244-3.108344 144.647275-3.550685 144.647275-4.25604C144.647275-4.913574 145.017886-6.252553 145.245034-6.75467C145.65151-7.591532 146.213402-8.021918 146.679654-8.021918C147.468695-8.021918 147.624112-7.041594 147.624112-6.945953C147.624112-6.933998 147.588247-6.77858 147.576292-6.75467L146.990488-4.411457Z"/>
<path d="M153.778536-3.363399C153.778536-4.192291 153.220628-4.710348 152.503318-4.710348C151.475174-4.710348 150.391239-3.634383 150.391239-2.462777C150.391239-1.586064 150.988997-1.115828 151.658487-1.115828C152.718511-1.115828 153.778536-2.215703 153.778536-3.363399ZM151.666457-1.338991C151.363592-1.338991 150.988997-1.546214 150.988997-2.183823C150.988997-2.542478 151.156369-3.291668 151.411413-3.730025C151.754128-4.303873 152.224364-4.487185 152.495348-4.487185C152.877914-4.487185 153.180778-4.200261 153.180778-3.642353C153.180778-3.38731 153.061226-2.614209 152.734452-2.072241C152.479408-1.633885 152.049022-1.338991 151.666457-1.338991Z"/>
<path d="M156.325885-6.495654C156.333855-6.527534 156.349795-6.583325 156.349795-6.615205C156.349795-6.734757 156.222273-6.726787 156.134602-6.718817L155.30571-6.647086C155.194129-6.639116 155.106457-6.631145 155.106457-6.487683C155.106457-6.376102 155.202099-6.376102 155.31368-6.376102C155.696246-6.376102 155.696246-6.328281 155.696246-6.25655C155.696246-6.2167 155.672335-6.129028 155.664365-6.081208L154.676071-2.136002C154.636221-1.9766 154.636221-1.928779 154.636221-1.849078C154.636221-1.362901 155.002846-1.115828 155.369471-1.115828C155.536843-1.115828 155.783917-1.171619 155.98317-1.554184C156.126632-1.841108 156.238213-2.303375 156.238213-2.335255C156.238213-2.438866 156.126632-2.438866 156.086781-2.438866C155.959259-2.438866 155.951289-2.406986 155.919409-2.279464C155.807827-1.865018 155.672335-1.338991 155.385411-1.338991C155.162248-1.338991 155.162248-1.594035 155.162248-1.689676C155.162248-1.737497 155.162248-1.825168 155.186159-1.920809L156.325885-6.495654Z"/>
<path d="M160.687985-6.495654C160.695955-6.527534 160.711895-6.583325 160.711895-6.615205C160.711895-6.734757 160.584373-6.726787 160.496702-6.718817L159.66781-6.647086C159.556229-6.639116 159.468558-6.631145 159.468558-6.487683C159.468558-6.376102 159.564199-6.376102 159.67578-6.376102C160.058346-6.376102 160.058346-6.328281 160.058346-6.25655C160.058346-6.2167 160.034435-6.129028 160.026465-6.081208L159.572169-4.264022C159.404797-4.542976 159.173663-4.710348 158.838919-4.710348C157.898445-4.710348 156.934062-3.530772 156.934062-2.391046C156.934062-1.625915 157.388358-1.115828 157.986117-1.115828C158.456353-1.115828 158.846889-1.466513 159.014261-1.657795C159.085992-1.362901 159.349006-1.115828 159.731571-1.115828C160.018495-1.115828 160.209778-1.29117 160.34527-1.538244C160.512642-1.857048 160.616254-2.319315 160.616254-2.335255C160.616254-2.438866 160.504672-2.438866 160.464822-2.438866C160.32933-2.438866 160.32933-2.414956 160.281509-2.215703C160.130077-1.602005 159.962704-1.338991 159.747511-1.338991C159.524348-1.338991 159.524348-1.594035 159.524348-1.689676C159.524348-1.737497 159.524348-1.825168 159.548259-1.920809L160.687985-6.495654ZM159.070052-2.255554C159.006291-1.9766 158.480264-1.338991 158.010027-1.338991C157.635432-1.338991 157.51588-1.745467 157.51588-2.064271C157.51588-2.438866 157.747013-3.37934 157.946266-3.745965C158.265071-4.327783 158.615756-4.487185 158.838919-4.487185C159.341036-4.487185 159.428707-3.809726 159.428707-3.730025L159.404797-3.618443L159.070052-2.255554Z"/>
<path d="M165.06138-5.965629C165.06138-6.874222 164.941828-8.356663 164.272339-9.743462C163.566984-11.178082 162.58666-11.955168 162.455153-11.955168C162.407333-11.955168 162.347557-11.931258 162.347557-11.859527C162.347557-11.823661 162.347557-11.799751 162.550795-11.596513C163.746311-10.389041 164.415801-8.416438 164.415801-5.977584C164.415801-3.658281 163.853908-1.661768 162.467108-.251059C162.347557-.143462 162.347557-.119552 162.347557-.083686C162.347557-.011955 162.407333 .011955 162.455153 .011955C162.61057 .011955 163.590894-.848817 164.176697-2.020423C164.786411-3.239851 165.06138-4.531009 165.06138-5.965629Z"/>
<path d="M190.855461-14.603726C190.919222-14.8508 190.975013-14.86674 191.030804-14.87471C191.086594-14.89065 191.333668-14.89065 191.4851-14.89065C192.266171-14.89065 192.577005-14.8508 192.577005-14.276952C192.577005-14.197251 192.569035-14.14146 192.561065-14.069729L192.497304-13.551671V-13.511821C192.497304-13.503851 192.505274-13.47994 192.497304-13.47197C192.489334-13.45603 192.473394-13.344449 192.640766-13.344449C192.776258-13.344449 192.784228-13.400239 192.800168-13.511821L193.023332-14.930501L193.031302-15.042082C193.031302-15.153664 192.92769-15.153664 192.808139-15.153664H188.464427C188.289085-15.153664 188.265175-15.153664 188.217354-15.010202L187.731177-13.591522C187.691327-13.487911 187.691327-13.47197 187.691327-13.45603C187.691327-13.344449 187.802908-13.344449 187.842759-13.344449C187.874639-13.344449 187.92246-13.344449 187.95434-13.368359C187.978251-13.384299 187.978251-13.400239 188.049982-13.615432C188.456457-14.763129 188.695561-14.89065 189.763556-14.89065C189.922958-14.89065 190.122211-14.89065 190.241762-14.87471C190.233792-14.763129 190.233792-14.739218 190.201912-14.619666L189.157827-10.435358C189.078126-10.116553 189.030305-10.028882 188.305025-10.028882H188.201414C188.057952-10.028882 187.96231-10.028882 187.96231-9.87745C187.96231-9.845569 187.978251-9.765868 188.097802-9.765868C188.400667-9.765868 188.711501-9.789779 189.022335-9.789779H189.604154C189.922958-9.789779 190.257703-9.765868 190.568537-9.765868C190.624328-9.765868 190.735909-9.765868 190.735909-9.9173C190.735909-10.028882 190.640268-10.028882 190.512746-10.028882H190.409135C190.273643-10.028882 190.146121-10.036852 190.010629-10.044822C189.819347-10.068732 189.763556-10.084673 189.763556-10.188284C189.763556-10.236105 189.787466-10.315806 189.787466-10.323776L190.855461-14.603726Z"/>
<path d="M194.346823-10.849803C194.275092-10.58679 194.10772-9.90933 193.605603-9.90933C193.430261-9.90933 193.294769-9.981061 193.246948-10.020912C193.40635-10.084673 193.525902-10.228135 193.525902-10.403477C193.525902-10.63461 193.334619-10.674461 193.246948-10.674461C193.015815-10.674461 192.840472-10.475208 192.840472-10.236105C192.840472-9.853539 193.246948-9.686167 193.597633-9.686167C193.956288-9.686167 194.219302-9.90933 194.410584-10.188284C194.546076-9.89339 194.848941-9.686167 195.231506-9.686167C196.060398-9.686167 196.538604-10.674461 196.538604-10.913564C196.538604-11.009206 196.419053-11.009206 196.387172-11.009206C196.283561-11.009206 196.25168-10.985295 196.22777-10.905594C195.972726-10.084673 195.478579-9.90933 195.247446-9.90933C195.000373-9.90933 194.833-10.084673 194.833-10.411447C194.833-10.58679 194.928642-10.969355 195.000373-11.240339C195.080074-11.591024 195.167745-11.933739 195.255416-12.276454C195.382938-12.7706 195.653922-13.057525 195.956786-13.057525C196.164009-13.057525 196.299501-12.953913 196.315441-12.945943C196.24371-12.922033 196.036487-12.794511 196.036487-12.563378C196.036487-12.340214 196.21183-12.292394 196.315441-12.292394C196.466873-12.292394 196.713947-12.403975 196.713947-12.73075C196.713947-13.169106 196.22777-13.280688 195.964756-13.280688C195.637982-13.280688 195.366998-13.097375 195.151805-12.778571C195.056163-12.969853 194.81706-13.280688 194.330883-13.280688C193.494021-13.280688 193.023785-12.276454 193.023785-12.061261C193.023785-11.957649 193.127396-11.957649 193.175217-11.957649C193.278828-11.957649 193.302739-11.981559 193.326649-12.061261C193.573723-12.850302 194.051929-13.057525 194.314943-13.057525S194.729389-12.850302 194.729389-12.555407C194.729389-12.396005 194.689538-12.228633 194.601867-11.885918L194.346823-10.849803Z"/>
<path d="M177.441633-5.738481C177.644871-5.738481 177.860064-5.738481 177.860064-5.977584S177.644871-6.216687 177.441633-6.216687H170.973887C170.77065-6.216687 170.555456-6.216687 170.555456-5.977584S170.77065-5.738481 170.973887-5.738481H177.441633Z"/>
<path d="M181.103788-5.738481C181.307026-5.738481 181.522219-5.738481 181.522219-5.977584S181.307026-6.216687 181.103788-6.216687H174.636042C174.432805-6.216687 174.217611-6.216687 174.217611-5.977584S174.432805-5.738481 174.636042-5.738481H181.103788Z"/>
<path d="M187.745614-5.738481C187.948852-5.738481 188.164045-5.738481 188.164045-5.977584S187.948852-6.216687 187.745614-6.216687H181.277868C181.07463-6.216687 180.859437-6.216687 180.859437-5.977584S181.07463-5.738481 181.277868-5.738481H187.745614Z"/>
<path d="M194.38744-5.738481C194.590678-5.738481 194.805871-5.738481 194.805871-5.977584S194.590678-6.216687 194.38744-6.216687H187.919694C187.716456-6.216687 187.501263-6.216687 187.501263-5.977584S187.716456-5.738481 187.919694-5.738481H194.38744Z"/>
<path d="M201.029266-5.738481C201.232504-5.738481 201.447697-5.738481 201.447697-5.977584S201.232504-6.216687 201.029266-6.216687H194.56152C194.358282-6.216687 194.143089-6.216687 194.143089-5.977584S194.358282-5.738481 194.56152-5.738481H201.029266Z"/>
<path d="M207.671092-5.738481C207.87433-5.738481 208.089523-5.738481 208.089523-5.977584S207.87433-6.216687 207.671092-6.216687H201.203346C201.000108-6.216687 200.784915-6.216687 200.784915-5.977584S201.000108-5.738481 201.203346-5.738481H207.671092Z"/>
<path d="M213.425265-5.738481C212.76773-5.236364 212.444941-4.746202 212.3493-4.590785C211.811317-3.765878 211.715676-3.012702 211.715676-3.000747C211.715676-2.857285 211.859138-2.857285 211.954779-2.857285C212.158017-2.857285 212.169972-2.881196 212.217793-3.096389C212.492762-4.267995 213.198116-5.272229 214.54905-5.822167C214.692512-5.869988 214.728378-5.893898 214.728378-5.977584S214.656647-6.097136 214.632737-6.109091C214.106709-6.312329 212.660134-6.910087 212.205838-8.918555C212.169972-9.062017 212.158017-9.097883 211.954779-9.097883C211.859138-9.097883 211.715676-9.097883 211.715676-8.954421C211.715676-8.930511 211.823272-8.177335 212.325389-7.376339C212.564493-7.017684 212.911192-6.599253 213.425265-6.216687H204.542575C204.327382-6.216687 204.112189-6.216687 204.112189-5.977584S204.327382-5.738481 204.542575-5.738481H213.425265Z"/>
<path d="M222.616112-.083686C222.616112-.119552 222.616112-.143462 222.412874-.3467C221.217357-1.554172 220.547868-3.526775 220.547868-5.965629C220.547868-8.284932 221.109761-10.281445 222.49656-11.692154C222.616112-11.799751 222.616112-11.823661 222.616112-11.859527C222.616112-11.931258 222.556336-11.955168 222.508515-11.955168C222.353098-11.955168 221.372774-11.094396 220.786971-9.92279C220.177258-8.715318 219.902289-7.436115 219.902289-5.965629C219.902289-4.901619 220.069661-3.478954 220.69133-2.199751C221.396685-.765131 222.377009 .011955 222.508515 .011955C222.556336 .011955 222.616112-.011955 222.616112-.083686Z"/>
<path d="M228.615013-7.79477C228.854116-7.79477 228.949758-7.79477 228.949758-8.021918C228.949758-8.141469 228.854116-8.141469 228.638923-8.141469H227.670555C227.897703-9.372852 228.065075-10.221669 228.160717-10.604234C228.232448-10.891158 228.483506-11.166127 228.794341-11.166127C229.045399-11.166127 229.296458-11.058531 229.416009-10.950934C228.949758-10.903113 228.806296-10.556413 228.806296-10.353176C228.806296-10.114072 228.985623-9.97061 229.212771-9.97061C229.451875-9.97061 229.81053-10.173848 229.81053-10.628144C229.81053-11.130262 229.308413-11.40523 228.782385-11.40523C228.268313-11.40523 227.766196-11.022665 227.527093-10.556413C227.3119-10.137983 227.192348-9.707597 226.917379-8.141469H226.116383C225.889235-8.141469 225.769683-8.141469 225.769683-7.926276C225.769683-7.79477 225.841414-7.79477 226.080517-7.79477H226.845648C226.630455-6.682939 226.140293-3.981071 225.865324-2.701868C225.662087-1.661768 225.482759-.789041 224.885001-.789041C224.849135-.789041 224.502435-.789041 224.287242-1.016189C224.896956-1.06401 224.896956-1.590037 224.896956-1.601993C224.896956-1.841096 224.717628-1.984558 224.49048-1.984558C224.251377-1.984558 223.892722-1.78132 223.892722-1.327024C223.892722-.812951 224.418749-.549938 224.885001-.549938C226.104428-.549938 226.606545-2.737733 226.738052-3.335492C226.953245-4.25604 227.539048-7.436115 227.598824-7.79477H228.615013Z"/>
<path d="M232.01037-2.940971C232.01037-3.634371 231.783222-4.148443 231.29306-4.148443C230.910495-4.148443 230.719212-3.837609 230.719212-3.574595S230.89854-2.988792 231.305015-2.988792C231.460432-2.988792 231.591939-3.036613 231.699536-3.144209C231.723446-3.16812 231.735401-3.16812 231.747357-3.16812C231.771267-3.16812 231.771267-3.000747 231.771267-2.940971C231.771267-2.546451 231.699536-1.769365 231.006136-.992279C230.874629-.848817 230.874629-.824907 230.874629-.800996C230.874629-.74122 230.934405-.681445 230.994181-.681445C231.089822-.681445 232.01037-1.566127 232.01037-2.940971Z"/>
<path d="M244.25755-10.9868C244.269505-11.03462 244.293416-11.106351 244.293416-11.166127C244.293416-11.285679 244.173864-11.285679 244.149954-11.285679C244.137999-11.285679 243.552195-11.237858 243.492419-11.225903C243.289182-11.213948 243.109854-11.190037 242.894661-11.178082C242.595782-11.154172 242.512096-11.142217 242.512096-10.927024C242.512096-10.807472 242.607737-10.807472 242.775109-10.807472C243.360913-10.807472 243.372868-10.699875 243.372868-10.580324C243.372868-10.508593 243.348957-10.412951 243.337002-10.377086L242.607737-7.47198C242.47623-7.782814 242.153441-8.261021 241.531772-8.261021C240.180838-8.261021 238.722307-6.515567 238.722307-4.746202C238.722307-3.56264 239.415707-2.86924 240.228659-2.86924C240.886193-2.86924 241.448086-3.383313 241.78283-3.777833C241.902382-3.072478 242.464275-2.86924 242.82293-2.86924S243.468509-3.084433 243.683702-3.514819C243.874985-3.921295 244.042357-4.65056 244.042357-4.698381C244.042357-4.758157 243.994537-4.805978 243.922806-4.805978C243.815209-4.805978 243.803254-4.746202 243.755433-4.566874C243.576106-3.861519 243.348957-3.108344 242.858796-3.108344C242.512096-3.108344 242.488185-3.419178 242.488185-3.658281C242.488185-3.706102 242.488185-3.957161 242.571872-4.291905L244.25755-10.9868ZM241.842606-4.411457C241.78283-4.208219 241.78283-4.184309 241.615458-3.957161C241.352444-3.622416 240.826417-3.108344 240.264524-3.108344C239.774362-3.108344 239.499393-3.550685 239.499393-4.25604C239.499393-4.913574 239.870004-6.252553 240.097152-6.75467C240.503627-7.591532 241.06552-8.021918 241.531772-8.021918C242.320813-8.021918 242.47623-7.041594 242.47623-6.945953C242.47623-6.933998 242.440365-6.77858 242.428409-6.75467L241.842606-4.411457Z"/>
<path d="M246.446843-3.331519C246.486694-3.459041 246.733767-3.929277 246.980841-4.160411C247.227914-4.375604 247.482958-4.487185 247.761912-4.487185C248.072746-4.487185 248.168388-4.264022 248.168388-3.961158C248.168388-3.498891 247.833643-2.590299 247.682211-2.191793C247.62642-2.048331 247.578599-1.920809 247.578599-1.777347C247.578599-1.410722 247.841613-1.115828 248.248089-1.115828C249.005249-1.115828 249.339994-2.223673 249.339994-2.335255C249.339994-2.438866 249.228413-2.438866 249.188562-2.438866C249.06104-2.438866 249.05307-2.406986 249.01322-2.271494C248.869758-1.761407 248.606744-1.338991 248.264029-1.338991C248.112597-1.338991 248.088687-1.450573 248.088687-1.594035C248.088687-1.777347 248.152447-1.94472 248.208238-2.104122C248.36764-2.526538 248.694415-3.38731 248.694415-3.849576C248.694415-4.535006 248.224178-4.710348 247.785822-4.710348C247.108363-4.710348 246.733767-4.256052 246.582335-4.072739C246.534515-4.439365 246.239621-4.710348 245.849085-4.710348C245.578101-4.710348 245.386819-4.558916 245.227416-4.279962C245.083954-4.008979 244.964403-3.530772 244.964403-3.490921C244.964403-3.38731 245.068014-3.38731 245.115835-3.38731C245.243357-3.38731 245.251327-3.41122 245.299147-3.602503C245.418699-4.072739 245.562161-4.487185 245.833145-4.487185C246.056308-4.487185 246.056308-4.208231 246.056308-4.1365C246.056308-4.024919 246.040368-3.897397 246.008487-3.785815L245.426669-1.458543C245.410729-1.386812 245.402759-1.362901 245.402759-1.338991C245.402759-1.211469 245.50637-1.115828 245.641862-1.115828C245.896906-1.115828 245.944726-1.307111 246.016457-1.609975C246.072248-1.809228 246.151949-2.136002 246.1918-2.295404C246.23165-2.462777 246.23165-2.478717 246.319322-2.813462L246.446843-3.331519Z"/>
<path d="M251.240656-3.012715C251.55946-3.012715 253.049871-3.012715 253.049871-4.016949C253.049871-4.415454 252.699186-4.710348 252.157219-4.710348C251.296447-4.710348 250.08499-3.961158 250.08499-2.550448C250.08499-1.817198 250.499436-1.115828 251.344267-1.115828C252.491964-1.115828 253.137543-1.880959 253.137543-1.99254C253.137543-2.056301 253.033931-2.159913 252.97814-2.159913C252.93032-2.159913 252.92235-2.143972 252.850619-2.064271C252.420233-1.538244 251.790594-1.338991 251.352238-1.338991C250.8023-1.338991 250.674778-1.888929 250.674778-2.247584C250.674778-2.430896 250.730569-2.773611 250.78636-3.012715H251.240656ZM250.85012-3.235878C251.113134-4.224172 251.806534-4.487185 252.157219-4.487185C252.436173-4.487185 252.699186-4.335753 252.699186-4.016949C252.699186-3.235878 251.471789-3.235878 251.176895-3.235878H250.85012Z"/>
<path d="M256.299697-2.574358C256.243906-2.351195 256.243906-2.343225 256.235936-2.151942C256.227966-1.94472 256.092474-1.729526 256.012773-1.617945C255.869311-1.426662 255.717879-1.338991 255.534566-1.338991C255.207791-1.338991 254.920867-1.506363 254.920867-2.032391C254.920867-2.446837 255.144031-3.052565 255.335313-3.562652C255.438925-3.825666 255.462835-3.889427 255.462835-4.048829C255.462835-4.487185 255.13606-4.710348 254.801316-4.710348C254.036185-4.710348 253.70941-3.594533 253.70941-3.490921S253.813022-3.38731 253.860842-3.38731C253.988364-3.38731 253.996334-3.41122 254.028215-3.554682C254.171677-4.048829 254.434691-4.487185 254.785375-4.487185C254.928837-4.487185 254.960718-4.383574 254.960718-4.240112C254.960718-4.056799 254.896957-3.889427 254.825226-3.706114C254.474541-2.765641 254.39484-2.470747 254.39484-2.128032C254.39484-1.24335 255.12012-1.115828 255.518626-1.115828C255.741789-1.115828 256.036683-1.163649 256.339547-1.609975C256.56271-1.179589 257.056857-1.115828 257.303931-1.115828C257.774167-1.115828 258.140793-1.394782 258.435687-2.048331C258.69073-2.598269 258.969684-3.698144 258.969684-4.12853C258.969684-4.630647 258.730581-4.710348 258.611029-4.710348C258.443657-4.710348 258.220494-4.550946 258.220494-4.327783C258.220494-4.216201 258.276285-4.160411 258.324105-4.11259C258.483507-3.945218 258.539298-3.722055 258.539298-3.506861C258.539298-3.196027 258.292225-2.383076 258.156733-2.064271C257.98139-1.657795 257.726347-1.338991 257.335811-1.338991C256.769933-1.338991 256.769933-1.880959 256.769933-2.00848C256.769933-2.223673 256.793844-2.335255 256.913395-2.805492C256.977156-3.076475 257.048887-3.339489 257.112648-3.610473L257.22423-4.056799C257.25611-4.168381 257.303931-4.375604 257.303931-4.399514C257.303931-4.550946 257.192349-4.630647 257.064828-4.630647C256.809784-4.630647 256.746023-4.383574 256.730083-4.311843L256.299697-2.574358Z"/>
<path d="M263.483439-5.965629C263.483439-6.874222 263.363887-8.356663 262.694398-9.743462C261.989043-11.178082 261.008719-11.955168 260.877212-11.955168C260.829391-11.955168 260.769615-11.931258 260.769615-11.859527C260.769615-11.823661 260.769615-11.799751 260.972853-11.596513C262.16837-10.389041 262.83786-8.416438 262.83786-5.977584C262.83786-3.658281 262.275967-1.661768 260.889167-.251059C260.769615-.143462 260.769615-.119552 260.769615-.083686C260.769615-.011955 260.829391 .011955 260.877212 .011955C261.032629 .011955 262.012953-.848817 262.598756-2.020423C263.20847-3.239851 263.483439-4.531009 263.483439-5.965629Z"/>
</g>
</svg>
</center>
<h3 id="inductive-reasoning">Inductive reasoning</h3>
<p>When <code>Tx</code> is validated, <code>f</code> can verify the evolution of <code>d<sub>old</sub></code> to <code>d<sub>new</sub></code>, but it cannot verify <code>d<sub>old</sub></code>; instead, we want to reason inductively, and say that <code>f</code> must at some point have verified that previous state as well:</p>
<center>
<svg height="16.040086pt" version="1.1" viewBox="27.175953 -16.028131 333.010117 16.040086" width="333.010117pt">
<title>   \cdots \xrightarrow{\mspace{30mu}\mathit{Tx}_n\mspace{30mu}}   (f, \; d_n) \xrightarrow{\mspace{30mu}\mathit{Tx}_{n+1}\mspace{30mu}}   (f, \; d_{n+1}) \xrightarrow{\mspace{30mu}\mathit{Tx}_{n+2}\mspace{30mu}}   (f, \; d_{n+2}) </title>
<defs/>
<g>
<path d="M29.471345-5.977584C29.471345-6.324284 29.184421-6.611208 28.837721-6.611208S28.204097-6.324284 28.204097-5.977584S28.491021-5.34396 28.837721-5.34396S29.471345-5.630884 29.471345-5.977584Z"/>
<path d="M34.784733-5.977584C34.784733-6.324284 34.497809-6.611208 34.151109-6.611208S33.517485-6.324284 33.517485-5.977584S33.804409-5.34396 34.151109-5.34396S34.784733-5.630884 34.784733-5.977584Z"/>
<path d="M40.098121-5.977584C40.098121-6.324284 39.811197-6.611208 39.464497-6.611208S38.830873-6.324284 38.830873-5.977584S39.117797-5.34396 39.464497-5.34396S40.098121-5.630884 40.098121-5.977584Z"/>
<path d="M65.736731-14.603726C65.800492-14.8508 65.856283-14.86674 65.912074-14.87471C65.967865-14.89065 66.214938-14.89065 66.36637-14.89065C67.147441-14.89065 67.458276-14.8508 67.458276-14.276952C67.458276-14.197251 67.450305-14.14146 67.442335-14.069729L67.378574-13.551671V-13.511821C67.378574-13.503851 67.386545-13.47994 67.378574-13.47197C67.370604-13.45603 67.354664-13.344449 67.522037-13.344449C67.657528-13.344449 67.665499-13.400239 67.681439-13.511821L67.904602-14.930501L67.912572-15.042082C67.912572-15.153664 67.808961-15.153664 67.689409-15.153664H63.345698C63.170355-15.153664 63.146445-15.153664 63.098624-15.010202L62.612447-13.591522C62.572597-13.487911 62.572597-13.47197 62.572597-13.45603C62.572597-13.344449 62.684178-13.344449 62.724029-13.344449C62.755909-13.344449 62.80373-13.344449 62.835611-13.368359C62.859521-13.384299 62.859521-13.400239 62.931252-13.615432C63.337728-14.763129 63.576831-14.89065 64.644826-14.89065C64.804228-14.89065 65.003481-14.89065 65.123033-14.87471C65.115063-14.763129 65.115063-14.739218 65.083182-14.619666L64.039098-10.435358C63.959396-10.116553 63.911576-10.028882 63.186296-10.028882H63.082684C62.939222-10.028882 62.843581-10.028882 62.843581-9.87745C62.843581-9.845569 62.859521-9.765868 62.979073-9.765868C63.281937-9.765868 63.592771-9.789779 63.903606-9.789779H64.485424C64.804228-9.789779 65.138973-9.765868 65.449807-9.765868C65.505598-9.765868 65.61718-9.765868 65.61718-9.9173C65.61718-10.028882 65.521538-10.028882 65.394017-10.028882H65.290405C65.154913-10.028882 65.027391-10.036852 64.8919-10.044822C64.700617-10.068732 64.644826-10.084673 64.644826-10.188284C64.644826-10.236105 64.668736-10.315806 64.668736-10.323776L65.736731-14.603726Z"/>
<path d="M69.228094-10.849803C69.156363-10.58679 68.98899-9.90933 68.486873-9.90933C68.311531-9.90933 68.176039-9.981061 68.128218-10.020912C68.287621-10.084673 68.407172-10.228135 68.407172-10.403477C68.407172-10.63461 68.21589-10.674461 68.128218-10.674461C67.897085-10.674461 67.721743-10.475208 67.721743-10.236105C67.721743-9.853539 68.128218-9.686167 68.478903-9.686167C68.837558-9.686167 69.100572-9.90933 69.291855-10.188284C69.427347-9.89339 69.730211-9.686167 70.112776-9.686167C70.941668-9.686167 71.419875-10.674461 71.419875-10.913564C71.419875-11.009206 71.300323-11.009206 71.268442-11.009206C71.164831-11.009206 71.132951-10.985295 71.10904-10.905594C70.853997-10.084673 70.35985-9.90933 70.128716-9.90933C69.881643-9.90933 69.714271-10.084673 69.714271-10.411447C69.714271-10.58679 69.809912-10.969355 69.881643-11.240339C69.961344-11.591024 70.049015-11.933739 70.136687-12.276454C70.264208-12.7706 70.535192-13.057525 70.838056-13.057525C71.045279-13.057525 71.180771-12.953913 71.196711-12.945943C71.12498-12.922033 70.917758-12.794511 70.917758-12.563378C70.917758-12.340214 71.0931-12.292394 71.196711-12.292394C71.348144-12.292394 71.595217-12.403975 71.595217-12.73075C71.595217-13.169106 71.10904-13.280688 70.846026-13.280688C70.519252-13.280688 70.248268-13.097375 70.033075-12.778571C69.937434-12.969853 69.69833-13.280688 69.212154-13.280688C68.375292-13.280688 67.905055-12.276454 67.905055-12.061261C67.905055-11.957649 68.008667-11.957649 68.056487-11.957649C68.160099-11.957649 68.184009-11.981559 68.207919-12.061261C68.454993-12.850302 68.9332-13.057525 69.196213-13.057525S69.610659-12.850302 69.610659-12.555407C69.610659-12.396005 69.570809-12.228633 69.483137-11.885918L69.228094-10.849803Z"/>
<path d="M73.929662-10.837848C73.899774-11.292145 73.481343-11.405719 73.254195-11.405719S72.87163-11.268234 72.764033-11.076952C72.614594-10.831871 72.542863-10.515059 72.542863-10.491148C72.542863-10.425395 72.596661-10.401485 72.650459-10.401485C72.7461-10.401485 72.752078-10.443328 72.781966-10.538969C72.901518-11.017176 73.04498-11.208459 73.236262-11.208459C73.451455-11.208459 73.451455-10.963378 73.451455-10.903602C73.451455-10.80796 73.39168-10.568857 73.349836-10.401485C73.307993-10.24009 73.248217-9.995009 73.21833-9.863502C73.176486-9.714062 73.140621-9.558645 73.098778-9.409206C73.056935-9.241833 72.985204-8.942954 72.985204-8.907089C72.985204-8.775582 73.086823-8.709828 73.194419-8.709828S73.403635-8.781559 73.451455-8.871223C73.463411-8.907089 73.517209-9.116304 73.547097-9.235856L73.678604-9.773838C73.720447-9.929256 73.744357-10.036852 73.780222-10.174336C73.834021-10.377574 74.043236-10.694386 74.264407-10.915557C74.383958-11.029131 74.640995-11.208459 74.963784-11.208459C75.34635-11.208459 75.34635-10.903602 75.34635-10.790028C75.34635-10.43735 75.089313-9.797749 74.981717-9.528757C74.945851-9.427138 74.904008-9.331497 74.904008-9.229878C74.904008-8.925021 75.178977-8.709828 75.507744-8.709828C76.11148-8.709828 76.410359-9.498869 76.410359-9.630376C76.410359-9.642331 76.404382-9.714062 76.296785-9.714062C76.213099-9.714062 76.207122-9.684175 76.171256-9.5706C76.075615-9.253789 75.830534-8.907089 75.525677-8.907089C75.412103-8.907089 75.364282-8.996752 75.364282-9.122282C75.364282-9.241833 75.406125-9.343452 75.459924-9.468982C75.549587-9.702107 75.818579-10.377574 75.818579-10.712319C75.818579-11.202481 75.447968-11.405719 74.993672-11.405719C74.694793-11.405719 74.312227-11.310077 73.929662-10.837848Z"/>
<path d="M52.322904-5.738481C52.526141-5.738481 52.741334-5.738481 52.741334-5.977584S52.526141-6.216687 52.322904-6.216687H45.855158C45.65192-6.216687 45.436727-6.216687 45.436727-5.977584S45.65192-5.738481 45.855158-5.738481H52.322904Z"/>
<path d="M58.534519-5.738481C58.737757-5.738481 58.95295-5.738481 58.95295-5.977584S58.737757-6.216687 58.534519-6.216687H52.066773C51.863535-6.216687 51.648342-6.216687 51.648342-5.977584S51.863535-5.738481 52.066773-5.738481H58.534519Z"/>
<path d="M65.176345-5.738481C65.379583-5.738481 65.594776-5.738481 65.594776-5.977584S65.379583-6.216687 65.176345-6.216687H58.708599C58.505361-6.216687 58.290168-6.216687 58.290168-5.977584S58.505361-5.738481 58.708599-5.738481H65.176345Z"/>
<path d="M71.818171-5.738481C72.021409-5.738481 72.236602-5.738481 72.236602-5.977584S72.021409-6.216687 71.818171-6.216687H65.350425C65.147187-6.216687 64.931994-6.216687 64.931994-5.977584S65.147187-5.738481 65.350425-5.738481H71.818171Z"/>
<path d="M78.459997-5.738481C78.663235-5.738481 78.878428-5.738481 78.878428-5.977584S78.663235-6.216687 78.459997-6.216687H71.992251C71.789013-6.216687 71.57382-6.216687 71.57382-5.977584S71.789013-5.738481 71.992251-5.738481H78.459997Z"/>
<path d="M85.101823-5.738481C85.305061-5.738481 85.520254-5.738481 85.520254-5.977584S85.305061-6.216687 85.101823-6.216687H78.634077C78.430839-6.216687 78.215646-6.216687 78.215646-5.977584S78.430839-5.738481 78.634077-5.738481H85.101823Z"/>
<path d="M93.405441-5.738481C92.747907-5.236364 92.425117-4.746202 92.329476-4.590785C91.791493-3.765878 91.695852-3.012702 91.695852-3.000747C91.695852-2.857285 91.839314-2.857285 91.934955-2.857285C92.138193-2.857285 92.150148-2.881196 92.197969-3.096389C92.472938-4.267995 93.178293-5.272229 94.529227-5.822167C94.672689-5.869988 94.708554-5.893898 94.708554-5.977584S94.636823-6.097136 94.612913-6.109091C94.086885-6.312329 92.64031-6.910087 92.186014-8.918555C92.150148-9.062017 92.138193-9.097883 91.934955-9.097883C91.839314-9.097883 91.695852-9.097883 91.695852-8.954421C91.695852-8.930511 91.803448-8.177335 92.305565-7.376339C92.544669-7.017684 92.891369-6.599253 93.405441-6.216687H84.522751C84.307558-6.216687 84.092365-6.216687 84.092365-5.977584S84.307558-5.738481 84.522751-5.738481H93.405441Z"/>
<path d="M102.596288-.083686C102.596288-.119552 102.596288-.143462 102.39305-.3467C101.197533-1.554172 100.528044-3.526775 100.528044-5.965629C100.528044-8.284932 101.089937-10.281445 102.476736-11.692154C102.596288-11.799751 102.596288-11.823661 102.596288-11.859527C102.596288-11.931258 102.536512-11.955168 102.488692-11.955168C102.333274-11.955168 101.352951-11.094396 100.767147-9.92279C100.157434-8.715318 99.882465-7.436115 99.882465-5.965629C99.882465-4.901619 100.049837-3.478954 100.671506-2.199751C101.376861-.765131 102.357185 .011955 102.488692 .011955C102.536512 .011955 102.596288-.011955 102.596288-.083686Z"/>
<path d="M108.595189-7.79477C108.834293-7.79477 108.929934-7.79477 108.929934-8.021918C108.929934-8.141469 108.834293-8.141469 108.6191-8.141469H107.650731C107.877879-9.372852 108.045251-10.221669 108.140893-10.604234C108.212624-10.891158 108.463682-11.166127 108.774517-11.166127C109.025575-11.166127 109.276634-11.058531 109.396185-10.950934C108.929934-10.903113 108.786472-10.556413 108.786472-10.353176C108.786472-10.114072 108.965799-9.97061 109.192948-9.97061C109.432051-9.97061 109.790706-10.173848 109.790706-10.628144C109.790706-11.130262 109.288589-11.40523 108.762562-11.40523C108.248489-11.40523 107.746372-11.022665 107.507269-10.556413C107.292076-10.137983 107.172524-9.707597 106.897555-8.141469H106.096559C105.869411-8.141469 105.749859-8.141469 105.749859-7.926276C105.749859-7.79477 105.82159-7.79477 106.060694-7.79477H106.825824C106.610631-6.682939 106.120469-3.981071 105.845501-2.701868C105.642263-1.661768 105.462935-.789041 104.865177-.789041C104.829311-.789041 104.482611-.789041 104.267418-1.016189C104.877132-1.06401 104.877132-1.590037 104.877132-1.601993C104.877132-1.841096 104.697804-1.984558 104.470656-1.984558C104.231553-1.984558 103.872898-1.78132 103.872898-1.327024C103.872898-.812951 104.398925-.549938 104.865177-.549938C106.084604-.549938 106.586721-2.737733 106.718228-3.335492C106.933421-4.25604 107.519224-7.436115 107.579-7.79477H108.595189Z"/>
<path d="M111.990546-2.940971C111.990546-3.634371 111.763398-4.148443 111.273236-4.148443C110.890671-4.148443 110.699388-3.837609 110.699388-3.574595S110.878716-2.988792 111.285191-2.988792C111.440609-2.988792 111.572115-3.036613 111.679712-3.144209C111.703622-3.16812 111.715577-3.16812 111.727533-3.16812C111.751443-3.16812 111.751443-3.000747 111.751443-2.940971C111.751443-2.546451 111.679712-1.769365 110.986312-.992279C110.854805-.848817 110.854805-.824907 110.854805-.800996C110.854805-.74122 110.914581-.681445 110.974357-.681445C111.069998-.681445 111.990546-1.566127 111.990546-2.940971Z"/>
<path d="M124.237726-10.9868C124.249681-11.03462 124.273592-11.106351 124.273592-11.166127C124.273592-11.285679 124.15404-11.285679 124.13013-11.285679C124.118175-11.285679 123.532371-11.237858 123.472596-11.225903C123.269358-11.213948 123.09003-11.190037 122.874837-11.178082C122.575958-11.154172 122.492272-11.142217 122.492272-10.927024C122.492272-10.807472 122.587913-10.807472 122.755285-10.807472C123.341089-10.807472 123.353044-10.699875 123.353044-10.580324C123.353044-10.508593 123.329134-10.412951 123.317178-10.377086L122.587913-7.47198C122.456406-7.782814 122.133617-8.261021 121.511948-8.261021C120.161014-8.261021 118.702483-6.515567 118.702483-4.746202C118.702483-3.56264 119.395883-2.86924 120.208835-2.86924C120.866369-2.86924 121.428262-3.383313 121.763007-3.777833C121.882558-3.072478 122.444451-2.86924 122.803106-2.86924S123.448685-3.084433 123.663878-3.514819C123.855161-3.921295 124.022533-4.65056 124.022533-4.698381C124.022533-4.758157 123.974713-4.805978 123.902982-4.805978C123.795385-4.805978 123.78343-4.746202 123.735609-4.566874C123.556282-3.861519 123.329134-3.108344 122.838972-3.108344C122.492272-3.108344 122.468361-3.419178 122.468361-3.658281C122.468361-3.706102 122.468361-3.957161 122.552048-4.291905L124.237726-10.9868ZM121.822782-4.411457C121.763007-4.208219 121.763007-4.184309 121.595634-3.957161C121.33262-3.622416 120.806593-3.108344 120.2447-3.108344C119.754538-3.108344 119.479569-3.550685 119.479569-4.25604C119.479569-4.913574 119.85018-6.252553 120.077328-6.75467C120.483804-7.591532 121.045696-8.021918 121.511948-8.021918C122.300989-8.021918 122.456406-7.041594 122.456406-6.945953C122.456406-6.933998 122.420541-6.77858 122.408586-6.75467L121.822782-4.411457Z"/>
<path d="M125.900992-2.502627C125.924902-2.622179 126.004604-2.925043 126.028514-3.044595C126.140096-3.474981 126.140096-3.482951 126.323408-3.745965C126.586422-4.1365 126.961017-4.487185 127.495015-4.487185C127.781939-4.487185 127.949311-4.319813 127.949311-3.945218C127.949311-3.506861 127.614566-2.598269 127.463134-2.207733C127.359523-1.94472 127.359523-1.896899 127.359523-1.793287C127.359523-1.338991 127.734118-1.115828 128.076833-1.115828C128.857904-1.115828 129.184678-2.231644 129.184678-2.335255C129.184678-2.414956 129.120917-2.438866 129.065127-2.438866C128.969485-2.438866 128.953545-2.383076 128.929635-2.303375C128.738352-1.649825 128.403607-1.338991 128.100743-1.338991C127.973221-1.338991 127.90946-1.418692 127.90946-1.602005S127.973221-1.96066 128.052922-2.159913C128.172474-2.462777 128.523159-3.37934 128.523159-3.825666C128.523159-4.423424 128.108713-4.710348 127.534865-4.710348C126.889286-4.710348 126.47484-4.319813 126.243707-4.016949C126.187916-4.455305 125.837231-4.710348 125.430756-4.710348C125.143832-4.710348 124.944579-4.527036 124.817057-4.279962C124.625774-3.905367 124.546073-3.506861 124.546073-3.490921C124.546073-3.41919 124.601864-3.38731 124.665625-3.38731C124.769236-3.38731 124.777206-3.41919 124.832997-3.626413C124.928638-4.016949 125.072101-4.487185 125.406845-4.487185C125.614068-4.487185 125.661889-4.287932 125.661889-4.11259C125.661889-3.969128 125.622038-3.817696 125.558277-3.554682C125.542337-3.490921 125.422785-3.020685 125.390905-2.909103L125.096011-1.713586C125.06413-1.594035 125.01631-1.394782 125.01631-1.362901C125.01631-1.179589 125.167742-1.115828 125.271353-1.115828C125.414815-1.115828 125.534367-1.211469 125.590158-1.307111C125.614068-1.354931 125.677829-1.625915 125.71768-1.793287L125.900992-2.502627Z"/>
<path d="M133.314662-5.965629C133.314662-6.874222 133.19511-8.356663 132.525621-9.743462C131.820266-11.178082 130.839942-11.955168 130.708435-11.955168C130.660614-11.955168 130.600838-11.931258 130.600838-11.859527C130.600838-11.823661 130.600838-11.799751 130.804076-11.596513C131.999593-10.389041 132.669083-8.416438 132.669083-5.977584C132.669083-3.658281 132.10719-1.661768 130.72039-.251059C130.600838-.143462 130.600838-.119552 130.600838-.083686C130.600838-.011955 130.660614 .011955 130.708435 .011955C130.863852 .011955 131.844176-.848817 132.429979-2.020423C133.039693-3.239851 133.314662-4.531009 133.314662-5.965629Z"/>
<path d="M159.108743-15.478194C159.172504-15.725267 159.228295-15.741207 159.284085-15.749177C159.339876-15.765118 159.58695-15.765118 159.738382-15.765118C160.519453-15.765118 160.830287-15.725267 160.830287-15.151419C160.830287-15.071718 160.822317-15.015927 160.814347-14.944196L160.750586-14.426139V-14.386288C160.750586-14.378318 160.758556-14.354408 160.750586-14.346438C160.742616-14.330497 160.726676-14.218916 160.894048-14.218916C161.02954-14.218916 161.03751-14.274707 161.05345-14.386288L161.276613-15.804968L161.284583-15.91655C161.284583-16.028131 161.180972-16.028131 161.06142-16.028131H156.717709C156.542367-16.028131 156.518456-16.028131 156.470636-15.884669L155.984459-14.465989C155.944608-14.362378 155.944608-14.346438 155.944608-14.330497C155.944608-14.218916 156.05619-14.218916 156.096041-14.218916C156.127921-14.218916 156.175742-14.218916 156.207622-14.242826C156.231532-14.258766 156.231532-14.274707 156.303263-14.4899C156.709739-15.637596 156.948843-15.765118 158.016838-15.765118C158.17624-15.765118 158.375493-15.765118 158.495044-15.749177C158.487074-15.637596 158.487074-15.613685 158.455194-15.494134L157.411109-11.309825C157.331408-10.99102 157.283587-10.903349 156.558307-10.903349H156.454696C156.311234-10.903349 156.215592-10.903349 156.215592-10.751917C156.215592-10.720037 156.231532-10.640336 156.351084-10.640336C156.653948-10.640336 156.964783-10.664246 157.275617-10.664246H157.857435C158.17624-10.664246 158.510984-10.640336 158.821819-10.640336C158.87761-10.640336 158.989191-10.640336 158.989191-10.791768C158.989191-10.903349 158.89355-10.903349 158.766028-10.903349H158.662417C158.526925-10.903349 158.399403-10.911319 158.263911-10.919289C158.072628-10.9432 158.016838-10.95914 158.016838-11.062751C158.016838-11.110572 158.040748-11.190273 158.040748-11.198243L159.108743-15.478194Z"/>
<path d="M162.600105-11.724271C162.528374-11.461257 162.361002-10.783798 161.858885-10.783798C161.683542-10.783798 161.54805-10.855529 161.50023-10.895379C161.659632-10.95914 161.779184-11.102602 161.779184-11.277945C161.779184-11.509078 161.587901-11.548928 161.50023-11.548928C161.269097-11.548928 161.093754-11.349676 161.093754-11.110572C161.093754-10.728007 161.50023-10.560634 161.850915-10.560634C162.20957-10.560634 162.472583-10.783798 162.663866-11.062751C162.799358-10.767857 163.102222-10.560634 163.484788-10.560634C164.313679-10.560634 164.791886-11.548928 164.791886-11.788032C164.791886-11.883673 164.672334-11.883673 164.640454-11.883673C164.536842-11.883673 164.504962-11.859763 164.481052-11.780062C164.226008-10.95914 163.731861-10.783798 163.500728-10.783798C163.253654-10.783798 163.086282-10.95914 163.086282-11.285915C163.086282-11.461257 163.181923-11.843822 163.253654-12.114806C163.333356-12.465491 163.421027-12.808206 163.508698-13.150921C163.63622-13.645068 163.907204-13.931992 164.210068-13.931992C164.417291-13.931992 164.552783-13.82838 164.568723-13.82041C164.496992-13.7965 164.289769-13.668978 164.289769-13.437845C164.289769-13.214682 164.465111-13.166861 164.568723-13.166861C164.720155-13.166861 164.967229-13.278443 164.967229-13.605217C164.967229-14.043573 164.481052-14.155155 164.218038-14.155155C163.891263-14.155155 163.62028-13.971842 163.405087-13.653038C163.309445-13.844321 163.070342-14.155155 162.584165-14.155155C161.747303-14.155155 161.277067-13.150921 161.277067-12.935728C161.277067-12.832116 161.380678-12.832116 161.428499-12.832116C161.53211-12.832116 161.556021-12.856027 161.579931-12.935728C161.827004-13.724769 162.305211-13.931992 162.568225-13.931992S162.982671-13.724769 162.982671-13.429875C162.982671-13.270473 162.94282-13.1031 162.855149-12.760385L162.600105-11.724271Z"/>
<path d="M167.301674-11.601631C167.271786-12.055928 166.853355-12.169502 166.626207-12.169502S166.243641-12.032018 166.136045-11.840735C165.986605-11.595654 165.914874-11.278842 165.914874-11.254932C165.914874-11.189178 165.968672-11.165268 166.022471-11.165268C166.118112-11.165268 166.12409-11.207111 166.153977-11.302752C166.273529-11.780959 166.416991-11.972242 166.608274-11.972242C166.823467-11.972242 166.823467-11.727161 166.823467-11.667385C166.823467-11.571744 166.763691-11.33264 166.721848-11.165268C166.680005-11.003873 166.620229-10.758792 166.590341-10.627285C166.548498-10.477846 166.512632-10.322428 166.470789-10.172989C166.428946-10.005617 166.357215-9.706737 166.357215-9.670872C166.357215-9.539365 166.458834-9.473612 166.566431-9.473612S166.775646-9.545343 166.823467-9.635006C166.835422-9.670872 166.88922-9.880087 166.919108-9.999639L167.050615-10.537621C167.092458-10.693039 167.116368-10.800635 167.152234-10.93812C167.206032-11.141357 167.415248-11.458169 167.636418-11.67934C167.75597-11.792914 168.013006-11.972242 168.335796-11.972242C168.718361-11.972242 168.718361-11.667385 168.718361-11.553811C168.718361-11.201133 168.461325-10.561532 168.353728-10.292541C168.317863-10.190922 168.27602-10.09528 168.27602-9.993661C168.27602-9.688805 168.550989-9.473612 168.879756-9.473612C169.483492-9.473612 169.782371-10.262653 169.782371-10.394159C169.782371-10.406115 169.776393-10.477846 169.668797-10.477846C169.585111-10.477846 169.579133-10.447958 169.543268-10.334384C169.447626-10.017572 169.202545-9.670872 168.897689-9.670872C168.784114-9.670872 168.736294-9.760536 168.736294-9.886065C168.736294-10.005617 168.778137-10.107235 168.831935-10.232765C168.921599-10.46589 169.19059-11.141357 169.19059-11.476102C169.19059-11.966264 168.81998-12.169502 168.365684-12.169502C168.066804-12.169502 167.684239-12.073861 167.301674-11.601631Z"/>
<path d="M173.097978-10.872366H175.028737C175.112423-10.872366 175.261863-10.872366 175.261863-11.027783S175.112423-11.183201 175.028737-11.183201H173.097978V-13.119938C173.097978-13.203624 173.097978-13.353064 172.94256-13.353064S172.787143-13.203624 172.787143-13.119938V-11.183201H170.856383C170.772697-11.183201 170.623258-11.183201 170.623258-11.027783S170.772697-10.872366 170.856383-10.872366H172.787143V-8.935629C172.787143-8.851943 172.787143-8.702503 172.94256-8.702503S173.097978-8.851943 173.097978-8.935629V-10.872366Z"/>
<path d="M177.887074-13.329153C177.887074-13.508481 177.863163-13.508481 177.683836-13.508481C177.289315-13.125915 176.679602-13.125915 176.464409-13.125915V-12.89279C176.619826-12.89279 177.014346-12.89279 177.373002-13.060162V-10.041482C177.373002-9.844222 177.373002-9.766513 176.75731-9.766513H176.500274V-9.533387C176.829041-9.557298 177.295293-9.557298 177.630038-9.557298S178.431034-9.557298 178.759801-9.533387V-9.766513H178.502765C177.887074-9.766513 177.887074-9.844222 177.887074-10.041482V-13.329153Z"/>
<path d="M145.694915-5.738481C145.898153-5.738481 146.113346-5.738481 146.113346-5.977584S145.898153-6.216687 145.694915-6.216687H139.227169C139.023931-6.216687 138.808738-6.216687 138.808738-5.977584S139.023931-5.738481 139.227169-5.738481H145.694915Z"/>
<path d="M149.886199-5.738481C150.089436-5.738481 150.304629-5.738481 150.304629-5.977584S150.089436-6.216687 149.886199-6.216687H143.418453C143.215215-6.216687 143.000022-6.216687 143.000022-5.977584S143.215215-5.738481 143.418453-5.738481H149.886199Z"/>
<path d="M156.528024-5.738481C156.731262-5.738481 156.946455-5.738481 156.946455-5.977584S156.731262-6.216687 156.528024-6.216687H150.060279C149.857041-6.216687 149.641848-6.216687 149.641848-5.977584S149.857041-5.738481 150.060279-5.738481H156.528024Z"/>
<path d="M163.16985-5.738481C163.373088-5.738481 163.588281-5.738481 163.588281-5.977584S163.373088-6.216687 163.16985-6.216687H156.702104C156.498867-6.216687 156.283674-6.216687 156.283674-5.977584S156.498867-5.738481 156.702104-5.738481H163.16985Z"/>
<path d="M169.811676-5.738481C170.014914-5.738481 170.230107-5.738481 170.230107-5.977584S170.014914-6.216687 169.811676-6.216687H163.34393C163.140693-6.216687 162.9255-6.216687 162.9255-5.977584S163.140693-5.738481 163.34393-5.738481H169.811676Z"/>
<path d="M176.453502-5.738481C176.65674-5.738481 176.871933-5.738481 176.871933-5.977584S176.65674-6.216687 176.453502-6.216687H169.985756C169.782518-6.216687 169.567325-6.216687 169.567325-5.977584S169.782518-5.738481 169.985756-5.738481H176.453502Z"/>
<path d="M183.095328-5.738481C183.298566-5.738481 183.513759-5.738481 183.513759-5.977584S183.298566-6.216687 183.095328-6.216687H176.627582C176.424344-6.216687 176.209151-6.216687 176.209151-5.977584S176.424344-5.738481 176.627582-5.738481H183.095328Z"/>
<path d="M189.737154-5.738481C189.940392-5.738481 190.155585-5.738481 190.155585-5.977584S189.940392-6.216687 189.737154-6.216687H183.269408C183.06617-6.216687 182.850977-6.216687 182.850977-5.977584S183.06617-5.738481 183.269408-5.738481H189.737154Z"/>
<path d="M196.020455-5.738481C195.362921-5.236364 195.040131-4.746202 194.94449-4.590785C194.406507-3.765878 194.310866-3.012702 194.310866-3.000747C194.310866-2.857285 194.454328-2.857285 194.54997-2.857285C194.753207-2.857285 194.765163-2.881196 194.812983-3.096389C195.087952-4.267995 195.793307-5.272229 197.144241-5.822167C197.287703-5.869988 197.323569-5.893898 197.323569-5.977584S197.251838-6.097136 197.227927-6.109091C196.7019-6.312329 195.255324-6.910087 194.801028-8.918555C194.765163-9.062017 194.753207-9.097883 194.54997-9.097883C194.454328-9.097883 194.310866-9.097883 194.310866-8.954421C194.310866-8.930511 194.418463-8.177335 194.92058-7.376339C195.159683-7.017684 195.506383-6.599253 196.020455-6.216687H187.137765C186.922572-6.216687 186.707379-6.216687 186.707379-5.977584S186.922572-5.738481 187.137765-5.738481H196.020455Z"/>
<path d="M205.211302-.083686C205.211302-.119552 205.211302-.143462 205.008065-.3467C203.812548-1.554172 203.143058-3.526775 203.143058-5.965629C203.143058-8.284932 203.704951-10.281445 205.091751-11.692154C205.211302-11.799751 205.211302-11.823661 205.211302-11.859527C205.211302-11.931258 205.151527-11.955168 205.103706-11.955168C204.948289-11.955168 203.967965-11.094396 203.382162-9.92279C202.772448-8.715318 202.497479-7.436115 202.497479-5.965629C202.497479-4.901619 202.664852-3.478954 203.28652-2.199751C203.991875-.765131 204.972199 .011955 205.103706 .011955C205.151527 .011955 205.211302-.011955 205.211302-.083686Z"/>
<path d="M211.210204-7.79477C211.449307-7.79477 211.544948-7.79477 211.544948-8.021918C211.544948-8.141469 211.449307-8.141469 211.234114-8.141469H210.265745C210.492894-9.372852 210.660266-10.221669 210.755907-10.604234C210.827638-10.891158 211.078697-11.166127 211.389531-11.166127C211.64059-11.166127 211.891648-11.058531 212.0112-10.950934C211.544948-10.903113 211.401486-10.556413 211.401486-10.353176C211.401486-10.114072 211.580814-9.97061 211.807962-9.97061C212.047065-9.97061 212.40572-10.173848 212.40572-10.628144C212.40572-11.130262 211.903603-11.40523 211.377576-11.40523C210.863504-11.40523 210.361387-11.022665 210.122283-10.556413C209.90709-10.137983 209.787539-9.707597 209.51257-8.141469H208.711573C208.484425-8.141469 208.364874-8.141469 208.364874-7.926276C208.364874-7.79477 208.436605-7.79477 208.675708-7.79477H209.440839C209.225646-6.682939 208.735484-3.981071 208.460515-2.701868C208.257277-1.661768 208.07795-.789041 207.480191-.789041C207.444326-.789041 207.097626-.789041 206.882433-1.016189C207.492146-1.06401 207.492146-1.590037 207.492146-1.601993C207.492146-1.841096 207.312819-1.984558 207.085671-1.984558C206.846567-1.984558 206.487912-1.78132 206.487912-1.327024C206.487912-.812951 207.01394-.549938 207.480191-.549938C208.699618-.549938 209.201735-2.737733 209.333242-3.335492C209.548435-4.25604 210.134238-7.436115 210.194014-7.79477H211.210204Z"/>
<path d="M214.605561-2.940971C214.605561-3.634371 214.378413-4.148443 213.888251-4.148443C213.505685-4.148443 213.314403-3.837609 213.314403-3.574595S213.49373-2.988792 213.900206-2.988792C214.055623-2.988792 214.18713-3.036613 214.294726-3.144209C214.318637-3.16812 214.330592-3.16812 214.342547-3.16812C214.366457-3.16812 214.366457-3.000747 214.366457-2.940971C214.366457-2.546451 214.294726-1.769365 213.601327-.992279C213.46982-.848817 213.46982-.824907 213.46982-.800996C213.46982-.74122 213.529596-.681445 213.589371-.681445C213.685013-.681445 214.605561-1.566127 214.605561-2.940971Z"/>
<path d="M226.852741-10.9868C226.864696-11.03462 226.888606-11.106351 226.888606-11.166127C226.888606-11.285679 226.769055-11.285679 226.745144-11.285679C226.733189-11.285679 226.147386-11.237858 226.08761-11.225903C225.884372-11.213948 225.705045-11.190037 225.489852-11.178082C225.190972-11.154172 225.107286-11.142217 225.107286-10.927024C225.107286-10.807472 225.202928-10.807472 225.3703-10.807472C225.956103-10.807472 225.968058-10.699875 225.968058-10.580324C225.968058-10.508593 225.944148-10.412951 225.932193-10.377086L225.202928-7.47198C225.071421-7.782814 224.748631-8.261021 224.126962-8.261021C222.776028-8.261021 221.317498-6.515567 221.317498-4.746202C221.317498-3.56264 222.010898-2.86924 222.823849-2.86924C223.481383-2.86924 224.043276-3.383313 224.378021-3.777833C224.497573-3.072478 225.059466-2.86924 225.418121-2.86924S226.0637-3.084433 226.278893-3.514819C226.470175-3.921295 226.637548-4.65056 226.637548-4.698381C226.637548-4.758157 226.589727-4.805978 226.517996-4.805978C226.4104-4.805978 226.398444-4.746202 226.350624-4.566874C226.171296-3.861519 225.944148-3.108344 225.453986-3.108344C225.107286-3.108344 225.083376-3.419178 225.083376-3.658281C225.083376-3.706102 225.083376-3.957161 225.167062-4.291905L226.852741-10.9868ZM224.437797-4.411457C224.378021-4.208219 224.378021-4.184309 224.210649-3.957161C223.947635-3.622416 223.421607-3.108344 222.859715-3.108344C222.369553-3.108344 222.094584-3.550685 222.094584-4.25604C222.094584-4.913574 222.465194-6.252553 222.692342-6.75467C223.098818-7.591532 223.660711-8.021918 224.126962-8.021918C224.916003-8.021918 225.071421-7.041594 225.071421-6.945953C225.071421-6.933998 225.035555-6.77858 225.0236-6.75467L224.437797-4.411457Z"/>
<path d="M228.516007-2.502627C228.539917-2.622179 228.619618-2.925043 228.643528-3.044595C228.75511-3.474981 228.75511-3.482951 228.938423-3.745965C229.201436-4.1365 229.576031-4.487185 230.110029-4.487185C230.396953-4.487185 230.564325-4.319813 230.564325-3.945218C230.564325-3.506861 230.229581-2.598269 230.078149-2.207733C229.974537-1.94472 229.974537-1.896899 229.974537-1.793287C229.974537-1.338991 230.349132-1.115828 230.691847-1.115828C231.472918-1.115828 231.799693-2.231644 231.799693-2.335255C231.799693-2.414956 231.735932-2.438866 231.680141-2.438866C231.5845-2.438866 231.568559-2.383076 231.544649-2.303375C231.353366-1.649825 231.018622-1.338991 230.715757-1.338991C230.588236-1.338991 230.524475-1.418692 230.524475-1.602005S230.588236-1.96066 230.667937-2.159913C230.787489-2.462777 231.138173-3.37934 231.138173-3.825666C231.138173-4.423424 230.723728-4.710348 230.14988-4.710348C229.5043-4.710348 229.089855-4.319813 228.858721-4.016949C228.802931-4.455305 228.452246-4.710348 228.04577-4.710348C227.758846-4.710348 227.559593-4.527036 227.432071-4.279962C227.240789-3.905367 227.161088-3.506861 227.161088-3.490921C227.161088-3.41919 227.216878-3.38731 227.280639-3.38731C227.384251-3.38731 227.392221-3.41919 227.448012-3.626413C227.543653-4.016949 227.687115-4.487185 228.02186-4.487185C228.229083-4.487185 228.276903-4.287932 228.276903-4.11259C228.276903-3.969128 228.237053-3.817696 228.173292-3.554682C228.157352-3.490921 228.0378-3.020685 228.005919-2.909103L227.711025-1.713586C227.679145-1.594035 227.631324-1.394782 227.631324-1.362901C227.631324-1.179589 227.782756-1.115828 227.886368-1.115828C228.02983-1.115828 228.149381-1.211469 228.205172-1.307111C228.229083-1.354931 228.292843-1.625915 228.332694-1.793287L228.516007-2.502627Z"/>
<path d="M235.535155-3.004744H237.878368C237.98995-3.004744 238.165292-3.004744 238.165292-3.188057S237.98995-3.37137 237.878368-3.37137H235.535155V-5.722553C235.535155-5.834134 235.535155-6.009477 235.351843-6.009477S235.16853-5.834134 235.16853-5.722553V-3.37137H232.817347C232.705766-3.37137 232.530423-3.37137 232.530423-3.188057S232.705766-3.004744 232.817347-3.004744H235.16853V-.653561C235.16853-.54198 235.16853-.366637 235.351843-.366637S235.535155-.54198 235.535155-.653561V-3.004744Z"/>
<path d="M241.149308-6.27249C241.149308-6.487683 241.133368-6.495654 240.918175-6.495654C240.591401-6.176849 240.168985-5.985566 239.411824-5.985566V-5.722553C239.627017-5.722553 240.057403-5.722553 240.51967-5.937746V-1.849078C240.51967-1.554184 240.495759-1.458543 239.738599-1.458543H239.459645V-1.195529C239.786419-1.219439 240.471849-1.219439 240.830504-1.219439S241.882559-1.219439 242.209333-1.195529V-1.458543H241.930379C241.173219-1.458543 241.149308-1.554184 241.149308-1.849078V-6.27249Z"/>
<path d="M246.750366-5.965629C246.750366-6.874222 246.630814-8.356663 245.961324-9.743462C245.255969-11.178082 244.275646-11.955168 244.144139-11.955168C244.096318-11.955168 244.036542-11.931258 244.036542-11.859527C244.036542-11.823661 244.036542-11.799751 244.23978-11.596513C245.435297-10.389041 246.104786-8.416438 246.104786-5.977584C246.104786-3.658281 245.542894-1.661768 244.156094-.251059C244.036542-.143462 244.036542-.119552 244.036542-.083686C244.036542-.011955 244.096318 .011955 244.144139 .011955C244.299556 .011955 245.27988-.848817 245.865683-2.020423C246.475397-3.239851 246.750366-4.531009 246.750366-5.965629Z"/>
<path d="M272.544447-15.478194C272.608208-15.725267 272.663998-15.741207 272.719789-15.749177C272.77558-15.765118 273.022654-15.765118 273.174086-15.765118C273.955157-15.765118 274.265991-15.725267 274.265991-15.151419C274.265991-15.071718 274.258021-15.015927 274.250051-14.944196L274.18629-14.426139V-14.386288C274.18629-14.378318 274.19426-14.354408 274.18629-14.346438C274.17832-14.330497 274.16238-14.218916 274.329752-14.218916C274.465244-14.218916 274.473214-14.274707 274.489154-14.386288L274.712317-15.804968L274.720287-15.91655C274.720287-16.028131 274.616676-16.028131 274.497124-16.028131H270.153413C269.978071-16.028131 269.95416-16.028131 269.90634-15.884669L269.420163-14.465989C269.380312-14.362378 269.380312-14.346438 269.380312-14.330497C269.380312-14.218916 269.491894-14.218916 269.531744-14.218916C269.563625-14.218916 269.611446-14.218916 269.643326-14.242826C269.667236-14.258766 269.667236-14.274707 269.738967-14.4899C270.145443-15.637596 270.384546-15.765118 271.452541-15.765118C271.611944-15.765118 271.811196-15.765118 271.930748-15.749177C271.922778-15.637596 271.922778-15.613685 271.890898-15.494134L270.846813-11.309825C270.767112-10.99102 270.719291-10.903349 269.994011-10.903349H269.890399C269.746937-10.903349 269.651296-10.903349 269.651296-10.751917C269.651296-10.720037 269.667236-10.640336 269.786788-10.640336C270.089652-10.640336 270.400487-10.664246 270.711321-10.664246H271.293139C271.611944-10.664246 271.946688-10.640336 272.257523-10.640336C272.313314-10.640336 272.424895-10.640336 272.424895-10.791768C272.424895-10.903349 272.329254-10.903349 272.201732-10.903349H272.098121C271.962629-10.903349 271.835107-10.911319 271.699615-10.919289C271.508332-10.9432 271.452541-10.95914 271.452541-11.062751C271.452541-11.110572 271.476452-11.190273 271.476452-11.198243L272.544447-15.478194Z"/>
<path d="M276.035809-11.724271C275.964078-11.461257 275.796706-10.783798 275.294589-10.783798C275.119246-10.783798 274.983754-10.855529 274.935934-10.895379C275.095336-10.95914 275.214888-11.102602 275.214888-11.277945C275.214888-11.509078 275.023605-11.548928 274.935934-11.548928C274.7048-11.548928 274.529458-11.349676 274.529458-11.110572C274.529458-10.728007 274.935934-10.560634 275.286619-10.560634C275.645274-10.560634 275.908287-10.783798 276.09957-11.062751C276.235062-10.767857 276.537926-10.560634 276.920492-10.560634C277.749383-10.560634 278.22759-11.548928 278.22759-11.788032C278.22759-11.883673 278.108038-11.883673 278.076158-11.883673C277.972546-11.883673 277.940666-11.859763 277.916756-11.780062C277.661712-10.95914 277.167565-10.783798 276.936432-10.783798C276.689358-10.783798 276.521986-10.95914 276.521986-11.285915C276.521986-11.461257 276.617627-11.843822 276.689358-12.114806C276.769059-12.465491 276.856731-12.808206 276.944402-13.150921C277.071924-13.645068 277.342908-13.931992 277.645772-13.931992C277.852995-13.931992 277.988487-13.82838 278.004427-13.82041C277.932696-13.7965 277.725473-13.668978 277.725473-13.437845C277.725473-13.214682 277.900815-13.166861 278.004427-13.166861C278.155859-13.166861 278.402932-13.278443 278.402932-13.605217C278.402932-14.043573 277.916756-14.155155 277.653742-14.155155C277.326967-14.155155 277.055983-13.971842 276.84079-13.653038C276.745149-13.844321 276.506046-14.155155 276.019869-14.155155C275.183007-14.155155 274.712771-13.150921 274.712771-12.935728C274.712771-12.832116 274.816382-12.832116 274.864203-12.832116C274.967814-12.832116 274.991724-12.856027 275.015635-12.935728C275.262708-13.724769 275.740915-13.931992 276.003929-13.931992S276.418375-13.724769 276.418375-13.429875C276.418375-13.270473 276.378524-13.1031 276.290853-12.760385L276.035809-11.724271Z"/>
<path d="M280.737377-11.601631C280.70749-12.055928 280.289059-12.169502 280.06191-12.169502S279.679345-12.032018 279.571749-11.840735C279.422309-11.595654 279.350578-11.278842 279.350578-11.254932C279.350578-11.189178 279.404376-11.165268 279.458174-11.165268C279.553816-11.165268 279.559793-11.207111 279.589681-11.302752C279.709233-11.780959 279.852695-11.972242 280.043978-11.972242C280.259171-11.972242 280.259171-11.727161 280.259171-11.667385C280.259171-11.571744 280.199395-11.33264 280.157552-11.165268C280.115709-11.003873 280.055933-10.758792 280.026045-10.627285C279.984202-10.477846 279.948336-10.322428 279.906493-10.172989C279.86465-10.005617 279.792919-9.706737 279.792919-9.670872C279.792919-9.539365 279.894538-9.473612 280.002135-9.473612S280.21135-9.545343 280.259171-9.635006C280.271126-9.670872 280.324924-9.880087 280.354812-9.999639L280.486319-10.537621C280.528162-10.693039 280.552072-10.800635 280.587938-10.93812C280.641736-11.141357 280.850952-11.458169 281.072122-11.67934C281.191674-11.792914 281.44871-11.972242 281.7715-11.972242C282.154065-11.972242 282.154065-11.667385 282.154065-11.553811C282.154065-11.201133 281.897029-10.561532 281.789432-10.292541C281.753567-10.190922 281.711724-10.09528 281.711724-9.993661C281.711724-9.688805 281.986693-9.473612 282.31546-9.473612C282.919196-9.473612 283.218075-10.262653 283.218075-10.394159C283.218075-10.406115 283.212097-10.477846 283.104501-10.477846C283.020815-10.477846 283.014837-10.447958 282.978971-10.334384C282.88333-10.017572 282.638249-9.670872 282.333392-9.670872C282.219818-9.670872 282.171998-9.760536 282.171998-9.886065C282.171998-10.005617 282.213841-10.107235 282.267639-10.232765C282.357303-10.46589 282.626294-11.141357 282.626294-11.476102C282.626294-11.966264 282.255684-12.169502 281.801387-12.169502C281.502508-12.169502 281.119943-12.073861 280.737377-11.601631Z"/>
<path d="M286.533681-10.872366H288.464441C288.548127-10.872366 288.697567-10.872366 288.697567-11.027783S288.548127-11.183201 288.464441-11.183201H286.533681V-13.119938C286.533681-13.203624 286.533681-13.353064 286.378264-13.353064S286.222847-13.203624 286.222847-13.119938V-11.183201H284.292087C284.208401-11.183201 284.058962-11.183201 284.058962-11.027783S284.208401-10.872366 284.292087-10.872366H286.222847V-8.935629C286.222847-8.851943 286.222847-8.702503 286.378264-8.702503S286.533681-8.851943 286.533681-8.935629V-10.872366Z"/>
<path d="M292.392765-10.651196H292.171595C292.159639-10.567509 292.099864-10.172989 292.0102-10.107235C291.968357-10.07137 291.484172-10.07137 291.400486-10.07137H290.282678L291.047809-10.693039C291.251047-10.854433 291.783052-11.236999 291.968357-11.416326C292.147684-11.595654 292.392765-11.900511 292.392765-12.324919C292.392765-13.072117 291.717298-13.508481 290.916302-13.508481C290.145194-13.508481 289.607211-13.000386 289.607211-12.438493C289.607211-12.133636 289.864247-12.097771 289.930001-12.097771C290.07944-12.097771 290.25279-12.205367 290.25279-12.42056C290.25279-12.552067 290.175082-12.74335 289.912068-12.74335C290.049552-13.048207 290.414185-13.275355 290.826638-13.275355C291.454285-13.275355 291.789029-12.809103 291.789029-12.324919C291.789029-11.900511 291.508083-11.464147 291.089652-11.081582L289.672964-9.784446C289.613189-9.72467 289.607211-9.718692 289.607211-9.533387H292.20746L292.392765-10.651196Z"/>
<path d="M259.130619-5.738481C259.333857-5.738481 259.54905-5.738481 259.54905-5.977584S259.333857-6.216687 259.130619-6.216687H252.662873C252.459635-6.216687 252.244442-6.216687 252.244442-5.977584S252.459635-5.738481 252.662873-5.738481H259.130619Z"/>
<path d="M263.321902-5.738481C263.52514-5.738481 263.740333-5.738481 263.740333-5.977584S263.52514-6.216687 263.321902-6.216687H256.854156C256.650919-6.216687 256.435726-6.216687 256.435726-5.977584S256.650919-5.738481 256.854156-5.738481H263.321902Z"/>
<path d="M269.963728-5.738481C270.166966-5.738481 270.382159-5.738481 270.382159-5.977584S270.166966-6.216687 269.963728-6.216687H263.495982C263.292745-6.216687 263.077552-6.216687 263.077552-5.977584S263.292745-5.738481 263.495982-5.738481H269.963728Z"/>
<path d="M276.605554-5.738481C276.808792-5.738481 277.023985-5.738481 277.023985-5.977584S276.808792-6.216687 276.605554-6.216687H270.137808C269.93457-6.216687 269.719377-6.216687 269.719377-5.977584S269.93457-5.738481 270.137808-5.738481H276.605554Z"/>
<path d="M283.24738-5.738481C283.450618-5.738481 283.665811-5.738481 283.665811-5.977584S283.450618-6.216687 283.24738-6.216687H276.779634C276.576396-6.216687 276.361203-6.216687 276.361203-5.977584S276.576396-5.738481 276.779634-5.738481H283.24738Z"/>
<path d="M289.889206-5.738481C290.092444-5.738481 290.307637-5.738481 290.307637-5.977584S290.092444-6.216687 289.889206-6.216687H283.42146C283.218222-6.216687 283.003029-6.216687 283.003029-5.977584S283.218222-5.738481 283.42146-5.738481H289.889206Z"/>
<path d="M296.531032-5.738481C296.73427-5.738481 296.949463-5.738481 296.949463-5.977584S296.73427-6.216687 296.531032-6.216687H290.063286C289.860048-6.216687 289.644855-6.216687 289.644855-5.977584S289.860048-5.738481 290.063286-5.738481H296.531032Z"/>
<path d="M303.172858-5.738481C303.376096-5.738481 303.591289-5.738481 303.591289-5.977584S303.376096-6.216687 303.172858-6.216687H296.705112C296.501874-6.216687 296.286681-6.216687 296.286681-5.977584S296.501874-5.738481 296.705112-5.738481H303.172858Z"/>
<path d="M309.456159-5.738481C308.798625-5.236364 308.475835-4.746202 308.380194-4.590785C307.842211-3.765878 307.74657-3.012702 307.74657-3.000747C307.74657-2.857285 307.890032-2.857285 307.985673-2.857285C308.188911-2.857285 308.200866-2.881196 308.248687-3.096389C308.523656-4.267995 309.229011-5.272229 310.579945-5.822167C310.723407-5.869988 310.759272-5.893898 310.759272-5.977584S310.687541-6.097136 310.663631-6.109091C310.137604-6.312329 308.691028-6.910087 308.236732-8.918555C308.200866-9.062017 308.188911-9.097883 307.985673-9.097883C307.890032-9.097883 307.74657-9.097883 307.74657-8.954421C307.74657-8.930511 307.854167-8.177335 308.356284-7.376339C308.595387-7.017684 308.942087-6.599253 309.456159-6.216687H300.573469C300.358276-6.216687 300.143083-6.216687 300.143083-5.977584S300.358276-5.738481 300.573469-5.738481H309.456159Z"/>
<path d="M318.647006-.083686C318.647006-.119552 318.647006-.143462 318.443769-.3467C317.248252-1.554172 316.578762-3.526775 316.578762-5.965629C316.578762-8.284932 317.140655-10.281445 318.527455-11.692154C318.647006-11.799751 318.647006-11.823661 318.647006-11.859527C318.647006-11.931258 318.587231-11.955168 318.53941-11.955168C318.383993-11.955168 317.403669-11.094396 316.817866-9.92279C316.208152-8.715318 315.933183-7.436115 315.933183-5.965629C315.933183-4.901619 316.100556-3.478954 316.722224-2.199751C317.427579-.765131 318.407903 .011955 318.53941 .011955C318.587231 .011955 318.647006-.011955 318.647006-.083686Z"/>
<path d="M324.645907-7.79477C324.885011-7.79477 324.980652-7.79477 324.980652-8.021918C324.980652-8.141469 324.885011-8.141469 324.669818-8.141469H323.701449C323.928597-9.372852 324.09597-10.221669 324.191611-10.604234C324.263342-10.891158 324.514401-11.166127 324.825235-11.166127C325.076294-11.166127 325.327352-11.058531 325.446904-10.950934C324.980652-10.903113 324.83719-10.556413 324.83719-10.353176C324.83719-10.114072 325.016518-9.97061 325.243666-9.97061C325.482769-9.97061 325.841424-10.173848 325.841424-10.628144C325.841424-11.130262 325.339307-11.40523 324.81328-11.40523C324.299208-11.40523 323.797091-11.022665 323.557987-10.556413C323.342794-10.137983 323.223242-9.707597 322.948274-8.141469H322.147277C321.920129-8.141469 321.800577-8.141469 321.800577-7.926276C321.800577-7.79477 321.872308-7.79477 322.111412-7.79477H322.876543C322.66135-6.682939 322.171188-3.981071 321.896219-2.701868C321.692981-1.661768 321.513653-.789041 320.915895-.789041C320.88003-.789041 320.53333-.789041 320.318137-1.016189C320.92785-1.06401 320.92785-1.590037 320.92785-1.601993C320.92785-1.841096 320.748523-1.984558 320.521374-1.984558C320.282271-1.984558 319.923616-1.78132 319.923616-1.327024C319.923616-.812951 320.449643-.549938 320.915895-.549938C322.135322-.549938 322.637439-2.737733 322.768946-3.335492C322.984139-4.25604 323.569942-7.436115 323.629718-7.79477H324.645907Z"/>
<path d="M328.041265-2.940971C328.041265-3.634371 327.814116-4.148443 327.323955-4.148443C326.941389-4.148443 326.750106-3.837609 326.750106-3.574595S326.929434-2.988792 327.33591-2.988792C327.491327-2.988792 327.622834-3.036613 327.73043-3.144209C327.754341-3.16812 327.766296-3.16812 327.778251-3.16812C327.802161-3.16812 327.802161-3.000747 327.802161-2.940971C327.802161-2.546451 327.73043-1.769365 327.037031-.992279C326.905524-.848817 326.905524-.824907 326.905524-.800996C326.905524-.74122 326.965299-.681445 327.025075-.681445C327.120717-.681445 328.041265-1.566127 328.041265-2.940971Z"/>
<path d="M340.288445-10.9868C340.3004-11.03462 340.32431-11.106351 340.32431-11.166127C340.32431-11.285679 340.204758-11.285679 340.180848-11.285679C340.168893-11.285679 339.58309-11.237858 339.523314-11.225903C339.320076-11.213948 339.140748-11.190037 338.925555-11.178082C338.626676-11.154172 338.54299-11.142217 338.54299-10.927024C338.54299-10.807472 338.638631-10.807472 338.806004-10.807472C339.391807-10.807472 339.403762-10.699875 339.403762-10.580324C339.403762-10.508593 339.379852-10.412951 339.367897-10.377086L338.638631-7.47198C338.507125-7.782814 338.184335-8.261021 337.562666-8.261021C336.211732-8.261021 334.753202-6.515567 334.753202-4.746202C334.753202-3.56264 335.446602-2.86924 336.259553-2.86924C336.917087-2.86924 337.47898-3.383313 337.813725-3.777833C337.933277-3.072478 338.495169-2.86924 338.853824-2.86924S339.499404-3.084433 339.714597-3.514819C339.905879-3.921295 340.073252-4.65056 340.073252-4.698381C340.073252-4.758157 340.025431-4.805978 339.9537-4.805978C339.846103-4.805978 339.834148-4.746202 339.786328-4.566874C339.607-3.861519 339.379852-3.108344 338.88969-3.108344C338.54299-3.108344 338.51908-3.419178 338.51908-3.658281C338.51908-3.706102 338.51908-3.957161 338.602766-4.291905L340.288445-10.9868ZM337.873501-4.411457C337.813725-4.208219 337.813725-4.184309 337.646352-3.957161C337.383339-3.622416 336.857311-3.108344 336.295418-3.108344C335.805257-3.108344 335.530288-3.550685 335.530288-4.25604C335.530288-4.913574 335.900898-6.252553 336.128046-6.75467C336.534522-7.591532 337.096415-8.021918 337.562666-8.021918C338.351707-8.021918 338.507125-7.041594 338.507125-6.945953C338.507125-6.933998 338.471259-6.77858 338.459304-6.75467L337.873501-4.411457Z"/>
<path d="M341.95171-2.502627C341.975621-2.622179 342.055322-2.925043 342.079232-3.044595C342.190814-3.474981 342.190814-3.482951 342.374126-3.745965C342.63714-4.1365 343.011735-4.487185 343.545733-4.487185C343.832657-4.487185 344.000029-4.319813 344.000029-3.945218C344.000029-3.506861 343.665285-2.598269 343.513852-2.207733C343.410241-1.94472 343.410241-1.896899 343.410241-1.793287C343.410241-1.338991 343.784836-1.115828 344.127551-1.115828C344.908622-1.115828 345.235397-2.231644 345.235397-2.335255C345.235397-2.414956 345.171636-2.438866 345.115845-2.438866C345.020204-2.438866 345.004263-2.383076 344.980353-2.303375C344.78907-1.649825 344.454326-1.338991 344.151461-1.338991C344.02394-1.338991 343.960179-1.418692 343.960179-1.602005S344.02394-1.96066 344.103641-2.159913C344.223192-2.462777 344.573877-3.37934 344.573877-3.825666C344.573877-4.423424 344.159432-4.710348 343.585583-4.710348C342.940004-4.710348 342.525559-4.319813 342.294425-4.016949C342.238635-4.455305 341.88795-4.710348 341.481474-4.710348C341.19455-4.710348 340.995297-4.527036 340.867775-4.279962C340.676493-3.905367 340.596791-3.506861 340.596791-3.490921C340.596791-3.41919 340.652582-3.38731 340.716343-3.38731C340.819955-3.38731 340.827925-3.41919 340.883715-3.626413C340.979357-4.016949 341.122819-4.487185 341.457564-4.487185C341.664786-4.487185 341.712607-4.287932 341.712607-4.11259C341.712607-3.969128 341.672757-3.817696 341.608996-3.554682C341.593055-3.490921 341.473504-3.020685 341.441623-2.909103L341.146729-1.713586C341.114849-1.594035 341.067028-1.394782 341.067028-1.362901C341.067028-1.179589 341.21846-1.115828 341.322072-1.115828C341.465534-1.115828 341.585085-1.211469 341.640876-1.307111C341.664786-1.354931 341.728547-1.625915 341.768398-1.793287L341.95171-2.502627Z"/>
<path d="M348.970859-3.004744H351.314072C351.425654-3.004744 351.600996-3.004744 351.600996-3.188057S351.425654-3.37137 351.314072-3.37137H348.970859V-5.722553C348.970859-5.834134 348.970859-6.009477 348.787547-6.009477S348.604234-5.834134 348.604234-5.722553V-3.37137H346.253051C346.14147-3.37137 345.966127-3.37137 345.966127-3.188057S346.14147-3.004744 346.253051-3.004744H348.604234V-.653561C348.604234-.54198 348.604234-.366637 348.787547-.366637S348.970859-.54198 348.970859-.653561V-3.004744Z"/>
<path d="M354.329969-2.821432C354.457491-2.940984 354.792235-3.203997 354.919757-3.315579C355.413904-3.769875 355.884141-4.208231 355.884141-4.933512C355.884141-5.881955 355.087129-6.495654 354.090865-6.495654C353.134452-6.495654 352.504813-5.770373 352.504813-5.061033C352.504813-4.670498 352.815647-4.614707 352.927229-4.614707C353.094601-4.614707 353.341675-4.734259 353.341675-5.037123C353.341675-5.451569 352.943169-5.451569 352.847528-5.451569C353.078661-6.033387 353.612659-6.23264 354.003194-6.23264C354.744415-6.23264 355.12698-5.603001 355.12698-4.933512C355.12698-4.10462 354.545162-3.498891 353.604689-2.534508L352.600454-1.498393C352.504813-1.410722 352.504813-1.394782 352.504813-1.195529H355.653007L355.884141-2.622179H355.637067C355.613157-2.462777 355.549396-2.064271 355.453755-1.912839C355.405934-1.849078 354.800205-1.849078 354.672684-1.849078H353.254004L354.329969-2.821432Z"/>
<path d="M360.186069-5.965629C360.186069-6.874222 360.066518-8.356663 359.397028-9.743462C358.691673-11.178082 357.71135-11.955168 357.579843-11.955168C357.532022-11.955168 357.472246-11.931258 357.472246-11.859527C357.472246-11.823661 357.472246-11.799751 357.675484-11.596513C358.871001-10.389041 359.54049-8.416438 359.54049-5.977584C359.54049-3.658281 358.978597-1.661768 357.591798-.251059C357.472246-.143462 357.472246-.119552 357.472246-.083686C357.472246-.011955 357.532022 .011955 357.579843 .011955C357.73526 .011955 358.715584-.848817 359.301387-2.020423C359.911101-3.239851 360.186069-4.531009 360.186069-5.965629Z"/>
</g>
</svg>
</center>
<p>Unfortunately, this is an induction without a base case, because the <em>first</em> output to <code>f</code> is not verified by <code>f</code>:</p>
<center>
<svg height="15.209887pt" version="1.1" viewBox="19.540341 -15.197932 348.281341 15.209887" width="348.281341pt">
<title>   () \xrightarrow{\mspace{30mu}\mathit{Tx}_0\mspace{30mu}}   (f, d_0) \xrightarrow{\mspace{30mu}\mathit{Tx}_1\mspace{30mu}}   (f, d_1) \xrightarrow{\mspace{30mu}\mathit{Tx}_2\mspace{30mu}}   \cdots \xrightarrow{\mspace{30mu}\mathit{Tx}_n\mspace{30mu}}   (f, \; d_n) </title>
<defs/>
<g>
<path d="M23.42577-.083686C23.42577-.119552 23.42577-.143462 23.222532-.3467C22.027016-1.554172 21.357526-3.526775 21.357526-5.965629C21.357526-8.284932 21.919419-10.281445 23.306219-11.692154C23.42577-11.799751 23.42577-11.823661 23.42577-11.859527C23.42577-11.931258 23.365994-11.955168 23.318174-11.955168C23.162757-11.955168 22.182433-11.094396 21.59663-9.92279C20.986916-8.715318 20.711947-7.436115 20.711947-5.965629C20.711947-4.901619 20.879319-3.478954 21.500988-2.199751C22.206343-.765131 23.186667 .011955 23.318174 .011955C23.365994 .011955 23.42577-.011955 23.42577-.083686Z"/>
<path d="M27.464024-5.965629C27.464024-6.874222 27.344472-8.356663 26.674983-9.743462C25.969628-11.178082 24.989304-11.955168 24.857797-11.955168C24.809977-11.955168 24.750201-11.931258 24.750201-11.859527C24.750201-11.823661 24.750201-11.799751 24.953439-11.596513C26.148955-10.389041 26.818445-8.416438 26.818445-5.977584C26.818445-3.658281 26.256552-1.661768 24.869752-.251059C24.750201-.143462 24.750201-.119552 24.750201-.083686C24.750201-.011955 24.809977 .011955 24.857797 .011955C25.013214 .011955 25.993538-.848817 26.579341-2.020423C27.189055-3.239851 27.464024-4.531009 27.464024-5.965629Z"/>
<path d="M53.258105-14.647994C53.321866-14.895067 53.377657-14.911008 53.433448-14.918978C53.489238-14.934918 53.736312-14.934918 53.887744-14.934918C54.668815-14.934918 54.979649-14.895067 54.979649-14.321219C54.979649-14.241518 54.971679-14.185727 54.963709-14.113996L54.899948-13.595939V-13.556088C54.899948-13.548118 54.907918-13.524208 54.899948-13.516238C54.891978-13.500298 54.876038-13.388716 55.04341-13.388716C55.178902-13.388716 55.186872-13.444507 55.202812-13.556088L55.425976-14.974768L55.433946-15.08635C55.433946-15.197932 55.330334-15.197932 55.210783-15.197932H50.867071C50.691729-15.197932 50.667819-15.197932 50.619998-15.05447L50.133821-13.63579C50.093971-13.532178 50.093971-13.516238 50.093971-13.500298C50.093971-13.388716 50.205552-13.388716 50.245403-13.388716C50.277283-13.388716 50.325104-13.388716 50.356984-13.412626C50.380895-13.428567 50.380895-13.444507 50.452626-13.6597C50.859101-14.807396 51.098205-14.934918 52.1662-14.934918C52.325602-14.934918 52.524855-14.934918 52.644406-14.918978C52.636436-14.807396 52.636436-14.783486 52.604556-14.663934L51.560471-10.479625C51.48077-10.160821 51.432949-10.07315 50.707669-10.07315H50.604058C50.460596-10.07315 50.364954-10.07315 50.364954-9.921717C50.364954-9.889837 50.380895-9.810136 50.500446-9.810136C50.803311-9.810136 51.114145-9.834046 51.424979-9.834046H52.006798C52.325602-9.834046 52.660347-9.810136 52.971181-9.810136C53.026972-9.810136 53.138553-9.810136 53.138553-9.961568C53.138553-10.07315 53.042912-10.07315 52.91539-10.07315H52.811779C52.676287-10.07315 52.548765-10.08112 52.413273-10.08909C52.221991-10.113 52.1662-10.12894 52.1662-10.232552C52.1662-10.280372 52.19011-10.360074 52.19011-10.368044L53.258105-14.647994Z"/>
<path d="M56.749467-10.894071C56.677736-10.631057 56.510364-9.953598 56.008247-9.953598C55.832905-9.953598 55.697413-10.025329 55.649592-10.065179C55.808994-10.12894 55.928546-10.272402 55.928546-10.447745C55.928546-10.678878 55.737263-10.718729 55.649592-10.718729C55.418459-10.718729 55.243116-10.519476 55.243116-10.280372C55.243116-9.897807 55.649592-9.730435 56.000277-9.730435C56.358932-9.730435 56.621946-9.953598 56.813228-10.232552C56.94872-9.937658 57.251585-9.730435 57.63415-9.730435C58.463042-9.730435 58.941248-10.718729 58.941248-10.957832C58.941248-11.053473 58.821697-11.053473 58.789816-11.053473C58.686205-11.053473 58.654324-11.029563 58.630414-10.949862C58.37537-10.12894 57.881223-9.953598 57.65009-9.953598C57.403017-9.953598 57.235644-10.12894 57.235644-10.455715C57.235644-10.631057 57.331286-11.013623 57.403017-11.284607C57.482718-11.635291 57.570389-11.978006 57.65806-12.320721C57.785582-12.814868 58.056566-13.101792 58.35943-13.101792C58.566653-13.101792 58.702145-12.998181 58.718085-12.990211C58.646354-12.9663 58.439131-12.838778 58.439131-12.607645C58.439131-12.384482 58.614474-12.336661 58.718085-12.336661C58.869517-12.336661 59.116591-12.448243 59.116591-12.775018C59.116591-13.213374 58.630414-13.324955 58.3674-13.324955C58.040626-13.324955 57.769642-13.141643 57.554449-12.822838C57.458807-13.014121 57.219704-13.324955 56.733527-13.324955C55.896665-13.324955 55.426429-12.320721 55.426429-12.105528C55.426429-12.001917 55.53004-12.001917 55.577861-12.001917C55.681472-12.001917 55.705383-12.025827 55.729293-12.105528C55.976367-12.894569 56.454573-13.101792 56.717587-13.101792S57.132033-12.894569 57.132033-12.599675C57.132033-12.440273 57.092182-12.2729 57.004511-11.930186L56.749467-10.894071Z"/>
<path d="M62.987275-10.610037C62.987275-11.046401 62.987275-12.678281 61.522767-12.678281S60.058259-11.046401 60.058259-10.610037C60.058259-10.179651 60.058259-8.577658 61.522767-8.577658S62.987275-10.179651 62.987275-10.610037ZM61.522767-8.768941C61.271708-8.768941 60.865233-8.888493 60.721771-9.384632C60.626129-9.731332 60.626129-10.317135 60.626129-10.687746C60.626129-11.088244 60.626129-11.548518 60.709815-11.871307C60.859255-12.40929 61.313551-12.486998 61.522767-12.486998C61.797736-12.486998 62.192256-12.355491 62.323763-11.901195C62.413427-11.584383 62.419404-11.14802 62.419404-10.687746C62.419404-10.30518 62.419404-9.701444 62.317785-9.366699C62.150413-8.84665 61.720027-8.768941 61.522767-8.768941Z"/>
<path d="M39.844277-5.738481C40.047515-5.738481 40.262708-5.738481 40.262708-5.977584S40.047515-6.216687 39.844277-6.216687H33.376531C33.173294-6.216687 32.9581-6.216687 32.9581-5.977584S33.173294-5.738481 33.376531-5.738481H39.844277Z"/>
<path d="M45.581962-5.738481C45.7852-5.738481 46.000393-5.738481 46.000393-5.977584S45.7852-6.216687 45.581962-6.216687H39.114216C38.910978-6.216687 38.695785-6.216687 38.695785-5.977584S38.910978-5.738481 39.114216-5.738481H45.581962Z"/>
<path d="M52.223788-5.738481C52.427026-5.738481 52.642219-5.738481 52.642219-5.977584S52.427026-6.216687 52.223788-6.216687H45.756042C45.552804-6.216687 45.337611-6.216687 45.337611-5.977584S45.552804-5.738481 45.756042-5.738481H52.223788Z"/>
<path d="M58.865614-5.738481C59.068852-5.738481 59.284045-5.738481 59.284045-5.977584S59.068852-6.216687 58.865614-6.216687H52.397868C52.19463-6.216687 51.979437-6.216687 51.979437-5.977584S52.19463-5.738481 52.397868-5.738481H58.865614Z"/>
<path d="M65.50744-5.738481C65.710678-5.738481 65.925871-5.738481 65.925871-5.977584S65.710678-6.216687 65.50744-6.216687H59.039694C58.836456-6.216687 58.621263-6.216687 58.621263-5.977584S58.836456-5.738481 59.039694-5.738481H65.50744Z"/>
<path d="M72.149266-5.738481C72.352504-5.738481 72.567697-5.738481 72.567697-5.977584S72.352504-6.216687 72.149266-6.216687H65.68152C65.478282-6.216687 65.263089-6.216687 65.263089-5.977584S65.478282-5.738481 65.68152-5.738481H72.149266Z"/>
<path d="M79.978953-5.738481C79.321419-5.236364 78.998629-4.746202 78.902988-4.590785C78.365005-3.765878 78.269364-3.012702 78.269364-3.000747C78.269364-2.857285 78.412826-2.857285 78.508467-2.857285C78.711705-2.857285 78.72366-2.881196 78.771481-3.096389C79.04645-4.267995 79.751805-5.272229 81.102739-5.822167C81.246201-5.869988 81.282066-5.893898 81.282066-5.977584S81.210335-6.097136 81.186425-6.109091C80.660398-6.312329 79.213822-6.910087 78.759526-8.918555C78.72366-9.062017 78.711705-9.097883 78.508467-9.097883C78.412826-9.097883 78.269364-9.097883 78.269364-8.954421C78.269364-8.930511 78.37696-8.177335 78.879077-7.376339C79.118181-7.017684 79.464881-6.599253 79.978953-6.216687H71.096263C70.88107-6.216687 70.665877-6.216687 70.665877-5.977584S70.88107-5.738481 71.096263-5.738481H79.978953Z"/>
<path d="M89.1698-.083686C89.1698-.119552 89.1698-.143462 88.966562-.3467C87.771046-1.554172 87.101556-3.526775 87.101556-5.965629C87.101556-8.284932 87.663449-10.281445 89.050249-11.692154C89.1698-11.799751 89.1698-11.823661 89.1698-11.859527C89.1698-11.931258 89.110024-11.955168 89.062204-11.955168C88.906787-11.955168 87.926463-11.094396 87.34066-9.92279C86.730946-8.715318 86.455977-7.436115 86.455977-5.965629C86.455977-4.901619 86.623349-3.478954 87.245018-2.199751C87.950373-.765131 88.930697 .011955 89.062204 .011955C89.110024 .011955 89.1698-.011955 89.1698-.083686Z"/>
<path d="M95.168701-7.79477C95.407805-7.79477 95.503446-7.79477 95.503446-8.021918C95.503446-8.141469 95.407805-8.141469 95.192612-8.141469H94.224243C94.451391-9.372852 94.618764-10.221669 94.714405-10.604234C94.786136-10.891158 95.037195-11.166127 95.348029-11.166127C95.599087-11.166127 95.850146-11.058531 95.969698-10.950934C95.503446-10.903113 95.359984-10.556413 95.359984-10.353176C95.359984-10.114072 95.539312-9.97061 95.76646-9.97061C96.005563-9.97061 96.364218-10.173848 96.364218-10.628144C96.364218-11.130262 95.862101-11.40523 95.336074-11.40523C94.822001-11.40523 94.319884-11.022665 94.080781-10.556413C93.865588-10.137983 93.746036-9.707597 93.471067-8.141469H92.670071C92.442923-8.141469 92.323371-8.141469 92.323371-7.926276C92.323371-7.79477 92.395102-7.79477 92.634206-7.79477H93.399336C93.184143-6.682939 92.693982-3.981071 92.419013-2.701868C92.215775-1.661768 92.036447-.789041 91.438689-.789041C91.402823-.789041 91.056124-.789041 90.84093-1.016189C91.450644-1.06401 91.450644-1.590037 91.450644-1.601993C91.450644-1.841096 91.271317-1.984558 91.044168-1.984558C90.805065-1.984558 90.44641-1.78132 90.44641-1.327024C90.44641-.812951 90.972437-.549938 91.438689-.549938C92.658116-.549938 93.160233-2.737733 93.29174-3.335492C93.506933-4.25604 94.092736-7.436115 94.152512-7.79477H95.168701Z"/>
<path d="M98.564058-2.940971C98.564058-3.634371 98.33691-4.148443 97.846748-4.148443C97.464183-4.148443 97.2729-3.837609 97.2729-3.574595S97.452228-2.988792 97.858704-2.988792C98.014121-2.988792 98.145628-3.036613 98.253224-3.144209C98.277134-3.16812 98.28909-3.16812 98.301045-3.16812C98.324955-3.16812 98.324955-3.000747 98.324955-2.940971C98.324955-2.546451 98.253224-1.769365 97.559824-.992279C97.428318-.848817 97.428318-.824907 97.428318-.800996C97.428318-.74122 97.488093-.681445 97.547869-.681445C97.643511-.681445 98.564058-1.566127 98.564058-2.940971Z"/>
<path d="M107.490409-10.9868C107.502364-11.03462 107.526275-11.106351 107.526275-11.166127C107.526275-11.285679 107.406723-11.285679 107.382813-11.285679C107.370857-11.285679 106.785054-11.237858 106.725278-11.225903C106.522041-11.213948 106.342713-11.190037 106.12752-11.178082C105.828641-11.154172 105.744955-11.142217 105.744955-10.927024C105.744955-10.807472 105.840596-10.807472 106.007968-10.807472C106.593772-10.807472 106.605727-10.699875 106.605727-10.580324C106.605727-10.508593 106.581816-10.412951 106.569861-10.377086L105.840596-7.47198C105.709089-7.782814 105.3863-8.261021 104.764631-8.261021C103.413697-8.261021 101.955166-6.515567 101.955166-4.746202C101.955166-3.56264 102.648566-2.86924 103.461517-2.86924C104.119052-2.86924 104.680945-3.383313 105.015689-3.777833C105.135241-3.072478 105.697134-2.86924 106.055789-2.86924S106.701368-3.084433 106.916561-3.514819C107.107844-3.921295 107.275216-4.65056 107.275216-4.698381C107.275216-4.758157 107.227395-4.805978 107.155664-4.805978C107.048068-4.805978 107.036113-4.746202 106.988292-4.566874C106.808965-3.861519 106.581816-3.108344 106.091654-3.108344C105.744955-3.108344 105.721044-3.419178 105.721044-3.658281C105.721044-3.706102 105.721044-3.957161 105.80473-4.291905L107.490409-10.9868ZM105.075465-4.411457C105.015689-4.208219 105.015689-4.184309 104.848317-3.957161C104.585303-3.622416 104.059276-3.108344 103.497383-3.108344C103.007221-3.108344 102.732252-3.550685 102.732252-4.25604C102.732252-4.913574 103.102862-6.252553 103.330011-6.75467C103.736486-7.591532 104.298379-8.021918 104.764631-8.021918C105.553672-8.021918 105.709089-7.041594 105.709089-6.945953C105.709089-6.933998 105.673224-6.77858 105.661268-6.75467L105.075465-4.411457Z"/>
<path d="M111.457037-3.737995C111.457037-4.590797 111.369366-5.108854 111.106352-5.618941C110.755667-6.320311 110.110088-6.495654 109.671732-6.495654C108.667498-6.495654 108.300873-5.746463 108.189291-5.5233C107.902367-4.941482 107.886427-4.152441 107.886427-3.737995C107.886427-3.211967 107.910337-2.406986 108.292903-1.769377C108.659528-1.179589 109.249316-1.028157 109.671732-1.028157C110.054298-1.028157 110.739727-1.147708 111.138233-1.936749C111.433127-2.510597 111.457037-3.219937 111.457037-3.737995ZM109.671732-1.25132C109.400748-1.25132 108.850811-1.378842 108.683438-2.215703C108.595767-2.67 108.595767-3.41919 108.595767-3.833636C108.595767-4.383574 108.595767-4.941482 108.683438-5.379838C108.850811-6.192789 109.472479-6.27249 109.671732-6.27249C109.942716-6.27249 110.492654-6.136998 110.652056-5.411718C110.747697-4.973362 110.747697-4.375604 110.747697-3.833636C110.747697-3.363399 110.747697-2.646089 110.652056-2.199763C110.484684-1.362901 109.934746-1.25132 109.671732-1.25132Z"/>
<path d="M115.663325-5.965629C115.663325-6.874222 115.543773-8.356663 114.874284-9.743462C114.168929-11.178082 113.188605-11.955168 113.057098-11.955168C113.009277-11.955168 112.949502-11.931258 112.949502-11.859527C112.949502-11.823661 112.949502-11.799751 113.15274-11.596513C114.348256-10.389041 115.017746-8.416438 115.017746-5.977584C115.017746-3.658281 114.455853-1.661768 113.069053-.251059C112.949502-.143462 112.949502-.119552 112.949502-.083686C112.949502-.011955 113.009277 .011955 113.057098 .011955C113.212515 .011955 114.192839-.848817 114.778642-2.020423C115.388356-3.239851 115.663325-4.531009 115.663325-5.965629Z"/>
<path d="M141.457406-14.647994C141.521167-14.895067 141.576958-14.911008 141.632749-14.918978C141.688539-14.934918 141.935613-14.934918 142.087045-14.934918C142.868116-14.934918 143.17895-14.895067 143.17895-14.321219C143.17895-14.241518 143.17098-14.185727 143.16301-14.113996L143.099249-13.595939V-13.556088C143.099249-13.548118 143.107219-13.524208 143.099249-13.516238C143.091279-13.500298 143.075339-13.388716 143.242711-13.388716C143.378203-13.388716 143.386173-13.444507 143.402113-13.556088L143.625277-14.974768L143.633247-15.08635C143.633247-15.197932 143.529635-15.197932 143.410084-15.197932H139.066372C138.89103-15.197932 138.86712-15.197932 138.819299-15.05447L138.333122-13.63579C138.293272-13.532178 138.293272-13.516238 138.293272-13.500298C138.293272-13.388716 138.404853-13.388716 138.444704-13.388716C138.476584-13.388716 138.524405-13.388716 138.556285-13.412626C138.580196-13.428567 138.580196-13.444507 138.651927-13.6597C139.058402-14.807396 139.297506-14.934918 140.365501-14.934918C140.524903-14.934918 140.724156-14.934918 140.843707-14.918978C140.835737-14.807396 140.835737-14.783486 140.803857-14.663934L139.759772-10.479625C139.680071-10.160821 139.63225-10.07315 138.90697-10.07315H138.803359C138.659897-10.07315 138.564255-10.07315 138.564255-9.921717C138.564255-9.889837 138.580196-9.810136 138.699747-9.810136C139.002612-9.810136 139.313446-9.834046 139.62428-9.834046H140.206098C140.524903-9.834046 140.859648-9.810136 141.170482-9.810136C141.226273-9.810136 141.337854-9.810136 141.337854-9.961568C141.337854-10.07315 141.242213-10.07315 141.114691-10.07315H141.01108C140.875588-10.07315 140.748066-10.08112 140.612574-10.08909C140.421292-10.113 140.365501-10.12894 140.365501-10.232552C140.365501-10.280372 140.389411-10.360074 140.389411-10.368044L141.457406-14.647994Z"/>
<path d="M144.948768-10.894071C144.877037-10.631057 144.709665-9.953598 144.207548-9.953598C144.032206-9.953598 143.896714-10.025329 143.848893-10.065179C144.008295-10.12894 144.127847-10.272402 144.127847-10.447745C144.127847-10.678878 143.936564-10.718729 143.848893-10.718729C143.61776-10.718729 143.442417-10.519476 143.442417-10.280372C143.442417-9.897807 143.848893-9.730435 144.199578-9.730435C144.558233-9.730435 144.821247-9.953598 145.012529-10.232552C145.148021-9.937658 145.450886-9.730435 145.833451-9.730435C146.662343-9.730435 147.140549-10.718729 147.140549-10.957832C147.140549-11.053473 147.020998-11.053473 146.989117-11.053473C146.885506-11.053473 146.853625-11.029563 146.829715-10.949862C146.574671-10.12894 146.080524-9.953598 145.849391-9.953598C145.602318-9.953598 145.434945-10.12894 145.434945-10.455715C145.434945-10.631057 145.530587-11.013623 145.602318-11.284607C145.682019-11.635291 145.76969-11.978006 145.857361-12.320721C145.984883-12.814868 146.255867-13.101792 146.558731-13.101792C146.765954-13.101792 146.901446-12.998181 146.917386-12.990211C146.845655-12.9663 146.638432-12.838778 146.638432-12.607645C146.638432-12.384482 146.813775-12.336661 146.917386-12.336661C147.068818-12.336661 147.315892-12.448243 147.315892-12.775018C147.315892-13.213374 146.829715-13.324955 146.566701-13.324955C146.239927-13.324955 145.968943-13.141643 145.75375-12.822838C145.658108-13.014121 145.419005-13.324955 144.932828-13.324955C144.095966-13.324955 143.62573-12.320721 143.62573-12.105528C143.62573-12.001917 143.729341-12.001917 143.777162-12.001917C143.880773-12.001917 143.904684-12.025827 143.928594-12.105528C144.175668-12.894569 144.653874-13.101792 144.916888-13.101792S145.331334-12.894569 145.331334-12.599675C145.331334-12.440273 145.291483-12.2729 145.203812-11.930186L144.948768-10.894071Z"/>
<path d="M150.044857-12.498954C150.044857-12.678281 150.020947-12.678281 149.841619-12.678281C149.447099-12.295716 148.837385-12.295716 148.622192-12.295716V-12.06259C148.77761-12.06259 149.17213-12.06259 149.530785-12.229962V-9.211282C149.530785-9.014022 149.530785-8.936313 148.915094-8.936313H148.658058V-8.703188C148.986825-8.727098 149.453077-8.727098 149.787821-8.727098S150.588817-8.727098 150.917585-8.703188V-8.936313H150.660548C150.044857-8.936313 150.044857-9.014022 150.044857-9.211282V-12.498954Z"/>
<path d="M128.043578-5.738481C128.246816-5.738481 128.462009-5.738481 128.462009-5.977584S128.246816-6.216687 128.043578-6.216687H121.575832C121.372595-6.216687 121.157401-6.216687 121.157401-5.977584S121.372595-5.738481 121.575832-5.738481H128.043578Z"/>
<path d="M133.781263-5.738481C133.984501-5.738481 134.199694-5.738481 134.199694-5.977584S133.984501-6.216687 133.781263-6.216687H127.313517C127.110279-6.216687 126.895086-6.216687 126.895086-5.977584S127.110279-5.738481 127.313517-5.738481H133.781263Z"/>
<path d="M140.423089-5.738481C140.626327-5.738481 140.84152-5.738481 140.84152-5.977584S140.626327-6.216687 140.423089-6.216687H133.955343C133.752105-6.216687 133.536912-6.216687 133.536912-5.977584S133.752105-5.738481 133.955343-5.738481H140.423089Z"/>
<path d="M147.064915-5.738481C147.268153-5.738481 147.483346-5.738481 147.483346-5.977584S147.268153-6.216687 147.064915-6.216687H140.597169C140.393931-6.216687 140.178738-6.216687 140.178738-5.977584S140.393931-5.738481 140.597169-5.738481H147.064915Z"/>
<path d="M153.706741-5.738481C153.909979-5.738481 154.125172-5.738481 154.125172-5.977584S153.909979-6.216687 153.706741-6.216687H147.238995C147.035757-6.216687 146.820564-6.216687 146.820564-5.977584S147.035757-5.738481 147.238995-5.738481H153.706741Z"/>
<path d="M160.348567-5.738481C160.551805-5.738481 160.766998-5.738481 160.766998-5.977584S160.551805-6.216687 160.348567-6.216687H153.880821C153.677583-6.216687 153.46239-6.216687 153.46239-5.977584S153.677583-5.738481 153.880821-5.738481H160.348567Z"/>
<path d="M168.178254-5.738481C167.52072-5.236364 167.19793-4.746202 167.102289-4.590785C166.564306-3.765878 166.468665-3.012702 166.468665-3.000747C166.468665-2.857285 166.612127-2.857285 166.707768-2.857285C166.911006-2.857285 166.922961-2.881196 166.970782-3.096389C167.245751-4.267995 167.951106-5.272229 169.30204-5.822167C169.445502-5.869988 169.481367-5.893898 169.481367-5.977584S169.409636-6.097136 169.385726-6.109091C168.859699-6.312329 167.413123-6.910087 166.958827-8.918555C166.922961-9.062017 166.911006-9.097883 166.707768-9.097883C166.612127-9.097883 166.468665-9.097883 166.468665-8.954421C166.468665-8.930511 166.576261-8.177335 167.078378-7.376339C167.317482-7.017684 167.664182-6.599253 168.178254-6.216687H159.295564C159.080371-6.216687 158.865178-6.216687 158.865178-5.977584S159.080371-5.738481 159.295564-5.738481H168.178254Z"/>
<path d="M177.369101-.083686C177.369101-.119552 177.369101-.143462 177.165863-.3467C175.970347-1.554172 175.300857-3.526775 175.300857-5.965629C175.300857-8.284932 175.86275-10.281445 177.24955-11.692154C177.369101-11.799751 177.369101-11.823661 177.369101-11.859527C177.369101-11.931258 177.309325-11.955168 177.261505-11.955168C177.106088-11.955168 176.125764-11.094396 175.539961-9.92279C174.930247-8.715318 174.655278-7.436115 174.655278-5.965629C174.655278-4.901619 174.82265-3.478954 175.444319-2.199751C176.149674-.765131 177.129998 .011955 177.261505 .011955C177.309325 .011955 177.369101-.011955 177.369101-.083686Z"/>
<path d="M183.368002-7.79477C183.607106-7.79477 183.702747-7.79477 183.702747-8.021918C183.702747-8.141469 183.607106-8.141469 183.391913-8.141469H182.423544C182.650692-9.372852 182.818065-10.221669 182.913706-10.604234C182.985437-10.891158 183.236495-11.166127 183.54733-11.166127C183.798388-11.166127 184.049447-11.058531 184.168999-10.950934C183.702747-10.903113 183.559285-10.556413 183.559285-10.353176C183.559285-10.114072 183.738613-9.97061 183.965761-9.97061C184.204864-9.97061 184.563519-10.173848 184.563519-10.628144C184.563519-11.130262 184.061402-11.40523 183.535375-11.40523C183.021302-11.40523 182.519185-11.022665 182.280082-10.556413C182.064889-10.137983 181.945337-9.707597 181.670368-8.141469H180.869372C180.642224-8.141469 180.522672-8.141469 180.522672-7.926276C180.522672-7.79477 180.594403-7.79477 180.833507-7.79477H181.598637C181.383444-6.682939 180.893283-3.981071 180.618314-2.701868C180.415076-1.661768 180.235748-.789041 179.63799-.789041C179.602124-.789041 179.255425-.789041 179.040231-1.016189C179.649945-1.06401 179.649945-1.590037 179.649945-1.601993C179.649945-1.841096 179.470618-1.984558 179.243469-1.984558C179.004366-1.984558 178.645711-1.78132 178.645711-1.327024C178.645711-.812951 179.171738-.549938 179.63799-.549938C180.857417-.549938 181.359534-2.737733 181.491041-3.335492C181.706234-4.25604 182.292037-7.436115 182.351813-7.79477H183.368002Z"/>
<path d="M186.763359-2.940971C186.763359-3.634371 186.536211-4.148443 186.046049-4.148443C185.663484-4.148443 185.472201-3.837609 185.472201-3.574595S185.651529-2.988792 186.058005-2.988792C186.213422-2.988792 186.344929-3.036613 186.452525-3.144209C186.476435-3.16812 186.488391-3.16812 186.500346-3.16812C186.524256-3.16812 186.524256-3.000747 186.524256-2.940971C186.524256-2.546451 186.452525-1.769365 185.759125-.992279C185.627619-.848817 185.627619-.824907 185.627619-.800996C185.627619-.74122 185.687394-.681445 185.74717-.681445C185.842812-.681445 186.763359-1.566127 186.763359-2.940971Z"/>
<path d="M195.68971-10.9868C195.701665-11.03462 195.725576-11.106351 195.725576-11.166127C195.725576-11.285679 195.606024-11.285679 195.582114-11.285679C195.570158-11.285679 194.984355-11.237858 194.924579-11.225903C194.721342-11.213948 194.542014-11.190037 194.326821-11.178082C194.027942-11.154172 193.944256-11.142217 193.944256-10.927024C193.944256-10.807472 194.039897-10.807472 194.207269-10.807472C194.793073-10.807472 194.805028-10.699875 194.805028-10.580324C194.805028-10.508593 194.781117-10.412951 194.769162-10.377086L194.039897-7.47198C193.90839-7.782814 193.585601-8.261021 192.963932-8.261021C191.612998-8.261021 190.154467-6.515567 190.154467-4.746202C190.154467-3.56264 190.847867-2.86924 191.660818-2.86924C192.318353-2.86924 192.880246-3.383313 193.21499-3.777833C193.334542-3.072478 193.896435-2.86924 194.25509-2.86924S194.900669-3.084433 195.115862-3.514819C195.307145-3.921295 195.474517-4.65056 195.474517-4.698381C195.474517-4.758157 195.426696-4.805978 195.354965-4.805978C195.247369-4.805978 195.235414-4.746202 195.187593-4.566874C195.008266-3.861519 194.781117-3.108344 194.290955-3.108344C193.944256-3.108344 193.920345-3.419178 193.920345-3.658281C193.920345-3.706102 193.920345-3.957161 194.004031-4.291905L195.68971-10.9868ZM193.274766-4.411457C193.21499-4.208219 193.21499-4.184309 193.047618-3.957161C192.784604-3.622416 192.258577-3.108344 191.696684-3.108344C191.206522-3.108344 190.931553-3.550685 190.931553-4.25604C190.931553-4.913574 191.302163-6.252553 191.529312-6.75467C191.935787-7.591532 192.49768-8.021918 192.963932-8.021918C193.752973-8.021918 193.90839-7.041594 193.90839-6.945953C193.90839-6.933998 193.872525-6.77858 193.860569-6.75467L193.274766-4.411457Z"/>
<path d="M198.261569-6.27249C198.261569-6.487683 198.245629-6.495654 198.030435-6.495654C197.703661-6.176849 197.281245-5.985566 196.524084-5.985566V-5.722553C196.739277-5.722553 197.169663-5.722553 197.63193-5.937746V-1.849078C197.63193-1.554184 197.60802-1.458543 196.850859-1.458543H196.571905V-1.195529C196.89868-1.219439 197.584109-1.219439 197.942764-1.219439S198.994819-1.219439 199.321594-1.195529V-1.458543H199.04264C198.285479-1.458543 198.261569-1.554184 198.261569-1.849078V-6.27249Z"/>
<path d="M203.862626-5.965629C203.862626-6.874222 203.743074-8.356663 203.073585-9.743462C202.36823-11.178082 201.387906-11.955168 201.256399-11.955168C201.208578-11.955168 201.148803-11.931258 201.148803-11.859527C201.148803-11.823661 201.148803-11.799751 201.352041-11.596513C202.547557-10.389041 203.217047-8.416438 203.217047-5.977584C203.217047-3.658281 202.655154-1.661768 201.268354-.251059C201.148803-.143462 201.148803-.119552 201.148803-.083686C201.148803-.011955 201.208578 .011955 201.256399 .011955C201.411816 .011955 202.39214-.848817 202.977943-2.020423C203.587657-3.239851 203.862626-4.531009 203.862626-5.965629Z"/>
<path d="M229.656707-14.647994C229.720468-14.895067 229.776259-14.911008 229.83205-14.918978C229.88784-14.934918 230.134914-14.934918 230.286346-14.934918C231.067417-14.934918 231.378251-14.895067 231.378251-14.321219C231.378251-14.241518 231.370281-14.185727 231.362311-14.113996L231.29855-13.595939V-13.556088C231.29855-13.548118 231.30652-13.524208 231.29855-13.516238C231.29058-13.500298 231.27464-13.388716 231.442012-13.388716C231.577504-13.388716 231.585474-13.444507 231.601414-13.556088L231.824578-14.974768L231.832548-15.08635C231.832548-15.197932 231.728936-15.197932 231.609385-15.197932H227.265673C227.090331-15.197932 227.066421-15.197932 227.0186-15.05447L226.532423-13.63579C226.492573-13.532178 226.492573-13.516238 226.492573-13.500298C226.492573-13.388716 226.604154-13.388716 226.644005-13.388716C226.675885-13.388716 226.723706-13.388716 226.755586-13.412626C226.779497-13.428567 226.779497-13.444507 226.851228-13.6597C227.257703-14.807396 227.496807-14.934918 228.564802-14.934918C228.724204-14.934918 228.923457-14.934918 229.043008-14.918978C229.035038-14.807396 229.035038-14.783486 229.003158-14.663934L227.959073-10.479625C227.879372-10.160821 227.831551-10.07315 227.106271-10.07315H227.00266C226.859198-10.07315 226.763556-10.07315 226.763556-9.921717C226.763556-9.889837 226.779497-9.810136 226.899048-9.810136C227.201913-9.810136 227.512747-9.834046 227.823581-9.834046H228.405399C228.724204-9.834046 229.058949-9.810136 229.369783-9.810136C229.425574-9.810136 229.537155-9.810136 229.537155-9.961568C229.537155-10.07315 229.441514-10.07315 229.313992-10.07315H229.210381C229.074889-10.07315 228.947367-10.08112 228.811875-10.08909C228.620593-10.113 228.564802-10.12894 228.564802-10.232552C228.564802-10.280372 228.588712-10.360074 228.588712-10.368044L229.656707-14.647994Z"/>
<path d="M233.148069-10.894071C233.076338-10.631057 232.908966-9.953598 232.406849-9.953598C232.231507-9.953598 232.096015-10.025329 232.048194-10.065179C232.207596-10.12894 232.327148-10.272402 232.327148-10.447745C232.327148-10.678878 232.135865-10.718729 232.048194-10.718729C231.817061-10.718729 231.641718-10.519476 231.641718-10.280372C231.641718-9.897807 232.048194-9.730435 232.398879-9.730435C232.757534-9.730435 233.020548-9.953598 233.21183-10.232552C233.347322-9.937658 233.650186-9.730435 234.032752-9.730435C234.861644-9.730435 235.33985-10.718729 235.33985-10.957832C235.33985-11.053473 235.220299-11.053473 235.188418-11.053473C235.084807-11.053473 235.052926-11.029563 235.029016-10.949862C234.773972-10.12894 234.279825-9.953598 234.048692-9.953598C233.801619-9.953598 233.634246-10.12894 233.634246-10.455715C233.634246-10.631057 233.729888-11.013623 233.801619-11.284607C233.88132-11.635291 233.968991-11.978006 234.056662-12.320721C234.184184-12.814868 234.455168-13.101792 234.758032-13.101792C234.965255-13.101792 235.100747-12.998181 235.116687-12.990211C235.044956-12.9663 234.837733-12.838778 234.837733-12.607645C234.837733-12.384482 235.013076-12.336661 235.116687-12.336661C235.268119-12.336661 235.515193-12.448243 235.515193-12.775018C235.515193-13.213374 235.029016-13.324955 234.766002-13.324955C234.439228-13.324955 234.168244-13.141643 233.953051-12.822838C233.857409-13.014121 233.618306-13.324955 233.132129-13.324955C232.295267-13.324955 231.825031-12.320721 231.825031-12.105528C231.825031-12.001917 231.928642-12.001917 231.976463-12.001917C232.080074-12.001917 232.103985-12.025827 232.127895-12.105528C232.374969-12.894569 232.853175-13.101792 233.116189-13.101792S233.530635-12.894569 233.530635-12.599675C233.530635-12.440273 233.490784-12.2729 233.403113-11.930186L233.148069-10.894071Z"/>
<path d="M239.314146-9.820996H239.092975C239.08102-9.73731 239.021244-9.342789 238.93158-9.277036C238.889737-9.24117 238.405553-9.24117 238.321867-9.24117H237.204059L237.969189-9.862839C238.172427-10.024234 238.704432-10.406799 238.889737-10.586127C239.069065-10.765454 239.314146-11.070311 239.314146-11.494719C239.314146-12.241917 238.638679-12.678281 237.837683-12.678281C237.066574-12.678281 236.528592-12.170186 236.528592-11.608293C236.528592-11.303437 236.785628-11.267571 236.851381-11.267571C237.000821-11.267571 237.174171-11.375168 237.174171-11.590361C237.174171-11.721868 237.096462-11.91315 236.833448-11.91315C236.970933-12.218007 237.335566-12.445155 237.748019-12.445155C238.375665-12.445155 238.71041-11.978904 238.71041-11.494719C238.71041-11.070311 238.429463-10.633947 238.011033-10.251382L236.594345-8.954246C236.534569-8.89447 236.528592-8.888493 236.528592-8.703188H239.128841L239.314146-9.820996Z"/>
<path d="M216.242879-5.738481C216.446117-5.738481 216.66131-5.738481 216.66131-5.977584S216.446117-6.216687 216.242879-6.216687H209.775133C209.571895-6.216687 209.356702-6.216687 209.356702-5.977584S209.571895-5.738481 209.775133-5.738481H216.242879Z"/>
<path d="M221.980564-5.738481C222.183802-5.738481 222.398995-5.738481 222.398995-5.977584S222.183802-6.216687 221.980564-6.216687H215.512818C215.30958-6.216687 215.094387-6.216687 215.094387-5.977584S215.30958-5.738481 215.512818-5.738481H221.980564Z"/>
<path d="M228.62239-5.738481C228.825628-5.738481 229.040821-5.738481 229.040821-5.977584S228.825628-6.216687 228.62239-6.216687H222.154644C221.951406-6.216687 221.736213-6.216687 221.736213-5.977584S221.951406-5.738481 222.154644-5.738481H228.62239Z"/>
<path d="M235.264216-5.738481C235.467454-5.738481 235.682647-5.738481 235.682647-5.977584S235.467454-6.216687 235.264216-6.216687H228.79647C228.593232-6.216687 228.378039-6.216687 228.378039-5.977584S228.593232-5.738481 228.79647-5.738481H235.264216Z"/>
<path d="M241.906042-5.738481C242.10928-5.738481 242.324473-5.738481 242.324473-5.977584S242.10928-6.216687 241.906042-6.216687H235.438296C235.235058-6.216687 235.019865-6.216687 235.019865-5.977584S235.235058-5.738481 235.438296-5.738481H241.906042Z"/>
<path d="M248.547868-5.738481C248.751106-5.738481 248.966299-5.738481 248.966299-5.977584S248.751106-6.216687 248.547868-6.216687H242.080122C241.876884-6.216687 241.661691-6.216687 241.661691-5.977584S241.876884-5.738481 242.080122-5.738481H248.547868Z"/>
<path d="M256.377555-5.738481C255.720021-5.236364 255.397231-4.746202 255.30159-4.590785C254.763607-3.765878 254.667966-3.012702 254.667966-3.000747C254.667966-2.857285 254.811428-2.857285 254.907069-2.857285C255.110307-2.857285 255.122262-2.881196 255.170083-3.096389C255.445052-4.267995 256.150407-5.272229 257.501341-5.822167C257.644803-5.869988 257.680668-5.893898 257.680668-5.977584S257.608937-6.097136 257.585027-6.109091C257.059-6.312329 255.612424-6.910087 255.158128-8.918555C255.122262-9.062017 255.110307-9.097883 254.907069-9.097883C254.811428-9.097883 254.667966-9.097883 254.667966-8.954421C254.667966-8.930511 254.775562-8.177335 255.277679-7.376339C255.516783-7.017684 255.863483-6.599253 256.377555-6.216687H247.494865C247.279672-6.216687 247.064479-6.216687 247.064479-5.977584S247.279672-5.738481 247.494865-5.738481H256.377555Z"/>
<path d="M263.978365-5.977584C263.978365-6.324284 263.691441-6.611208 263.344741-6.611208S262.711117-6.324284 262.711117-5.977584S262.998041-5.34396 263.344741-5.34396S263.978365-5.630884 263.978365-5.977584Z"/>
<path d="M269.291753-5.977584C269.291753-6.324284 269.004829-6.611208 268.658129-6.611208S268.024505-6.324284 268.024505-5.977584S268.311429-5.34396 268.658129-5.34396S269.291753-5.630884 269.291753-5.977584Z"/>
<path d="M274.60514-5.977584C274.60514-6.324284 274.318216-6.611208 273.971517-6.611208S273.337893-6.324284 273.337893-5.977584S273.624817-5.34396 273.971517-5.34396S274.60514-5.630884 274.60514-5.977584Z"/>
<path d="M300.243751-14.603726C300.307512-14.8508 300.363303-14.86674 300.419094-14.87471C300.474885-14.89065 300.721958-14.89065 300.87339-14.89065C301.654461-14.89065 301.965295-14.8508 301.965295-14.276952C301.965295-14.197251 301.957325-14.14146 301.949355-14.069729L301.885594-13.551671V-13.511821C301.885594-13.503851 301.893564-13.47994 301.885594-13.47197C301.877624-13.45603 301.861684-13.344449 302.029056-13.344449C302.164548-13.344449 302.172518-13.400239 302.188459-13.511821L302.411622-14.930501L302.419592-15.042082C302.419592-15.153664 302.31598-15.153664 302.196429-15.153664H297.852718C297.677375-15.153664 297.653465-15.153664 297.605644-15.010202L297.119467-13.591522C297.079617-13.487911 297.079617-13.47197 297.079617-13.45603C297.079617-13.344449 297.191198-13.344449 297.231049-13.344449C297.262929-13.344449 297.31075-13.344449 297.34263-13.368359C297.366541-13.384299 297.366541-13.400239 297.438272-13.615432C297.844748-14.763129 298.083851-14.89065 299.151846-14.89065C299.311248-14.89065 299.510501-14.89065 299.630053-14.87471C299.622083-14.763129 299.622083-14.739218 299.590202-14.619666L298.546117-10.435358C298.466416-10.116553 298.418596-10.028882 297.693315-10.028882H297.589704C297.446242-10.028882 297.350601-10.028882 297.350601-9.87745C297.350601-9.845569 297.366541-9.765868 297.486092-9.765868C297.788957-9.765868 298.099791-9.789779 298.410625-9.789779H298.992444C299.311248-9.789779 299.645993-9.765868 299.956827-9.765868C300.012618-9.765868 300.1242-9.765868 300.1242-9.9173C300.1242-10.028882 300.028558-10.028882 299.901036-10.028882H299.797425C299.661933-10.028882 299.534411-10.036852 299.398919-10.044822C299.207637-10.068732 299.151846-10.084673 299.151846-10.188284C299.151846-10.236105 299.175756-10.315806 299.175756-10.323776L300.243751-14.603726Z"/>
<path d="M303.735114-10.849803C303.663383-10.58679 303.49601-9.90933 302.993893-9.90933C302.818551-9.90933 302.683059-9.981061 302.635238-10.020912C302.79464-10.084673 302.914192-10.228135 302.914192-10.403477C302.914192-10.63461 302.722909-10.674461 302.635238-10.674461C302.404105-10.674461 302.228762-10.475208 302.228762-10.236105C302.228762-9.853539 302.635238-9.686167 302.985923-9.686167C303.344578-9.686167 303.607592-9.90933 303.798875-10.188284C303.934366-9.89339 304.237231-9.686167 304.619796-9.686167C305.448688-9.686167 305.926894-10.674461 305.926894-10.913564C305.926894-11.009206 305.807343-11.009206 305.775462-11.009206C305.671851-11.009206 305.63997-10.985295 305.61606-10.905594C305.361016-10.084673 304.86687-9.90933 304.635736-9.90933C304.388663-9.90933 304.22129-10.084673 304.22129-10.411447C304.22129-10.58679 304.316932-10.969355 304.388663-11.240339C304.468364-11.591024 304.556035-11.933739 304.643706-12.276454C304.771228-12.7706 305.042212-13.057525 305.345076-13.057525C305.552299-13.057525 305.687791-12.953913 305.703731-12.945943C305.632-12.922033 305.424777-12.794511 305.424777-12.563378C305.424777-12.340214 305.60012-12.292394 305.703731-12.292394C305.855163-12.292394 306.102237-12.403975 306.102237-12.73075C306.102237-13.169106 305.61606-13.280688 305.353046-13.280688C305.026272-13.280688 304.755288-13.097375 304.540095-12.778571C304.444454-12.969853 304.20535-13.280688 303.719173-13.280688C302.882312-13.280688 302.412075-12.276454 302.412075-12.061261C302.412075-11.957649 302.515686-11.957649 302.563507-11.957649C302.667119-11.957649 302.691029-11.981559 302.714939-12.061261C302.962013-12.850302 303.440219-13.057525 303.703233-13.057525S304.117679-12.850302 304.117679-12.555407C304.117679-12.396005 304.077828-12.228633 303.990157-11.885918L303.735114-10.849803Z"/>
<path d="M308.436682-10.837848C308.406794-11.292145 307.988363-11.405719 307.761215-11.405719S307.37865-11.268234 307.271053-11.076952C307.121613-10.831871 307.049882-10.515059 307.049882-10.491148C307.049882-10.425395 307.103681-10.401485 307.157479-10.401485C307.25312-10.401485 307.259098-10.443328 307.288986-10.538969C307.408538-11.017176 307.552-11.208459 307.743282-11.208459C307.958475-11.208459 307.958475-10.963378 307.958475-10.903602C307.958475-10.80796 307.898699-10.568857 307.856856-10.401485C307.815013-10.24009 307.755237-9.995009 307.725349-9.863502C307.683506-9.714063 307.647641-9.558645 307.605798-9.409206C307.563955-9.241833 307.492224-8.942954 307.492224-8.907089C307.492224-8.775582 307.593843-8.709828 307.701439-8.709828S307.910655-8.781559 307.958475-8.871223C307.97043-8.907089 308.024229-9.116304 308.054117-9.235856L308.185623-9.773838C308.227467-9.929256 308.251377-10.036852 308.287242-10.174336C308.341041-10.377574 308.550256-10.694386 308.771427-10.915557C308.890978-11.029131 309.148014-11.208459 309.470804-11.208459C309.853369-11.208459 309.853369-10.903602 309.853369-10.790028C309.853369-10.43735 309.596333-9.797749 309.488737-9.528757C309.452871-9.427138 309.411028-9.331497 309.411028-9.229878C309.411028-8.925021 309.685997-8.709828 310.014764-8.709828C310.6185-8.709828 310.917379-9.498869 310.917379-9.630376C310.917379-9.642331 310.911402-9.714063 310.803805-9.714063C310.720119-9.714063 310.714141-9.684175 310.678276-9.5706C310.582635-9.253789 310.337554-8.907089 310.032697-8.907089C309.919123-8.907089 309.871302-8.996752 309.871302-9.122282C309.871302-9.241833 309.913145-9.343452 309.966943-9.468982C310.056607-9.702107 310.325599-10.377574 310.325599-10.712319C310.325599-11.202481 309.954988-11.405719 309.500692-11.405719C309.201813-11.405719 308.819247-11.310077 308.436682-10.837848Z"/>
<path d="M286.829923-5.738481C287.033161-5.738481 287.248354-5.738481 287.248354-5.977584S287.033161-6.216687 286.829923-6.216687H280.362178C280.15894-6.216687 279.943747-6.216687 279.943747-5.977584S280.15894-5.738481 280.362178-5.738481H286.829923Z"/>
<path d="M293.041539-5.738481C293.244777-5.738481 293.45997-5.738481 293.45997-5.977584S293.244777-6.216687 293.041539-6.216687H286.573793C286.370555-6.216687 286.155362-6.216687 286.155362-5.977584S286.370555-5.738481 286.573793-5.738481H293.041539Z"/>
<path d="M299.683365-5.738481C299.886603-5.738481 300.101796-5.738481 300.101796-5.977584S299.886603-6.216687 299.683365-6.216687H293.215619C293.012381-6.216687 292.797188-6.216687 292.797188-5.977584S293.012381-5.738481 293.215619-5.738481H299.683365Z"/>
<path d="M306.325191-5.738481C306.528429-5.738481 306.743622-5.738481 306.743622-5.977584S306.528429-6.216687 306.325191-6.216687H299.857445C299.654207-6.216687 299.439014-6.216687 299.439014-5.977584S299.654207-5.738481 299.857445-5.738481H306.325191Z"/>
<path d="M312.967017-5.738481C313.170255-5.738481 313.385448-5.738481 313.385448-5.977584S313.170255-6.216687 312.967017-6.216687H306.499271C306.296033-6.216687 306.08084-6.216687 306.08084-5.977584S306.296033-5.738481 306.499271-5.738481H312.967017Z"/>
<path d="M319.608843-5.738481C319.812081-5.738481 320.027274-5.738481 320.027274-5.977584S319.812081-6.216687 319.608843-6.216687H313.141097C312.937859-6.216687 312.722666-6.216687 312.722666-5.977584S312.937859-5.738481 313.141097-5.738481H319.608843Z"/>
<path d="M327.912461-5.738481C327.254926-5.236364 326.932137-4.746202 326.836496-4.590785C326.298513-3.765878 326.202872-3.012702 326.202872-3.000747C326.202872-2.857285 326.346334-2.857285 326.441975-2.857285C326.645213-2.857285 326.657168-2.881196 326.704989-3.096389C326.979958-4.267995 327.685312-5.272229 329.036246-5.822167C329.179708-5.869988 329.215574-5.893898 329.215574-5.977584S329.143843-6.097136 329.119933-6.109091C328.593905-6.312329 327.14733-6.910087 326.693034-8.918555C326.657168-9.062017 326.645213-9.097883 326.441975-9.097883C326.346334-9.097883 326.202872-9.097883 326.202872-8.954421C326.202872-8.930511 326.310468-8.177335 326.812585-7.376339C327.051689-7.017684 327.398388-6.599253 327.912461-6.216687H319.029771C318.814578-6.216687 318.599385-6.216687 318.599385-5.977584S318.814578-5.738481 319.029771-5.738481H327.912461Z"/>
<path d="M337.103308-.083686C337.103308-.119552 337.103308-.143462 336.90007-.3467C335.704553-1.554172 335.035064-3.526775 335.035064-5.965629C335.035064-8.284932 335.596957-10.281445 336.983756-11.692154C337.103308-11.799751 337.103308-11.823661 337.103308-11.859527C337.103308-11.931258 337.043532-11.955168 336.995711-11.955168C336.840294-11.955168 335.85997-11.094396 335.274167-9.92279C334.664454-8.715318 334.389485-7.436115 334.389485-5.965629C334.389485-4.901619 334.556857-3.478954 335.178526-2.199751C335.883881-.765131 336.864205 .011955 336.995711 .011955C337.043532 .011955 337.103308-.011955 337.103308-.083686Z"/>
<path d="M343.102209-7.79477C343.341312-7.79477 343.436954-7.79477 343.436954-8.021918C343.436954-8.141469 343.341312-8.141469 343.126119-8.141469H342.157751C342.384899-9.372852 342.552271-10.221669 342.647913-10.604234C342.719644-10.891158 342.970702-11.166127 343.281537-11.166127C343.532595-11.166127 343.783654-11.058531 343.903205-10.950934C343.436954-10.903113 343.293492-10.556413 343.293492-10.353176C343.293492-10.114072 343.472819-9.97061 343.699967-9.97061C343.939071-9.97061 344.297726-10.173848 344.297726-10.628144C344.297726-11.130262 343.795609-11.40523 343.269581-11.40523C342.755509-11.40523 342.253392-11.022665 342.014289-10.556413C341.799096-10.137983 341.679544-9.707597 341.404575-8.141469H340.603579C340.376431-8.141469 340.256879-8.141469 340.256879-7.926276C340.256879-7.79477 340.32861-7.79477 340.567713-7.79477H341.332844C341.117651-6.682939 340.627489-3.981071 340.35252-2.701868C340.149283-1.661768 339.969955-.789041 339.372197-.789041C339.336331-.789041 338.989631-.789041 338.774438-1.016189C339.384152-1.06401 339.384152-1.590037 339.384152-1.601993C339.384152-1.841096 339.204824-1.984558 338.977676-1.984558C338.738573-1.984558 338.379918-1.78132 338.379918-1.327024C338.379918-.812951 338.905945-.549938 339.372197-.549938C340.591624-.549938 341.093741-2.737733 341.225248-3.335492C341.440441-4.25604 342.026244-7.436115 342.08602-7.79477H343.102209Z"/>
<path d="M346.497566-2.940971C346.497566-3.634371 346.270418-4.148443 345.780256-4.148443C345.397691-4.148443 345.206408-3.837609 345.206408-3.574595S345.385736-2.988792 345.792211-2.988792C345.947628-2.988792 346.079135-3.036613 346.186732-3.144209C346.210642-3.16812 346.222597-3.16812 346.234552-3.16812C346.258463-3.16812 346.258463-3.000747 346.258463-2.940971C346.258463-2.546451 346.186732-1.769365 345.493332-.992279C345.361825-.848817 345.361825-.824907 345.361825-.800996C345.361825-.74122 345.421601-.681445 345.481377-.681445C345.577018-.681445 346.497566-1.566127 346.497566-2.940971Z"/>
<path d="M358.744746-10.9868C358.756701-11.03462 358.780612-11.106351 358.780612-11.166127C358.780612-11.285679 358.66106-11.285679 358.63715-11.285679C358.625195-11.285679 358.039391-11.237858 357.979615-11.225903C357.776378-11.213948 357.59705-11.190037 357.381857-11.178082C357.082978-11.154172 356.999292-11.142217 356.999292-10.927024C356.999292-10.807472 357.094933-10.807472 357.262305-10.807472C357.848109-10.807472 357.860064-10.699875 357.860064-10.580324C357.860064-10.508593 357.836153-10.412951 357.824198-10.377086L357.094933-7.47198C356.963426-7.782814 356.640637-8.261021 356.018968-8.261021C354.668034-8.261021 353.209503-6.515567 353.209503-4.746202C353.209503-3.56264 353.902903-2.86924 354.715855-2.86924C355.373389-2.86924 355.935282-3.383313 356.270026-3.777833C356.389578-3.072478 356.951471-2.86924 357.310126-2.86924S357.955705-3.084433 358.170898-3.514819C358.362181-3.921295 358.529553-4.65056 358.529553-4.698381C358.529553-4.758157 358.481733-4.805978 358.410001-4.805978C358.302405-4.805978 358.29045-4.746202 358.242629-4.566874C358.063302-3.861519 357.836153-3.108344 357.345992-3.108344C356.999292-3.108344 356.975381-3.419178 356.975381-3.658281C356.975381-3.706102 356.975381-3.957161 357.059067-4.291905L358.744746-10.9868ZM356.329802-4.411457C356.270026-4.208219 356.270026-4.184309 356.102654-3.957161C355.83964-3.622416 355.313613-3.108344 354.75172-3.108344C354.261558-3.108344 353.986589-3.550685 353.986589-4.25604C353.986589-4.913574 354.3572-6.252553 354.584348-6.75467C354.990823-7.591532 355.552716-8.021918 356.018968-8.021918C356.808009-8.021918 356.963426-7.041594 356.963426-6.945953C356.963426-6.933998 356.927561-6.77858 356.915605-6.75467L356.329802-4.411457Z"/>
<path d="M360.408012-2.502627C360.431922-2.622179 360.511623-2.925043 360.535534-3.044595C360.647115-3.474981 360.647115-3.482951 360.830428-3.745965C361.093442-4.1365 361.468037-4.487185 362.002034-4.487185C362.288958-4.487185 362.456331-4.319813 362.456331-3.945218C362.456331-3.506861 362.121586-2.598269 361.970154-2.207733C361.866543-1.94472 361.866543-1.896899 361.866543-1.793287C361.866543-1.338991 362.241138-1.115828 362.583853-1.115828C363.364924-1.115828 363.691698-2.231644 363.691698-2.335255C363.691698-2.414956 363.627937-2.438866 363.572147-2.438866C363.476505-2.438866 363.460565-2.383076 363.436655-2.303375C363.245372-1.649825 362.910627-1.338991 362.607763-1.338991C362.480241-1.338991 362.41648-1.418692 362.41648-1.602005S362.480241-1.96066 362.559942-2.159913C362.679494-2.462777 363.030179-3.37934 363.030179-3.825666C363.030179-4.423424 362.615733-4.710348 362.041885-4.710348C361.396306-4.710348 360.98186-4.319813 360.750727-4.016949C360.694936-4.455305 360.344251-4.710348 359.937775-4.710348C359.650851-4.710348 359.451599-4.527036 359.324077-4.279962C359.132794-3.905367 359.053093-3.506861 359.053093-3.490921C359.053093-3.41919 359.108884-3.38731 359.172645-3.38731C359.276256-3.38731 359.284226-3.41919 359.340017-3.626413C359.435658-4.016949 359.57912-4.487185 359.913865-4.487185C360.121088-4.487185 360.168909-4.287932 360.168909-4.11259C360.168909-3.969128 360.129058-3.817696 360.065297-3.554682C360.049357-3.490921 359.929805-3.020685 359.897925-2.909103L359.603031-1.713586C359.57115-1.594035 359.52333-1.394782 359.52333-1.362901C359.52333-1.179589 359.674762-1.115828 359.778373-1.115828C359.921835-1.115828 360.041387-1.211469 360.097178-1.307111C360.121088-1.354931 360.184849-1.625915 360.224699-1.793287L360.408012-2.502627Z"/>
<path d="M367.821681-5.965629C367.821681-6.874222 367.70213-8.356663 367.03264-9.743462C366.327285-11.178082 365.346962-11.955168 365.215455-11.955168C365.167634-11.955168 365.107858-11.931258 365.107858-11.859527C365.107858-11.823661 365.107858-11.799751 365.311096-11.596513C366.506613-10.389041 367.176102-8.416438 367.176102-5.977584C367.176102-3.658281 366.61421-1.661768 365.22741-.251059C365.107858-.143462 365.107858-.119552 365.107858-.083686C365.107858-.011955 365.167634 .011955 365.215455 .011955C365.370872 .011955 366.351196-.848817 366.936999-2.020423C367.546713-3.239851 367.821681-4.531009 367.821681-5.965629Z"/>
</g>
</svg>
</center>
<p>The critical transaction here is <code>Tx<sub>1</sub></code>: ideally it should not only verify that <code>d<sub>1</sub></code> is the correct next state after <code>d<sub>0</sub></code>, <em>but also the base case</em>: <code>d<sub>0</sub></code> should be the correct initial state.</p>
<p>Unfortunately, the fact that <code>d<sub>0</sub></code> should be the base case is deducible from <code>Tx<sub>0</sub></code>, but on Cardano that information is not reflected in <code>Tx<sub>1</sub></code>, and <code>Tx<sub>1</sub></code> is the only context available to <code>f</code> when it validates <code>d<sub>0</sub></code>. This means that contracts do not know when the base case should apply, and hence cannot <em>verify</em> their own base case.</p>
<p>There are two ways to solve this problem.</p>
<ul>
<li><p>Declare that it is the responsibility of the off-chain code to verify the base case. In rare cases it may be possible to verify this by inspecting the current datum, but in most cases it will mean looking through the chain history to find the original output (<code>Tx<sub>0</sub></code> in the diagram above).</p></li>
<li><p>We can solve the problem entirely on-chain through the clever use of NFTs. We will discuss this in detail below.</p></li>
</ul>
<h3 id="state-tokens">State tokens</h3>
<p>Often stateful scripts have an associated NFT, anchored at a random output <code>o</code>, which is included in the value of each script output:</p>
<center>
<svg height="15.165619pt" version="1.1" viewBox="57.603035 -15.153664 272.155995 15.165619" width="272.155995pt">
<title>   (f, \; d_\mathit{old}, \mathsf{NFT}_o \uplus V_\mathrm{old}) \xrightarrow{\mspace{30mu}\mathit{Tx}\mspace{30mu}}   (f, \; d_\mathit{new}, \mathsf{NFT}_o \uplus V_\mathrm{new}) </title>
<defs/>
<g>
<path d="M61.488464-.083686C61.488464-.119552 61.488464-.143462 61.285226-.3467C60.08971-1.554172 59.42022-3.526775 59.42022-5.965629C59.42022-8.284932 59.982113-10.281445 61.368913-11.692154C61.488464-11.799751 61.488464-11.823661 61.488464-11.859527C61.488464-11.931258 61.428688-11.955168 61.380868-11.955168C61.225451-11.955168 60.245127-11.094396 59.659324-9.92279C59.04961-8.715318 58.774641-7.436115 58.774641-5.965629C58.774641-4.901619 58.942013-3.478954 59.563682-2.199751C60.269037-.765131 61.249361 .011955 61.380868 .011955C61.428688 .011955 61.488464-.011955 61.488464-.083686Z"/>
<path d="M67.487365-7.79477C67.726469-7.79477 67.82211-7.79477 67.82211-8.021918C67.82211-8.141469 67.726469-8.141469 67.511276-8.141469H66.542907C66.770055-9.372852 66.937428-10.221669 67.033069-10.604234C67.1048-10.891158 67.355859-11.166127 67.666693-11.166127C67.917751-11.166127 68.16881-11.058531 68.288362-10.950934C67.82211-10.903113 67.678648-10.556413 67.678648-10.353176C67.678648-10.114072 67.857976-9.97061 68.085124-9.97061C68.324227-9.97061 68.682882-10.173848 68.682882-10.628144C68.682882-11.130262 68.180765-11.40523 67.654738-11.40523C67.140665-11.40523 66.638548-11.022665 66.399445-10.556413C66.184252-10.137983 66.0647-9.707597 65.789732-8.141469H64.988735C64.761587-8.141469 64.642035-8.141469 64.642035-7.926276C64.642035-7.79477 64.713766-7.79477 64.95287-7.79477H65.718C65.502807-6.682939 65.012646-3.981071 64.737677-2.701868C64.534439-1.661768 64.355111-.789041 63.757353-.789041C63.721487-.789041 63.374788-.789041 63.159595-1.016189C63.769308-1.06401 63.769308-1.590037 63.769308-1.601993C63.769308-1.841096 63.589981-1.984558 63.362832-1.984558C63.123729-1.984558 62.765074-1.78132 62.765074-1.327024C62.765074-.812951 63.291101-.549938 63.757353-.549938C64.97678-.549938 65.478897-2.737733 65.610404-3.335492C65.825597-4.25604 66.4114-7.436115 66.471176-7.79477H67.487365Z"/>
<path d="M70.882723-2.940971C70.882723-3.634371 70.655574-4.148443 70.165412-4.148443C69.782847-4.148443 69.591564-3.837609 69.591564-3.574595S69.770892-2.988792 70.177368-2.988792C70.332785-2.988792 70.464292-3.036613 70.571888-3.144209C70.595798-3.16812 70.607754-3.16812 70.619709-3.16812C70.643619-3.16812 70.643619-3.000747 70.643619-2.940971C70.643619-2.546451 70.571888-1.769365 69.878488-.992279C69.746982-.848817 69.746982-.824907 69.746982-.800996C69.746982-.74122 69.806757-.681445 69.866533-.681445C69.962175-.681445 70.882723-1.566127 70.882723-2.940971Z"/>
<path d="M83.129903-10.9868C83.141858-11.03462 83.165768-11.106351 83.165768-11.166127C83.165768-11.285679 83.046216-11.285679 83.022306-11.285679C83.010351-11.285679 82.424548-11.237858 82.364772-11.225903C82.161534-11.213948 81.982206-11.190037 81.767013-11.178082C81.468134-11.154172 81.384448-11.142217 81.384448-10.927024C81.384448-10.807472 81.480089-10.807472 81.647462-10.807472C82.233265-10.807472 82.24522-10.699875 82.24522-10.580324C82.24522-10.508593 82.22131-10.412951 82.209355-10.377086L81.480089-7.47198C81.348582-7.782814 81.025793-8.261021 80.404124-8.261021C79.05319-8.261021 77.59466-6.515567 77.59466-4.746202C77.59466-3.56264 78.288059-2.86924 79.101011-2.86924C79.758545-2.86924 80.320438-3.383313 80.655183-3.777833C80.774734-3.072478 81.336627-2.86924 81.695282-2.86924S82.340861-3.084433 82.556054-3.514819C82.747337-3.921295 82.914709-4.65056 82.914709-4.698381C82.914709-4.758157 82.866889-4.805978 82.795158-4.805978C82.687561-4.805978 82.675606-4.746202 82.627785-4.566874C82.448458-3.861519 82.22131-3.108344 81.731148-3.108344C81.384448-3.108344 81.360538-3.419178 81.360538-3.658281C81.360538-3.706102 81.360538-3.957161 81.444224-4.291905L83.129903-10.9868ZM80.714959-4.411457C80.655183-4.208219 80.655183-4.184309 80.48781-3.957161C80.224797-3.622416 79.698769-3.108344 79.136876-3.108344C78.646714-3.108344 78.371746-3.550685 78.371746-4.25604C78.371746-4.913574 78.742356-6.252553 78.969504-6.75467C79.37598-7.591532 79.937873-8.021918 80.404124-8.021918C81.193165-8.021918 81.348582-7.041594 81.348582-6.945953C81.348582-6.933998 81.312717-6.77858 81.300762-6.75467L80.714959-4.411457Z"/>
<path d="M87.503006-3.363399C87.503006-4.192291 86.945099-4.710348 86.227789-4.710348C85.199644-4.710348 84.115709-3.634383 84.115709-2.462777C84.115709-1.586064 84.713467-1.115828 85.382957-1.115828C86.442982-1.115828 87.503006-2.215703 87.503006-3.363399ZM85.390927-1.338991C85.088062-1.338991 84.713467-1.546214 84.713467-2.183823C84.713467-2.542478 84.88084-3.291668 85.135883-3.730025C85.478598-4.303873 85.948835-4.487185 86.219818-4.487185C86.602384-4.487185 86.905248-4.200261 86.905248-3.642353C86.905248-3.38731 86.785696-2.614209 86.458922-2.072241C86.203878-1.633885 85.773492-1.338991 85.390927-1.338991Z"/>
<path d="M90.050355-6.495654C90.058325-6.527534 90.074265-6.583325 90.074265-6.615205C90.074265-6.734757 89.946743-6.726787 89.859072-6.718817L89.03018-6.647086C88.918599-6.639116 88.830928-6.631145 88.830928-6.487683C88.830928-6.376102 88.926569-6.376102 89.03815-6.376102C89.420716-6.376102 89.420716-6.328281 89.420716-6.25655C89.420716-6.2167 89.396805-6.129028 89.388835-6.081208L88.400541-2.136002C88.360691-1.9766 88.360691-1.928779 88.360691-1.849078C88.360691-1.362901 88.727316-1.115828 89.093941-1.115828C89.261314-1.115828 89.508387-1.171619 89.70764-1.554184C89.851102-1.841108 89.962683-2.303375 89.962683-2.335255C89.962683-2.438866 89.851102-2.438866 89.811251-2.438866C89.68373-2.438866 89.675759-2.406986 89.643879-2.279464C89.532297-1.865018 89.396805-1.338991 89.109881-1.338991C88.886718-1.338991 88.886718-1.594035 88.886718-1.689676C88.886718-1.737497 88.886718-1.825168 88.910629-1.920809L90.050355-6.495654Z"/>
<path d="M94.412455-6.495654C94.420425-6.527534 94.436365-6.583325 94.436365-6.615205C94.436365-6.734757 94.308843-6.726787 94.221172-6.718817L93.39228-6.647086C93.280699-6.639116 93.193028-6.631145 93.193028-6.487683C93.193028-6.376102 93.288669-6.376102 93.400251-6.376102C93.782816-6.376102 93.782816-6.328281 93.782816-6.25655C93.782816-6.2167 93.758906-6.129028 93.750935-6.081208L93.296639-4.264022C93.129267-4.542976 92.898133-4.710348 92.563389-4.710348C91.622916-4.710348 90.658532-3.530772 90.658532-2.391046C90.658532-1.625915 91.112828-1.115828 91.710587-1.115828C92.180823-1.115828 92.571359-1.466513 92.738731-1.657795C92.810462-1.362901 93.073476-1.115828 93.456041-1.115828C93.742965-1.115828 93.934248-1.29117 94.06974-1.538244C94.237112-1.857048 94.340724-2.319315 94.340724-2.335255C94.340724-2.438866 94.229142-2.438866 94.189292-2.438866C94.0538-2.438866 94.0538-2.414956 94.005979-2.215703C93.854547-1.602005 93.687175-1.338991 93.471982-1.338991C93.248818-1.338991 93.248818-1.594035 93.248818-1.689676C93.248818-1.737497 93.248818-1.825168 93.272729-1.920809L94.412455-6.495654ZM92.794522-2.255554C92.730761-1.9766 92.204734-1.338991 91.734497-1.338991C91.359902-1.338991 91.24035-1.745467 91.24035-2.064271C91.24035-2.438866 91.471483-3.37934 91.670736-3.745965C91.989541-4.327783 92.340226-4.487185 92.563389-4.487185C93.065506-4.487185 93.153177-3.809726 93.153177-3.730025L93.129267-3.618443L92.794522-2.255554Z"/>
<path d="M97.74575-2.940971C97.74575-3.634371 97.518602-4.148443 97.02844-4.148443C96.645875-4.148443 96.454592-3.837609 96.454592-3.574595S96.63392-2.988792 97.040395-2.988792C97.195813-2.988792 97.327319-3.036613 97.434916-3.144209C97.458826-3.16812 97.470781-3.16812 97.482737-3.16812C97.506647-3.16812 97.506647-3.000747 97.506647-2.940971C97.506647-2.546451 97.434916-1.769365 96.741516-.992279C96.610009-.848817 96.610009-.824907 96.610009-.800996C96.610009-.74122 96.669785-.681445 96.729561-.681445C96.825202-.681445 97.74575-1.566127 97.74575-2.940971Z"/>
<path d="M103.217057-11.285679H101.746572V-2.988792H102.66712V-10.400996H102.679075C102.786671-10.161893 103.40834-8.870735 103.647443-8.392528L106.289536-2.988792H107.760021V-11.285679H106.839473V-3.873474H106.827518C106.719922-4.112578 106.098253-5.403736 105.85915-5.881943L103.217057-11.285679Z"/>
<path d="M114.518703-6.766625V-7.483935H110.968018V-10.520548H112.510235C112.653697-10.520548 112.797159-10.508593 112.940621-10.508593H115.008865V-11.261768H109.939874V-2.988792H110.968018V-6.766625H114.518703Z"/>
<path d="M120.019594-10.484682H121.071649C121.215111-10.484682 121.358573-10.472727 121.502035-10.472727H123.068162V-11.225903H115.930926V-10.472727H117.509008C117.652471-10.472727 117.795933-10.484682 117.939395-10.484682H118.991449V-2.988792H120.019594V-10.484682Z"/>
<path d="M127.465451-3.331519C127.465451-4.11259 126.907543-4.710348 126.078651-4.710348C124.946895-4.710348 123.84702-3.610473 123.84702-2.494657C123.84702-1.681706 124.420868-1.115828 125.233819-1.115828C126.373545-1.115828 127.465451-2.231644 127.465451-3.331519ZM125.241789-1.338991C124.962835-1.338991 124.492599-1.482453 124.492599-2.215703C124.492599-2.542478 124.644031-3.40325 125.026596-3.897397C125.417132-4.399514 125.855488-4.487185 126.070681-4.487185C126.397455-4.487185 126.819871-4.287932 126.819871-3.618443C126.819871-3.299639 126.676409-2.542478 126.373545-2.064271C126.078651-1.609975 125.640295-1.338991 125.241789-1.338991Z"/>
<path d="M134.964354-6.396015H136.661988C136.841315-6.396015 137.092374-6.396015 137.092374-6.635118S136.841315-6.874222 136.661988-6.874222H134.964354V-8.583811C134.964354-8.787049 134.964354-9.002242 134.725251-9.002242S134.486147-8.787049 134.486147-8.583811V-6.874222H132.788513C132.609186-6.874222 132.358127-6.874222 132.358127-6.635118S132.609186-6.396015 132.788513-6.396015H134.486147V-4.698381C134.486147-4.507098 134.486147-4.27995 134.725251-4.27995S134.964354-4.519054 134.964354-4.698381V-6.396015ZM138.048787-9.707597C138.048787-9.92279 138.048787-10.137983 137.809684-10.137983S137.570581-9.92279 137.570581-9.707597V-5.379826C137.570581-3.58655 135.621888-3.203985 134.725251-3.203985C134.187268-3.203985 133.434093-3.311582 132.800469-3.718057C131.879921-4.303861 131.879921-5.068991 131.879921-5.391781V-9.707597C131.879921-9.92279 131.879921-10.137983 131.640817-10.137983S131.401714-9.92279 131.401714-9.707597V-5.332005C131.401714-3.514819 133.230855-2.725778 134.725251-2.725778C136.279423-2.725778 138.048787-3.56264 138.048787-5.32005V-9.707597Z"/>
<path d="M148.771231-9.827148C149.177707-10.472727 149.548317-10.759651 150.15803-10.807472C150.277582-10.819427 150.373223-10.819427 150.373223-11.03462C150.373223-11.082441 150.349313-11.154172 150.241717-11.154172C150.026524-11.154172 149.512451-11.130262 149.297258-11.130262C148.950558-11.130262 148.591903-11.154172 148.257159-11.154172C148.161517-11.154172 148.041966-11.154172 148.041966-10.927024C148.041966-10.819427 148.149562-10.807472 148.197383-10.807472C148.639724-10.771606 148.687545-10.556413 148.687545-10.412951C148.687545-10.233624 148.520172-9.958655 148.508217-9.9467L144.754294-3.993026L143.917433-10.436862C143.917433-10.783562 144.539101-10.807472 144.670608-10.807472C144.849936-10.807472 144.957532-10.807472 144.957532-11.03462C144.957532-11.154172 144.826025-11.154172 144.79016-11.154172C144.586922-11.154172 144.347819-11.130262 144.144581-11.130262H143.475091C142.602364-11.130262 142.243709-11.154172 142.231754-11.154172C142.160023-11.154172 142.016561-11.154172 142.016561-10.938979C142.016561-10.807472 142.100247-10.807472 142.29153-10.807472C142.901243-10.807472 142.937109-10.699875 142.972974-10.400996L143.929388-3.024658C143.965253-2.773599 143.965253-2.737733 144.132626-2.737733C144.276088-2.737733 144.335864-2.773599 144.455415-2.964882L148.771231-9.827148Z"/>
<path d="M152.180388-2.893163C152.180388-3.889427 151.359466-4.750199 150.307412-4.750199S148.434435-3.889427 148.434435-2.893163S149.287237-1.115828 150.307412-1.115828C151.335556-1.115828 152.180388-1.896899 152.180388-2.893163ZM150.307412-1.362901C149.877025-1.362901 149.542281-1.570124 149.366938-1.849078C149.167685-2.175853 149.143775-2.566388 149.143775-2.964894C149.143775-3.267758 149.143775-3.745965 149.390849-4.08868C149.598072-4.367634 149.932816-4.527036 150.307412-4.527036C150.721857-4.527036 151.064572-4.327783 151.247885-4.048829C151.463078-3.714084 151.471048-3.283698 151.471048-2.964894C151.471048-2.598269 151.455108-2.159913 151.231945-1.825168C151.016751-1.506363 150.658096-1.362901 150.307412-1.362901Z"/>
<path d="M153.951806-6.726787L152.764259-6.639116V-6.376102C153.306227-6.376102 153.369988-6.320311 153.369988-5.929776V-1.817198C153.369988-1.458543 153.274347-1.458543 152.764259-1.458543V-1.195529C153.075094-1.219439 153.52142-1.219439 153.656912-1.219439C153.816314-1.219439 154.2467-1.219439 154.557535-1.195529V-1.458543C154.047447-1.458543 153.951806-1.458543 153.951806-1.817198V-6.726787Z"/>
<path d="M157.404005-6.639116V-6.376102C157.945973-6.376102 158.009734-6.320311 158.009734-5.929776V-4.248082C157.73078-4.550946 157.356185-4.710348 156.941739-4.710348C155.945475-4.710348 155.060792-3.937248 155.060792-2.909103C155.060792-1.928779 155.857804-1.115828 156.862038-1.115828C157.332274-1.115828 157.72281-1.338991 157.985824-1.617945V-1.115828L159.197281-1.195529V-1.458543C158.655313-1.458543 158.591552-1.514333 158.591552-1.904869V-6.726787L157.404005-6.639116ZM157.985824-2.183823C157.985824-2.040361 157.985824-2.00848 157.866272-1.849078C157.643109-1.530274 157.276484-1.338991 156.901888-1.338991C156.535263-1.338991 156.216459-1.530274 156.025176-1.825168C155.809983-2.136002 155.770132-2.526538 155.770132-2.901133C155.770132-3.363399 155.841863-3.690174 156.025176-3.969128C156.216459-4.264022 156.575114-4.487185 156.981589-4.487185C157.364155-4.487185 157.74672-4.295903 157.985824-3.881457V-2.183823Z"/>
<path d="M163.355975-5.965629C163.355975-6.874222 163.236424-8.356663 162.566934-9.743462C161.861579-11.178082 160.881256-11.955168 160.749749-11.955168C160.701928-11.955168 160.642152-11.931258 160.642152-11.859527C160.642152-11.823661 160.642152-11.799751 160.84539-11.596513C162.040907-10.389041 162.710396-8.416438 162.710396-5.977584C162.710396-3.658281 162.148504-1.661768 160.761704-.251059C160.642152-.143462 160.642152-.119552 160.642152-.083686C160.642152-.011955 160.701928 .011955 160.749749 .011955C160.905166 .011955 161.88549-.848817 162.471293-2.020423C163.081007-3.239851 163.355975-4.531009 163.355975-5.965629Z"/>
<path d="M189.150057-14.603726C189.213818-14.8508 189.269608-14.86674 189.325399-14.87471C189.38119-14.89065 189.628263-14.89065 189.779696-14.89065C190.560767-14.89065 190.871601-14.8508 190.871601-14.276952C190.871601-14.197251 190.863631-14.14146 190.855661-14.069729L190.7919-13.551671V-13.511821C190.7919-13.503851 190.79987-13.47994 190.7919-13.47197C190.78393-13.45603 190.76799-13.344449 190.935362-13.344449C191.070854-13.344449 191.078824-13.400239 191.094764-13.511821L191.317927-14.930501L191.325897-15.042082C191.325897-15.153664 191.222286-15.153664 191.102734-15.153664H186.759023C186.583681-15.153664 186.55977-15.153664 186.51195-15.010202L186.025773-13.591522C185.985922-13.487911 185.985922-13.47197 185.985922-13.45603C185.985922-13.344449 186.097504-13.344449 186.137354-13.344449C186.169235-13.344449 186.217056-13.344449 186.248936-13.368359C186.272846-13.384299 186.272846-13.400239 186.344577-13.615432C186.751053-14.763129 186.990156-14.89065 188.058151-14.89065C188.217554-14.89065 188.416806-14.89065 188.536358-14.87471C188.528388-14.763129 188.528388-14.739218 188.496508-14.619666L187.452423-10.435358C187.372722-10.116553 187.324901-10.028882 186.599621-10.028882H186.496009C186.352547-10.028882 186.256906-10.028882 186.256906-9.87745C186.256906-9.845569 186.272846-9.765868 186.392398-9.765868C186.695262-9.765868 187.006097-9.789779 187.316931-9.789779H187.898749C188.217554-9.789779 188.552298-9.765868 188.863133-9.765868C188.918924-9.765868 189.030505-9.765868 189.030505-9.9173C189.030505-10.028882 188.934864-10.028882 188.807342-10.028882H188.70373C188.568239-10.028882 188.440717-10.036852 188.305225-10.044822C188.113942-10.068732 188.058151-10.084673 188.058151-10.188284C188.058151-10.236105 188.082062-10.315806 188.082062-10.323776L189.150057-14.603726Z"/>
<path d="M192.641419-10.849803C192.569688-10.58679 192.402316-9.90933 191.900199-9.90933C191.724856-9.90933 191.589364-9.981061 191.541544-10.020912C191.700946-10.084673 191.820498-10.228135 191.820498-10.403477C191.820498-10.63461 191.629215-10.674461 191.541544-10.674461C191.31041-10.674461 191.135068-10.475208 191.135068-10.236105C191.135068-9.853539 191.541544-9.686167 191.892229-9.686167C192.250884-9.686167 192.513897-9.90933 192.70518-10.188284C192.840672-9.89339 193.143536-9.686167 193.526102-9.686167C194.354993-9.686167 194.8332-10.674461 194.8332-10.913564C194.8332-11.009206 194.713648-11.009206 194.681768-11.009206C194.578156-11.009206 194.546276-10.985295 194.522366-10.905594C194.267322-10.084673 193.773175-9.90933 193.542042-9.90933C193.294968-9.90933 193.127596-10.084673 193.127596-10.411447C193.127596-10.58679 193.223237-10.969355 193.294968-11.240339C193.374669-11.591024 193.462341-11.933739 193.550012-12.276454C193.677534-12.7706 193.948517-13.057525 194.251382-13.057525C194.458605-13.057525 194.594097-12.953913 194.610037-12.945943C194.538306-12.922033 194.331083-12.794511 194.331083-12.563378C194.331083-12.340214 194.506425-12.292394 194.610037-12.292394C194.761469-12.292394 195.008542-12.403975 195.008542-12.73075C195.008542-13.169106 194.522366-13.280688 194.259352-13.280688C193.932577-13.280688 193.661593-13.097375 193.4464-12.778571C193.350759-12.969853 193.111656-13.280688 192.625479-13.280688C191.788617-13.280688 191.318381-12.276454 191.318381-12.061261C191.318381-11.957649 191.421992-11.957649 191.469813-11.957649C191.573424-11.957649 191.597334-11.981559 191.621245-12.061261C191.868318-12.850302 192.346525-13.057525 192.609539-13.057525S193.023984-12.850302 193.023984-12.555407C193.023984-12.396005 192.984134-12.228633 192.896463-11.885918L192.641419-10.849803Z"/>
<path d="M175.736229-5.738481C175.939467-5.738481 176.15466-5.738481 176.15466-5.977584S175.939467-6.216687 175.736229-6.216687H169.268483C169.065245-6.216687 168.850052-6.216687 168.850052-5.977584S169.065245-5.738481 169.268483-5.738481H175.736229Z"/>
<path d="M179.398384-5.738481C179.601622-5.738481 179.816815-5.738481 179.816815-5.977584S179.601622-6.216687 179.398384-6.216687H172.930638C172.7274-6.216687 172.512207-6.216687 172.512207-5.977584S172.7274-5.738481 172.930638-5.738481H179.398384Z"/>
<path d="M186.04021-5.738481C186.243448-5.738481 186.458641-5.738481 186.458641-5.977584S186.243448-6.216687 186.04021-6.216687H179.572464C179.369226-6.216687 179.154033-6.216687 179.154033-5.977584S179.369226-5.738481 179.572464-5.738481H186.04021Z"/>
<path d="M192.682036-5.738481C192.885274-5.738481 193.100467-5.738481 193.100467-5.977584S192.885274-6.216687 192.682036-6.216687H186.21429C186.011052-6.216687 185.795859-6.216687 185.795859-5.977584S186.011052-5.738481 186.21429-5.738481H192.682036Z"/>
<path d="M199.323862-5.738481C199.5271-5.738481 199.742293-5.738481 199.742293-5.977584S199.5271-6.216687 199.323862-6.216687H192.856116C192.652878-6.216687 192.437685-6.216687 192.437685-5.977584S192.652878-5.738481 192.856116-5.738481H199.323862Z"/>
<path d="M205.965688-5.738481C206.168926-5.738481 206.384119-5.738481 206.384119-5.977584S206.168926-6.216687 205.965688-6.216687H199.497942C199.294704-6.216687 199.079511-6.216687 199.079511-5.977584S199.294704-5.738481 199.497942-5.738481H205.965688Z"/>
<path d="M211.71986-5.738481C211.062326-5.236364 210.739537-4.746202 210.643895-4.590785C210.105913-3.765878 210.010271-3.012702 210.010271-3.000747C210.010271-2.857285 210.153733-2.857285 210.249375-2.857285C210.452612-2.857285 210.464568-2.881196 210.512388-3.096389C210.787357-4.267995 211.492712-5.272229 212.843646-5.822167C212.987108-5.869988 213.022974-5.893898 213.022974-5.977584S212.951243-6.097136 212.927332-6.109091C212.401305-6.312329 210.95473-6.910087 210.500433-8.918555C210.464568-9.062017 210.452612-9.097883 210.249375-9.097883C210.153733-9.097883 210.010271-9.097883 210.010271-8.954421C210.010271-8.930511 210.117868-8.177335 210.619985-7.376339C210.859088-7.017684 211.205788-6.599253 211.71986-6.216687H202.83717C202.621977-6.216687 202.406784-6.216687 202.406784-5.977584S202.621977-5.738481 202.83717-5.738481H211.71986Z"/>
<path d="M220.910708-.083686C220.910708-.119552 220.910708-.143462 220.70747-.3467C219.511953-1.554172 218.842464-3.526775 218.842464-5.965629C218.842464-8.284932 219.404356-10.281445 220.791156-11.692154C220.910708-11.799751 220.910708-11.823661 220.910708-11.859527C220.910708-11.931258 220.850932-11.955168 220.803111-11.955168C220.647694-11.955168 219.66737-11.094396 219.081567-9.92279C218.471853-8.715318 218.196884-7.436115 218.196884-5.965629C218.196884-4.901619 218.364257-3.478954 218.985926-2.199751C219.69128-.765131 220.671604 .011955 220.803111 .011955C220.850932 .011955 220.910708-.011955 220.910708-.083686Z"/>
<path d="M226.909609-7.79477C227.148712-7.79477 227.244353-7.79477 227.244353-8.021918C227.244353-8.141469 227.148712-8.141469 226.933519-8.141469H225.96515C226.192299-9.372852 226.359671-10.221669 226.455312-10.604234C226.527043-10.891158 226.778102-11.166127 227.088936-11.166127C227.339995-11.166127 227.591053-11.058531 227.710605-10.950934C227.244353-10.903113 227.100891-10.556413 227.100891-10.353176C227.100891-10.114072 227.280219-9.97061 227.507367-9.97061C227.74647-9.97061 228.105126-10.173848 228.105126-10.628144C228.105126-11.130262 227.603008-11.40523 227.076981-11.40523C226.562909-11.40523 226.060792-11.022665 225.821688-10.556413C225.606495-10.137983 225.486944-9.707597 225.211975-8.141469H224.410979C224.18383-8.141469 224.064279-8.141469 224.064279-7.926276C224.064279-7.79477 224.13601-7.79477 224.375113-7.79477H225.140244C224.925051-6.682939 224.434889-3.981071 224.15992-2.701868C223.956682-1.661768 223.777355-.789041 223.179596-.789041C223.143731-.789041 222.797031-.789041 222.581838-1.016189C223.191551-1.06401 223.191551-1.590037 223.191551-1.601993C223.191551-1.841096 223.012224-1.984558 222.785076-1.984558C222.545972-1.984558 222.187317-1.78132 222.187317-1.327024C222.187317-.812951 222.713345-.549938 223.179596-.549938C224.399023-.549938 224.90114-2.737733 225.032647-3.335492C225.24784-4.25604 225.833644-7.436115 225.893419-7.79477H226.909609Z"/>
<path d="M230.304966-2.940971C230.304966-3.634371 230.077818-4.148443 229.587656-4.148443C229.20509-4.148443 229.013808-3.837609 229.013808-3.574595S229.193135-2.988792 229.599611-2.988792C229.755028-2.988792 229.886535-3.036613 229.994131-3.144209C230.018042-3.16812 230.029997-3.16812 230.041952-3.16812C230.065862-3.16812 230.065862-3.000747 230.065862-2.940971C230.065862-2.546451 229.994131-1.769365 229.300732-.992279C229.169225-.848817 229.169225-.824907 229.169225-.800996C229.169225-.74122 229.229001-.681445 229.288777-.681445C229.384418-.681445 230.304966-1.566127 230.304966-2.940971Z"/>
<path d="M242.552146-10.9868C242.564101-11.03462 242.588011-11.106351 242.588011-11.166127C242.588011-11.285679 242.46846-11.285679 242.444549-11.285679C242.432594-11.285679 241.846791-11.237858 241.787015-11.225903C241.583777-11.213948 241.40445-11.190037 241.189257-11.178082C240.890377-11.154172 240.806691-11.142217 240.806691-10.927024C240.806691-10.807472 240.902333-10.807472 241.069705-10.807472C241.655508-10.807472 241.667463-10.699875 241.667463-10.580324C241.667463-10.508593 241.643553-10.412951 241.631598-10.377086L240.902333-7.47198C240.770826-7.782814 240.448036-8.261021 239.826368-8.261021C238.475434-8.261021 237.016903-6.515567 237.016903-4.746202C237.016903-3.56264 237.710303-2.86924 238.523254-2.86924C239.180788-2.86924 239.742681-3.383313 240.077426-3.777833C240.196978-3.072478 240.758871-2.86924 241.117526-2.86924S241.763105-3.084433 241.978298-3.514819C242.16958-3.921295 242.336953-4.65056 242.336953-4.698381C242.336953-4.758157 242.289132-4.805978 242.217401-4.805978C242.109805-4.805978 242.097849-4.746202 242.050029-4.566874C241.870701-3.861519 241.643553-3.108344 241.153391-3.108344C240.806691-3.108344 240.782781-3.419178 240.782781-3.658281C240.782781-3.706102 240.782781-3.957161 240.866467-4.291905L242.552146-10.9868ZM240.137202-4.411457C240.077426-4.208219 240.077426-4.184309 239.910054-3.957161C239.64704-3.622416 239.121013-3.108344 238.55912-3.108344C238.068958-3.108344 237.793989-3.550685 237.793989-4.25604C237.793989-4.913574 238.164599-6.252553 238.391747-6.75467C238.798223-7.591532 239.360116-8.021918 239.826368-8.021918C240.615409-8.021918 240.770826-7.041594 240.770826-6.945953C240.770826-6.933998 240.73496-6.77858 240.723005-6.75467L240.137202-4.411457Z"/>
<path d="M244.741439-3.331519C244.78129-3.459041 245.028363-3.929277 245.275437-4.160411C245.52251-4.375604 245.777554-4.487185 246.056508-4.487185C246.367342-4.487185 246.462983-4.264022 246.462983-3.961158C246.462983-3.498891 246.128239-2.590299 245.976806-2.191793C245.921016-2.048331 245.873195-1.920809 245.873195-1.777347C245.873195-1.410722 246.136209-1.115828 246.542684-1.115828C247.299845-1.115828 247.63459-2.223673 247.63459-2.335255C247.63459-2.438866 247.523008-2.438866 247.483158-2.438866C247.355636-2.438866 247.347666-2.406986 247.307815-2.271494C247.164353-1.761407 246.901339-1.338991 246.558625-1.338991C246.407193-1.338991 246.383282-1.450573 246.383282-1.594035C246.383282-1.777347 246.447043-1.94472 246.502834-2.104122C246.662236-2.526538 246.989011-3.38731 246.989011-3.849576C246.989011-4.535006 246.518774-4.710348 246.080418-4.710348C245.402958-4.710348 245.028363-4.256052 244.876931-4.072739C244.82911-4.439365 244.534216-4.710348 244.143681-4.710348C243.872697-4.710348 243.681414-4.558916 243.522012-4.279962C243.37855-4.008979 243.258998-3.530772 243.258998-3.490921C243.258998-3.38731 243.36261-3.38731 243.41043-3.38731C243.537952-3.38731 243.545922-3.41122 243.593743-3.602503C243.713295-4.072739 243.856757-4.487185 244.12774-4.487185C244.350904-4.487185 244.350904-4.208231 244.350904-4.1365C244.350904-4.024919 244.334963-3.897397 244.303083-3.785815L243.721265-1.458543C243.705325-1.386812 243.697354-1.362901 243.697354-1.338991C243.697354-1.211469 243.800966-1.115828 243.936458-1.115828C244.191501-1.115828 244.239322-1.307111 244.311053-1.609975C244.366844-1.809228 244.446545-2.136002 244.486395-2.295404C244.526246-2.462777 244.526246-2.478717 244.613917-2.813462L244.741439-3.331519Z"/>
<path d="M249.535252-3.012715C249.854056-3.012715 251.344467-3.012715 251.344467-4.016949C251.344467-4.415454 250.993782-4.710348 250.451814-4.710348C249.591042-4.710348 248.379585-3.961158 248.379585-2.550448C248.379585-1.817198 248.794031-1.115828 249.638863-1.115828C250.786559-1.115828 251.432138-1.880959 251.432138-1.99254C251.432138-2.056301 251.328527-2.159913 251.272736-2.159913C251.224915-2.159913 251.216945-2.143972 251.145214-2.064271C250.714828-1.538244 250.085189-1.338991 249.646833-1.338991C249.096895-1.338991 248.969374-1.888929 248.969374-2.247584C248.969374-2.430896 249.025164-2.773611 249.080955-3.012715H249.535252ZM249.144716-3.235878C249.40773-4.224172 250.10113-4.487185 250.451814-4.487185C250.730768-4.487185 250.993782-4.335753 250.993782-4.016949C250.993782-3.235878 249.766385-3.235878 249.471491-3.235878H249.144716Z"/>
<path d="M254.594292-2.574358C254.538502-2.351195 254.538502-2.343225 254.530532-2.151942C254.522561-1.94472 254.387069-1.729526 254.307368-1.617945C254.163906-1.426662 254.012474-1.338991 253.829162-1.338991C253.502387-1.338991 253.215463-1.506363 253.215463-2.032391C253.215463-2.446837 253.438626-3.052565 253.629909-3.562652C253.73352-3.825666 253.757431-3.889427 253.757431-4.048829C253.757431-4.487185 253.430656-4.710348 253.095911-4.710348C252.330781-4.710348 252.004006-3.594533 252.004006-3.490921S252.107617-3.38731 252.155438-3.38731C252.28296-3.38731 252.29093-3.41122 252.32281-3.554682C252.466272-4.048829 252.729286-4.487185 253.079971-4.487185C253.223433-4.487185 253.255314-4.383574 253.255314-4.240112C253.255314-4.056799 253.191553-3.889427 253.119822-3.706114C252.769137-2.765641 252.689436-2.470747 252.689436-2.128032C252.689436-1.24335 253.414716-1.115828 253.813221-1.115828C254.036385-1.115828 254.331279-1.163649 254.634143-1.609975C254.857306-1.179589 255.351453-1.115828 255.598527-1.115828C256.068763-1.115828 256.435388-1.394782 256.730282-2.048331C256.985326-2.598269 257.26428-3.698144 257.26428-4.12853C257.26428-4.630647 257.025177-4.710348 256.905625-4.710348C256.738253-4.710348 256.515089-4.550946 256.515089-4.327783C256.515089-4.216201 256.57088-4.160411 256.618701-4.11259C256.778103-3.945218 256.833894-3.722055 256.833894-3.506861C256.833894-3.196027 256.58682-2.383076 256.451329-2.064271C256.275986-1.657795 256.020942-1.338991 255.630407-1.338991C255.064529-1.338991 255.064529-1.880959 255.064529-2.00848C255.064529-2.223673 255.088439-2.335255 255.207991-2.805492C255.271752-3.076475 255.343483-3.339489 255.407244-3.610473L255.518825-4.056799C255.550706-4.168381 255.598527-4.375604 255.598527-4.399514C255.598527-4.550946 255.486945-4.630647 255.359423-4.630647C255.10438-4.630647 255.040619-4.383574 255.024678-4.311843L254.594292-2.574358Z"/>
<path d="M260.737935-2.940971C260.737935-3.634371 260.510786-4.148443 260.020625-4.148443C259.638059-4.148443 259.446776-3.837609 259.446776-3.574595S259.626104-2.988792 260.03258-2.988792C260.187997-2.988792 260.319504-3.036613 260.4271-3.144209C260.451011-3.16812 260.462966-3.16812 260.474921-3.16812C260.498831-3.16812 260.498831-3.000747 260.498831-2.940971C260.498831-2.546451 260.4271-1.769365 259.733701-.992279C259.602194-.848817 259.602194-.824907 259.602194-.800996C259.602194-.74122 259.66197-.681445 259.721745-.681445C259.817387-.681445 260.737935-1.566127 260.737935-2.940971Z"/>
<path d="M266.209242-11.285679H264.738756V-2.988792H265.659304V-10.400996H265.671259C265.778856-10.161893 266.400524-8.870735 266.639628-8.392528L269.28172-2.988792H270.752206V-11.285679H269.831658V-3.873474H269.819702C269.712106-4.112578 269.090437-5.403736 268.851334-5.881943L266.209242-11.285679Z"/>
<path d="M277.510887-6.766625V-7.483935H273.960202V-10.520548H275.502419C275.645881-10.520548 275.789343-10.508593 275.932805-10.508593H278.001049V-11.261768H272.932058V-2.988792H273.960202V-6.766625H277.510887Z"/>
<path d="M283.011778-10.484682H284.063833C284.207295-10.484682 284.350757-10.472727 284.494219-10.472727H286.060346V-11.225903H278.923111V-10.472727H280.501193C280.644655-10.472727 280.788117-10.484682 280.931579-10.484682H281.983634V-2.988792H283.011778V-10.484682Z"/>
<path d="M290.457635-3.331519C290.457635-4.11259 289.899727-4.710348 289.070835-4.710348C287.939079-4.710348 286.839204-3.610473 286.839204-2.494657C286.839204-1.681706 287.413052-1.115828 288.226003-1.115828C289.365729-1.115828 290.457635-2.231644 290.457635-3.331519ZM288.233974-1.338991C287.95502-1.338991 287.484783-1.482453 287.484783-2.215703C287.484783-2.542478 287.636215-3.40325 288.018781-3.897397C288.409316-4.399514 288.847672-4.487185 289.062865-4.487185C289.38964-4.487185 289.812056-4.287932 289.812056-3.618443C289.812056-3.299639 289.668594-2.542478 289.365729-2.064271C289.070835-1.609975 288.632479-1.338991 288.233974-1.338991Z"/>
<path d="M297.956538-6.396015H299.654172C299.8335-6.396015 300.084558-6.396015 300.084558-6.635118S299.8335-6.874222 299.654172-6.874222H297.956538V-8.583811C297.956538-8.787049 297.956538-9.002242 297.717435-9.002242S297.478332-8.787049 297.478332-8.583811V-6.874222H295.780698C295.60137-6.874222 295.350312-6.874222 295.350312-6.635118S295.60137-6.396015 295.780698-6.396015H297.478332V-4.698381C297.478332-4.507098 297.478332-4.27995 297.717435-4.27995S297.956538-4.519054 297.956538-4.698381V-6.396015ZM301.040972-9.707597C301.040972-9.92279 301.040972-10.137983 300.801868-10.137983S300.562765-9.92279 300.562765-9.707597V-5.379826C300.562765-3.58655 298.614073-3.203985 297.717435-3.203985C297.179452-3.203985 296.426277-3.311582 295.792653-3.718057C294.872105-4.303861 294.872105-5.068991 294.872105-5.391781V-9.707597C294.872105-9.92279 294.872105-10.137983 294.633002-10.137983S294.393898-9.92279 294.393898-9.707597V-5.332005C294.393898-3.514819 296.223039-2.725778 297.717435-2.725778C299.271607-2.725778 301.040972-3.56264 301.040972-5.32005V-9.707597Z"/>
<path d="M311.763415-9.827148C312.169891-10.472727 312.540501-10.759651 313.150215-10.807472C313.269766-10.819427 313.365408-10.819427 313.365408-11.03462C313.365408-11.082441 313.341497-11.154172 313.233901-11.154172C313.018708-11.154172 312.504636-11.130262 312.289443-11.130262C311.942743-11.130262 311.584088-11.154172 311.249343-11.154172C311.153702-11.154172 311.03415-11.154172 311.03415-10.927024C311.03415-10.819427 311.141746-10.807472 311.189567-10.807472C311.631908-10.771606 311.679729-10.556413 311.679729-10.412951C311.679729-10.233624 311.512357-9.958655 311.500402-9.9467L307.746479-3.993026L306.909617-10.436862C306.909617-10.783562 307.531286-10.807472 307.662793-10.807472C307.84212-10.807472 307.949717-10.807472 307.949717-11.03462C307.949717-11.154172 307.81821-11.154172 307.782344-11.154172C307.579106-11.154172 307.340003-11.130262 307.136765-11.130262H306.467276C305.594548-11.130262 305.235893-11.154172 305.223938-11.154172C305.152207-11.154172 305.008745-11.154172 305.008745-10.938979C305.008745-10.807472 305.092431-10.807472 305.283714-10.807472C305.893428-10.807472 305.929293-10.699875 305.965159-10.400996L306.921572-3.024658C306.957438-2.773599 306.957438-2.737733 307.12481-2.737733C307.268272-2.737733 307.328048-2.773599 307.4476-2.964882L311.763415-9.827148Z"/>
<path d="M315.060991-3.610473C315.060991-4.279962 314.758126-4.710348 313.921265-4.710348C313.132223-4.710348 312.773568-4.1365 312.677927-3.945218H312.669957V-4.710348L311.514291-4.622677V-4.359663C312.056258-4.359663 312.120019-4.303873 312.120019-3.913337V-1.817198C312.120019-1.458543 312.024378-1.458543 311.514291-1.458543V-1.195529C311.857006-1.219439 312.20769-1.219439 312.422883-1.219439C312.654017-1.219439 312.988761-1.219439 313.331476-1.195529V-1.458543C312.821389-1.458543 312.725748-1.458543 312.725748-1.817198V-3.259788C312.725748-4.09665 313.363357-4.487185 313.849534-4.487185S314.455262-4.14447 314.455262-3.642353V-1.817198C314.455262-1.458543 314.359621-1.458543 313.849534-1.458543V-1.195529C314.192248-1.219439 314.542933-1.219439 314.758126-1.219439C314.98926-1.219439 315.324004-1.219439 315.666719-1.195529V-1.458543C315.156632-1.458543 315.060991-1.458543 315.060991-1.817198V-3.610473Z"/>
<path d="M319.18382-3.012715C319.359162-3.012715 319.406983-3.012715 319.406983-3.196027C319.406983-3.905367 319.016448-4.750199 317.892662-4.750199C316.904368-4.750199 316.131267-3.929277 316.131267-2.940984C316.131267-1.912839 316.992039-1.115828 317.996273-1.115828C319.008478-1.115828 319.406983-1.96863 319.406983-2.151942C319.406983-2.183823 319.383073-2.263524 319.279461-2.263524C319.19179-2.263524 319.17585-2.207733 319.15991-2.159913C318.872986-1.386812 318.187556-1.362901 318.044094-1.362901C317.685439-1.362901 317.318814-1.530274 317.07971-1.896899S316.840607-2.773611 316.840607-3.012715H319.18382ZM316.848577-3.219937C316.920308-4.335753 317.597768-4.527036 317.892662-4.527036C318.825165-4.527036 318.857045-3.40325 318.865016-3.219937H316.848577Z"/>
<path d="M324.916156-3.825666C324.987887-4.008979 325.123379-4.359663 325.593615-4.367634V-4.630647C325.330602-4.606737 325.314661-4.606737 324.971947-4.606737C324.716903-4.606737 324.50171-4.606737 324.246666-4.630647V-4.367634C324.597351-4.351693 324.685023-4.14447 324.685023-4.001008C324.685023-3.905367 324.661112-3.857546 324.645172-3.801756L323.888011-1.817198L323.06709-3.993038C323.027239-4.09665 323.027239-4.12056 323.027239-4.152441C323.027239-4.359663 323.282283-4.367634 323.473565-4.367634V-4.630647C323.162731-4.606737 322.740315-4.606737 322.660614-4.606737C322.485272-4.606737 322.158497-4.606737 321.919394-4.630647V-4.367634C322.40557-4.367634 322.421511-4.327783 322.572943-3.905367L321.839693-1.936749L321.050651-4.001008C321.042681-4.032889 321.010801-4.12056 321.010801-4.152441C321.010801-4.367634 321.313665-4.367634 321.457127-4.367634V-4.630647C321.114412-4.606737 320.755757-4.606737 320.604325-4.606737C320.460863-4.606737 320.054387-4.606737 319.823254-4.630647V-4.367634C320.22176-4.367634 320.301461-4.335753 320.389132-4.11259L321.457127-1.307111C321.504948-1.187559 321.528858-1.115828 321.65638-1.115828C321.791872-1.115828 321.823752-1.203499 321.863603-1.307111L322.708435-3.546712L323.553267-1.307111C323.593117-1.203499 323.624998-1.115828 323.76049-1.115828C323.888011-1.115828 323.919892-1.195529 323.951772-1.2832L324.916156-3.825666Z"/>
<path d="M329.759029-5.965629C329.759029-6.874222 329.639478-8.356663 328.969988-9.743462C328.264633-11.178082 327.28431-11.955168 327.152803-11.955168C327.104982-11.955168 327.045206-11.931258 327.045206-11.859527C327.045206-11.823661 327.045206-11.799751 327.248444-11.596513C328.443961-10.389041 329.11345-8.416438 329.11345-5.977584C329.11345-3.658281 328.551557-1.661768 327.164758-.251059C327.045206-.143462 327.045206-.119552 327.045206-.083686C327.045206-.011955 327.104982 .011955 327.152803 .011955C327.30822 .011955 328.288544-.848817 328.874347-2.020423C329.48406-3.239851 329.759029-4.531009 329.759029-5.965629Z"/>
</g>
</svg>
</center>
<p>Such NFT is useful to be able to uniquely <em>identify</em> the current script output.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn4" id="fnref4"><sup>4</sup></a> However, the presence of such an NFT does not change the narrative above in any meaningful way. While it is true that <em>if</em> the NFT is minted in <code>Tx<sub>0</sub></code> (and <code>f</code> checks for the presence of the NFT as part of its checks), then <code>d<sub>0</sub></code> must indeed be the base case, but this is once again not visible from <code>Tx<sub>1</sub></code>.</p>
<p>Conversely, the presence of this kind of NFT in an input does not mean that that input spends a script output to <code>f</code>; this will only be true <em>once</em> the NFT is locked in the script (at which point <code>f</code> will validate that it will <em>remain</em> locked in the script). The base case <em>should</em> be that the NFT is locked in the contract immediately when it’s minted, but verifying this again involves checking the chain history.</p>
<h3 id="parameterized-nfts">Parameterized NFTs</h3>
<p>The NFT minting policy <code>NFT<sub>o</sub></code> simply checks that the enclosing transaction spends output <code>o</code>. Since outputs can only be spent once, this guarantees that the resulting token is indeed a singleton. If we additionally want the guarantee that the NFT is locked in some script <code>f</code> immediately upon minting, we can define an NFT minting policy which is parameterized by an output and a script it’s intended for: <code>NFT<sub>o, f</sub></code> would verify that the enclosing transaction spends <code>o</code>, <em>and</em> that the resulting token is locked in a script output to <code>f</code>.</p>
<p>Unfortunately, this leads to precisely the kind of mutual dependency between <code>f</code> and <code>NFT<sub>o, f</sub></code> that we discussed above: <code>f</code> needs to know the hash of <code>NFT<sub>o, f</sub></code> so that it can verify that the NFT <em>remains</em> locked in the script, and <code>NFT<sub>o, f</sub></code> needs to know the hash of <code>f</code> so that it can verify the NFT is locked in the script when it is first minted.</p>
<p>We must therefore store the hash of the NFT in the datum associated with <code>f</code>, but now <code>f</code> has no way of verifying that datum. It can verify that the hash never changes, but it has no way of verifying that the hash is correct. It’s another example of the base case problem discussed above, but in a sense even more severe: even <em>if</em> the script could tell <em>when</em> the base case should apply, it would <em>still</em> not know what the base case should <em>be</em>.</p>
<p>Fortunately, <em>if</em> we use an NFT to identify script outputs, we can solve the base case problem once and for all, by additionally parameterizing the NFT with the expected initial state. <code>NFT<sub>o, f, d</sub></code> will allow minting if the enclosing transaction</p>
<ul>
<li>spends <code>o</code></li>
<li>locks the resulting token in an output to script <code>f</code></li>
<li>the associated datum<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn5" id="fnref5"><sup>5</sup></a> is <code>(NFT<sub>o, f, d</sub>, d)</code></li>
</ul>
<p>This means that if we interact with a script through <code>NFT<sub>o, f, d</sub></code>, the NFT guarantees the inductive base case. Put another way: <em>we have encoded the base case right in the hash of the NFT</em>.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn6" id="fnref6"><sup>6</sup></a></p>
<h2 id="stateful-minting-policies">Stateful minting policies</h2>
<p>A minting policy <code>π</code> is a script that determines whether a particular token is allowed to be minted or burned. Minting policies are stateless: they do not have associated datums (indeed, there are no outputs to a minting policy), nor can we somehow encode state in the hash of the minting policy itself, because we have no way of “evolving” that hash.</p>
<p>Many minting policies however do need some state. When this happens, the minting policy needs to be paired with a stateful script <code>f</code>. The minting policy <code>π</code> could then check the transaction for an input that spends a script output <code>(f, d)</code>, and then use the associated datum <code>d</code> as its state. This is unproblematic as long as the minting policy only needs to read the state, but does not need to <em>modify</em> it. In this case, <code>f</code> is still responsible for checking the state in the continuation output, as normal.</p>
<p>If however the minting policy <em>does</em> need to change the state, we have a problem.</p>
<ol type="1">
<li><p>We could attempt to set things up such that the minting policy <code>π</code> informs the regular script <code>f</code> that <code>π</code> will take over duties for verifying the continuation output, by having the minting policy verify that the redeemer<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn7" id="fnref7"><sup>7</sup></a> for <code>f</code> tells it not to check the continuation output. This is however not sound: a malicious user could create a transaction that <em>doesn’t</em> mint but <em>does</em> use that special redeemer value, and would then be able to change the state of <code>f</code> at will.</p></li>
<li><p><code>f</code> could check the transaction to see if it it burns or mints any <code>π</code> tokens, and delegate verification of the output datum to <code>π</code> when this is the case. This is sound but results in the same kind of mutual dependency problem that we already encountered above: <code>π</code> now needs the hash of <code>f</code> (to recognize outputs to <code>f</code>), and <code>f</code> needs the hash of <code>π</code> (to check whether or not any <code>π</code> tokens are minted).</p></li>
<li><p>Most stateful scripts use some state token <code>NFT<sub>o</sub></code>. It is tempting to think that we could break the cycle by having the minting policy <code>π</code> check for the input with <code>NFT<sub>o</sub></code> instead of the input spending a script output to <code>f</code>: now <code>π</code> no longer needs to know the hash of <code>f</code>. Unfortunately, as we saw, we are <em>only</em> guaranteed that the presence of the NFT implies that the input spends an output to <code>f</code> if we verify through other means that the NFT is locked in the script <code>f</code> immediately upon minting.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn8" id="fnref8"><sup>8</sup></a></p></li>
<li><p>We must therefore store the hash of the minting policy in the datum of <code>f</code>. We can use the parameterized NFT we discussed above, and use <code>NFT<sub>o, f, (π<sub>f</sub>, d)</sub></code> to ensure that the initial value of the minting policy is correct<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn9" id="fnref9"><sup>9</sup></a> (<code>f</code> itself must ensure that the hash never changes).</p></li>
</ol>
<h2 id="variable-base-case">Variable base case</h2>
<p>When we discussed inductive reasoning, we saw that scripts cannot verify their own base case. We will now consider what happens when the base case for one script is another script:</p>
<center>
<svg height="15.932079pt" version="1.1" viewBox="89.459388 -15.920124 208.572308 15.932079" width="208.572308pt">
<title>   (g, d&amp;39;, V&amp;39;) \xrightarrow{\mspace{30mu}\mathit{Tx&amp;39;}\mspace{30mu}}   (f, d, V) \xrightarrow{\mspace{30mu}\mathit{Tx}\mspace{30mu}}   \ldots </title>
<defs/>
<g>
<path d="M93.344818-.083686C93.344818-.119552 93.344818-.143462 93.14158-.3467C91.946063-1.554172 91.276574-3.526775 91.276574-5.965629C91.276574-8.284932 91.838467-10.281445 93.225266-11.692154C93.344818-11.799751 93.344818-11.823661 93.344818-11.859527C93.344818-11.931258 93.285042-11.955168 93.237221-11.955168C93.081804-11.955168 92.10148-11.094396 91.515677-9.92279C90.905963-8.715318 90.630995-7.436115 90.630995-5.965629C90.630995-4.901619 90.798367-3.478954 91.420036-2.199751C92.125391-.765131 93.105714 .011955 93.237221 .011955C93.285042 .011955 93.344818-.011955 93.344818-.083686Z"/>
<path d="M98.052561-4.507098C98.00474-4.315816 97.98083-4.267995 97.825413-4.088667C97.335251-3.455044 96.833134-3.227895 96.462523-3.227895C96.068003-3.227895 95.697393-3.53873 95.697393-4.363636C95.697393-4.99726 96.056048-6.336239 96.319061-6.874222C96.665761-7.543711 97.203744-8.021918 97.705861-8.021918C98.494902-8.021918 98.650319-7.041594 98.650319-6.969863L98.614454-6.802491L98.052561-4.507098ZM98.793781-7.47198C98.638364-7.81868 98.303619-8.261021 97.705861-8.261021C96.402748-8.261021 94.920307-6.623163 94.920307-4.841843C94.920307-3.598506 95.673482-2.988792 96.438613-2.988792C97.072237-2.988792 97.63413-3.490909 97.849323-3.730012L97.586309-2.654047C97.418937-1.996513 97.347206-1.697634 96.91682-1.279203C96.426658-.789041 95.972361-.789041 95.709348-.789041C95.350693-.789041 95.051814-.812951 94.752934-.908593C95.1355-1.016189 95.231141-1.350934 95.231141-1.482441C95.231141-1.673724 95.087679-1.865006 94.824665-1.865006C94.537741-1.865006 94.226907-1.625903 94.226907-1.231382C94.226907-.74122 94.717069-.549938 95.733258-.549938C97.275475-.549938 98.076471-1.542217 98.231888-2.187796L99.558912-7.543711C99.594777-7.687173 99.594777-7.711083 99.594777-7.734994C99.594777-7.902366 99.463271-8.033873 99.283943-8.033873C98.997019-8.033873 98.829647-7.79477 98.793781-7.47198Z"/>
<path d="M102.377228-2.940971C102.377228-3.634371 102.15008-4.148443 101.659918-4.148443C101.277353-4.148443 101.08607-3.837609 101.08607-3.574595S101.265397-2.988792 101.671873-2.988792C101.82729-2.988792 101.958797-3.036613 102.066394-3.144209C102.090304-3.16812 102.102259-3.16812 102.114214-3.16812C102.138125-3.16812 102.138125-3.000747 102.138125-2.940971C102.138125-2.546451 102.066394-1.769365 101.372994-.992279C101.241487-.848817 101.241487-.824907 101.241487-.800996C101.241487-.74122 101.301263-.681445 101.361039-.681445C101.45668-.681445 102.377228-1.566127 102.377228-2.940971Z"/>
<path d="M111.303579-10.9868C111.315534-11.03462 111.339444-11.106351 111.339444-11.166127C111.339444-11.285679 111.219892-11.285679 111.195982-11.285679C111.184027-11.285679 110.598224-11.237858 110.538448-11.225903C110.33521-11.213948 110.155882-11.190037 109.940689-11.178082C109.64181-11.154172 109.558124-11.142217 109.558124-10.927024C109.558124-10.807472 109.653765-10.807472 109.821138-10.807472C110.406941-10.807472 110.418896-10.699875 110.418896-10.580324C110.418896-10.508593 110.394986-10.412951 110.383031-10.377086L109.653765-7.47198C109.522259-7.782814 109.199469-8.261021 108.5778-8.261021C107.226866-8.261021 105.768336-6.515567 105.768336-4.746202C105.768336-3.56264 106.461736-2.86924 107.274687-2.86924C107.932221-2.86924 108.494114-3.383313 108.828859-3.777833C108.948411-3.072478 109.510303-2.86924 109.868958-2.86924S110.514538-3.084433 110.729731-3.514819C110.921013-3.921295 111.088386-4.65056 111.088386-4.698381C111.088386-4.758157 111.040565-4.805978 110.968834-4.805978C110.861237-4.805978 110.849282-4.746202 110.801462-4.566874C110.622134-3.861519 110.394986-3.108344 109.904824-3.108344C109.558124-3.108344 109.534214-3.419178 109.534214-3.658281C109.534214-3.706102 109.534214-3.957161 109.6179-4.291905L111.303579-10.9868ZM108.888635-4.411457C108.828859-4.208219 108.828859-4.184309 108.661486-3.957161C108.398473-3.622416 107.872445-3.108344 107.310552-3.108344C106.820391-3.108344 106.545422-3.550685 106.545422-4.25604C106.545422-4.913574 106.916032-6.252553 107.14318-6.75467C107.549656-7.591532 108.111549-8.021918 108.5778-8.021918C109.366841-8.021918 109.522259-7.041594 109.522259-6.945953C109.522259-6.933998 109.486393-6.77858 109.474438-6.75467L108.888635-4.411457Z"/>
<path d="M113.484902-11.702811C113.524752-11.806423 113.556633-11.862213 113.556633-11.941914C113.556633-12.204928 113.317529-12.380271 113.094366-12.380271C112.775562-12.380271 112.687891-12.101317 112.65601-11.989735L111.643806-8.554617C111.611925-8.458975 111.611925-8.435065 111.611925-8.427095C111.611925-8.355364 111.659746-8.339424 111.739447-8.315513C111.882909-8.251753 111.898849-8.251753 111.91479-8.251753C111.9387-8.251753 111.986521-8.251753 112.042311-8.387244L113.484902-11.702811Z"/>
<path d="M116.499156-2.940971C116.499156-3.634371 116.272007-4.148443 115.781845-4.148443C115.39928-4.148443 115.207997-3.837609 115.207997-3.574595S115.387325-2.988792 115.793801-2.988792C115.949218-2.988792 116.080725-3.036613 116.188321-3.144209C116.212232-3.16812 116.224187-3.16812 116.236142-3.16812C116.260052-3.16812 116.260052-3.000747 116.260052-2.940971C116.260052-2.546451 116.188321-1.769365 115.494921-.992279C115.363415-.848817 115.363415-.824907 115.363415-.800996C115.363415-.74122 115.42319-.681445 115.482966-.681445C115.578608-.681445 116.499156-1.566127 116.499156-2.940971Z"/>
<path d="M126.812306-9.827148C127.218781-10.472727 127.589392-10.759651 128.199105-10.807472C128.318657-10.819427 128.414298-10.819427 128.414298-11.03462C128.414298-11.082441 128.390388-11.154172 128.282791-11.154172C128.067598-11.154172 127.553526-11.130262 127.338333-11.130262C126.991633-11.130262 126.632978-11.154172 126.298233-11.154172C126.202592-11.154172 126.08304-11.154172 126.08304-10.927024C126.08304-10.819427 126.190637-10.807472 126.238458-10.807472C126.680799-10.771606 126.72862-10.556413 126.72862-10.412951C126.72862-10.233624 126.561247-9.958655 126.549292-9.9467L122.795369-3.993026L121.958507-10.436862C121.958507-10.783562 122.580176-10.807472 122.711683-10.807472C122.891011-10.807472 122.998607-10.807472 122.998607-11.03462C122.998607-11.154172 122.8671-11.154172 122.831235-11.154172C122.627997-11.154172 122.388893-11.130262 122.185656-11.130262H121.516166C120.643439-11.130262 120.284784-11.154172 120.272829-11.154172C120.201098-11.154172 120.057636-11.154172 120.057636-10.938979C120.057636-10.807472 120.141322-10.807472 120.332605-10.807472C120.942318-10.807472 120.978184-10.699875 121.014049-10.400996L121.970463-3.024658C122.006328-2.773599 122.006328-2.737733 122.1737-2.737733C122.317162-2.737733 122.376938-2.773599 122.49649-2.964882L126.812306-9.827148Z"/>
<path d="M130.949815-11.702811C130.989666-11.806423 131.021546-11.862213 131.021546-11.941914C131.021546-12.204928 130.782443-12.380271 130.55928-12.380271C130.240475-12.380271 130.152804-12.101317 130.120924-11.989735L129.108719-8.554617C129.076839-8.458975 129.076839-8.435065 129.076839-8.427095C129.076839-8.355364 129.12466-8.339424 129.204361-8.315513C129.347823-8.251753 129.363763-8.251753 129.379703-8.251753C129.403614-8.251753 129.451434-8.251753 129.507225-8.387244L130.949815-11.702811Z"/>
<path d="M135.004169-5.965629C135.004169-6.874222 134.884617-8.356663 134.215128-9.743462C133.509773-11.178082 132.529449-11.955168 132.397942-11.955168C132.350121-11.955168 132.290346-11.931258 132.290346-11.859527C132.290346-11.823661 132.290346-11.799751 132.493583-11.596513C133.6891-10.389041 134.35859-8.416438 134.35859-5.977584C134.35859-3.658281 133.796697-1.661768 132.409897-.251059C132.290346-.143462 132.290346-.119552 132.290346-.083686C132.290346-.011955 132.350121 .011955 132.397942 .011955C132.553359 .011955 133.533683-.848817 134.119486-2.020423C134.7292-3.239851 135.004169-4.531009 135.004169-5.965629Z"/>
<path d="M160.79825-14.603726C160.862011-14.8508 160.917802-14.86674 160.973592-14.87471C161.029383-14.89065 161.276457-14.89065 161.427889-14.89065C162.20896-14.89065 162.519794-14.8508 162.519794-14.276952C162.519794-14.197251 162.511824-14.14146 162.503854-14.069729L162.440093-13.551671V-13.511821C162.440093-13.503851 162.448063-13.47994 162.440093-13.47197C162.432123-13.45603 162.416183-13.344449 162.583555-13.344449C162.719047-13.344449 162.727017-13.400239 162.742957-13.511821L162.96612-14.930501L162.974091-15.042082C162.974091-15.153664 162.870479-15.153664 162.750927-15.153664H158.407216C158.231874-15.153664 158.207964-15.153664 158.160143-15.010202L157.673966-13.591522C157.634115-13.487911 157.634115-13.47197 157.634115-13.45603C157.634115-13.344449 157.745697-13.344449 157.785548-13.344449C157.817428-13.344449 157.865249-13.344449 157.897129-13.368359C157.92104-13.384299 157.92104-13.400239 157.992771-13.615432C158.399246-14.763129 158.63835-14.89065 159.706345-14.89065C159.865747-14.89065 160.065-14.89065 160.184551-14.87471C160.176581-14.763129 160.176581-14.739218 160.144701-14.619666L159.100616-10.435358C159.020915-10.116553 158.973094-10.028882 158.247814-10.028882H158.144203C158.000741-10.028882 157.905099-10.028882 157.905099-9.87745C157.905099-9.845569 157.92104-9.765868 158.040591-9.765868C158.343455-9.765868 158.65429-9.789779 158.965124-9.789779H159.546942C159.865747-9.789779 160.200492-9.765868 160.511326-9.765868C160.567117-9.765868 160.678698-9.765868 160.678698-9.9173C160.678698-10.028882 160.583057-10.028882 160.455535-10.028882H160.351924C160.216432-10.028882 160.08891-10.036852 159.953418-10.044822C159.762135-10.068732 159.706345-10.084673 159.706345-10.188284C159.706345-10.236105 159.730255-10.315806 159.730255-10.323776L160.79825-14.603726Z"/>
<path d="M164.289612-10.849803C164.217881-10.58679 164.050509-9.90933 163.548392-9.90933C163.373049-9.90933 163.237558-9.981061 163.189737-10.020912C163.349139-10.084673 163.468691-10.228135 163.468691-10.403477C163.468691-10.63461 163.277408-10.674461 163.189737-10.674461C162.958604-10.674461 162.783261-10.475208 162.783261-10.236105C162.783261-9.853539 163.189737-9.686167 163.540422-9.686167C163.899077-9.686167 164.162091-9.90933 164.353373-10.188284C164.488865-9.89339 164.791729-9.686167 165.174295-9.686167C166.003186-9.686167 166.481393-10.674461 166.481393-10.913564C166.481393-11.009206 166.361841-11.009206 166.329961-11.009206C166.22635-11.009206 166.194469-10.985295 166.170559-10.905594C165.915515-10.084673 165.421368-9.90933 165.190235-9.90933C164.943162-9.90933 164.775789-10.084673 164.775789-10.411447C164.775789-10.58679 164.87143-10.969355 164.943162-11.240339C165.022863-11.591024 165.110534-11.933739 165.198205-12.276454C165.325727-12.7706 165.596711-13.057525 165.899575-13.057525C166.106798-13.057525 166.24229-12.953913 166.25823-12.945943C166.186499-12.922033 165.979276-12.794511 165.979276-12.563378C165.979276-12.340214 166.154619-12.292394 166.25823-12.292394C166.409662-12.292394 166.656736-12.403975 166.656736-12.73075C166.656736-13.169106 166.170559-13.280688 165.907545-13.280688C165.58077-13.280688 165.309787-13.097375 165.094594-12.778571C164.998952-12.969853 164.759849-13.280688 164.273672-13.280688C163.43681-13.280688 162.966574-12.276454 162.966574-12.061261C162.966574-11.957649 163.070185-11.957649 163.118006-11.957649C163.221617-11.957649 163.245528-11.981559 163.269438-12.061261C163.516511-12.850302 163.994718-13.057525 164.257732-13.057525S164.672178-12.850302 164.672178-12.555407C164.672178-12.396005 164.632327-12.228633 164.544656-11.885918L164.289612-10.849803Z"/>
<path d="M169.11671-15.388119C169.158553-15.477782 169.170508-15.543536 169.170508-15.579401C169.170508-15.764706 169.003136-15.920124 168.805876-15.920124C168.566772-15.920124 168.495041-15.710908 168.471131-15.627222L167.634269-13.068816C167.622314-13.03295 167.604381-12.98513 167.604381-12.961219C167.604381-12.8596 167.843485-12.81178 167.849462-12.81178C167.90326-12.81178 167.927171-12.865578 167.951081-12.913399L169.11671-15.388119Z"/>
<path d="M147.384422-5.738481C147.58766-5.738481 147.802853-5.738481 147.802853-5.977584S147.58766-6.216687 147.384422-6.216687H140.916676C140.713438-6.216687 140.498245-6.216687 140.498245-5.977584S140.713438-5.738481 140.916676-5.738481H147.384422Z"/>
<path d="M152.388773-5.738481C152.592011-5.738481 152.807204-5.738481 152.807204-5.977584S152.592011-6.216687 152.388773-6.216687H145.921027C145.717789-6.216687 145.502596-6.216687 145.502596-5.977584S145.717789-5.738481 145.921027-5.738481H152.388773Z"/>
<path d="M159.030599-5.738481C159.233837-5.738481 159.44903-5.738481 159.44903-5.977584S159.233837-6.216687 159.030599-6.216687H152.562853C152.359615-6.216687 152.144422-6.216687 152.144422-5.977584S152.359615-5.738481 152.562853-5.738481H159.030599Z"/>
<path d="M165.672425-5.738481C165.875663-5.738481 166.090856-5.738481 166.090856-5.977584S165.875663-6.216687 165.672425-6.216687H159.204679C159.001441-6.216687 158.786248-6.216687 158.786248-5.977584S159.001441-5.738481 159.204679-5.738481H165.672425Z"/>
<path d="M172.314251-5.738481C172.517489-5.738481 172.732682-5.738481 172.732682-5.977584S172.517489-6.216687 172.314251-6.216687H165.846505C165.643267-6.216687 165.428074-6.216687 165.428074-5.977584S165.643267-5.738481 165.846505-5.738481H172.314251Z"/>
<path d="M178.956077-5.738481C179.159315-5.738481 179.374508-5.738481 179.374508-5.977584S179.159315-6.216687 178.956077-6.216687H172.488331C172.285093-6.216687 172.0699-6.216687 172.0699-5.977584S172.285093-5.738481 172.488331-5.738481H178.956077Z"/>
<path d="M186.05243-5.738481C185.394896-5.236364 185.072106-4.746202 184.976465-4.590785C184.438482-3.765878 184.342841-3.012702 184.342841-3.000747C184.342841-2.857285 184.486303-2.857285 184.581944-2.857285C184.785182-2.857285 184.797137-2.881196 184.844958-3.096389C185.119927-4.267995 185.825282-5.272229 187.176216-5.822167C187.319678-5.869988 187.355543-5.893898 187.355543-5.977584S187.283812-6.097136 187.259902-6.109091C186.733874-6.312329 185.287299-6.910087 184.833003-8.918555C184.797137-9.062017 184.785182-9.097883 184.581944-9.097883C184.486303-9.097883 184.342841-9.097883 184.342841-8.954421C184.342841-8.930511 184.450437-8.177335 184.952554-7.376339C185.191658-7.017684 185.538358-6.599253 186.05243-6.216687H177.16974C176.954547-6.216687 176.739354-6.216687 176.739354-5.977584S176.954547-5.738481 177.16974-5.738481H186.05243Z"/>
<path d="M195.243277-.083686C195.243277-.119552 195.243277-.143462 195.040039-.3467C193.844522-1.554172 193.175033-3.526775 193.175033-5.965629C193.175033-8.284932 193.736926-10.281445 195.123725-11.692154C195.243277-11.799751 195.243277-11.823661 195.243277-11.859527C195.243277-11.931258 195.183501-11.955168 195.135681-11.955168C194.980263-11.955168 193.99994-11.094396 193.414136-9.92279C192.804423-8.715318 192.529454-7.436115 192.529454-5.965629C192.529454-4.901619 192.696826-3.478954 193.318495-2.199751C194.02385-.765131 195.004174 .011955 195.135681 .011955C195.183501 .011955 195.243277-.011955 195.243277-.083686Z"/>
<path d="M201.242178-7.79477C201.481282-7.79477 201.576923-7.79477 201.576923-8.021918C201.576923-8.141469 201.481282-8.141469 201.266089-8.141469H200.29772C200.524868-9.372852 200.692241-10.221669 200.787882-10.604234C200.859613-10.891158 201.110671-11.166127 201.421506-11.166127C201.672564-11.166127 201.923623-11.058531 202.043175-10.950934C201.576923-10.903113 201.433461-10.556413 201.433461-10.353176C201.433461-10.114072 201.612788-9.97061 201.839937-9.97061C202.07904-9.97061 202.437695-10.173848 202.437695-10.628144C202.437695-11.130262 201.935578-11.40523 201.409551-11.40523C200.895478-11.40523 200.393361-11.022665 200.154258-10.556413C199.939065-10.137983 199.819513-9.707597 199.544544-8.141469H198.743548C198.5164-8.141469 198.396848-8.141469 198.396848-7.926276C198.396848-7.79477 198.468579-7.79477 198.707683-7.79477H199.472813C199.25762-6.682939 198.767458-3.981071 198.49249-2.701868C198.289252-1.661768 198.109924-.789041 197.512166-.789041C197.4763-.789041 197.1296-.789041 196.914407-1.016189C197.524121-1.06401 197.524121-1.590037 197.524121-1.601993C197.524121-1.841096 197.344793-1.984558 197.117645-1.984558C196.878542-1.984558 196.519887-1.78132 196.519887-1.327024C196.519887-.812951 197.045914-.549938 197.512166-.549938C198.731593-.549938 199.23371-2.737733 199.365217-3.335492C199.58041-4.25604 200.166213-7.436115 200.225989-7.79477H201.242178Z"/>
<path d="M204.637535-2.940971C204.637535-3.634371 204.410387-4.148443 203.920225-4.148443C203.53766-4.148443 203.346377-3.837609 203.346377-3.574595S203.525705-2.988792 203.93218-2.988792C204.087598-2.988792 204.219105-3.036613 204.326701-3.144209C204.350611-3.16812 204.362567-3.16812 204.374522-3.16812C204.398432-3.16812 204.398432-3.000747 204.398432-2.940971C204.398432-2.546451 204.326701-1.769365 203.633301-.992279C203.501794-.848817 203.501794-.824907 203.501794-.800996C203.501794-.74122 203.56157-.681445 203.621346-.681445C203.716987-.681445 204.637535-1.566127 204.637535-2.940971Z"/>
<path d="M213.563886-10.9868C213.575841-11.03462 213.599752-11.106351 213.599752-11.166127C213.599752-11.285679 213.4802-11.285679 213.45629-11.285679C213.444334-11.285679 212.858531-11.237858 212.798755-11.225903C212.595517-11.213948 212.41619-11.190037 212.200997-11.178082C211.902118-11.154172 211.818431-11.142217 211.818431-10.927024C211.818431-10.807472 211.914073-10.807472 212.081445-10.807472C212.667248-10.807472 212.679204-10.699875 212.679204-10.580324C212.679204-10.508593 212.655293-10.412951 212.643338-10.377086L211.914073-7.47198C211.782566-7.782814 211.459776-8.261021 210.838108-8.261021C209.487174-8.261021 208.028643-6.515567 208.028643-4.746202C208.028643-3.56264 208.722043-2.86924 209.534994-2.86924C210.192529-2.86924 210.754422-3.383313 211.089166-3.777833C211.208718-3.072478 211.770611-2.86924 212.129266-2.86924S212.774845-3.084433 212.990038-3.514819C213.181321-3.921295 213.348693-4.65056 213.348693-4.698381C213.348693-4.758157 213.300872-4.805978 213.229141-4.805978C213.121545-4.805978 213.10959-4.746202 213.061769-4.566874C212.882441-3.861519 212.655293-3.108344 212.165131-3.108344C211.818431-3.108344 211.794521-3.419178 211.794521-3.658281C211.794521-3.706102 211.794521-3.957161 211.878207-4.291905L213.563886-10.9868ZM211.148942-4.411457C211.089166-4.208219 211.089166-4.184309 210.921794-3.957161C210.65878-3.622416 210.132753-3.108344 209.57086-3.108344C209.080698-3.108344 208.805729-3.550685 208.805729-4.25604C208.805729-4.913574 209.176339-6.252553 209.403488-6.75467C209.809963-7.591532 210.371856-8.021918 210.838108-8.021918C211.627149-8.021918 211.782566-7.041594 211.782566-6.945953C211.782566-6.933998 211.7467-6.77858 211.734745-6.75467L211.148942-4.411457Z"/>
<path d="M215.964387-2.940971C215.964387-3.634371 215.737239-4.148443 215.247077-4.148443C214.864512-4.148443 214.673229-3.837609 214.673229-3.574595S214.852557-2.988792 215.259032-2.988792C215.41445-2.988792 215.545956-3.036613 215.653553-3.144209C215.677463-3.16812 215.689418-3.16812 215.701374-3.16812C215.725284-3.16812 215.725284-3.000747 215.725284-2.940971C215.725284-2.546451 215.653553-1.769365 214.960153-.992279C214.828646-.848817 214.828646-.824907 214.828646-.800996C214.828646-.74122 214.888422-.681445 214.948198-.681445C215.043839-.681445 215.964387-1.566127 215.964387-2.940971Z"/>
<path d="M226.277537-9.827148C226.684013-10.472727 227.054623-10.759651 227.664337-10.807472C227.783889-10.819427 227.87953-10.819427 227.87953-11.03462C227.87953-11.082441 227.85562-11.154172 227.748023-11.154172C227.53283-11.154172 227.018758-11.130262 226.803565-11.130262C226.456865-11.130262 226.09821-11.154172 225.763465-11.154172C225.667824-11.154172 225.548272-11.154172 225.548272-10.927024C225.548272-10.819427 225.655869-10.807472 225.703689-10.807472C226.146031-10.771606 226.193851-10.556413 226.193851-10.412951C226.193851-10.233624 226.026479-9.958655 226.014524-9.9467L222.260601-3.993026L221.423739-10.436862C221.423739-10.783562 222.045408-10.807472 222.176915-10.807472C222.356242-10.807472 222.463839-10.807472 222.463839-11.03462C222.463839-11.154172 222.332332-11.154172 222.296466-11.154172C222.093229-11.154172 221.854125-11.130262 221.650887-11.130262H220.981398C220.108671-11.130262 219.750016-11.154172 219.73806-11.154172C219.666329-11.154172 219.522867-11.154172 219.522867-10.938979C219.522867-10.807472 219.606554-10.807472 219.797836-10.807472C220.40755-10.807472 220.443415-10.699875 220.479281-10.400996L221.435694-3.024658C221.47156-2.773599 221.47156-2.737733 221.638932-2.737733C221.782394-2.737733 221.84217-2.773599 221.961722-2.964882L226.277537-9.827148Z"/>
<path d="M231.674325-5.965629C231.674325-6.874222 231.554773-8.356663 230.885284-9.743462C230.179929-11.178082 229.199605-11.955168 229.068098-11.955168C229.020277-11.955168 228.960502-11.931258 228.960502-11.859527C228.960502-11.823661 228.960502-11.799751 229.163739-11.596513C230.359256-10.389041 231.028746-8.416438 231.028746-5.977584C231.028746-3.658281 230.466853-1.661768 229.080053-.251059C228.960502-.143462 228.960502-.119552 228.960502-.083686C228.960502-.011955 229.020277 .011955 229.068098 .011955C229.223515 .011955 230.203839-.848817 230.789642-2.020423C231.399356-3.239851 231.674325-4.531009 231.674325-5.965629Z"/>
<path d="M257.468406-14.603726C257.532167-14.8508 257.587958-14.86674 257.643748-14.87471C257.699539-14.89065 257.946613-14.89065 258.098045-14.89065C258.879116-14.89065 259.18995-14.8508 259.18995-14.276952C259.18995-14.197251 259.18198-14.14146 259.17401-14.069729L259.110249-13.551671V-13.511821C259.110249-13.503851 259.118219-13.47994 259.110249-13.47197C259.102279-13.45603 259.086339-13.344449 259.253711-13.344449C259.389203-13.344449 259.397173-13.400239 259.413113-13.511821L259.636276-14.930501L259.644247-15.042082C259.644247-15.153664 259.540635-15.153664 259.421083-15.153664H255.077372C254.90203-15.153664 254.87812-15.153664 254.830299-15.010202L254.344122-13.591522C254.304271-13.487911 254.304271-13.47197 254.304271-13.45603C254.304271-13.344449 254.415853-13.344449 254.455704-13.344449C254.487584-13.344449 254.535405-13.344449 254.567285-13.368359C254.591195-13.384299 254.591195-13.400239 254.662927-13.615432C255.069402-14.763129 255.308506-14.89065 256.376501-14.89065C256.535903-14.89065 256.735156-14.89065 256.854707-14.87471C256.846737-14.763129 256.846737-14.739218 256.814857-14.619666L255.770772-10.435358C255.691071-10.116553 255.64325-10.028882 254.91797-10.028882H254.814359C254.670897-10.028882 254.575255-10.028882 254.575255-9.87745C254.575255-9.845569 254.591195-9.765868 254.710747-9.765868C255.013611-9.765868 255.324446-9.789779 255.63528-9.789779H256.217098C256.535903-9.789779 256.870648-9.765868 257.181482-9.765868C257.237273-9.765868 257.348854-9.765868 257.348854-9.9173C257.348854-10.028882 257.253213-10.028882 257.125691-10.028882H257.02208C256.886588-10.028882 256.759066-10.036852 256.623574-10.044822C256.432291-10.068732 256.376501-10.084673 256.376501-10.188284C256.376501-10.236105 256.400411-10.315806 256.400411-10.323776L257.468406-14.603726Z"/>
<path d="M260.959768-10.849803C260.888037-10.58679 260.720665-9.90933 260.218548-9.90933C260.043205-9.90933 259.907714-9.981061 259.859893-10.020912C260.019295-10.084673 260.138847-10.228135 260.138847-10.403477C260.138847-10.63461 259.947564-10.674461 259.859893-10.674461C259.62876-10.674461 259.453417-10.475208 259.453417-10.236105C259.453417-9.853539 259.859893-9.686167 260.210578-9.686167C260.569233-9.686167 260.832247-9.90933 261.023529-10.188284C261.159021-9.89339 261.461885-9.686167 261.844451-9.686167C262.673342-9.686167 263.151549-10.674461 263.151549-10.913564C263.151549-11.009206 263.031997-11.009206 263.000117-11.009206C262.896506-11.009206 262.864625-10.985295 262.840715-10.905594C262.585671-10.084673 262.091524-9.90933 261.860391-9.90933C261.613317-9.90933 261.445945-10.084673 261.445945-10.411447C261.445945-10.58679 261.541586-10.969355 261.613317-11.240339C261.693019-11.591024 261.78069-11.933739 261.868361-12.276454C261.995883-12.7706 262.266867-13.057525 262.569731-13.057525C262.776954-13.057525 262.912446-12.953913 262.928386-12.945943C262.856655-12.922033 262.649432-12.794511 262.649432-12.563378C262.649432-12.340214 262.824775-12.292394 262.928386-12.292394C263.079818-12.292394 263.326892-12.403975 263.326892-12.73075C263.326892-13.169106 262.840715-13.280688 262.577701-13.280688C262.250926-13.280688 261.979943-13.097375 261.76475-12.778571C261.669108-12.969853 261.430005-13.280688 260.943828-13.280688C260.106966-13.280688 259.63673-12.276454 259.63673-12.061261C259.63673-11.957649 259.740341-11.957649 259.788162-11.957649C259.891773-11.957649 259.915684-11.981559 259.939594-12.061261C260.186667-12.850302 260.664874-13.057525 260.927888-13.057525S261.342334-12.850302 261.342334-12.555407C261.342334-12.396005 261.302483-12.228633 261.214812-11.885918L260.959768-10.849803Z"/>
<path d="M244.054578-5.738481C244.257816-5.738481 244.473009-5.738481 244.473009-5.977584S244.257816-6.216687 244.054578-6.216687H237.586832C237.383594-6.216687 237.168401-6.216687 237.168401-5.977584S237.383594-5.738481 237.586832-5.738481H244.054578Z"/>
<path d="M247.716733-5.738481C247.919971-5.738481 248.135164-5.738481 248.135164-5.977584S247.919971-6.216687 247.716733-6.216687H241.248987C241.045749-6.216687 240.830556-6.216687 240.830556-5.977584S241.045749-5.738481 241.248987-5.738481H247.716733Z"/>
<path d="M254.358559-5.738481C254.561797-5.738481 254.77699-5.738481 254.77699-5.977584S254.561797-6.216687 254.358559-6.216687H247.890813C247.687575-6.216687 247.472382-6.216687 247.472382-5.977584S247.687575-5.738481 247.890813-5.738481H254.358559Z"/>
<path d="M261.000385-5.738481C261.203623-5.738481 261.418816-5.738481 261.418816-5.977584S261.203623-6.216687 261.000385-6.216687H254.532639C254.329401-6.216687 254.114208-6.216687 254.114208-5.977584S254.329401-5.738481 254.532639-5.738481H261.000385Z"/>
<path d="M267.642211-5.738481C267.845449-5.738481 268.060642-5.738481 268.060642-5.977584S267.845449-6.216687 267.642211-6.216687H261.174465C260.971227-6.216687 260.756034-6.216687 260.756034-5.977584S260.971227-5.738481 261.174465-5.738481H267.642211Z"/>
<path d="M274.284037-5.738481C274.487275-5.738481 274.702468-5.738481 274.702468-5.977584S274.487275-6.216687 274.284037-6.216687H267.816291C267.613053-6.216687 267.39786-6.216687 267.39786-5.977584S267.613053-5.738481 267.816291-5.738481H274.284037Z"/>
<path d="M280.038209-5.738481C279.380675-5.236364 279.057886-4.746202 278.962244-4.590785C278.424262-3.765878 278.32862-3.012702 278.32862-3.000747C278.32862-2.857285 278.472082-2.857285 278.567724-2.857285C278.770962-2.857285 278.782917-2.881196 278.830738-3.096389C279.105706-4.267995 279.811061-5.272229 281.161995-5.822167C281.305457-5.869988 281.341323-5.893898 281.341323-5.977584S281.269592-6.097136 281.245681-6.109091C280.719654-6.312329 279.273079-6.910087 278.818782-8.918555C278.782917-9.062017 278.770962-9.097883 278.567724-9.097883C278.472082-9.097883 278.32862-9.097883 278.32862-8.954421C278.32862-8.930511 278.436217-8.177335 278.938334-7.376339C279.177437-7.017684 279.524137-6.599253 280.038209-6.216687H271.15552C270.940327-6.216687 270.725134-6.216687 270.725134-5.977584S270.940327-5.738481 271.15552-5.738481H280.038209Z"/>
<path d="M287.543378-3.56264C287.543378-3.90934 287.256454-4.148443 286.96953-4.148443C286.62283-4.148443 286.383727-3.861519 286.383727-3.574595C286.383727-3.227895 286.670651-2.988792 286.957575-2.988792C287.304275-2.988792 287.543378-3.275716 287.543378-3.56264Z"/>
<path d="M292.787537-3.56264C292.787537-3.90934 292.500613-4.148443 292.213689-4.148443C291.866989-4.148443 291.627886-3.861519 291.627886-3.574595C291.627886-3.227895 291.91481-2.988792 292.201734-2.988792C292.548434-2.988792 292.787537-3.275716 292.787537-3.56264Z"/>
<path d="M298.031696-3.56264C298.031696-3.90934 297.744772-4.148443 297.457848-4.148443C297.111148-4.148443 296.872045-3.861519 296.872045-3.574595C296.872045-3.227895 297.158969-2.988792 297.445893-2.988792C297.792592-2.988792 298.031696-3.275716 298.031696-3.56264Z"/>
</g>
</svg>
</center>
<p>In this case there is no fixed base case for <code>f</code>; instead, the guarantee required by <code>f</code> is that <code>g</code> has verified <code>d</code>; as always, this guarantee must be derivable from information present in <code>Tx</code> only.</p>
<p>We can do this by defining a minting policy <code>Link<sub>g, f</sub></code>, which allows minting in a transaction <code>Tx'</code> if</p>
<ul>
<li><code>Tx'</code> spends an input to <code>g</code></li>
<li>The only <code>Link<sub>g, f</sub></code> tokens in the outputs of <code>Tx'</code> are locked in outputs to <code>f</code>.</li>
</ul>
<p>Scripts <code>g</code> and <code>f</code> then have the following responsibilities:</p>
<ul>
<li><code>g</code> must verify the datums in all outputs to <code>f</code> in <code>Tx'</code>.</li>
<li><code>f</code> must check for the presence of the <code>Link<sub>g, f</sub></code> token in the input it is verifying. It must also check that the only <em>outputs</em> of the <code>Link<sub>g, f</sub></code> token in transaction <code>Tx</code> are back to <code>f</code>.</li>
</ul>
<p>These tokens are not NFTs, and do not need to be. We just need to be make sure the tokens never ``leak’’ (which the rules above do ensure).</p>
<p>Once more we have to solve the problem of mutual dependencies between <code>f</code> and <code>Link<sub>g, f</sub></code> and between <code>g</code> and <code>Link<sub>g, f</sub></code>. First, we can assume without loss of generality that <code>g</code> is stateful; after all, if it wasn’t, then this setup provides no benefits over a setup with a fixed base case. We can therefore store the hash of <code>Link<sub>g, f</sub></code> in the state (datum) associated with <code>g</code>, and then rely on the <code>NFT<sub>o, g, (Link<sub>g, ; f</sub>, d’)</sub></code> to ensure that the hash is recorded correctly. We can use <code>g</code> to verify that the datum for <code>f</code> also records the correct hash of <code>Link<sub>g, f</sub></code>.</p>
<p>This also avoids any dependencies between <code>f</code> and <code>g</code> directly: <code>g</code> can identify outputs to <code>f</code> by looking for outputs that include a <code>Link<sub>g, f</sub></code> token, and <code>f</code> verifies that its inputs include that token.</p>
<h2 id="conclusions">Conclusions</h2>
<p>Stateful Plutus scripts can verify that the <em>evolution</em> of state happens according to the rules defined in the script, but cannot verify the <em>initial</em> state: they lack the context that would tell them when the base case applies.</p>
<p>Moreover, the lack of on-chain script hash computation (or, put another way, the strict stage separation between script parameters and the script datum) means that we must often include the hash of one script in the datum of another; these hashes cannot be verified at all, even if the script <em>could</em> know when a state should be initial.</p>
<p>Often the verification of these initial conditions are relegated to off-chain code instead, but this is unsatisfactory and dangerous. The same on-chain code could be interacted with by multiple off-chain applications; a single forgotten check in one of those off-chain applications could result in security vulnerabilities.</p>
<p>Stateful scripts often have an associated NFT, used to identify the current script output in a UTxO set. As it turns out, such NFTs are subject to their own unverified initial conditions. However, we showed that we can resolve all of these problems by defining an <code>NFT<sub>o, f, d</sub></code> which verifies that the NFT is locked in the script <code>f</code> immediately upon minting and that the initial datum is <code>d</code>. In addition, we saw that if the base case for one script <code>f</code> is another script <code>g</code>, we can use <code>NFT<sub>o, g, d</sub></code> to guarantee the base case for <code>g</code>, and a special token <code>Link<sub>g, f</sub></code> to verify the base case for <code>f</code>.</p>
<h5 id="footnotes">Footnotes</h5>
<section class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Data values as opposed to currency values.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref1">↩︎</a></p></li>
<li id="fn2"><p>Script hashes use BLAKE-224; the available on-chain hashing algorithms are SHA2-256, SHA3-256, and BLAKE-256.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref2">↩︎</a></p></li>
<li id="fn3"><p>Specifically, <code>f</code> would need enough information to be able to compute <code>blake<sub>224</sub>(serialise(π<sub>f</sub>))</code>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref3">↩︎</a></p></li>
<li id="fn4"><p>This can be useful off-chain, in order to figure out which output in the UTxO set corresponds to the current state of the contract we’re interacting with. It can also be useful on-chain, in case there could be multiple instances of <code>f</code> within a single transaction, and the script needs to figure out which output belongs to which input.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref4">↩︎</a></p></li>
<li id="fn5"><p>This latter check is unproblematic becauses scripts are told their own hash when they run.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref5">↩︎</a></p></li>
<li id="fn6"><p>It is true that the hash is carrying a lot of weight here; we are depending on that fixed size hash to encode a lot of information. However, this is no different from representing script outputs in the first place; we are comfortable with hashes representing <code>f<sub>x1, .., xN</sub></code>, in which case the hash is also encoding a lot of information: the definition of <code>f</code> as well as all parameters <code>x<sub>i</sub></code>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref6">↩︎</a></p></li>
<li id="fn7"><p>As we saw earlier, a script output contains (the hash of) a function <code>f<sub>x1, .., xN</sub></code>, and a datum <code>d</code>. When a script output is <em>spent</em>, the spending input additionally provides a <em>redeemer</em> value <code>r</code>; the actual code that is run is then <code>f<sub>x1, .., xN</sub>(d, r)</code>. In Plutus V1 it in fact not possible for the minting policy to check the redeemer value for other scripts, as this information is not present in the <code>ScriptContext</code>; this is resolved in V2.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref7">↩︎</a></p></li>
<li id="fn8"><p>We cannot use <code>NFT<sub>o, f, d</sub></code>: this <em>is</em> guaranteed to be locked in the script immediately but, unlike <code>NFT<sub>o</sub></code>, <em>still</em> depends on <code>f</code>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref8">↩︎</a></p></li>
<li id="fn9"><p><em>When</em> <code>π</code> tokens are minted, we could rely on <code>π</code> instead to verify that the right hash is recorded. However, this check will not happen until the first <code>π</code>-token is minted, and we wouldn’t know what happened before then.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref9">↩︎</a></p></li>
</ol>
</section></div>
    </content>
    <updated>2022-08-23T00:00:00Z</updated>
    <published>2022-08-23T00:00:00Z</published>
    <category term="plutus"/>
    <category term="blockchain"/>
    <category term="cardano"/>
    <author>
      <name>edsko, finley</name>
    </author>
    <source>
      <id>https://well-typed.com/blog/</id>
      <logo>https://well-typed.com/img/wtnlogoplain.svg</logo>
      <link href="https://well-typed.com/blog/rss2.xml" rel="self" type="application/rss+xml"/>
      <link href="https://well-typed.com/blog/" rel="alternate" type="text/html"/>
      <subtitle>Because Well-Typed Programs Don't Go Wrong</subtitle>
      <title>Well-Typed Blog</title>
      <updated>2022-09-08T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://haskell.org/ghc/blog/20220822-ghc-9.4.2-released.html</id>
    <link href="http://haskell.org/ghc/blog/20220822-ghc-9.4.2-released.html" rel="alternate" type="text/html"/>
    <title>GHC 9.4.2 released</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>GHC 9.4.2 released</h1>
<h4 class="text-muted">bgamari - 2022-08-22</h4>

<p>The GHC developers are happy to announce the availability of GHC 9.4.2. Binary distributions, source distributions, and documentation are available at <a href="https://downloads.haskell.org/ghc/9.4.2">downloads.haskell.org</a>.</p>
<p>This release is primarily a bugfix release addressing a few packaging issues found in 9.4.1. See the <a href="https://downloads.haskell.org/~ghc/9.4.2/docs/users_guide/9.4.2-notes.html">release notes</a> for a full accounting.</p>
<p>Note that, as GHC 9.4 is the first release series where the release artifacts are all generated by our new Hadrian build system, it is possible that there will be packaging issues. If you enounter trouble while using a binary distribution, please open a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">ticket</a>. Likewise, if you are a downstream packager, do consider migrating to <a href="https://gitlab.haskell.org/ghc/ghc/-/blob/e2520df3fffa0cf22fb19c5fb872832d11c07d35/hadrian">Hadrian</a> to run your build; the Hadrian build system can be built using <code>cabal-install</code>, <code>stack</code>, or the in-tree <a href="https://gitlab.haskell.org/ghc/ghc/-/blob/e2520df3fffa0cf22fb19c5fb872832d11c07d35/hadrian/bootstrap/README.md">bootstrap script</a>. See the accompanying <a href="https://www.haskell.org/ghc/blog/20220805-make-to-hadrian.html">blog post</a> for details on migrating packaging to Hadrian.</p>
<p>We would also like to emphasize that GHC 9.4 must be used in conjunction with Cabal-3.8 or later. This is particularly important for Windows users due to changes in GHCâ€™s Windows toolchain.</p>
<p>We would like to thank Microsoft Azure, GitHub, IOG, the Zw3rk stake pool, Well-Typed, Tweag I/O, Serokell, Equinix, SimSpace, Haskell Foundation, and other anonymous contributors whose on-going financial and in-kind support has facilitated GHC maintenance and release management over the years. Finally, this release would not have been possible without the hundreds of open-source contributors whose work comprise this release.</p>
<p>As always, do give this release a try and open a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">ticket</a> if you see anything amiss.</p>
<p>Happy Haskelling,</p>
<ul>
<li>Ben</li>
</ul></div>
    </summary>
    <updated>2022-08-22T00:00:00Z</updated>
    <published>2022-08-22T00:00:00Z</published>
    <author>
      <name>ghc-devs</name>
    </author>
    <source>
      <id>http://haskell.org/ghc</id>
      <link href="http://haskell.org/ghc" rel="alternate" type="text/html"/>
      <link href="http://haskell.org/ghc/rss.xml" rel="self" type="application/rss+xml"/>
      <title>GHC Developer blog</title>
      <updated>2022-08-22T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://magnus.therning.org/2022-08-21-patching-in-nix.html</id>
    <link href="https://magnus.therning.org/2022-08-21-patching-in-nix.html" rel="alternate" type="text/html"/>
    <title>Patching in Nix</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
Today I wanted to move one of my Haskell projects to GHC 9.2.4 and found that
<a href="https://hackage.haskell.org/package/envy-2.1.0.0">envy</a> didn't compile due to an upper bound on its dependency on <code>bytestring</code>, it
didn't allow <code>0.11.*</code>.
</p>

<p>
After creating a <a href="https://github.com/dmjio/envy/pull/49">PR</a> I decided I didn't want to wait for upstream so instead I
started looking into options for patching the source of a derivation of a
package from Hackage. In the past I've written about building <a href="https://magnus.therning.org/2020-11-30-1734-haskell__nix_and_using_packages_from_github.html">Haskell packages
from GitHub</a> and an older one were I used <code>callHackageDirect</code> to build <a href="https://magnus.therning.org/2020-02-02-000-my-ghcide-build-for-nix.html">Haskell
packages from Hackage</a>. I wasn't sure how to patch up a package from Hackage
though, but after a bit of digging through <a href="https://github.com/NixOS/nixpkgs/tree/master/pkgs/development/haskell-modules">haskell-modules</a> I found <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/haskell-modules/lib/default.nix#L194">appendPatch</a>.
</p>

<p>
The patch wasn't too hard to put together once I recalled the name of the patch
queue tool I used regularly years ago, <a href="https://savannah.nongnu.org/projects/quilt/">quilt</a>. I put the resulting patch in the
<code>nix</code> folder I already had, and the full override ended up looking like this
</p>

<div class="org-src-container">
<pre class="src src-nix">...
<span class="org-nix-attribute">hl</span> = haskell.lib;
<span class="org-nix-attribute">hsPkgs</span> = haskell.packages.ghc924;

<span class="org-nix-attribute">extraHsPkgs</span> = hsPkgs.override <span class="org-rainbow-delimiters-depth-1">{</span>
  <span class="org-nix-attribute">overrides</span> = self: super: <span class="org-rainbow-delimiters-depth-2">{</span>
    <span class="org-nix-attribute">envy</span> = hl.appendPatch <span class="org-rainbow-delimiters-depth-3">(</span>self.callHackageDirect <span class="org-rainbow-delimiters-depth-4">{</span>
      <span class="org-nix-attribute">pkg</span> = <span class="org-string">"envy"</span>;
      <span class="org-nix-attribute">ver</span> = <span class="org-string">"2.1.0.0"</span>;
      <span class="org-nix-attribute">sha256</span> =
        <span class="org-string">"sha256-yk8ARRyhTf9ImFJhDnVwaDiEQi3Rp4yBvswsWVVgurg="</span>;
    <span class="org-rainbow-delimiters-depth-4">}</span> <span class="org-rainbow-delimiters-depth-4">{</span> <span class="org-rainbow-delimiters-depth-4">}</span><span class="org-rainbow-delimiters-depth-3">)</span> <span class="org-nix-constant">./nix/envy-fix-deps.patch</span>;
  <span class="org-rainbow-delimiters-depth-2">}</span>;
<span class="org-rainbow-delimiters-depth-1">}</span>;
...
</pre>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-nix.html">nix</a></div></div>
    </summary>
    <updated>2022-08-21T20:05:00Z</updated>
    <published>2022-08-21T20:05:00Z</published>
    <category term="haskell"/>
    <category term="nix"/>
    <source>
      <id>https://magnus.therning.org/</id>
      <author>
        <name>Magnus Therning</name>
      </author>
      <link href="https://magnus.therning.org/" rel="alternate" type="text/html"/>
      <link href="https://magnus.therning.org/feed.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Magnus web site</subtitle>
      <title>Magnus web site</title>
      <updated>2022-08-21T20:35:13Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://www.parsonsmatt.org/2022/08/16/dynamic_exception_reporting_in_haskell.html</id>
    <link href="https://www.parsonsmatt.org/2022/08/16/dynamic_exception_reporting_in_haskell.html" rel="alternate" type="text/html"/>
    <title>Dynamic Exception Reporting in Haskell</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Exceptions kind of <em>suck</em> in Haskell.
You don’t get a stack trace.
They don’t show up in the types of functions.
They incorporate a subtyping mechanism that feels more like Java casting than typical Haskell programming.</p>

<p>A partial solution to the problem is <code class="language-plaintext highlighter-rouge">HasCallStack</code> - that gives us a <code class="language-plaintext highlighter-rouge">CallStack</code> which gets attached to <code class="language-plaintext highlighter-rouge">error</code> calls.
However, it <em>only</em> gets attached to <code class="language-plaintext highlighter-rouge">error</code> - so you can either have <code class="language-plaintext highlighter-rouge">String</code> error messages <em>and</em> a <code class="language-plaintext highlighter-rouge">CallStack</code>, or you can have richly typed exceptions with no location information.</p>

<p>A <code class="language-plaintext highlighter-rouge">CallStack</code> is a <em>static</em> piece of information about the code.
“You called <code class="language-plaintext highlighter-rouge">foo</code>, which called <code class="language-plaintext highlighter-rouge">bar</code>, which called <code class="language-plaintext highlighter-rouge">quuz</code>, which blew up with <code class="language-plaintext highlighter-rouge">Prelude.read: No parse</code>.”
The <code class="language-plaintext highlighter-rouge">CallStack</code> answers a single question: “Where did this go wrong?”</p>

<p>But there’s often <em>many</em> more interesting questions that simply “Where?”
You often want to know Who? When? How? in order to diagnose the big one: why did my code blow up?</p>

<p>In order to help answer these questions and develop robust exception reporting and diagnosing facilities, I created the <a href="https://hackage.haskell.org/package/annotated-exception"><code class="language-plaintext highlighter-rouge">annotated-exception</code></a> package.</p>

<h1 id="better-call-stacks">Better Call Stacks</h1>

<p><code class="language-plaintext highlighter-rouge">annotated-exception</code> provides a big improvement in static <code class="language-plaintext highlighter-rouge">CallStack</code> behavior.
To understand the improvement, let’s dig into the core problem:</p>

<h2 id="broken-chains-and-orphan-stacks">Broken Chains and Orphan Stacks</h2>

<p>If any function doesn’t include a <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint in your stack, then the chain is broken, and you only get the stack closest to the source.</p>

<p>Consider this trivial example, which has a few ways of blowing up:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="nn">GHC.Stack</span>

<span class="n">foo</span> <span class="o">::</span> <span class="kt">HasCallStack</span> <span class="o">=&gt;</span> <span class="kt">Int</span>
<span class="n">foo</span> <span class="o">=</span> <span class="n">error</span> <span class="s">"foo"</span>

<span class="n">bar</span> <span class="o">::</span> <span class="kt">HasCallStack</span> <span class="o">=&gt;</span> <span class="kt">Int</span>
<span class="n">bar</span> <span class="o">=</span> <span class="n">foo</span>

<span class="n">baz</span> <span class="o">::</span> <span class="kt">Int</span>
<span class="n">baz</span> <span class="o">=</span> <span class="n">foo</span>

<span class="n">quux</span> <span class="o">::</span> <span class="kt">HasCallStack</span> <span class="o">=&gt;</span> <span class="kt">Int</span>
<span class="n">quux</span> <span class="o">=</span> <span class="n">bar</span>

<span class="n">ohno</span> <span class="o">::</span> <span class="kt">HasCallStack</span> <span class="o">=&gt;</span> <span class="kt">Int</span>
<span class="n">ohno</span> <span class="o">=</span> <span class="n">baz</span>
</code></pre></div></div>

<p>If we call <code class="language-plaintext highlighter-rouge">foo</code> in GHCi, we get the immediate stack trace:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>λ&gt; foo
*** Exception: foo
CallStack (from HasCallStack):
  error, called at &lt;interactive&gt;:4:7 in interactive:Ghci1
    foo, called at &lt;interactive&gt;:14:1 in interactive:Ghci2
</code></pre></div></div>

<p>Since the <code class="language-plaintext highlighter-rouge">bar</code> term has the <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint, it will add it’s location to the mix:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>λ&gt; bar
*** Exception: foo
CallStack (from HasCallStack):
  error, called at &lt;interactive&gt;:4:7 in interactive:Ghci1
  foo, called at &lt;interactive&gt;:6:7 in interactive:Ghci1
  bar, called at &lt;interactive&gt;:15:1 in interactive:Ghci2
</code></pre></div></div>

<p>However, <code class="language-plaintext highlighter-rouge">baz</code> omits the constraint, which means that you won’t get that function in the stack:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>λ&gt; baz
*** Exception: foo
CallStack (from HasCallStack):
  error, called at &lt;interactive&gt;:4:7 in interactive:Ghci1
    foo, called at &lt;interactive&gt;:8:7 in interactive:Ghci1
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">quux</code> term has the call stack, so you get the whole story again:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>λ&gt; quux
*** Exception: foo
CallStack (from HasCallStack):
  error, called at &lt;interactive&gt;:4:7 in interactive:Ghci1
    foo, called at &lt;interactive&gt;:6:7 in interactive:Ghci1
      bar, called at &lt;interactive&gt;:10:8 in interactive:Ghci1
        quux, called at &lt;interactive&gt;:17:1 in interactive:Ghci2
</code></pre></div></div>

<p>But here’s the crappy thing - <code class="language-plaintext highlighter-rouge">ohno</code> <em>does</em> have a <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint.
You might expect that it would show up in the backtrace.
But it does not:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>λ&gt; ohno
*** Exception: foo
CallStack (from HasCallStack):
  error, called at &lt;interactive&gt;:4:7 in interactive:Ghci1
  foo, called at &lt;interactive&gt;:8:7 in interactive:Ghci1
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">CallStack</code> for <code class="language-plaintext highlighter-rouge">foo</code>, <code class="language-plaintext highlighter-rouge">baz</code>, and <code class="language-plaintext highlighter-rouge">ohno</code> are <em>indistinguishable</em>.
This makes diagnosing the failure difficult.</p>

<p>To avoid this problem, you must diligently place a <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint on <em>every function in your code base</em>.
This is pretty annoying! 
And if you have any library code that calls <em>your</em> code, the library’s lack of <code class="language-plaintext highlighter-rouge">HasCallStack</code> will break your chains for you.</p>

<h2 id="checkpoint-to-the-rescue"><code class="language-plaintext highlighter-rouge">checkpoint</code> to the rescue</h2>

<p><code class="language-plaintext highlighter-rouge">annotated-exception</code> introduces the idea of a <a href="https://hackage.haskell.org/package/annotated-exception-0.2.0.3/docs/src/Control.Exception.Annotated.html#checkpoint"><code class="language-plaintext highlighter-rouge">checkpoint</code></a>.
The simplest one is <code class="language-plaintext highlighter-rouge">checkpointCallStack</code>, which attaches the call-site to any exceptions thrown out of the action:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">checkpointCallStack</span>
    <span class="o">::</span> <span class="p">(</span><span class="kt">HasCallStack</span><span class="p">,</span> <span class="kt">MonadCatch</span> <span class="n">m</span><span class="p">)</span>
    <span class="o">=&gt;</span> <span class="n">m</span> <span class="n">a</span>
    <span class="o">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</code></pre></div></div>

<p>Let’s replicate the story from above.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="nn">Control.Exception.Annotated</span>

<span class="n">foo</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">foo</span> <span class="o">=</span> <span class="n">throw</span> <span class="p">(</span><span class="n">userError</span> <span class="s">"foo"</span><span class="p">)</span>

<span class="c1">-- in GHCi, evaluate:</span>
<span class="c1">-- λ&gt; foo</span>
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
         <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
             <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                 <span class="p">[</span> <span class="p">(</span> <span class="s">"throw"</span>
                   <span class="p">,</span> <span class="kt">SrcLoc</span> 
                         <span class="p">{</span> <span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"interactive"</span>
                         <span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Ghci1"</span>
                         <span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"&lt;interactive&gt;"</span>
                         <span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">4</span>
                         <span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">7</span>
                         <span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">4</span>
                         <span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">30</span>
                         <span class="p">}</span>
                   <span class="p">)</span>
                 <span class="p">]</span>
             <span class="p">]</span>
         <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="n">user</span> <span class="n">error</span> <span class="p">(</span><span class="n">foo</span><span class="p">)</span>
         <span class="p">}</span>
</code></pre></div></div>

<p>I’ve formatted the output to be a bit more legible.
Now, instead of a plain <code class="language-plaintext highlighter-rouge">IOError</code>, we’ve thrown an <code class="language-plaintext highlighter-rouge">AnnotatedException IOError</code>.
Inside of it, we have the <code class="language-plaintext highlighter-rouge">CallStack</code> from <code class="language-plaintext highlighter-rouge">throw</code>, which <em>knows where it was thrown from</em>.
That <code class="language-plaintext highlighter-rouge">CallStack</code> inside of the exception is reporting the <em>call-site</em> of <code class="language-plaintext highlighter-rouge">throw</code> - not the definition site!
This is true even though <code class="language-plaintext highlighter-rouge">foo</code> <em>does not have a <code class="language-plaintext highlighter-rouge">HasCallStack</code></em> constraint!</p>

<p>Let’s do <code class="language-plaintext highlighter-rouge">bar</code>.
We’ll do <code class="language-plaintext highlighter-rouge">HasCallStack</code> <em>and</em> our <code class="language-plaintext highlighter-rouge">checkpointCallStack</code>, just to see what happens:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="nn">GHC.Stack</span>

<span class="n">bar</span> <span class="o">::</span> <span class="kt">HasCallStack</span> <span class="o">=&gt;</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">bar</span> <span class="o">=</span> <span class="n">checkpointCallStack</span> <span class="n">foo</span>


<span class="c1">-- λ&gt; bar</span>
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
        <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
            <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">"throw"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span> <span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"interactive"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Ghci1"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"&lt;interactive&gt;"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">30</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">"checkpointCallStack"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"interactive"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Ghci2"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"&lt;interactive&gt;"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">15</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="n">srcLocEndLi</span> <span class="n">ne</span> <span class="o">=</span> <span class="mi">15</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">30</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">"bar"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"interactive"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Ghci3"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"&lt;interactive&gt;"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">17</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">17</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">4</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">]</span>
        <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="n">user</span> <span class="n">error</span> <span class="p">(</span><span class="n">foo</span><span class="p">)</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>We get the source location for <code class="language-plaintext highlighter-rouge">throw</code>, <code class="language-plaintext highlighter-rouge">checkpointCallStack</code>, and then the <em>use site</em> of <code class="language-plaintext highlighter-rouge">bar</code>.</p>

<p>Now, suppose we have our Problem Function again: <code class="language-plaintext highlighter-rouge">baz</code> doesn’t have a <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint <em>or</em> a <code class="language-plaintext highlighter-rouge">checkpointCallStack</code>.
And when we called it through <code class="language-plaintext highlighter-rouge">ohno</code>, we lost the stack, even though <code class="language-plaintext highlighter-rouge">ohno</code> had the <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">baz</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">baz</span> <span class="o">=</span> <span class="n">bar</span>

<span class="n">ohno</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">ohno</span> <span class="o">=</span> <span class="n">checkpointCallStack</span> <span class="n">baz</span>

<span class="c1">-- λ&gt; ohno</span>
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
        <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
            <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">"throw"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"interactive"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Ghci1"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"&lt;interactive&gt;"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">30</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">"checkpointCallStack"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"interactive"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Ghci2"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"&lt;interactive&gt;"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">15</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="n">srcLocEndLi</span> <span class="n">ne</span> <span class="o">=</span> <span class="mi">15</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">30</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">"bar"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"interactive"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Ghci3"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"&lt;interactive&gt;"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">21</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">21</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">10</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">"checkpointCallStack"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"interactive"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Ghci3"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"&lt;interactive&gt;"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">23</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">23</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">31</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">]</span>
        <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="n">user</span> <span class="n">error</span> <span class="p">(</span><span class="n">foo</span><span class="p">)</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>When we call <code class="language-plaintext highlighter-rouge">ohno</code>, we preserve all of the entries in the <code class="language-plaintext highlighter-rouge">CallStack</code>. 
<code class="language-plaintext highlighter-rouge">checkpointCallStack</code> in <code class="language-plaintext highlighter-rouge">ohno</code> adds itself to the <code class="language-plaintext highlighter-rouge">CallStack</code> that is present on the <code class="language-plaintext highlighter-rouge">AnnotatedException</code> itself, so it doesn’t need to worry about the stack being broken.
It’s perfectly capable of recording that history for you.</p>

<h2 id="aint-just-a-checkpoint---catch-me-later">Ain’t Just a Checkpoint - <code class="language-plaintext highlighter-rouge">catch</code> me later</h2>

<p>The type signature for <code class="language-plaintext highlighter-rouge">catch</code> in <code class="language-plaintext highlighter-rouge">annotated-exception</code> looks like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">catch</span>
    <span class="o">::</span> <span class="p">(</span><span class="kt">HasCallStack</span><span class="p">,</span> <span class="kt">Exception</span> <span class="n">e</span><span class="p">,</span> <span class="kt">MonadCatch</span> <span class="n">m</span><span class="p">)</span>
    <span class="o">=&gt;</span> <span class="n">m</span> <span class="n">a</span>
    <span class="o">-&gt;</span> <span class="p">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="n">m</span> <span class="n">a</span><span class="p">)</span>
    <span class="o">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</code></pre></div></div>

<p>That <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint is used to give you a <code class="language-plaintext highlighter-rouge">CallStack</code> entry for any time that you <code class="language-plaintext highlighter-rouge">catch</code> an exception.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">newtype</span> <span class="kt">MyException</span> <span class="o">=</span> <span class="kt">MyException</span> <span class="kt">String</span>
    <span class="kr">deriving</span> <span class="kt">Show</span>

<span class="kr">instance</span> <span class="kt">Exception</span> <span class="kt">MyException</span>

<span class="n">boom</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">boom</span> <span class="o">=</span> <span class="n">throw</span> <span class="p">(</span><span class="kt">MyException</span> <span class="s">"boom"</span><span class="p">)</span>

<span class="n">recovery</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">recovery</span> <span class="o">=</span>
    <span class="n">boom</span> <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="nf">\</span><span class="p">(</span><span class="kt">MyException</span> <span class="n">message</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="n">putStrLn</span> <span class="n">message</span>
        <span class="n">throw</span> <span class="p">(</span><span class="kt">MyException</span> <span class="p">(</span><span class="n">message</span> <span class="o">++</span> <span class="s">" recovered"</span><span class="p">))</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">recovery</code> catches the <code class="language-plaintext highlighter-rouge">MyException</code> from <code class="language-plaintext highlighter-rouge">boom</code>, prints the message, and then throws a <em>new</em> exception with a modified message.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">λ</span><span class="o">&gt;</span> <span class="n">recovery</span>
<span class="n">boom</span>
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
        <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
            <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">"throw"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"main"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Annotated"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"src/annotated.hs"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">19</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">9</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">19</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">54</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">"throw"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"main"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Annotated"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"src/annotated.hs"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">34</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">"catch"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"main"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Annotated"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"src/annotated.hs"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">17</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">19</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">54</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">]</span>
        <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="kt">MyException</span> <span class="s">"boom recovered"</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>Now, look at that call stack: we have the first <code class="language-plaintext highlighter-rouge">throw</code> (from <code class="language-plaintext highlighter-rouge">boom</code>), then we have the <em>second</em> <code class="language-plaintext highlighter-rouge">throw</code> (in <code class="language-plaintext highlighter-rouge">recovery</code>), and finally the <code class="language-plaintext highlighter-rouge">catch</code> in <code class="language-plaintext highlighter-rouge">recovery</code>.</p>

<p>So we know where the exception originally happened, where it was rethrown, and where it was caught.
This is fantastic!</p>

<p>But, even better - these annotations survive <em>even if you throw a different type of <code class="language-plaintext highlighter-rouge">Exception</code></em>.
This means you can translate exceptions fearlessly, knowing that any essential annotated context won’t be lost.</p>

<h1 id="dynamic-annotations">Dynamic Annotations</h1>

<p>As I said earlier, <code class="language-plaintext highlighter-rouge">CallStack</code> is fine, but it’s a <em>static</em> thing.
We can figure out “what code called what other code” that eventually led to an exception, but we can’t know anything about the running state of the program.</p>

<p>Enter <code class="language-plaintext highlighter-rouge">checkpoint</code>.
This function attaches an arbitrary <code class="language-plaintext highlighter-rouge">Annotation</code> to thrown exceptions.
An <code class="language-plaintext highlighter-rouge">Annotation</code> is a wrapper around any value that has an instance of <code class="language-plaintext highlighter-rouge">Show</code> and <code class="language-plaintext highlighter-rouge">Typeable</code>.
The library provides an instance of <code class="language-plaintext highlighter-rouge">IsString</code> for this, so you can enable <code class="language-plaintext highlighter-rouge">OverloadedStrings</code> and have stringly-typed annotations.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">constantAnnotation</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">String</span>
<span class="n">constantAnnotation</span> <span class="o">=</span>
    <span class="n">checkpoint</span> <span class="s">"from constant annotation"</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">msg</span> <span class="o">&lt;-</span> <span class="n">getLine</span>
        <span class="kr">if</span> <span class="n">null</span> <span class="n">msg</span>
            <span class="kr">then</span> <span class="n">throw</span> <span class="p">(</span><span class="kt">MyException</span> <span class="s">"empty message"</span><span class="p">)</span>
            <span class="kr">else</span> <span class="n">pure</span> <span class="n">msg</span>
</code></pre></div></div>

<p>But the real power is in using <em>runtime data</em> to annotate things.</p>

<p>Let’s imagine you’ve got a web application.
You’re reporting runtime exceptions to a service, like Bugsnag.
Specific teams “own” routes, so if something breaks, you want to alert the right team.</p>

<p>You can annotate thrown exceptions with the <em>route</em>.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Route</span> 
    <span class="o">=</span> <span class="kt">Login</span>
    <span class="o">|</span> <span class="kt">Signup</span>
    <span class="o">|</span> <span class="kt">ViewPosts</span>
    <span class="o">|</span> <span class="kt">CreatePost</span>
    <span class="o">|</span> <span class="kt">EditPost</span> <span class="kt">PostId</span>
    <span class="kr">deriving</span> <span class="kt">Show</span>

<span class="n">dispatch</span> <span class="o">::</span> <span class="kt">Request</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="kt">Response</span>
<span class="n">dispatch</span> <span class="n">req</span> <span class="o">=</span> 
    <span class="kr">case</span> <span class="n">parseRequest</span> <span class="n">req</span> <span class="kr">of</span>
        <span class="kt">Right</span> <span class="n">route</span> <span class="o">-&gt;</span>
            <span class="n">checkpoint</span> <span class="p">(</span><span class="kt">Annotation</span> <span class="n">route</span><span class="p">)</span> <span class="o">$</span> 
                <span class="kr">case</span> <span class="n">route</span> <span class="kr">of</span>
                    <span class="kt">Login</span> <span class="o">-&gt;</span>
                        <span class="n">handleLogin</span>
                    <span class="kt">Signup</span> <span class="o">-&gt;</span> 
                        <span class="n">handleSignup</span>
                    <span class="kt">ViewPosts</span> <span class="o">-&gt;</span>
                        <span class="n">handleViewPosts</span>
                    <span class="kt">CreatePost</span> <span class="o">-&gt;</span>
                        <span class="n">handleCreatePost</span>
                    <span class="kt">EditPost</span> <span class="n">postId</span> <span class="o">-&gt;</span>
                        <span class="n">checkpoint</span> <span class="p">(</span><span class="kt">Annotation</span> <span class="n">postId</span><span class="p">)</span> <span class="o">$</span>
                            <span class="n">handleEditPost</span> <span class="n">postId</span>
        <span class="kt">Left</span> <span class="kr">_</span> <span class="o">-&gt;</span>
            <span class="n">invalidRouteError</span>
</code></pre></div></div>

<p>Now, suppose an exception is thrown somewhere in <code class="language-plaintext highlighter-rouge">handleLogin</code>.
It’s going to bubble up past <code class="language-plaintext highlighter-rouge">dispatch</code> and get handled by the Warp default exception handler.
That’s going to dig into the <code class="language-plaintext highlighter-rouge">[Annotation]</code> and use that to alter the report we send to Bugsnag.
The team that is responsible for <code class="language-plaintext highlighter-rouge">handleLogin</code> gets a notification that something broke there.</p>

<p>In the <code class="language-plaintext highlighter-rouge">EditPost</code> case, we’ve <em>also</em> annotated the exception with <em>the post ID that we’re trying to edit</em>.
This means that, when debugging, we can know <em>exactly</em> which post threw the given exception.
Now, when diagnosing and debugging, we can immediately pull up the problematic entry.
This gives us much more information about the problem, which makes diagnosis easier.</p>

<p>Likewise, suppose we have a function that gives us the logged in user:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">withLoggedInUser</span> <span class="o">::</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="p">(</span><span class="kt">Entity</span> <span class="kt">User</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="n">a</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="n">a</span>
<span class="n">withLoggedInUser</span> <span class="n">action</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">muser</span> <span class="o">&lt;-</span> <span class="n">getLoggedInUser</span>
    <span class="n">checkpoint</span> <span class="p">(</span><span class="kt">Annotation</span> <span class="p">(</span><span class="n">fmap</span> <span class="n">entityKey</span> <span class="n">muser</span><span class="p">))</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">action</span> <span class="n">muser</span>
</code></pre></div></div>

<p>If the action we pass in to <code class="language-plaintext highlighter-rouge">withLoggedInUser</code> throws an exception, that exception will carry the <code class="language-plaintext highlighter-rouge">Maybe UserId</code> of whoever was logged in.
Now, we can easily know <em>who</em> is having a problem on our service, in addition to what the problem actually is.</p>

<h1 id="the-value-of-transparency">The Value of Transparency</h1>

<blockquote>
  <p>But wait - if all exceptions are wrapped with this <code class="language-plaintext highlighter-rouge">AnnotatedException</code> type, then how do I catch things? Won’t this pollute my codebase?</p>

  <p>And, what happens if I try to catch an <code class="language-plaintext highlighter-rouge">AnnotatedException MyException</code> but some other code only threw a <em>plain</em> <code class="language-plaintext highlighter-rouge">MyException</code>? Won’t that break things?</p>
</blockquote>

<p>These are great questions.</p>

<p><code class="language-plaintext highlighter-rouge">catch</code> and <code class="language-plaintext highlighter-rouge">try</code> from other libraries will fail to catch a <code class="language-plaintext highlighter-rouge">FooException</code> if the real type of the exception is <code class="language-plaintext highlighter-rouge">AnnotatedException FooException</code>.
However, <code class="language-plaintext highlighter-rouge">catch</code> and <code class="language-plaintext highlighter-rouge">try</code> from <code class="language-plaintext highlighter-rouge">annotated-exception</code> is capable of “seeing through” the <code class="language-plaintext highlighter-rouge">AnnotatedException</code> wrapper.</p>

<p>In fact, we took advantage of this earlier - here’s the code for <code class="language-plaintext highlighter-rouge">recovery</code> again:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boom</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">boom</span> <span class="o">=</span> <span class="n">throw</span> <span class="p">(</span><span class="kt">MyException</span> <span class="s">"boom"</span><span class="p">)</span>

<span class="n">recovery</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">recovery</span> <span class="o">=</span>
    <span class="n">boom</span> <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="nf">\</span><span class="p">(</span><span class="kt">MyException</span> <span class="n">message</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="n">putStrLn</span> <span class="n">message</span>
        <span class="n">throw</span> <span class="p">(</span><span class="kt">MyException</span> <span class="p">(</span><span class="n">message</span> <span class="o">++</span> <span class="s">" recovered"</span><span class="p">))</span>
</code></pre></div></div>

<p>Note how <code class="language-plaintext highlighter-rouge">catch</code> doesn’t say <em>anything</em> about annotations.
We catch a <code class="language-plaintext highlighter-rouge">MyException</code>, exactly like you would in <code class="language-plaintext highlighter-rouge">Control.Exception</code>, and the annotations are propagated.</p>

<p>But, let’s say you want to catch the <code class="language-plaintext highlighter-rouge">AnnotatedException MyException</code>.
You just <em>do that</em>.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">recoveryAnnotated</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">recoveryAnnotated</span> <span class="o">=</span>
    <span class="n">boom</span> <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="nf">\</span><span class="p">(</span><span class="kt">AnnotatedException</span> <span class="n">annotations</span> <span class="p">(</span><span class="kt">MyException</span> <span class="n">message</span><span class="p">))</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="n">putStrLn</span> <span class="n">message</span>
        <span class="n">traverse</span> <span class="n">print</span> <span class="n">annotations</span>
        <span class="n">throw</span> <span class="p">(</span><span class="kt">OtherException</span> <span class="p">(</span><span class="n">length</span> <span class="n">message</span><span class="p">))</span>

<span class="c1">-- in GHCi,</span>
<span class="err">λ</span><span class="o">&gt;</span> <span class="n">recoveryAnnotated</span>
<span class="n">boom</span>
<span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> <span class="p">[(</span><span class="s">"throw"</span><span class="p">,</span><span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"main"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Annotated"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"src/annotated.hs"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">34</span><span class="p">})]</span>
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
        <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
            <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">"throw"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"main"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Annotated"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"src/annotated.hs"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">37</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">9</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">37</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">48</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">]</span>
        <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="kt">OtherException</span> <span class="mi">4</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>Now, something tricky occurs here: we don’t preserve the annotations on the thrown exception.
If you catch an <code class="language-plaintext highlighter-rouge">AnnotatedException</code>, the library assumes that you’re going to handle those yourself.</p>

<p>If you want to keep them, you’d need to throw an <code class="language-plaintext highlighter-rouge">AnnotatedException</code>:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">recoveryAnnotatedPreserve</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">recoveryAnnotatedPreserve</span> <span class="o">=</span>
    <span class="n">boom</span> <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="nf">\</span><span class="p">(</span><span class="kt">AnnotatedException</span> <span class="n">annotations</span> <span class="p">(</span><span class="kt">MyException</span> <span class="n">message</span><span class="p">))</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="n">putStrLn</span> <span class="n">message</span>
        <span class="n">traverse</span> <span class="n">print</span> <span class="n">annotations</span>
        <span class="n">throw</span> <span class="p">(</span><span class="kt">AnnotatedException</span> <span class="n">annotations</span> <span class="p">(</span><span class="kt">OtherException</span> <span class="p">(</span><span class="n">length</span> <span class="n">message</span><span class="p">)))</span>

<span class="c1">-- in GHCi,</span>
<span class="err">λ</span><span class="o">&gt;</span> <span class="n">recoveryAnnotatedPreserve</span> 
<span class="n">boom</span>
<span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> <span class="p">[(</span><span class="s">"throw"</span><span class="p">,</span><span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"main"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Annotated"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"src/annotated.hs"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">34</span><span class="p">})]</span>
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
        <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
            <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">"throw"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"main"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Annotated"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"src/annotated.hs"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">44</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">9</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">44</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">81</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">,</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">"throw"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"main"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Annotated"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"src/annotated.hs"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">34</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">]</span>
        <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="kt">OtherException</span> <span class="mi">4</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>We’re missing <code class="language-plaintext highlighter-rouge">catch</code>, which is unfortunate, but <em>generally</em> you aren’t going to be doing this - you’re either going to be handling an error completely, or rethrowing it, and the <code class="language-plaintext highlighter-rouge">[Annotation]</code> won’t be relevant to you… unless you’re writing an integration with Bugsnag, or reporting on them in some other way.</p>

<p>So <code class="language-plaintext highlighter-rouge">annotated-exception</code>’s exception handling functions can “see through” an <code class="language-plaintext highlighter-rouge">AnnotatedException inner</code> to work only on the <code class="language-plaintext highlighter-rouge">inner</code> exception type.
But what if I try to catch a <code class="language-plaintext highlighter-rouge">DatabaseException</code> as an <code class="language-plaintext highlighter-rouge">AnnotatedException DatabaseException</code>?</p>

<p>Turns out, the <code class="language-plaintext highlighter-rouge">Exception</code> instance of <code class="language-plaintext highlighter-rouge">AnnotatedException</code> allows you to do that.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Control.Exception</span>

<span class="n">emptyAnnotationsAreCool</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">emptyAnnotationsAreCool</span> <span class="o">=</span>
    <span class="kt">Control</span><span class="o">.</span><span class="kt">Exception</span><span class="o">.</span><span class="n">throwIO</span> <span class="p">(</span><span class="kt">MyException</span> <span class="s">"definitely not annotated?"</span><span class="p">)</span>
        <span class="p">`</span><span class="kt">Control</span><span class="o">.</span><span class="kt">Exception</span><span class="o">.</span><span class="n">catch</span><span class="p">`</span>
            <span class="nf">\</span><span class="p">(</span><span class="kt">AnnotatedException</span> <span class="n">annotations</span> <span class="p">(</span><span class="kt">MyException</span> <span class="n">woah</span><span class="p">))</span> <span class="o">-&gt;</span> <span class="kr">do</span>
                <span class="n">print</span> <span class="n">annotations</span>
                <span class="n">putStrLn</span> <span class="n">woah</span>


<span class="c1">-- in GHCi,</span>
<span class="err">λ</span><span class="o">&gt;</span> <span class="n">emptyAnnotationsAreCool</span> 
<span class="kt">[]</span>
<span class="n">definitely</span> <span class="n">not</span> <span class="n">annotated</span><span class="o">?</span>
</code></pre></div></div>

<p>We promote the <code class="language-plaintext highlighter-rouge">inner</code> into <code class="language-plaintext highlighter-rouge">AnnotatedException [] inner</code>.
So the library works regardless if any code you throw cares about <code class="language-plaintext highlighter-rouge">AnnotatedException</code>.
If you call some external library code which throws an exception, you’ll get the first annotation you try - including if that’s just from <code class="language-plaintext highlighter-rouge">catch</code>:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">catchPutsACallStack</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">catchPutsACallStack</span> <span class="o">=</span>
    <span class="kt">Control</span><span class="o">.</span><span class="kt">Exception</span><span class="o">.</span><span class="n">throwIO</span> <span class="p">(</span><span class="kt">MyException</span> <span class="s">"definitely not annotated?"</span><span class="p">)</span>
        <span class="p">`</span><span class="n">catch</span><span class="p">`</span>
            <span class="nf">\</span><span class="p">(</span><span class="kt">MyException</span> <span class="n">woah</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">do</span>
                <span class="n">throw</span> <span class="p">(</span><span class="kt">OtherException</span> <span class="p">(</span><span class="n">length</span> <span class="n">woah</span><span class="p">))</span>

<span class="c1">-- in GHCi,</span>
<span class="err">λ</span><span class="o">&gt;</span> <span class="n">catchPutsACallStack</span> 
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
        <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
            <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">"throw"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"main"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Annotated"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"../parsonsmatt.github.io/src/annotated.hs"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">60</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">17</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">60</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">53</span><span class="p">})</span>
                <span class="p">,</span> <span class="p">(</span><span class="s">"catch"</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">"main"</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">"Annotated"</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">"../parsonsmatt.github.io/src/annotated.hs"</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">58</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">9</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">58</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">16</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">]</span>
        <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="kt">OtherException</span> <span class="mi">25</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>We get <code class="language-plaintext highlighter-rouge">throw</code> and <code class="language-plaintext highlighter-rouge">catch</code> both showing up in our stack trace.
If we’d used <code class="language-plaintext highlighter-rouge">Control.Exception.throwIO</code> instead of <code class="language-plaintext highlighter-rouge">Control.Exception.Annotated.throw</code>, then we’d <em>still</em> have <code class="language-plaintext highlighter-rouge">catch</code> as an annotation.</p>

<h1 id="do-you-feel-the-power">Do you feel the power?</h1>

<p>The primary purpose here is to share the technique and inspire a hunger for dynamic exception annotations.</p>

<p>We’ve been using this technique at Mercury for most of this year.
It has <em>dramatically</em> simplified how we report exceptions, the shape of our exceptions, and how much info we get from a Bugsnag report.
It’s now much easier to diagnose problems and fix bugs.</p>

<p>The Really Big Deal here is that - we now have something <em>better</em> than other languages.
The lack of stack traces in Haskell is really annoying, and a clear way that Haskell suffers compared to Ruby or Java.
But now, with <code class="language-plaintext highlighter-rouge">annotated-exception</code>, we actually have <em>more powerful</em> and <em>more useful</em> exception annotations than a mere stack trace.
And, since this is all just library functions, you can swap to <code class="language-plaintext highlighter-rouge">Control.Exception.Annotated</code> with little fuss.</p></div>
    </summary>
    <updated>2022-08-16T00:00:00Z</updated>
    <published>2022-08-16T00:00:00Z</published>
    <source>
      <id>https://www.parsonsmatt.org</id>
      <author>
        <name>Matt Parsons</name>
      </author>
      <link href="https://www.parsonsmatt.org" rel="alternate" type="text/html"/>
      <link href="https://www.parsonsmatt.org/feed.xml" rel="self" type="application/rss+xml"/>
      <title>Overcoming Software</title>
      <updated>2022-08-24T00:03:49Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://medium.com/p/ea2f642d5175</id>
    <link href="https://cdsmithus.medium.com/geometry-dimensions-and-elections-ea2f642d5175?source=rss-18bd5acaea78------2" rel="alternate" type="text/html"/>
    <title>Geometry, Dimensions, and Elections</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I found this to be an interesting way to ponder the theory of elections and group decision-making, so I’m writing to share. I have not done the research to become aware of what is previously known in this area, and I make no claim that any of the thoughts contained here are new.</p><p>It’s common in the United States to approximate political opinions using a spectrum from “left” to “right”, where the left end of the spectrum represents an emphasis on social justice, and the right an emphasis on free markets and traditional values. Libertarians, on the other hand, are famous for advocating their view that politics are better described by two orthogonal dimensions, as epitomized by David Nolan in his Nolan Chart. Leaving aside a bunch of details, the idea of the chart is that an individual’s political opinions can be approximately described by a point in a two-dimensional space.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/440/1*pJnd3Rn7Ab9lznZVrvFjRw.png"/><figcaption>The Nolan Chart, a well-known Libertarian advocacy tool</figcaption></figure><p>There are many legitimate criticisms of the specific choice of dimensions in the Nolan Chart, but it does capture a first step toward the perspective that interests me here. Most generally, we can consider each individual’s political opinions as living in an <em>infinite-dimensional</em> space. However, such a space can then approximated by its projection down to however many dimensions are convenient for a particular purpose, with a corresponding loss of information as the number of dimensions gets smaller.</p><p>This has a fascinating interaction with Condorcet’s paradox. If you’re not familiar with the name, Condorcet’s paradox refers to a phenomenon described by the Marquis de Condorcet in the 18th century.</p><blockquote><strong>Condorcet’s Paradox:</strong> If each member of a group has consistently ordered <strong>individual</strong> preferences among three or more options, it is nevertheless still possible that the <strong>collective</strong> preferences of the group are cyclic. That is, a majority of the group may prefer option A to option B, a majority may prefer option B to option C, and yet a majority may also prefer option C to option A. Cycles are possible of any length greater than or equal to three.</blockquote><p>For example, let’s think about an election for book club president, with three candidates: Alice, Bob, and Camille. We will write A&gt;B&gt;C to indicate that a member of the club prefers Alice as their first choice for president, followed by Bob, and finally Camille as their last choice. In all, there are six possible preference orders among the three candidates: A&gt;B&gt;C, A&gt;C&gt;B, B&gt;A&gt;C, B&gt;C&gt;A, C&gt;A&gt;B, and C&gt;B&gt;A. As Condorcet’s paradox predicts, there may be cycles in the overall preferences of the book club. For example, if 10% of members prefer A&gt;B&gt;C, 35% prefer A&gt;C&gt;B, 45% prefer B&gt;C&gt;A, and the remaining 10% prefer C&gt;A&gt;B, then you can verify that 55% of club members prefer Alice over Bob, 55% of voters prefer Bob over Camille, but 55% also prefer Camille over Alice!</p><p>This is quite inconvenient, because it means that in many elections, it’s possible for there to be no clear winner at all. But how does it relate to the dimensionality of political preferences?</p><p>Well, let’s assume for the sake of argument that political opinions are one-dimensional. I’ll describe the opinions as “left” or “right”, but the specific choice of dimension doesn’t matter. In such a model, the only question is how far left or right is optimal. Every voter would have a preference. Maybe it’s left-wing. Maybe it’s center-right. We won’t be concerned with which specific opinions the voter holds on an issue-by-issue basis, because in this world those are completely determined by just measuring how far left or right their opinions are. A voter’s preference among candidates is determined by how far each candidate is from that voter’s preferred political position.</p><p>Here are three candidates, as well as the ranges of voters who will express each possible preference. The dotted lines mark the midpoints between each of the three candidate pairs.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/580/1*m3izLRPL7ODn29dIPhLy3g.png"/><figcaption>Voter preference ranges in a 3-candidate, 1-dimensional model</figcaption></figure><p>You may notice two of the six possible preference orders are missing. Voters never prefer A&gt;C&gt;B or C&gt;A&gt;B, because there is simply no position along the one-dimensional left-right axis that is closer to both A and C than it is to B. Because of this, there is also no possibility of a Condorcet cycle among these candidates. Indeed, if either A or C are preferred over B, it can only be because they are the first choice of a majority of voters, so they are preferred over any alternative.</p><p>We can go even further in this case: except for exact ties, the one unique candidate who will be preferred over all others by a majority of voters (possibly a different majority for each head-to-head contest, though!) will be the first choice of whichever voter has the <em>median</em> political preference among all the voters. However, I don’t see how to naturally generalize this observation to higher dimensions.</p><p>It is considering a second dimension that reveals the possibility of a Condorcet paradox among voters’ true preferences. That’s because the additional dimension lets candidates A and C have similarities that are not shared by B. With a second dimension, voter preferences are divided into areas, like this.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/895/1*rY4PodiZaSMnISrisV_FqQ.png"/><figcaption>Voter preference ranges in a 3-candidate, 2-dimensional model</figcaption></figure><p>If you project this image onto the x axis, the candidates are the same as in the previous model. However, here we’ve added a second dimension, the y axis, in which candidate B differs significantly from A or C. There are now regions of voter preferences in which it is sensible to express candidate orderings A&gt;C&gt;B and C&gt;A&gt;B, restoring the possibility of a Condorcet paradox. Of course, we didn’t create Condorcet’s paradox by choosing to use a two-dimensional model. In a real-world scenario, voters would have expressed the preferences A&gt;C&gt;B and C&gt;A&gt;B anyway. A one-dimensional model would have to reject those voters as behaving irrationally, but a second dimension can explain them.</p><p>Similarly, suppose we add a fourth candidate into the two-dimensional model. We might see something like this:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/883/1*IXZ_QmLY0UeBf44kSmphTA.png"/><figcaption>Voter preference ranges in a 4-candidate, 2-dimensional model</figcaption></figure><p>There are 24 possible candidate orderings among 4 candidates, but only 18 of them appear here. Of the eighteen, 12 are open-ended regions around the outside of the diagram that include extreme positions, while the other 6 are bounded regions that sit strictly between the others as a kind of compromise or centrism. 6 more orderings, though, are missing from the diagram entirely! That is because, like before, the model has too few dimensions to recognize how a voter could adopt one of those preferences. In this case, the six missing preferences are D&gt;A&gt;B&gt;C, D&gt;A&gt;C&gt;B, A&gt;D&gt;C&gt;B, A&gt;D&gt;B&gt;C, D&gt;C&gt;A&gt;B, and D&gt;B&gt;A&gt;C. (Curiously, these are precisely the <em>opposite preferences </em>of the six bounded areas. The same thing occurs in the one-dimensional model, where the two unrepresentable orderings were the opposite preferences for the two bounded regions of the spectrum.)</p><p>You can see, then, that a two-dimensional model such as a Nolan Chart may be more expressive than a one-dimensional model, but still fails to capture some voter preferences (and this is entirely setting aside the question of whether the Nolan Chart in particular chooses the best pair of dimensions to consider). Beyond 2 dimensions, it’s more difficult to visualize, but the same things should occur. As more candidates are added, more dimensions will be needed to explain the various preferences voters may have.</p><p>There’s definitely some hand-waving involved in the above. The most obvious example is the notion of “distance” that is assumed to accurately determine a voter’s candidate preference. In my models, I used a Euclidean distance. In reality, each voter, in addition to having their own ideal candidate as a point in the space, may also have a different metric expressing how important each dimension is to them. These concerns can be dismissed as just another example of how “all models are wrong”, but this one would need some kind of validation to rely on it for real quantitative predictions. I don’t mean it that way; only as a framework for thinking about what can happen when you apply low-dimensional reasoning to what’s ultimately a high-dimensional concept.</p><img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ea2f642d5175" width="1"/></div>
    </content>
    <updated>2022-08-13T03:10:48Z</updated>
    <published>2022-08-13T03:10:48Z</published>
    <category term="game-theory"/>
    <category term="mathematics"/>
    <author>
      <name>Chris Smith</name>
    </author>
    <source>
      <id>https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2</id>
      <logo>https://cdn-images-1.medium.com/fit/c/150/150/1*rU9ddF_bkph8Qg3jip7vfw.jpeg</logo>
      <link href="https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2" rel="alternate" type="text/html"/>
      <link href="https://medium.com/@cdsmithus/feed" rel="self" type="application/rss+xml"/>
      <link href="http://medium.superfeedr.com" rel="hub" type="text/html"/>
      <subtitle>Stories by Chris Smith on Medium</subtitle>
      <title>Stories by Chris Smith on Medium</title>
      <updated>2022-09-15T11:56:08Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://readerunner.wordpress.com/?p=109</id>
    <link href="https://readerunner.wordpress.com/2022/01/06/graphs-kites-and-darts/" rel="alternate" type="text/html"/>
    <link href="https://readerunner.wordpress.com/2022/01/06/graphs-kites-and-darts/#comments" rel="replies" type="text/html"/>
    <link href="https://readerunner.wordpress.com/2022/01/06/graphs-kites-and-darts/feed/atom/" rel="replies" type="application/atom+xml"/>
    <title xml:lang="en">Graphs, Kites and Darts</title>
    <summary xml:lang="en">Graphs, Kites and Darts Figure 1: Three Coloured Patches Non-periodic tilings with Penrose’s kites and darts We continue our investigation of the tilings using Haskell with Haskell Diagrams. What is new is the introduction of a planar graph representation. This allows us to define more operations on finite tilings, in particular forcing and composing. Previously […]</summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><h1 id="graphs-kites-and-darts">Graphs, Kites and Darts</h1>
<div style="text-align: center;">
<figure><img alt="Figure 1: Three Coloured Patches" src="https://readerunner.files.wordpress.com/2022/01/threeshapessample.png?w=625"/><figcaption>Figure 1: Three Coloured Patches</figcaption></figure>
</div>
<p><strong>Non-periodic tilings with Penrose’s kites and darts</strong></p>
<p>We continue our investigation of the tilings using Haskell with Haskell Diagrams. What is new is the introduction of a planar graph representation. This allows us to define more operations on finite tilings, in particular <strong>forcing</strong> and <strong>composing</strong>.</p>
<p>Previously in <a href="https://readerunner.wordpress.com/2021/03/20/diagrams-for-penrose-tiles/">Diagrams for Penrose Tiles</a> we implemented tools to create and draw finite patches of Penrose kites and darts (such as the samples depicted in figure 1). The code for this and for the new graph representation and tools described here can be found on GitHub <a href="https://github.com/chrisreade/PenroseKiteDart">https://github.com/chrisreade/PenroseKiteDart</a>.</p>
<p>To describe the tiling operations it is convenient to work with the half-tiles: <code>LD</code> (left dart), <code>RD</code> (right dart), <code>LK</code> (left kite), <code>RK</code> (right kite) using a polymorphic type <code>HalfTile</code> (defined in a module <code>HalfTile</code>)</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">data</span> HalfTile rep 
 <span style="color: red;">=</span> LD rep <span style="color: red;">|</span> RD rep <span style="color: red;">|</span> LK rep <span style="color: red;">|</span> RK rep   <span style="color: blue; font-weight: bold;">deriving</span> <span style="color: red;">(</span>Show<span style="color: red;">,</span>Eq<span style="color: red;">)</span></code></pre>
<p>Here <code>rep</code> is a type variable for a representation to be chosen. For drawing purposes, we chose two-dimensional vectors (<code>V2 Double</code>) and called these <code>Pieces</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">type</span> Piece <span style="color: red;">=</span> HalfTile <span style="color: red;">(</span>V2 Double<span style="color: red;">)</span></code></pre>
<p>The vector represents the join edge of the half tile (see figure 2) and thus the scale and orientation are determined (the other tile edges are derived from this when producing a diagram).</p>
<div style="text-align: center;">
<figure><img alt="Figure 2: The (half-tile) pieces showing join edges (dashed) and origin vertices (red dots)" src="https://readerunner.files.wordpress.com/2022/01/newpiecesfig.png?w=625"/><figcaption>Figure 2: The (half-tile) pieces showing join edges (dashed) and origin vertices (red dots)</figcaption></figure>
</div>
<p>Finite tilings or <em>patches</em> are then lists of located pieces.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">type</span> Patch <span style="color: red;">=</span> <span style="color: red;">[</span>Located Piece<span style="color: red;">]</span></code></pre>
<p>Both <code>Piece</code> and <code>Patch</code> are made transformable so <code>rotate</code>, and <code>scale</code> can be applied to both and <code>translate</code> can be applied to a <code>Patch</code>. (Translate has no effect on a <code>Piece</code> unless it is located.)</p>
<p>In <a href="https://readerunner.wordpress.com/2021/03/20/diagrams-for-penrose-tiles/">Diagrams for Penrose Tiles</a> we also discussed the rules for legal tilings and specifically the problem of <em>incorrect tilings</em> which are legal but get stuck so cannot continue to infinity. In order to create <em>correct tilings</em> we implemented the <code>decompose</code> operation on patches.</p>
<p>The vector representation that we use for drawing is not well suited to exploring properties of a patch such as neighbours of pieces. Knowing about neighbouring tiles is important for being able to reason about composition of patches (inverting a decomposition) and to find which pieces are determined (<em>forced</em>) on the boundary of a patch.</p>
<p>However, the polymorphic type <code>HalfTile</code> allows us to introduce our alternative graph representation alongside <code>Piece</code>s.</p>
<h1 id="tile-graphs">Tile Graphs</h1>
<p>In the module <code>Tgraph.Prelude</code>, we have the new representation which treats half tiles as triangular faces of a planar graph – a <code>TileFace</code> – by specialising <code>HalfTile</code> with a triple of vertices (clockwise starting with the tile origin). For example</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">LD <span style="color: red;">(</span><span class="hs-num">1</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">,</span><span class="hs-num">4</span><span style="color: red;">)</span>       RK <span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">4</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">)</span></code></pre>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">type</span> Vertex <span style="color: red;">=</span> Int
<span style="color: blue; font-weight: bold;">type</span> TileFace <span style="color: red;">=</span> HalfTile <span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span></code></pre>
<p>When we need to refer to particular vertices from a <code>TileFace</code> we use <code>originV</code> (the first vertex – red dot in figure 2), <code>oppV</code> (the vertex at the opposite end of the join edge – dashed edge in figure 2), <code>wingV</code> (the remaining vertex not on the join edge).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">originV<span style="color: red;">,</span> oppV<span style="color: red;">,</span> wingV <span style="color: red;">::</span> TileFace <span style="color: red;">-&gt;</span> Vertex</code></pre>
<p><strong>Tgraphs</strong></p>
<p>The <em>Tile Graphs</em> implementation uses a type <code>Tgraph</code> which has a list of graph vertices and a list of tile faces.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">data</span> Tgraph <span style="color: red;">=</span> Tgraph <span style="color: red;">{</span> vertices <span style="color: red;">::</span> <span style="color: red;">[</span>Vertex<span style="color: red;">]</span>
                     <span style="color: red;">,</span> faces    <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span>
                     <span style="color: red;">}</span>  <span style="color: blue; font-weight: bold;">deriving</span> <span style="color: red;">(</span>Show<span style="color: red;">)</span></code></pre>
<p>For example, <code>fool</code> (short for a fool’s kite) is a <code>Tgraph</code> with 6 faces and 7 vertices, shown in figure 3.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">fool <span style="color: red;">=</span> Tgraph <span style="color: red;">{</span> vertices <span style="color: red;">=</span> <span style="color: red;">[</span><span class="hs-num">1</span><span style="color: red;">,</span><span class="hs-num">2</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">,</span><span class="hs-num">4</span><span style="color: red;">,</span><span class="hs-num">5</span><span style="color: red;">,</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">7</span><span style="color: red;">]</span>
              <span style="color: red;">,</span> faces <span style="color: red;">=</span> <span style="color: red;">[</span>RD <span style="color: red;">(</span><span class="hs-num">1</span><span style="color: red;">,</span><span class="hs-num">2</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">)</span><span style="color: red;">,</span>LD <span style="color: red;">(</span><span class="hs-num">1</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">,</span><span class="hs-num">4</span><span style="color: red;">)</span><span style="color: red;">,</span>RK <span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">2</span><span style="color: red;">,</span><span class="hs-num">5</span><span style="color: red;">)</span>
                        <span style="color: red;">,</span>LK <span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">,</span><span class="hs-num">2</span><span style="color: red;">)</span><span style="color: red;">,</span>RK <span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">4</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">)</span><span style="color: red;">,</span>LK <span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">7</span><span style="color: red;">,</span><span class="hs-num">4</span><span style="color: red;">)</span>
                        <span style="color: red;">]</span>
              <span style="color: red;">}</span></code></pre>
<p>(The fool is also called an <em>ace</em> in the literature)</p>
<div style="text-align: center;">
<figure><img alt="Figure 3: fool" src="https://readerunner.files.wordpress.com/2022/01/foolfig.png?w=625"/><figcaption>Figure 3: <code>fool</code></figcaption></figure>
</div>
<p>With this representation we can investigate how composition works with whole patches. Figure 4 shows a twice decomposed sun on the left and a once decomposed sun on the right (both with vertex labels). In addition to decomposing the right graph to form the left graph, we can also compose the left graph to get the right graph.</p>
<div style="text-align: center;">
<figure><img alt="Figure 4: sunD2 and sunD" src="https://readerunner.files.wordpress.com/2022/01/figsund2d.png?w=625"/><figcaption>Figure 4: <code>sunD2</code> and <code>sunD</code></figcaption></figure>
</div>
<p>After implementing composition, we also explore a <em>force</em> operation and an <em>emplace</em> operation to extend tilings.</p>
<p>There are some constraints we impose on <code>Tgraph</code>s.</p>
<ul>
<li><em>No spurious vertices</em>. Every vertex of a <code>Tgraph</code> face must be one of the <code>Tgraph</code> vertices and each of the <code>Tgraph</code> vertices occurs in at least one of the <code>Tgraph</code> faces.</li>
<li><em>Connected</em>. The collection of faces must be a single connected component.</li>
<li><em>No crossing boundaries</em>. By this we mean that vertices on the boundary are incident with exactly two boundary edges. The boundary consists of the edges between the <code>Tgraph</code> faces and exterior region(s). This is important for adding faces.</li>
<li><em>Tile connected</em>. Roughly, this means that if we collect the faces of a <code>Tgraph</code> by starting from any single face and then add faces which share an edge with those already collected, we get all the <code>Tgraph</code> faces. This is important for drawing purposes.</li>
</ul>
<p>In fact, if a <code>Tgraph</code> is <em>connected</em> with <em>no crossing boundaries</em>, then it must be <em>tile connected</em>. (We could define <em>tile connected</em> to mean that the dual graph excluding exterior regions is connected.)</p>
<p>Figure 5 shows two excluded graphs which have crossing boundaries at 4 (left graph) and 13 (right graph). The left graph is still tile connected but the right is not tile connected (the two faces at the top right do not have an edge in common with the rest of the faces.)</p>
<p>Although we have allowed for <code>Tgraphs</code> with holes (multiple exterior regions), we note that such holes cannot be created by adding faces one at a time without creating a crossing boundary. They can be created by removing faces from a <code>Tgraph</code> without necessarily creating a crossing boundary.</p>
<p><strong>Important</strong> We are using <em>face</em> as an abbreviation for half-tile face of a <code>Tgraph</code> here, and we do not count the exterior of a patch of faces to be a face. The exterior can also be disconnected when we have holes in a patch of faces and the holes are not counted as faces either. In graph theory, the term <em>face</em> would generally include these other regions, but we will call them <em>exterior regions</em> rather than faces.</p>
<div style="text-align: center;">
<figure><img alt="Figure 5: A face-connected graph with crossing boundaries at 4, and a non face-connected graph" src="https://readerunner.files.wordpress.com/2022/01/crossingbdryfig.png?w=625"/><figcaption>Figure 5: A tile-connected graph with crossing boundaries at 4, and a non tile-connected graph</figcaption></figure>
</div>
<p>In addition to the constructor <code>Tgraph</code> we also use</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">checkedTgraph<span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span> <span style="color: red;">-&gt;</span> Tgraph</code></pre>
<p>which creates a <code>Tgraph</code> from a list of faces, but also performs checks on the required properties of <code>Tgraph</code>s. We can then remove or select faces from a <code>Tgraph</code> and then use <code>checkedTgraph</code> to ensure the resulting <code>Tgraph</code> still satisfies the required properties.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">selectFaces<span style="color: red;">,</span> removeFaces  <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span> <span style="color: red;">-&gt;</span> Tgraph <span style="color: red;">-&gt;</span> Tgraph
selectFaces fcs g <span style="color: red;">=</span> checkedTgraph <span style="color: red;">(</span>faces g `intersect` fcs<span style="color: red;">)</span>
removeFaces fcs g <span style="color: red;">=</span> checkedTgraph <span style="color: red;">(</span>faces g \\ fcs<span style="color: red;">)</span></code></pre>
<p><strong>Edges and Directed Edges</strong></p>
<p>We do not explicitly record edges as part of a Tgraph, but calculate them as needed. Implicitly we are requiring</p>
<ul>
<li><em>No spurious edges</em>. The edges of a <code>Tgraph</code> are the edges of the faces of the <code>Tgraph</code>.</li>
</ul>
<p>To represent edges, a pair of vertices (a,b) is regarded as a <em>directed</em> edge from a to b. A list of such pairs will usually be regarded as a <em>directed</em> edge list. In the special case that the list is symmetrically closed [(b,a) is in the list whenever (a,b) is in the list] we will refer to this as an <em>edge list</em> rather than a directed edge list.</p>
<p>The following functions on <code>TileFace</code>s all produce directed edges (going clockwise round a face).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">  <span style="color: green;">-- join edge - dashed in figure 2</span>
joinE  <span style="color: red;">::</span> TileFace <span style="color: red;">-&gt;</span> <span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span>
  <span style="color: green;">-- the short edge which is not a join edge</span>
shortE <span style="color: red;">::</span> TileFace <span style="color: red;">-&gt;</span> <span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span>
  <span style="color: green;">-- the long edge which is not a join edge</span>
longE  <span style="color: red;">::</span> TileFace <span style="color: red;">-&gt;</span> <span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span>
 <span style="color: green;">-- all three directed edges clockwise from origin</span>
faceDedges <span style="color: red;">::</span> TileFace <span style="color: red;">-&gt;</span> <span style="color: red;">[</span><span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span><span style="color: red;">]</span></code></pre>
<p>For the whole <code>Tgraph</code>, we often want a list of all the directed edges of all the faces.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">graphDedges <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> <span style="color: red;">[</span><span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span><span style="color: red;">]</span>
graphDedges g <span style="color: red;">=</span> concatMap faceDedges <span style="color: red;">(</span>faces g<span style="color: red;">)</span></code></pre>
<p>Because our graphs represent tilings they are planar (can be embedded in a plane) so we know that at most two faces can share an edge and they will have opposite directions of the edge. <em>No two faces can have the same directed edge</em>. So from <code>graphDedges g</code> we can easily calculate internal edges (edges shared by 2 faces) and boundary directed edges (directed edges round the external regions).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">internalEdges<span style="color: red;">,</span> boundaryDedges <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> <span style="color: red;">[</span><span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span><span style="color: red;">]</span></code></pre>
<p>The internal edges of <code>g</code> are those edges which occur in both directions in <code>graphDedges g</code>. The boundary directed edges of <code>g</code> are the missing reverse directions in <code>graphDedges g</code>.</p>
<p>We also refer to all the long edges of a <code>Tgraph</code> (including kite join edges) as <code>phiEdges</code> (both directions of these edges).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">phiEdges <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> <span style="color: red;">[</span><span style="color: red;">(</span>Vertex<span style="color: red;">,</span> Vertex<span style="color: red;">)</span><span style="color: red;">]</span></code></pre>
<p>This is so named because, when drawn, these long edges are <code>phi</code> times the length of the short edges (<code>phi</code> being the golden ratio which is approximately 1.618).</p>
<h1 id="drawing-tgraphs-patches-and-vpatches">Drawing Tgraphs (Patches and VPatches)</h1>
<p>The module <code>Tgraph.Convert</code> contains functions to convert a <code>Tgraph</code> to our previous vector representation (<code>Patch</code>) defined in <code>TileLib</code> so we can use the existing tools to produce diagrams.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">makePatch <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Patch

drawPatch <span style="color: red;">::</span> Patch <span style="color: red;">-&gt;</span> Diagram B <span style="color: green;">-- defined in module TileLib</span>

drawGraph <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Diagram B
drawGraph <span style="color: red;">=</span> drawPatch . makePatch</code></pre>
<p>However, it is also useful to have an intermediate stage (a <code>VPatch</code> = Vertex Patch) which contains both face (vertices) and vectors. This allows vertex labels to be drawn and for faces to be identified and retained/excluded after the vector information is calculated.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">data</span> VPatch  <span style="color: red;">=</span> VPatch <span style="color: red;">{</span>lVertices <span style="color: red;">::</span> <span style="color: red;">[</span>Located Vertex<span style="color: red;">]</span>
                      <span style="color: red;">,</span>lHybrids <span style="color: red;">::</span> <span style="color: red;">[</span>Located Hybrid<span style="color: red;">]</span>
                      <span style="color: red;">}</span></code></pre>
<p>A <code>Vpatch</code> has a list of located vertices and a list of located hybrids, where a <code>Hybrid</code> is a <code>HalfTile</code> with a dual representation of the face (vertices) and vector (join edge). We make <code>VPatch</code> transformable so it can also be an argument type for <code>rotate</code>, <code>translate</code>, and <code>scale</code>.</p>
<p>The conversion functions include</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">makeVPatch   <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> VPatch
dropVertices <span style="color: red;">::</span> VPatch <span style="color: red;">-&gt;</span> Patch <span style="color: green;">-- discards vertex information</span>
drawVPatch   <span style="color: red;">::</span> VPatch <span style="color: red;">-&gt;</span> Diagram B  <span style="color: green;">-- draws labels as well</span>

drawVGraph   <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Diagram B
drawVGraph <span style="color: red;">=</span> drawVPatch . makeVPatch</code></pre>
<p>One consequence of using abstract graphs is that there is no unique predefined way to orient or scale or position the patch arising from a graph representation. Our implementation selects a particular join edge and aligns it along the x-axis (unit length for a dart, <code>phi</code>length for a kite) and tile-connectedness ensures the rest of the patch can be calculated from this.</p>
<p>We also have functions to re-orient a <code>Vpatch</code> and lists of <code>VPatch</code>s using chosen pairs of vertices. [Simply doing rotations on the final diagrams can cause problems if these include vertex labels. We do not, in general, want to rotate the labels – so we need to orient the <code>Vpatch</code> before converting to a diagram]</p>
<h1 id="decomposing-graphs">Decomposing Graphs</h1>
<p>We previously implemented decomposition for patches which splits each half-tile into two or three smaller scale half-tiles.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">decompose <span style="color: red;">::</span> Patch <span style="color: red;">-&gt;</span> Patch</code></pre>
<p>We now have a <code>Tgraph</code> version of decomposition in the module <code>Tgraphs</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">decomposeG <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Tgraph</code></pre>
<p>Graph decomposition is particularly simple. We start by introducing one new vertex for each long edge (the <code>phiEdges</code>) of the Tgraph. We then build the new faces from each old face using the new vertices.</p>
<p>As a running example we take <code>fool</code> (mentioned above) and its decomposition <code>foolD</code></p>
<pre><code>*Main&gt; foolD = decomposeG fool

*Main&gt; foolD
Tgraph { vertices = [1,8,3,2,9,4,5,13,10,6,11,14,7,12]
       , faces = [LK (1,8,3),RD (2,3,8),RK (1,3,9)
                 ,LD (4,9,3),RK (5,13,2),LK (5,10,13)
                 ,RD (6,13,10),LK (3,2,13),RK (3,13,11)
                 ,LD (6,11,13),RK (3,14,4),LK (3,11,14)
                 ,RD (6,14,11),LK (7,4,14),RK (7,14,12)
                 ,LD (6,12,14)
                 ]
       }</code></pre>
<p>which are best seen together (<code>fool</code> followed by <code>foolD</code>) in figure 6.</p>
<div style="text-align: center;">
<figure><img alt="Figure 6: fool and foolD (= decomposeG fool)" src="https://readerunner.files.wordpress.com/2022/01/foolandfoold.png?w=625"/><figcaption>Figure 6: <code>fool</code> and <code>foolD</code> (= <code>decomposeG fool</code>)</figcaption></figure>
</div>
<h1 id="composing-graphs-and-unknowns">Composing graphs, and Unknowns</h1>
<p>Composing is meant to be an inverse to decomposing, and one of the main reasons for introducing our graph representation. In the literature, decomposition and composition are defined for infinite tilings and in that context they are unique inverses to each other. For finite patches, however, we will see that composition is not always uniquely determined.</p>
<p>In figure 7 (Two Levels) we have emphasised the larger scale faces on top of the smaller scale faces.</p>
<div style="text-align: center;">
<figure><img alt="Figure 7: Two Levels" src="https://readerunner.files.wordpress.com/2022/01/twolevelsfig.png?w=625"/><figcaption>Figure 7: Two Levels</figcaption></figure>
</div>
<p>How do we identify the composed tiles? We start by classifying vertices which are at the wing tips of the (smaller) darts as these determine how things compose. In the interior of a graph/patch (e.g in figure 7), a dart wing tip always coincides with a second dart wing tip, and either</p>
<ol type="1">
<li>the 2 dart halves share a long edge. The shared wing tip is then classified as a <code>largeKiteCentre</code> and is at the centre of a larger kite. (See left vertex type in figure 8), or</li>
<li>the 2 dart halves touch at their wing tips without sharing an edge. This shared wing tip is classified as a <code>largeDartBase</code> and is the base of a larger dart. (See right vertex type in figure 8)</li>
</ol>
<div style="text-align: center;">
<figure><img alt="Figure 8: largeKiteCentre (left) and largeDartBase (right)" src="https://readerunner.files.wordpress.com/2022/01/dartwingfig.png?w=625"/><figcaption>Figure 8: largeKiteCentre (left) and largeDartBase (right)</figcaption></figure>
</div>
<p>[We also call these (respectively) a deuce vertex type and a jack vertex type later in figure 10]</p>
<p>Around the boundary of a graph, the dart wing tips may not share with a second dart. Sometimes the wing tip has to be classified as <code>unknown</code> but often it can be decided by looking at neighbouring tiles. In this example of a four times decomposed sun (<code>sunD4</code>), it is possible to classify all the dart wing tips as largeKiteCentres or largeDartBases so there are no unknowns.</p>
<p>If there are no unknowns, then we have a function to produce the unique composed graph.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">composeG<span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Tgraph</code></pre>
<p>Any correct decomposed graph without unknowns will necessarily compose back to its original. This makes <code>composeG</code> a left inverse to <code>decomposeG</code> provided there are no unknowns.</p>
<p>For example, with an (<code>n</code> times) decomposed sun we will have no unknowns, so these will all compose back up to a sun after <code>n</code> applications of <code>composeG</code>. For <code>n=4</code> (<code>sunD4</code> – the smaller scale shown in figure 7) the dart wing classification returns 70 <code>largeKiteCentres</code>, 45 <code>largeDartBases</code>, and no <code>unknowns</code>.</p>
<p>Similarly with the simpler <code>foolD</code> example, if we classsify the dart wings we get</p>
<pre><code>largeKiteCentres = [14,13]
largeDartBases = [3]
unknowns = []</code></pre>
<p>In <code>foolD</code> (the right hand graph in figure 6), nodes 14 and 13 are new kite centres and node 3 is a new dart base. There are no unknowns so we can use <code>composeG</code> safely</p>
<pre><code>*Main&gt; composeG foolD
Tgraph { vertices = [1,2,3,4,5,6,7]
       , faces = [RD (1,2,3),LD (1,3,4),RK (6,2,5)
                 ,RK (6,4,3),LK (6,3,2),LK (6,7,4)
                 ]
       }</code></pre>
<p>which reproduces the original <code>fool</code> (left hand graph in figure 6).</p>
<p>However, if we now check out unknowns for <code>fool</code> we get</p>
<pre><code>largeKiteCentres = []
largeDartBases = []
unknowns = [4,2]    </code></pre>
<p>So both nodes 2 and 4 are unknowns. It had looked as though <code>fool</code> would simply compose into two half kites back-to-back (sharing their long edge not their join), but the unknowns show there are other possible choices. Each unknown could become a <code>largeKiteCentre</code> or a <code>largeDartBase</code>.</p>
<p>The question is then what to do with unknowns.</p>
<h1 id="partial-compositions">Partial Compositions</h1>
<p>In fact our <code>composeG</code> resolves two problems when dealing with finite patches. One is the unknowns and the other is critical missing faces needed to make up a new face (e.g the absence of any half dart).</p>
<p>It is implemented using an intermediary function for partial composition</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">partCompose<span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> <span style="color: red;">(</span><span style="color: red;">[</span>TileFace<span style="color: red;">]</span><span style="color: red;">,</span>Tgraph<span style="color: red;">)</span> </code></pre>
<p><code>partCompose</code> will compose everything that is uniquely determined, but will leave out faces round the boundary which cannot be determined or cannot be included in a new face. It returns the faces of the argument graph that were not used, along with the composed graph.</p>
<p>Figure 9 shows the result of <code>partCompose</code> applied to two graphs. [These are <code>force kiteD3</code> and <code>force dartD3</code> on the left. Force is described later]. In each case, the excluded faces of the starting graph are shown in pale green, overlaid by the composed graph on the right.</p>
<div style="text-align: center;">
<figure><img alt="Figure 9: partCompose for two graphs (force kiteD3 top row and force dartD3 bottom row)" src="https://readerunner.files.wordpress.com/2022/01/pcompfig.png?w=625"/><figcaption>Figure 9: partCompose for two graphs (force kiteD3 top row and force dartD3 bottom row)</figcaption></figure>
</div>
<p>Then <code>composeG</code> is simply defined to keep the composed faces and ignore the unused faces produced by <code>partCompose</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">composeG<span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Tgraph
composeG <span style="color: red;">=</span> snd . partCompose </code></pre>
<p>This approach avoids making a decision about unknowns when composing, but it may lose some information by throwing away the uncomposed faces.</p>
<p>For correct <code>Tgraph</code>s <code>g</code>, if <code>decomposeG g</code> has no unknowns, then <code>composeG</code> is a left inverse to <code>decomposeG</code>. However, if we take <code>g</code> to be two kite halves sharing their long edge (not their join edge), then these decompose to <code>fool</code> which produces an empty graph when recomposed. Thus we do not have <code>g = composeG (decomposeG g)</code> in general. On the other hand we do have <code>g = composeG (decomposeG g)</code> for correct <em>whole-tile</em> Tgraphs <code>g</code> (<em>whole-tile</em> means all half-tiles of <code>g</code> have their matching half-tile on their join edge in <code>g</code>)</p>
<p>Later (figure 21) we show another exception to <code>g = composeG(decomposeG g)</code> with an incorrect tiling.</p>
<p>We make use of</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">selectFacesVP    <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span> <span style="color: red;">-&gt;</span> VPatch <span style="color: red;">-&gt;</span> VPatch
removeFacesVP    <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span> <span style="color: red;">-&gt;</span> VPatch <span style="color: red;">-&gt;</span> VPatch
selectFacesGtoVP <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span> <span style="color: red;">-&gt;</span> Tgraph <span style="color: red;">-&gt;</span> VPatch
removeFacesGtoVP <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span> <span style="color: red;">-&gt;</span> Tgraph <span style="color: red;">-&gt;</span> VPatch</code></pre>
<p>for creating <code>VPatch</code>es from selected tile faces of a <code>Tgraph</code> or <code>VPatch</code>. This allows us to represent and draw a subgraph which need not be connected nor satisfy the no crossing boundaries property provided the <code>Tgraph</code> it was derived from had these properties.</p>
<h1 id="forcing">Forcing</h1>
<p>When building up a tiling, following the rules, there is often no choice about what tile can be added alongside certain tile edges at the boundary. Such additions are <em>forced</em> by the existing patch of tiles and the rules. For example, if a half tile has its join edge on the boundary, the unique mirror half tile is the only possibility for adding a face to that edge. Similarly, the short edge of a left (respectively, right) dart can only be matched with the short edge of a right (respectively, left) kite. We also make use of the fact that only 7 types of vertex can appear in (the interior of) a patch, so on a boundary vertex we sometimes have enough of the faces to determine the vertex type. These are given the following names in the literature (shown in figure 10): sun, star, jack (=largeDartBase), queen, king, ace, deuce (=largeKiteCentre).</p>
<div style="text-align: center;">
<figure><img alt="Figure 10: Vertex types" src="https://readerunner.files.wordpress.com/2022/01/verttypesfig.png?w=625"/><figcaption>Figure 10: Vertex types</figcaption></figure>
</div>
<p>The function</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">force <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Tgraph</code></pre>
<p>will add some faces on the boundary that are <em>forced</em> (i.e new faces where there is exactly one possible choice). For example:</p>
<ul>
<li>When a join edge is on the boundary – add the missing half tile to make a whole tile.</li>
<li>When a half dart has its short edge on the boundary – add the half kite that must be on the short edge.</li>
<li>When a vertex is both a dart origin and a kite wing (it must be a queen or king vertex) – if there is a boundary short edge of a kite half at the vertex, add another kite half sharing the short edge, (this converts 1 kite to 2 and 3 kites to 4 in combination with the first rule).</li>
<li>When two half kites share a short edge their common <code>oppV</code> vertex must be a deuce vertex – add any missing half darts needed to complete the vertex.</li>
<li>…</li>
</ul>
<p>Figure 11 shows <code>foolDminus</code> (which is <code>foolD</code> with 3 faces removed) on the left and the result of forcing, ie <code>force foolDminus</code> on the right which is the same graph we get from <code>force foolD</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">foolDminus <span style="color: red;">=</span> 
    removeFaces <span style="color: red;">[</span>RD<span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">14</span><span style="color: red;">,</span><span class="hs-num">11</span><span style="color: red;">)</span><span style="color: red;">,</span> LD<span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">12</span><span style="color: red;">,</span><span class="hs-num">14</span><span style="color: red;">)</span><span style="color: red;">,</span> RK<span style="color: red;">(</span><span class="hs-num">5</span><span style="color: red;">,</span><span class="hs-num">13</span><span style="color: red;">,</span><span class="hs-num">2</span><span style="color: red;">)</span><span style="color: red;">]</span> foolD</code></pre>
<div style="text-align: center;">
<figure><img alt="Figure 11: foolDminus and force foolDminus = force foolD" src="https://readerunner.files.wordpress.com/2022/01/forcefooldminus.png?w=625"/><figcaption>Figure 11: <code>foolDminus</code> and <code>force foolDminus</code> = <code>force foolD</code></figcaption></figure>
</div>
<p>Figures 12, 13 and 14 illustrate the result of forcing a 5-times decomposed kite, a 5-times decomposed dart, and a 5-times decomposed sun (respectively). The first two figures reproduce diagrams from an article by Roger Penrose illustrating the extent of influence of tiles round a decomposed kite and dart. [Penrose R <em>Tilings and quasi-crystals; a non-local growth problem?</em> in Aperiodicity and Order 2, edited by Jarich M, Academic Press, 1989. (fig 14)].</p>
<div style="text-align: center;">
<figure><img alt="Figure 12: force kiteD5 with kiteD5 shown in red" src="https://readerunner.files.wordpress.com/2022/01/forcekite5.png?w=625"/><figcaption>Figure 12: force kiteD5 with kiteD5 shown in red</figcaption></figure>
</div>
<div style="text-align: center;">
<figure><img alt="Figure 13: force dartD5 with dartD5 shown in red" src="https://readerunner.files.wordpress.com/2022/01/forcedart5.png?w=625"/><figcaption>Figure 13: force dartD5 with dartD5 shown in red</figcaption></figure>
</div>
<div style="text-align: center;">
<figure><img alt="Figure 14: force sunD5 with sunD5 shown in red" src="https://readerunner.files.wordpress.com/2022/01/forcesun5.png?w=625"/><figcaption>Figure 14: force sunD5 with sunD5 shown in red</figcaption></figure>
</div>
<p>In figure 15, the bottom row shows successive decompositions of a dart (dashed blue arrows from right to left), so applying <code>composeG</code> to each dart will go back (green arrows from left to right). The black vertical arrows are <code>force</code>. The solid blue arrows from right to left are <code>(force . decomposeG)</code> being applied to the successive forced graphs. The green arrows in the reverse direction are <code>composeG</code> again and the intermediate (<code>partCompose</code>) figures are shown in the top row with the ignored faces in pale green.</p>
<div style="text-align: center;">
<figure><img alt="Figure 15: Arrows: black = force, green = composeG, solid blue = (force . decomposeG)" src="https://readerunner.files.wordpress.com/2022/01/bigpic.png?w=625"/><figcaption>Figure 15: Arrows: black = <code>force</code>, green = <code>composeG</code>, solid blue = <code>(force . decomposeG)</code></figcaption></figure>
</div>
<p>Figure 16 shows the forced graphs of the seven vertex types (with the starting graphs in red) along with a kite (top right).</p>
<div style="text-align: center;">
<figure><img alt="Figure 16: Relating the forced seven vertex types and the kite" src="https://readerunner.files.wordpress.com/2022/01/relatedvtypefig.png?w=625"/><figcaption>Figure 16: Relating the forced seven vertex types and the kite</figcaption></figure>
</div>
<p>These are related to each other as shown in the columns. Each graph composes to the one above (an empty graph for the ones in the top row) and the graph below is its forced decomposition. [The rows have been scaled differently to make the vertex types easier to see.]</p>
<h1 id="adding-faces-to-a-tgraph">Adding Faces to a Tgraph</h1>
<p>This is technically tricky because we need to discover what vertices (and implicitly edges) need to be newly created and which ones already exist in the <code>Tgraph</code>. This goes beyond a simple graph operation and requires use of the geometry of the faces. We have chosen not to do a full conversion to vectors to work out all the geometry, but instead we introduce a local representation of angles at a vertex allowing a simple equality test.</p>
<p><strong>Integer Angles</strong></p>
<p>All vertex angles are integer multiples of 1/10th turn (<code>mod</code> 10) so we use these integers for face internal angles and boundary external angles. The face adding process always adds to the right of a given directed edge <code>(a,b)</code> which must be a boundary directed edge. [Adding to the left of an edge <code>(a,b)</code> would mean that <code>(b,a)</code> will be the boundary direction and so we are really adding to the right of <code>(b,a)</code>]. Face adding looks to see if either of the two other edges already exist in the graph by considering the end points <code>a</code> and <code>b</code> to which the new face is to be added, and checking angles.</p>
<p>This allows an edge in a particular sought direction to be discovered. If it is not found it is assumed not to exist. However, this will be undermined, there are <strong>crossing boundaries</strong> . In this case there must be more than two boundary directed edges at the vertex and there is no unique external angle.</p>
<p>Establishing the <em>no crossing boundaries</em> property ensures these failures cannot occur. We can easily check this property for newly created graphs (with <code>checkedTgraph</code>) and the face adding operations cannot create crossing boundaries.</p>
<p><strong>Touching Vertices and Crossing Boundaries</strong></p>
<p>When a new face to be added on <code>(a,b)</code> has neither of the other two edges already in the graph, the third vertex needs to be created. However it could already exist in the <code>Tgraph</code> – it is not on an edge coming from <code>a</code> or <code>b</code> but from another non-local part of the <code>Tgraph</code>. We call this a <em>touching vertex</em>. If we simply added a new vertex without checking for a clash this would create a nonsense graph. However, if we do check and find an existing vertex, we still cannot add the face using this because it would create a crossing boundary.</p>
<p>Our version of forcing prevents face additions that would create a touching vertex/crossing boundary by calculating the positions of boundary vertices.</p>
<p><strong>No conflicting edges</strong></p>
<p>There is a final (simple) check when adding a new face, to prevent a long edge (<code>phiEdge</code>) sharing with a short edge. This can arise if we force an incorrect graph (as we will see later).</p>
<h1 id="implementing-forcing">Implementing Forcing</h1>
<p>Our order of forcing prioritises updates (face additions) which do not introduce a new vertex. Such <em>safe</em> updates are easy to recognise and they do not require a touching vertex check. Surprisingly, this pretty much removes the problem of touching vertices altogether.</p>
<p>As an illustration, consider <code>foolDMinus</code> again on the left of figure 11. Adding the left dart onto edge <code>(12,14)</code> is not a safe addition (and would create a crossing boundary at 6). However, adding the right dart <code>RD(6,14,11)</code> is safe and creates the new edge (6,14) which then makes the left dart addition safe. In fact it takes some contrivance to come up with a <code>Tgraph</code> with an update that could fail the check during forcing when safe cases are always done first. Figure 17 shows such a contrived <code>Tgraph</code> formed by removing the faces shown in green from a twice decomposed sun on the left. The forced result is shown on the right. When there are no safe cases, we need to try an unsafe one. The four green faces at the bottom are blocked by the touching vertex check. This leaves any one of 9 half-kites at the centre which would pass the check. But after just one of these is added, the check is not needed again. There is always a safe addition to be done at each step until all the green faces are added.</p>
<div style="text-align: center;">
<figure><img alt="Figure 17: A contrived example requiring a touching vertex check" src="https://readerunner.files.wordpress.com/2022/01/touchingtestfig.png?w=625"/><figcaption>Figure 17: A contrived example requiring a touching vertex check</figcaption></figure>
</div>
<p><strong>Boundary information</strong></p>
<p>The implementation of forcing has been made more efficient by calculating some boundary information in advance. This boundary information uses a type <code>Boundary</code></p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">data</span> Boundary 
  <span style="color: red;">=</span> Boundary
    <span style="color: red;">{</span> bDedges     <span style="color: red;">::</span> <span style="color: red;">[</span><span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span><span style="color: red;">]</span>
    <span style="color: red;">,</span> bvFacesMap  <span style="color: red;">::</span> Mapping Vertex <span style="color: red;">[</span>TileFace<span style="color: red;">]</span>
    <span style="color: red;">,</span> bvLocMap    <span style="color: red;">::</span> Mapping Vertex <span style="color: red;">(</span>Point V2 Double<span style="color: red;">)</span>
    <span style="color: red;">,</span> allFaces    <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span>
    <span style="color: red;">,</span> allVertices <span style="color: red;">::</span> <span style="color: red;">[</span>Vertex<span style="color: red;">]</span>
    <span style="color: red;">,</span> nextVertex  <span style="color: red;">::</span> Vertex
    <span style="color: red;">}</span> <span style="color: blue; font-weight: bold;">deriving</span> <span style="color: red;">(</span>Show<span style="color: red;">)</span></code></pre>
<p>This records the boundary directed edges (<code>bDedges</code>) plus a mapping of the boundary vertices to their incident faces (<code>bvFacesMap</code>) plus a mapping of the boundary vertices to their positions (<code>bvLocMap</code>). It also keeps track of all the faces and vertices. The boundary information is easily incremented for each face addition without being recalculated from scratch, and a final graph with all the new faces is easily recovered from the boundary information when there are no more updates.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">makeBoundary  <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Boundary
recoverGraph  <span style="color: red;">::</span> Boundary <span style="color: red;">-&gt;</span> Tgraph</code></pre>
<p>The saving that comes from using boundaries lies in efficient incremental changes to boundary information and, of course, in avoiding the need to consider internal faces. As a further optimisation we keep track of updates in a mapping from boundary directed edges to updates, and supply a list of affected edges after an update so the update calculator (update generator) need only revise these. The boundary and mapping are combined in a <em>force state</em>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">type UpdateMap = Mapping DEdge Update
type UpdateGenerator = Boundary -&gt; [DEdge] -&gt; UpdateMap
data ForceState = ForceState 
       { boundaryState:: Boundary
       , updateMap:: UpdateMap 
       }
</code></pre>
<p>Forcing then involves using a specific update generator (<em>allUGenerator</em>) and initialising the state, then using the recursive <em>forceAll</em> which keeps doing updates until there are no more, before recovering the final graph.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">force:: Tgraph -&gt; Tgraph
force = forceWith allUGenerator

forceWith:: UpdateGenerator -&gt; Tgraph -&gt; Tgraph
forceWith uGen = recoverGraph . boundaryState . 
                 forceAll uGen . initForceState uGen

forceAll :: UpdateGenerator -&gt; ForceState -&gt; ForceState
initForceState :: UpdateGenerator -&gt; Tgraph -&gt; ForceState
</code></pre>
<p>In addition to <code>force</code> we can easily define</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">wholeTiles<span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Tgraph
wholeTiles = forceWith wholeTileUpdates </code></pre>
<p>which just uses the first forcing rule to make sure every half-tile has a matching other half.</p>
<p>We also have a version of <code>force</code> which counts to a specific number of face additions.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">stepForceWith :: UpdateGenerator -&gt; Int -&gt; ForceState -&gt; ForceState
</code></pre>
<p>This proved essential in uncovering problems of accumulated innaccuracy in calculating boundary positions (now fixed).</p>
<h1 id="some-other-experiments">Some Other Experiments</h1>
<p>Below we describe results of some experiments using the tools introduced above. Specifically: emplacements, sub-Tgraphs, incorrect tilings, and composition choices.</p>
<h1 id="emplacements">Emplacements</h1>
<p>The finite number of rules used in forcing are based on local boundary vertex and edge information only. We may be able to improve on this by considering a composition and forcing at the next level up before decomposing and forcing again. This thus considers slightly broader local information. In fact we can iterate this process to all the higher levels of composition. Some graphs produce an empty graph when composed so we can regard those as maximal compositions. For example <code>composeG fool</code> produces an empty graph.</p>
<p>The idea now is to take an arbitrary graph and apply <code>(composeG . force)</code> repeatedly to find its maximally composed graph, then to <code>force</code> the maximal graph before applying <code>(force . decomposeG)</code> repeatedly back down to the starting level (so the same number of decompositions as compositions).</p>
<p>We call the function <code>emplace</code>, and call the result the <em>emplacement</em> of the starting graph as it shows a region of influence around the starting graph.</p>
<p>With earlier versions of forcing when we had fewer rules, <code>emplace g</code> often extended <code>force g</code> for a Tgraph <code>g</code>. This allowed the identification of some new rules. Since adding the new rules we have not yet found graphs with different results from <code>force</code> and <code>emplace</code>. [Although, the vertex labelling of the result will usually be different].</p>
<h1 id="sub-tgraphs">Sub-Tgraphs</h1>
<p>In figure 18 on the left we have a four times decomposed dart <code>dartD4</code> followed by two sub-Tgraphs <code>brokenDart</code> and <code>badlyBrokenDart</code> which are constructed by removing faces from <code>dartD4</code> (but retaining the connectedness condition and the no crossing boundaries condition). These all produce the same forced result (depicted middle row left in figure 15).</p>
<div style="text-align: center;">
<figure><img alt="Figure 18: dartD4, brokenDart, badlyBrokenDart" src="https://readerunner.files.wordpress.com/2022/01/brokendartfig.png?w=625"/><figcaption>Figure 18: dartD4, brokenDart, badlyBrokenDart</figcaption></figure>
</div>
<p>However, if we do compositions without forcing first we find <code>badlyBrokenDart</code> fails because it produces a graph with crossing boundaries after 3 compositions. So <code>composeG</code> on its own is not always safe, where <em>safe</em> means guaranteed to produce a valid <code>Tgraph</code> from a valid correct <code>Tgraph</code>.</p>
<p>In other experiments we tried <code>force</code> on <code>Tgraph</code>s with holes and on incomplete boundaries around a potential hole. For example, we have taken the boundary faces of a forced, 5 times decomposed dart, then removed a few more faces to make a gap (which is still a valid <code>Tgraph</code>). This is shown at the top in figure 19. The result of forcing reconstructs the complete original forced graph. The bottom figure shows an intermediate stage after 2200 face additions. The gap cannot be closed off to make a hole as this would create a crossing boundary, but the channel does get filled and eventually closes the gap without creating a hole.</p>
<div style="text-align: center;">
<figure><img alt="Figure 19: Forcing boundary faces with a gap (after 2200 steps)" src="https://readerunner.files.wordpress.com/2022/01/progressfig.png?w=625"/><figcaption>Figure 19: Forcing boundary faces with a gap (after 2200 steps)</figcaption></figure>
</div>
<h1 id="incorrect-tilings">Incorrect Tilings</h1>
<p>When we say a Tgraph <code>g</code> is a <em>correct graph</em> (respectively: <em>incorrect graph</em>), we mean <code>g</code> represents a correct tiling (respectively: incorrect tiling). A simple example of an incorrect graph is a kite with a dart on each side (called a <em>mistake</em> by Penrose) shown on the left of figure 20.</p>
<pre><code>*Main&gt; mistake
Tgraph { vertices = [1,2,4,3,5,6,7,8]
       , faces = [RK (1,2,4),LK (1,3,2),RD (3,1,5)
                 ,LD (4,6,1),LD (3,5,7),RD (4,8,6)
                 ]
       }</code></pre>
<p>If we try to <code>force</code> (or <code>emplace</code>) this graph it produces an error in construction which is detected by the test for conflicting edge types (a <code>phiEdge</code> sharing with a non-<code>phiEdge</code>).</p>
<pre><code>*Main&gt; force mistake
Tgraph {vertices = *** Exception: doUpdate:(incorrect tiling)
Conflicting new face RK (11,1,6)
with neighbouring faces
[RK (9,1,11),LK (9,5,1),RK (1,2,4),LK (1,3,2),RD (3,1,5),LD (4,6,1),RD (4,8,6)]
in boundary
Boundary ...</code></pre>
<p>In figure 20 on the right, we see that after successfully constructing the two whole kites on the top dart short edges, there is an attempt to add an <code>RK</code> on edge (1,6). The process finds an existing edge (1,11) in the correct direction for one of the new edges so tries to add the erroneous <code>RK (11,1,6)</code> which fails a <code>noConflicts</code> test.</p>
<div style="text-align: center;">
<figure><img alt="Figure 20: An incorrect graph (mistake), and the point at which force mistake fails" src="https://readerunner.files.wordpress.com/2022/01/pfmistakefig.png?w=625"/><figcaption>Figure 20: An incorrect graph (<code>mistake</code>), and the point at which <code>force mistake</code> fails</figcaption></figure>
</div>
<p>So it is certainly true that incorrect graphs may fail on forcing, but forcing cannot create an incorrect graph from a correct graph.</p>
<p>If we apply <code>decomposeG</code> to <code>mistake</code> it produces another incorrect graph (which is similarly detected if we apply <code>force</code>), but will nevertheless still compose back to <code>mistake</code> if we do not try to force.</p>
<p>Interestingly, though, the incorrectness of a graph is not always preserved by <code>decomposeG</code>. If we start with <code>mistake1</code> which is <code>mistake</code> with just two of the half darts (and also an incorrect tiling) we still get a similar failure on forcing, but <code>decomposeG mistake1</code> is no longer incorrect. If we apply <code>composeG</code> to the result or <code>force</code> then <code>composeG</code> the mistake is thrown away to leave just a kite (see figure 21). This is an example where <code>composeG</code> is not a left inverse to either <code>decomposeG</code> or <code>(force . decomposeG)</code>.</p>
<div style="text-align: center;">
<figure><img alt="Figure 21: mistake1 with its decomposition, forced decomposition, and recomposed." src="https://readerunner.files.wordpress.com/2022/01/cdmistake1fig.png?w=625"/><figcaption>Figure 21: <code>mistake1</code> with its decomposition, forced decomposition, and recomposed.</figcaption></figure>
</div>
<h1 id="composing-with-choices">Composing with Choices</h1>
<p>We know that unknowns indicate possible choices (although some choices may lead to incorrect graphs). As an experiment we introduce</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">makeChoices <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> <span style="color: red;">[</span>Tgraph<span style="color: red;">]</span></code></pre>
<p>which produces <img alt="2^n" class="latex" src="https://s0.wp.com/latex.php?latex=2%5En&amp;bg=ffffff&amp;fg=444444&amp;s=0&amp;c=20201002"/> alternatives for the 2 choices of each of <img alt="n" class="latex" src="https://s0.wp.com/latex.php?latex=n&amp;bg=ffffff&amp;fg=444444&amp;s=0&amp;c=20201002"/> unknowns (prior to composing). This uses <code>forceLDB</code> which forces an unknown to be a <code>largeDartBase</code> by adding an appropriate joined half dart at the node, and <code>forceLKC</code> which forces an unknown to be a <code>largeKiteCentre</code> by adding a half dart and a whole kite at the node (making up the 3 pieces for a larger half kite).</p>
<p>Figure 22 illustrates the four choices for composing <code>fool</code> this way. The top row has the four choices of <code>makeChoices fool</code> (with the fool shown embeded in red in each case). The bottom row shows the result of applying <code>composeG</code> to each choice.</p>
<div style="text-align: center;">
<figure><img alt="Figure 22: makeChoices fool (top row) and composeG of each choice (bottom row)" src="https://readerunner.files.wordpress.com/2022/01/foolchoices.png?w=625"/><figcaption>Figure 22: makeChoices fool (top row) and composeG of each choice (bottom row)</figcaption></figure>
</div>
<p>In this case, all four compositions are correct tilings. The problem is that, in general, some of the choices may lead to incorrect tilings. More specifically, a choice of one unknown can determine what other unknowns have to become with constraints such as</p>
<ul>
<li>a and b have to be opposite choices</li>
<li>a and b have to be the same choice</li>
<li>a and b cannot both be largeKiteCentres</li>
<li>a and b cannot both be largeDartBases</li>
</ul>
<p>This analysis of constraints on unknowns is not trivial. The potential exponential results from choices suggests we should compose and force as much as possible and only consider unknowns of a maximal graph.</p>
<p>For calculating the emplacement of a graph, we first find the forced maximal graph before decomposing. We could also consider using <code>makeChoices</code> at this top step when there are unknowns, i.e a version of <code>emplace</code> which produces these alternative results (<code>emplaceChoices</code>)</p>
<p>The result of <code>emplaceChoices</code> is illustrated for <code>foolD</code> in figure 23. The first force and composition is unique producing the <code>fool</code> level at which point we get 4 alternatives each of which compose further as previously illustrated in figure 22. Each of these are forced, then decomposed and forced, decomposed and forced again back down to the starting level. In figure 23 <code>foolD</code> is overlaid on the 4 alternative results. What they have in common is (as you might expect) <code>emplace foolD</code> which equals <code>force foolD</code> and is the graph shown on the right of figure 11.</p>
<div style="text-align: center;">
<figure><img alt="Figure 23: emplaceChoices foolD" src="https://readerunner.files.wordpress.com/2022/01/emplacefooldchoices.png?w=625"/><figcaption>Figure 23: emplaceChoices foolD</figcaption></figure>
</div>
<h1 id="future-work">Future Work</h1>
<p>I am collaborating with Stephen Huggett who suggested the use of graphs for exploring properties of the tilings. We now have some tools to experiment with but we would also like to complete some formalisation and proofs. For example, we do not know if <code>force g</code> always produces the same result as <code>emplace g</code>. [Update (August 2022): We now have an example where <code>force g</code> strictly includes <code>emplace g</code>].</p>
<p>It would also be good to establish that <code>g</code> is incorrect iff <code>force g</code> fails.</p>
<p>We have other conjectures relating to subgraph ordering of <code>Tgraph</code>s and Galois connections to explore.</p></div>
    </content>
    <updated>2022-08-12T16:14:31Z</updated>
    <published>2022-01-06T15:22:11Z</published>
    <category scheme="https://readerunner.wordpress.com" term="Haskell"/>
    <category scheme="https://readerunner.wordpress.com" term="Maths"/>
    <category scheme="https://readerunner.wordpress.com" term="Darts"/>
    <category scheme="https://readerunner.wordpress.com" term="Graphs"/>
    <category scheme="https://readerunner.wordpress.com" term="Haskell Diagrams"/>
    <category scheme="https://readerunner.wordpress.com" term="Kites"/>
    <category scheme="https://readerunner.wordpress.com" term="Penrose"/>
    <category scheme="https://readerunner.wordpress.com" term="Tilings"/>
    <author>
      <name>readerunner</name>
      <uri>https://readerunner.wordpress.com</uri>
    </author>
    <source>
      <id>http://readerunner.wordpress.com/feed/atom/</id>
      <link href="https://readerunner.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://readerunner.wordpress.com/feed/atom/" rel="self" type="application/atom+xml"/>
      <link href="https://readerunner.wordpress.com/osd.xml" rel="search" title="readerunner" type="application/opensearchdescription+xml"/>
      <link href="https://s1.wp.com/opensearch.xml" rel="search" title="WordPress.com" type="application/opensearchdescription+xml"/>
      <link href="https://readerunner.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle xml:lang="en">maths and computing experiments</subtitle>
      <title xml:lang="en">readerunner</title>
      <updated>2022-08-12T16:14:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://readerunner.wordpress.com/?p=81</id>
    <link href="https://readerunner.wordpress.com/2021/09/13/diagrams-for-penrose-tiles/" rel="alternate" type="text/html"/>
    <link href="https://readerunner.wordpress.com/2021/09/13/diagrams-for-penrose-tiles/#comments" rel="replies" type="text/html"/>
    <link href="https://readerunner.wordpress.com/2021/09/13/diagrams-for-penrose-tiles/feed/atom/" rel="replies" type="application/atom+xml"/>
    <title xml:lang="en">Diagrams for Penrose Tiles</title>
    <summary xml:lang="en">Penrose Kite and Dart Tilings with Haskell Diagrams Revised version (no longer the full program in this literate Haskell) Infinite non-periodic tessellations of Roger Penrose’s kite and dart tiles. filledSun6 As part of a collaboration with Stephen Huggett, working on some mathematical properties of Penrose tilings, I recognised the need for quick renderings of tilings. […]</summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><h1 id="penrose-kite-and-dart-tilings-with-haskell-diagrams">Penrose Kite and Dart Tilings with Haskell Diagrams</h1>
<p>Revised version (no longer the full program in this literate Haskell)</p>
<p>Infinite non-periodic tessellations of Roger Penrose’s kite and dart tiles.</p>
<div style="text-align: center;">
<figure><img alt="filledSun6" src="https://readerunner.files.wordpress.com/2021/03/filledsun6.png?w=625"/><figcaption>filledSun6</figcaption></figure>
</div>
<p>As part of a collaboration with Stephen Huggett, working on some mathematical properties of Penrose tilings, I recognised the need for quick renderings of tilings. I thought <em>Haskell diagrams</em> would be helpful here, and that turned out to be an excellent choice. Two dimensional vectors were well-suited to describing tiling operations and these are included as part of the diagrams package.</p>
<p>This literate Haskell uses the Haskell diagrams package to draw tilings with kites and darts. It also implements the main operations of compChoices<code>compChoices</code> and <code>decompose</code> which are essential for constructing tilings (explained below).</p>
<p>Firstly, these 5 lines are needed in Haskell to use the diagrams package:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: green;">{-# LANGUAGE NoMonomorphismRestriction #-}</span>
<span style="color: green;">{-# LANGUAGE FlexibleContexts          #-}</span>
<span style="color: green;">{-# LANGUAGE TypeFamilies              #-}</span></code></pre>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">import</span> Diagrams.Prelude
<span style="color: blue; font-weight: bold;">import</span> Diagrams.Backend.SVG.CmdLine</code></pre>
<p>and we will also import a module for half tiles (explained later)</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">import</span> HalfTile</code></pre>
<h2 id="legal-tilings">Legal tilings</h2>
<p>These are the kite and dart tiles.</p>
<div style="text-align: center;">
<figure><img alt="Kite and Dart" src="https://readerunner.files.wordpress.com/2021/03/kitedart.png?w=625"/><figcaption>Kite and Dart</figcaption></figure>
</div>
<p>The red line marking here on the right hand copies, is purely to illustrate rules about how tiles can be put together for legal (non-periodic) tilings. Obviously edges can only be put together when they have the same length. If all the tiles are marked with red lines as illustrated on the right, the vertices where tiles meet must all have a red line or none must have a red line at that vertex. This prevents us from forming a simple rombus by placing a kite top at the base of a dart and thus enabling periodic tilings.</p>
<p>All edges are powers of the golden section <img alt="\phi" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cphi&amp;bg=ffffff&amp;fg=444444&amp;s=0&amp;c=20201002"/> which we write as <code>phi</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">phi<span style="color: red;">::</span>Double
phi <span style="color: red;">=</span> <span style="color: red;">(</span><span class="hs-num">1.0</span> + sqrt <span class="hs-num">5.0</span><span style="color: red;">)</span> / <span class="hs-num">2.0</span></code></pre>
<p>So if the shorter edges are unit length, then the longer edges have length <code>phi</code>. We also have the interesting property of the golden section that <img alt="phi^2 = phi + 1" class="latex" src="https://s0.wp.com/latex.php?latex=phi%5E2+%3D+phi+%2B+1&amp;bg=ffffff&amp;fg=444444&amp;s=0&amp;c=20201002"/> and so <img alt="1/phi = phi-1" class="latex" src="https://s0.wp.com/latex.php?latex=1%2Fphi+%3D+phi-1&amp;bg=ffffff&amp;fg=444444&amp;s=0&amp;c=20201002"/>, <img alt="phi^3 = 2phi +1" class="latex" src="https://s0.wp.com/latex.php?latex=phi%5E3+%3D+2phi+%2B1&amp;bg=ffffff&amp;fg=444444&amp;s=0&amp;c=20201002"/> and <img alt="1/phi^2 = 2-phi" class="latex" src="https://s0.wp.com/latex.php?latex=1%2Fphi%5E2+%3D+2-phi&amp;bg=ffffff&amp;fg=444444&amp;s=0&amp;c=20201002"/>.</p>
<p>All angles in the figures are multiples of <code>tt</code> which is <code>36 deg</code> or <code>1/10 turn</code>. We use <code>ttangle</code> to express such angles (e.g 180 degrees is <code>ttangle 5</code>).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">ttangle<span style="color: red;">::</span> Int <span style="color: red;">-&gt;</span> Angle Double
ttangle n <span style="color: red;">=</span> <span style="color: red;">(</span>fromIntegral <span style="color: red;">(</span>n `mod` <span class="hs-num">10</span><span style="color: red;">)</span><span style="color: red;">)</span>*^tt
             <span style="color: blue; font-weight: bold;">where</span> tt <span style="color: red;">=</span> <span class="hs-num">1</span>/<span class="hs-num">10</span> @@ turn</code></pre>
<h2 id="pieces">Pieces</h2>
<p>In order to implement <code>compChoices</code> and <code>decompose</code>, we need to work with half tiles. We now define these in the separately imported module <code>HalfTile</code> with constructors for Left Dart, Right Dart, Left Kite, Right Kite</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">data</span> HalfTile rep <span style="color: red;">=</span> LD rep <span style="color: green;">-- defined in HalfTile module</span>
                  <span style="color: red;">|</span> RD rep
                  <span style="color: red;">|</span> LK rep
                  <span style="color: red;">|</span> RK rep</code></pre>
<p>where <code>rep</code> is a type variable allowing for different representations. However, here, we want to use a more specific type which we will call <code>Piece</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">type</span> Piece <span style="color: red;">=</span> HalfTile <span style="color: red;">(</span>V2 Double<span style="color: red;">)</span></code></pre>
<p>where the half tiles have a simple 2D vector representation to provide orientation and scale. The vector represents the <em>join</em> edge of each half tile where halves come together. The origin for a dart is the tip, and the origin for a kite is the acute angle tip (marked in the figure with a red dot).</p>
<p>These are the only 4 pieces we use (oriented along the x axis)</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">ldart<span style="color: red;">,</span>rdart<span style="color: red;">,</span>lkite<span style="color: red;">,</span>rkite<span style="color: red;">::</span> Piece
ldart <span style="color: red;">=</span> LD unitX
rdart <span style="color: red;">=</span> RD unitX
lkite <span style="color: red;">=</span> LK <span style="color: red;">(</span>phi*^unitX<span style="color: red;">)</span>
rkite <span style="color: red;">=</span> RK <span style="color: red;">(</span>phi*^unitX<span style="color: red;">)</span></code></pre>
<div style="text-align: center;">
<figure><img alt="pieces" src="https://readerunner.files.wordpress.com/2021/09/pieces.png?w=625"/><figcaption>pieces</figcaption></figure>
</div>
<p>Perhaps confusingly, we regard left and right of a dart differently from left and right of a kite when viewed from the origin. The diagram shows the left dart before the right dart and the left kite before the right kite. Thus in a complete tile, going clockwise round the origin the right dart comes before the left dart, but the left kite comes before the right kite.</p>
<p>When it comes to drawing pieces, for the simplest case, we just want to show the two tile edges of each piece (and not the join edge). These edges are calculated as a list of 2 new vectors, using the join edge vector <code>v</code>. They are ordered clockwise from the origin of each piece</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">pieceEdges<span style="color: red;">::</span> Piece <span style="color: red;">-&gt;</span> <span style="color: red;">[</span>V2 Double<span style="color: red;">]</span>
pieceEdges <span style="color: red;">(</span>LD v<span style="color: red;">)</span> <span style="color: red;">=</span> <span style="color: red;">[</span>v'<span style="color: red;">,</span>v ^-^ v'<span style="color: red;">]</span> <span style="color: blue; font-weight: bold;">where</span> v' <span style="color: red;">=</span> phi*^rotate <span style="color: red;">(</span>ttangle <span class="hs-num">9</span><span style="color: red;">)</span> v
pieceEdges <span style="color: red;">(</span>RD v<span style="color: red;">)</span> <span style="color: red;">=</span> <span style="color: red;">[</span>v'<span style="color: red;">,</span>v ^-^ v'<span style="color: red;">]</span> <span style="color: blue; font-weight: bold;">where</span> v' <span style="color: red;">=</span> phi*^rotate <span style="color: red;">(</span>ttangle <span class="hs-num">1</span><span style="color: red;">)</span> v
pieceEdges <span style="color: red;">(</span>RK v<span style="color: red;">)</span> <span style="color: red;">=</span> <span style="color: red;">[</span>v'<span style="color: red;">,</span>v ^-^ v'<span style="color: red;">]</span> <span style="color: blue; font-weight: bold;">where</span> v' <span style="color: red;">=</span> rotate <span style="color: red;">(</span>ttangle <span class="hs-num">9</span><span style="color: red;">)</span> v
pieceEdges <span style="color: red;">(</span>LK v<span style="color: red;">)</span> <span style="color: red;">=</span> <span style="color: red;">[</span>v'<span style="color: red;">,</span>v ^-^ v'<span style="color: red;">]</span> <span style="color: blue; font-weight: bold;">where</span> v' <span style="color: red;">=</span> rotate <span style="color: red;">(</span>ttangle <span class="hs-num">1</span><span style="color: red;">)</span> v</code></pre>
<p>Now drawing lines for the 2 outer edges of a piece is simply</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">drawPiece<span style="color: red;">::</span> Piece <span style="color: red;">-&gt;</span> Diagram B
drawPiece <span style="color: red;">=</span> strokeLine . fromOffsets . pieceEdges</code></pre>
<p>It is also useful to calculate a list of the 4 tile edges of a completed half-tile piece clockwise from the origin of the tile. (This is useful for colour filling a tile)</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">tileEdges<span style="color: red;">::</span> Piece <span style="color: red;">-&gt;</span> <span style="color: red;">[</span>V2 Double<span style="color: red;">]</span>
tileEdges <span style="color: red;">(</span>LD v<span style="color: red;">)</span> <span style="color: red;">=</span> pieceEdges <span style="color: red;">(</span>RD v<span style="color: red;">)</span> ++ map negated <span style="color: red;">(</span>reverse <span style="color: red;">(</span>pieceEdges <span style="color: red;">(</span>LD v<span style="color: red;">)</span><span style="color: red;">)</span><span style="color: red;">)</span>
tileEdges <span style="color: red;">(</span>RD v<span style="color: red;">)</span> <span style="color: red;">=</span> tileEdges <span style="color: red;">(</span>LD v<span style="color: red;">)</span>
tileEdges <span style="color: red;">(</span>LK v<span style="color: red;">)</span> <span style="color: red;">=</span> pieceEdges <span style="color: red;">(</span>LK v<span style="color: red;">)</span> ++ map negated <span style="color: red;">(</span>reverse <span style="color: red;">(</span>pieceEdges <span style="color: red;">(</span>RK v<span style="color: red;">)</span><span style="color: red;">)</span><span style="color: red;">)</span>
tileEdges <span style="color: red;">(</span>RK v<span style="color: red;">)</span> <span style="color: red;">=</span> tileEdges <span style="color: red;">(</span>LK v<span style="color: red;">)</span></code></pre>
<p>To fill whole tiles with colours, darts with <code>dcol</code> and kites with <code>kcol</code> we can use <code>leftFillDK</code>. This uses only the left pieces to identify the whole tile and ignores right pieces so that a tile is not filled twice.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">leftFillDK<span style="color: red;">::</span> Colour Double <span style="color: red;">-&gt;</span> Colour Double <span style="color: red;">-&gt;</span> Piece <span style="color: red;">-&gt;</span> Diagram B
leftFillDK dcol kcol c <span style="color: red;">=</span>
  <span style="color: blue; font-weight: bold;">case</span> c <span style="color: blue; font-weight: bold;">of</span> <span style="color: red;">(</span>LD <span style="color: blue; font-weight: bold;">_</span><span style="color: red;">)</span> <span style="color: red;">-&gt;</span> <span style="color: red;">(</span>strokeLoop $ glueLine $ fromOffsets $ tileEdges c<span style="color: red;">)
</span>                       # fc dcol
            <span style="color: red;">(</span>LK <span style="color: blue; font-weight: bold;">_</span><span style="color: red;">)</span> <span style="color: red;">-&gt;</span> <span style="color: red;">(</span>strokeLoop $ glueLine $ fromOffsets $ tileEdges c<span style="color: red;">)
</span>                        # fc kcol
            <span style="color: blue; font-weight: bold;">_</span>      <span style="color: red;">-&gt;</span> mempty</code></pre>
<p>To fill half tiles separately, we can use <code>fillPiece</code> which fills without drawing edges of a half tile.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">fillPiece:: Colour Double -&gt; Piece -&gt; Diagram B
fillPiece col piece = drawJPiece piece # fc col # lw none</code></pre>
<p>For an alternative fill operation  we can use <code>fillDK</code> which fills darts and kites with given colours and draws the edges with drawPiece.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">fillDK:: Colour Double -&gt; Colour Double -&gt; Piece -&gt; Diagram B
fillDK dcol kcol piece = drawPiece piece &lt;&gt; fillPiece col piece where
    col = case piece of (LD _) -&gt; dcol
           (RD _) -&gt; dcol
           (LK _) -&gt; kcol
           (RK _) -&gt; kcol
</code></pre>
<p>By making <code>Pieces</code> transformable we can reuse generic transform operations. These 4 lines of code are required to do this</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">type</span> <span style="color: blue; font-weight: bold;">instance</span> N <span style="color: red;">(</span>HalfTile a<span style="color: red;">)</span> <span style="color: red;">=</span> N a
<span style="color: blue; font-weight: bold;">type</span> <span style="color: blue; font-weight: bold;">instance</span> V <span style="color: red;">(</span>HalfTile a<span style="color: red;">)</span> <span style="color: red;">=</span> V a
<span style="color: blue; font-weight: bold;">instance</span> Transformable a <span style="color: red;">=&gt;</span> Transformable <span style="color: red;">(</span>HalfTile a<span style="color: red;">)</span> <span style="color: blue; font-weight: bold;">where</span>
    transform t ht <span style="color: red;">=</span> fmap <span style="color: red;">(</span>transform t<span style="color: red;">)</span> ht</code></pre>
<p>So we can also scale a piece  and rotate a piece by an angle. (Positive rotations are in the anticlockwise direction.)</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">scale<span style="color: red;">::</span> Double <span style="color: red;">-&gt;</span> Piece <span style="color: red;">-&gt;</span> Piece
rotate <span style="color: red;">::</span> Angle Double <span style="color: red;">-&gt;</span> Piece <span style="color: red;">-&gt;</span> Piece</code></pre>
<h2 id="patches">Patches</h2>
<p>A patch is a list of located pieces (each with a 2D point)</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">type</span> Patch <span style="color: red;">=</span> <span style="color: red;">[</span>Located Piece<span style="color: red;">]</span></code></pre>
<p>To turn a whole patch into a diagram using some function <code>cd</code> for drawing the pieces, we use</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">patchWith cd patch <span style="color: red;">=</span> position $ fmap <span style="color: red;">(</span>viewLoc . mapLoc cd<span style="color: red;">)</span> patch</code></pre>
<p>Here <code>mapLoc</code> applies a function to the piece in a located piece – producing a located diagram in this case, and <code>viewLoc</code> returns the pair of point and diagram from a located diagram. Finally <code>position</code> forms a single diagram from the list of pairs of points and diagrams.</p>
<p>The common special case <code>drawPatch</code> uses <code>drawPiece</code> on each piece</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">drawPatch <span style="color: red;">=</span> patchWith drawPiece</code></pre>
<p>Patches are automatically inferred to be transformable now Pieces are transformable, so we can also scale a patch, translate a patch by a vector, and rotate a patch by an angle.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">scale <span style="color: red;">::</span> Double <span style="color: red;">-&gt;</span> Patch <span style="color: red;">-&gt;</span> Patch
rotate <span style="color: red;">::</span> Angle Double <span style="color: red;">-&gt;</span> Patch <span style="color: red;">-&gt;</span> Patch
translate<span style="color: red;">::</span> V2 Double <span style="color: red;">-&gt;</span> Patch <span style="color: red;">-&gt;</span> Patch</code></pre>
<p>As an aid to creating patches with 5-fold rotational symmetry, we combine 5 copies of a basic patch (rotated by multiples of <code>ttangle 2</code> successively).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">penta<span style="color: red;">::</span> Patch <span style="color: red;">-&gt;</span> Patch
penta p <span style="color: red;">=</span> concatMap copy <span style="color: red;">[</span><span class="hs-num">0</span><span style="color: red;">..</span><span class="hs-num">4</span><span style="color: red;">]</span> 
            <span style="color: blue; font-weight: bold;">where</span> copy n <span style="color: red;">=</span> rotate <span style="color: red;">(</span>ttangle <span style="color: red;">(</span><span class="hs-num">2</span>*n<span style="color: red;">)</span><span style="color: red;">)</span> p</code></pre>
<p>This must be used with care to avoid nonsense patches. But two special cases are</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">sun<span style="color: red;">,</span>star<span style="color: red;">::</span>Patch         
sun <span style="color: red;">=</span>  penta <span style="color: red;">[</span>rkite `at` origin<span style="color: red;">,</span> lkite `at` origin<span style="color: red;">]</span>
star <span style="color: red;">=</span> penta <span style="color: red;">[</span>rdart `at` origin<span style="color: red;">,</span> ldart `at` origin<span style="color: red;">]</span></code></pre>
<p>This figure shows some example patches, drawn with <code>drawPatch</code> The first is a <code>star</code> and the second is a <code>sun</code>.</p>
<div style="text-align: center;">
<figure><img alt="tile patches" src="https://readerunner.files.wordpress.com/2021/03/tilepatches.png?w=625"/><figcaption>tile patches</figcaption></figure>
</div>
<p>The tools so far for creating patches may seem limited (and do not help with ensuring legal tilings), but there is an even bigger problem.</p>
<h2 id="correct-tilings">Correct Tilings</h2>
<p>Unfortunately, correct tilings – that is, tilings which can be extended to infinity – are not as simple as just legal tilings. It is not enough to have a legal tiling, because an apparent (legal) choice of placing one tile can have non-local consequences, causing a conflict with a choice made far away in a patch of tiles, resulting in a patch which cannot be extended. This suggests that constructing correct patches is far from trivial.</p>
<p>The infinite number of possible infinite tilings do have some remarkable properties. Any finite patch from one of them, will occur in all the others (infinitely many times) and within a relatively small radius of any point in an infinite tiling. (For details of this see links at the end)</p>
<p>This is why we need a different approach to constructing larger patches. There are two significant processes used for creating patches, namely <code>compChoices</code> and <code>decompose</code>.</p>
<p>To understand these processes, take a look at the following figure.</p>
<div style="text-align: center;">
<figure><img alt="experiment" src="https://readerunner.files.wordpress.com/2021/03/experiment.png?w=625"/><figcaption>experiment</figcaption></figure>
</div>
<p>Here the <em>small</em> pieces have been drawn in an unusual way. The edges have been drawn with dashed lines, but long edges of kites have been emphasised with a solid line and the join edges of darts marked with a red line. From this you may be able to make out a patch of larger scale kites and darts. This is a composed patch arising from the smaller scale patch. Conversely, the larger kites and darts decompose to the smaller scale ones.</p>
<h2 id="decomposition">Decomposition</h2>
<p>Since the rule for decomposition is uniquely determined, we can express it as a simple function on patches.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">decompose <span style="color: red;">::</span> Patch <span style="color: red;">-&gt;</span> Patch
decompose <span style="color: red;">=</span> concatMap decompPiece</code></pre>
<p>where the function <code>decompPiece</code> acts on located pieces and produces a list of the smaller located pieces contained in the piece. For example, a larger right dart will produce both a smaller right dart and a smaller left kite. Decomposing a located piece also takes care of the location, scale and rotation of the new pieces.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">decompPiece lp <span style="color: red;">=</span> <span style="color: blue; font-weight: bold;">case</span> viewLoc lp <span style="color: blue; font-weight: bold;">of</span>
  <span style="color: red;">(</span>p<span style="color: red;">,</span> RD vd<span style="color: red;">)</span><span style="color: red;">-&gt;</span> <span style="color: red;">[</span> LK vd  `at` p
               <span style="color: red;">,</span> RD vd' `at` <span style="color: red;">(</span>p .+^ v'<span style="color: red;">)</span>
               <span style="color: red;">]</span> <span style="color: blue; font-weight: bold;">where</span> v'  <span style="color: red;">=</span> phi*^rotate <span style="color: red;">(</span>ttangle <span class="hs-num">1</span><span style="color: red;">)</span> vd
                       vd' <span style="color: red;">=</span> <span style="color: red;">(</span><span class="hs-num">2</span><span style="color: green;">-</span>phi<span style="color: red;">)</span> *^ <span style="color: red;">(</span>negated v'<span style="color: red;">)</span> <span style="color: green;">-- (2-phi) = 1/phi^2</span>
  <span style="color: red;">(</span>p<span style="color: red;">,</span> LD vd<span style="color: red;">)</span><span style="color: red;">-&gt;</span> <span style="color: red;">[</span> RK vd `at` p
               <span style="color: red;">,</span> LD vd' `at` <span style="color: red;">(</span>p .+^ v'<span style="color: red;">)</span>
               <span style="color: red;">]</span>  <span style="color: blue; font-weight: bold;">where</span> v'  <span style="color: red;">=</span> phi*^rotate <span style="color: red;">(</span>ttangle <span class="hs-num">9</span><span style="color: red;">)</span> vd
                        vd' <span style="color: red;">=</span> <span style="color: red;">(</span><span class="hs-num">2</span><span style="color: green;">-</span>phi<span style="color: red;">)</span> *^ <span style="color: red;">(</span>negated v'<span style="color: red;">)</span>  <span style="color: green;">-- (2-phi) = 1/phi^2</span>
  <span style="color: red;">(</span>p<span style="color: red;">,</span> RK vk<span style="color: red;">)</span><span style="color: red;">-&gt;</span> <span style="color: red;">[</span> RD vd' `at` p
               <span style="color: red;">,</span> LK vk' `at` <span style="color: red;">(</span>p .+^ v'<span style="color: red;">)</span>
               <span style="color: red;">,</span> RK vk' `at` <span style="color: red;">(</span>p .+^ v'<span style="color: red;">)</span>
               <span style="color: red;">]</span> <span style="color: blue; font-weight: bold;">where</span> v'  <span style="color: red;">=</span> rotate <span style="color: red;">(</span>ttangle <span class="hs-num">9</span><span style="color: red;">)</span> vk
                       vd' <span style="color: red;">=</span> <span style="color: red;">(</span><span class="hs-num">2</span><span style="color: green;">-</span>phi<span style="color: red;">)</span> *^ v' <span style="color: green;">-- v'/phi^2</span>
                       vk' <span style="color: red;">=</span> <span style="color: red;">(</span><span style="color: red;">(</span>phi<span style="color: green;">-</span><span class="hs-num">1</span><span style="color: red;">)</span> *^ vk<span style="color: red;">)</span> ^-^ v' <span style="color: green;">-- (phi-1) = 1/phi</span>
  <span style="color: red;">(</span>p<span style="color: red;">,</span> LK vk<span style="color: red;">)</span><span style="color: red;">-&gt;</span> <span style="color: red;">[</span> LD vd' `at` p
               <span style="color: red;">,</span> RK vk' `at` <span style="color: red;">(</span>p .+^ v'<span style="color: red;">)</span>
               <span style="color: red;">,</span> LK vk' `at` <span style="color: red;">(</span>p .+^ v'<span style="color: red;">)</span>
               <span style="color: red;">]</span> <span style="color: blue; font-weight: bold;">where</span> v'  <span style="color: red;">=</span> rotate <span style="color: red;">(</span>ttangle <span class="hs-num">1</span><span style="color: red;">)</span> vk
                       vd' <span style="color: red;">=</span> <span style="color: red;">(</span><span class="hs-num">2</span><span style="color: green;">-</span>phi<span style="color: red;">)</span> *^ v' <span style="color: green;">-- v'/phi^2</span>
                       vk' <span style="color: red;">=</span> <span style="color: red;">(</span><span style="color: red;">(</span>phi<span style="color: green;">-</span><span class="hs-num">1</span><span style="color: red;">)</span> *^ vk<span style="color: red;">)</span> ^-^ v' <span style="color: green;">-- (phi-1) = 1/phi</span></code></pre>
<p>This is illustrated in the following figure for the cases of a right dart and a right kite.</p>
<div style="text-align: center;">
<figure><img alt="explanation" src="https://readerunner.files.wordpress.com/2021/09/decompexplainfig.png?w=625"/><figcaption>explanation</figcaption></figure>
</div>
<p>The symmetric diagrams for left pieces are easy to work out from these, so they are not illustrated.</p>
<p>With the <code>decompose</code> operation we can start with a simple correct patch, and decompose repeatedly to get more and more detailed patches. (Each decomposition scales the tiles down by a factor of <img alt="1/phi" class="latex" src="https://s0.wp.com/latex.php?latex=1%2Fphi&amp;bg=ffffff&amp;fg=444444&amp;s=0&amp;c=20201002"/> but we can rescale at any time.)</p>
<p>This figure illustrates how each piece decomposes with 4 decomposition steps below each one.</p>
<div style="text-align: center;">
<figure><img alt="four decompositions of pieces" src="https://readerunner.files.wordpress.com/2021/03/fourdecomps.png?w=625"/><figcaption>four decompositions of pieces</figcaption></figure>
</div>
<pre class="sourceCode haskell"><code class="sourceCode haskell">thePieces <span style="color: red;">=</span>  <span style="color: red;">[</span>ldart<span style="color: red;">,</span> rdart<span style="color: red;">,</span> lkite<span style="color: red;">,</span> rkite<span style="color: red;">]</span>  
fourDecomps <span style="color: red;">=</span> hsep <span class="hs-num">1</span> $ fmap decomps thePieces # lw thin <span style="color: blue; font-weight: bold;">where</span>
        decomps pc <span style="color: red;">=</span> vsep <span class="hs-num">1</span> $ fmap drawPatch $ take <span class="hs-num">5</span> $ decompositions <span style="color: red;">[</span>pc `at` origin<span style="color: red;">]</span> </code></pre>
<p>We have made use of the fact that we can create an infinite list of finer and finer decompositions of any patch, using:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">decompositions<span style="color: red;">::</span> Patch <span style="color: red;">-&gt;</span> <span style="color: red;">[</span>Patch<span style="color: red;">]</span>
decompositions <span style="color: red;">=</span> iterate decompose</code></pre>
<p>We could get the n-fold decomposition of a patch as just the nth item in a list of decompositions.</p>
<p>For example, here is an infinite list of decomposed versions of <code>sun</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">suns <span style="color: red;">=</span> decompositions sun</code></pre>
<p>The coloured tiling shown at the beginning is simply 6 decompositions of <code>sun</code> displayed using <code>leftFillDK</code></p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">sun6 <span style="color: red;">=</span> suns!!<span class="hs-num">6</span>
filledSun6 <span style="color: red;">=</span> patchWith <span style="color: red;">(</span>leftFillDK red blue<span style="color: red;">)</span> sun6 # lw ultraThin</code></pre>
<p>The earlier figure illustrating larger kites and darts emphasised from the smaller ones is also <code>sun6</code> but this time drawn with</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">experimentFig <span style="color: red;">=</span> patchWith experiment sun6 # lw thin</code></pre>
<p>where pieces are drawn with</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">experiment<span style="color: red;">::</span> Piece <span style="color: red;">-&gt;</span> Diagram B
experiment pc <span style="color: red;">=</span> emph pc &lt;&gt; <span style="color: red;">(</span>drawJPiece pc # dashingN <span style="color: red;">[</span><span class="hs-num">0.002</span><span style="color: red;">,</span><span class="hs-num">0.002</span><span style="color: red;">]</span> <span class="hs-num">0
</span>                            # lw ultraThin<span style="color: red;">)</span>
  <span style="color: blue; font-weight: bold;">where</span> emph pc <span style="color: red;">=</span> <span style="color: blue; font-weight: bold;">case</span> pc <span style="color: blue; font-weight: bold;">of</span>
   <span style="color: green;">-- emphasise join edge of darts in red</span>
          <span style="color: red;">(</span>LD v<span style="color: red;">)</span> <span style="color: red;">-&gt;</span> <span style="color: red;">(</span>strokeLine . fromOffsets<span style="color: red;">)</span> <span style="color: red;">[</span>v<span style="color: red;">]</span> # lc red
          <span style="color: red;">(</span>RD v<span style="color: red;">)</span> <span style="color: red;">-&gt;</span> <span style="color: red;">(</span>strokeLine . fromOffsets<span style="color: red;">)</span> <span style="color: red;">[</span>v<span style="color: red;">]</span> # lc red 
   <span style="color: green;">-- emphasise long edges for kites</span>
          <span style="color: red;">(</span>LK v<span style="color: red;">)</span> <span style="color: red;">-&gt;</span> <span style="color: red;">(</span>strokeLine . fromOffsets<span style="color: red;">)</span> <span style="color: red;">[</span>rotate <span style="color: red;">(</span>ttangle <span class="hs-num">1</span><span style="color: red;">)</span> v<span style="color: red;">]
</span>          <span style="color: red;">(</span>RK v<span style="color: red;">)</span> <span style="color: red;">-&gt;</span> <span style="color: red;">(</span>strokeLine . fromOffsets<span style="color: red;">)</span> <span style="color: red;">[</span>rotate <span style="color: red;">(</span>ttangle <span class="hs-num">9</span><span style="color: red;">)</span> v<span style="color: red;">]</span></code></pre>
<h2 id="inflation">Compose Choices</h2>
<p>You might expect <em>composition</em> to be a kind of inverse to decomposition, but it is a bit more complicated than that. With our current representation of pieces, we can only compose single pieces. This amounts to embedding the piece into a larger piece that matches how the larger piece decomposes. There is thus a choice at each composition step as to which of several possibilities we select as the larger half-tile. We represent this choice as a list of alternatives. This list should not be confused with a patch. It only makes sense to select one of the alternatives giving a new single piece.</p>
<p>The earlier diagram illustrating how decompositions are calculated also shows the two choices for embedding a right dart into either a right kite or a larger right dart. There will be two symmetric choices for a left dart, and three choices for left and right kites.</p>
<p>Once again we work with located pieces to ensure the resulting larger piece contains the original in its original position in a decomposition.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">compChoices <span style="color: red;">::</span> Located Piece <span style="color: red;">-&gt;</span> <span style="color: red;">[</span>Located Piece<span style="color: red;">]</span>
compChoices lp <span style="color: red;">=</span> <span style="color: blue; font-weight: bold;">case</span> viewLoc lp <span style="color: blue; font-weight: bold;">of</span>
  <span style="color: red;">(</span>p<span style="color: red;">,</span> RD vd<span style="color: red;">)</span><span style="color: red;">-&gt;</span> <span style="color: red;">[</span> RD vd' `at` <span style="color: red;">(</span>p .+^ v'<span style="color: red;">)</span>
               <span style="color: red;">,</span> RK vk  `at` p
               <span style="color: red;">]</span> <span style="color: blue; font-weight: bold;">where</span> v'  <span style="color: red;">=</span> <span style="color: red;">(</span>phi+<span class="hs-num">1</span><span style="color: red;">)</span> *^ vd       <span style="color: green;">-- vd*phi^2</span>
                       vd' <span style="color: red;">=</span> rotate <span style="color: red;">(</span>ttangle <span class="hs-num">9</span><span style="color: red;">)</span> <span style="color: red;">(</span>vd ^-^ v'<span style="color: red;">)</span>
                       vk  <span style="color: red;">=</span> rotate <span style="color: red;">(</span>ttangle <span class="hs-num">1</span><span style="color: red;">)</span> v'
  <span style="color: red;">(</span>p<span style="color: red;">,</span> LD vd<span style="color: red;">)</span><span style="color: red;">-&gt;</span> <span style="color: red;">[</span> LD vd' `at` <span style="color: red;">(</span>p .+^ v'<span style="color: red;">)</span>
               <span style="color: red;">,</span> LK vk `at` p
               <span style="color: red;">]</span> <span style="color: blue; font-weight: bold;">where</span> v'  <span style="color: red;">=</span> <span style="color: red;">(</span>phi+<span class="hs-num">1</span><span style="color: red;">)</span> *^ vd        <span style="color: green;">-- vd*phi^2</span>
                       vd' <span style="color: red;">=</span> rotate <span style="color: red;">(</span>ttangle <span class="hs-num">1</span><span style="color: red;">)</span> <span style="color: red;">(</span>vd ^-^ v'<span style="color: red;">)</span>
                       vk  <span style="color: red;">=</span> rotate <span style="color: red;">(</span>ttangle <span class="hs-num">9</span><span style="color: red;">)</span> v'
  <span style="color: red;">(</span>p<span style="color: red;">,</span> RK vk<span style="color: red;">)</span><span style="color: red;">-&gt;</span> <span style="color: red;">[</span> LD vk  `at` p
               <span style="color: red;">,</span> LK lvk' `at` <span style="color: red;">(</span>p .+^ lv'<span style="color: red;">)</span> 
               <span style="color: red;">,</span> RK rvk' `at` <span style="color: red;">(</span>p .+^ rv'<span style="color: red;">)</span>
               <span style="color: red;">]</span> <span style="color: blue; font-weight: bold;">where</span> lv'  <span style="color: red;">=</span> phi*^rotate <span style="color: red;">(</span>ttangle <span class="hs-num">9</span><span style="color: red;">)</span> vk
                       rv'  <span style="color: red;">=</span> phi*^rotate <span style="color: red;">(</span>ttangle <span class="hs-num">1</span><span style="color: red;">)</span> vk
                       rvk' <span style="color: red;">=</span> phi*^rotate <span style="color: red;">(</span>ttangle <span class="hs-num">7</span><span style="color: red;">)</span> vk
                       lvk' <span style="color: red;">=</span> phi*^rotate <span style="color: red;">(</span>ttangle <span class="hs-num">3</span><span style="color: red;">)</span> vk
  <span style="color: red;">(</span>p<span style="color: red;">,</span> LK vk<span style="color: red;">)</span><span style="color: red;">-&gt;</span> <span style="color: red;">[</span> RD vk  `at` p
               <span style="color: red;">,</span> RK rvk' `at` <span style="color: red;">(</span>p .+^ rv'<span style="color: red;">)</span>
               <span style="color: red;">,</span> LK lvk' `at` <span style="color: red;">(</span>p .+^ lv'<span style="color: red;">)</span>
               <span style="color: red;">]</span> <span style="color: blue; font-weight: bold;">where</span> v0 <span style="color: red;">=</span> rotate <span style="color: red;">(</span>ttangle <span class="hs-num">1</span><span style="color: red;">)</span> vk
                       lv'  <span style="color: red;">=</span> phi*^rotate <span style="color: red;">(</span>ttangle <span class="hs-num">9</span><span style="color: red;">)</span> vk
                       rv'  <span style="color: red;">=</span> phi*^rotate <span style="color: red;">(</span>ttangle <span class="hs-num">1</span><span style="color: red;">)</span> vk
                       rvk' <span style="color: red;">=</span> phi*^rotate <span style="color: red;">(</span>ttangle <span class="hs-num">7</span><span style="color: red;">)</span> vk
                       lvk' <span style="color: red;">=</span> phi*^rotate <span style="color: red;">(</span>ttangle <span class="hs-num">3</span><span style="color: red;">)</span> vk</code></pre>
<p>As the result is a list of alternatives, we need to select one to make further composition choices. We can express all the alternatives after n steps as <code>compNChoices n</code> where</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">compNChoices <span style="color: red;">::</span> Int <span style="color: red;">-&gt;</span> Located Piece <span style="color: red;">-&gt;</span> <span style="color: red;">[</span>Located Piece<span style="color: red;">]</span>
compNChoices <span class="hs-num">0</span> lp <span style="color: red;">=</span> <span style="color: red;">[</span>lp<span style="color: red;">]</span>
compNChoices n lp <span style="color: red;">=</span> <span style="color: blue; font-weight: bold;">do</span>
    lp' <span style="color: red;">&lt;-</span> compChoices lp
    compNChoices <span style="color: red;">(</span>n<span style="color: green;">-</span><span class="hs-num">1</span><span style="color: red;">)</span> lp'</code></pre>
<p>This figure illustrates 5 consecutive choices for composing a left dart to produce a left kite. On the left, the finishing piece is shown with the starting piece embedded, and on the right the 5-fold decomposition of the result is shown.</p>
<div style="text-align: center;">
<figure><img alt="five inflations" src="https://readerunner.files.wordpress.com/2021/03/fiveinflate.png?w=625"/><figcaption>five inflations</figcaption></figure>
</div>
<pre class="sourceCode haskell"><code class="sourceCode haskell">fiveCompChoices <span style="color: red;">=</span> hsep <span class="hs-num">1</span> $ fmap drawPatch <span style="color: red;">[</span><span style="color: red;">[</span>ld<span style="color: red;">,</span>lk'<span style="color: red;">]</span><span style="color: red;">,</span> multiDecomp <span class="hs-num">5</span> <span style="color: red;">[</span>lk'<span style="color: red;">]</span><span style="color: red;">]</span> <span style="color: blue; font-weight: bold;">where</span> 
<span style="color: green;">-- two separate patches</span>
       ld  <span style="color: red;">=</span> <span style="color: red;">(</span>ldart `at` origin<span style="color: red;">)</span>
       lk  <span style="color: red;">=</span> compChoices ld  !!<span class="hs-num">1</span>
       rk  <span style="color: red;">=</span> compChoices lk  !!<span class="hs-num">1</span>
       rk' <span style="color: red;">=</span> compChoices rk  !!<span class="hs-num">2</span>
       ld' <span style="color: red;">=</span> compChoices rk' !!<span class="hs-num">0</span>
       lk' <span style="color: red;">=</span> compChoices ld' !!<span class="hs-num">1</span></code></pre>
<p>Finally, at the end of this literate haskell program we choose which figure to draw as output.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">fig<span style="color: red;">::</span>Diagram B
fig <span style="color: red;">=</span> filledSun6</code></pre>
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span style="color: red;">=</span> mainWith fig</code></pre>
<p>That’s it. But, <em>What about composing whole patches?</em>, I hear you ask. Unfortunately we need to answer questions like what pieces are adjacent to a piece in a patch and whether there is a corresponding other half for a piece. These cannot be done easily with our simple vector representations. We would need some form of planar graph representation, which is much more involved. That is another story.</p>
<p>Many thanks to Stephen Huggett for his inspirations concerning the tilings. A library version of the above code is available on <a href="https://github.com/chrisreade/PenroseKiteDart">GitHub</a></p>
<h2 id="further-reading-on-penrose-tilings">Further reading on Penrose Tilings</h2>
<p>As well as the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Penrose_tiling">Penrose Tilings</a> I recommend two articles in Scientific American from 2005 by David Austin <a href="http://www.ams.org/publicoutreach/feature-column/fcarc-penrose">Penrose Tiles Talk Across Miles</a> and <a href="http://www.ams.org/publicoutreach/feature-column/fcarc-ribbons">Penrose Tilings Tied up in Ribbons</a>.</p>
<p>There is also a very interesting article by Roger Penrose himself: Penrose R <em>Tilings and quasi-crystals; a non-local growth problem?</em> in Aperiodicity and Order 2, edited by Jarich M, Academic Press, 1989.</p>
<p>More information about the diagrams package can be found from the home page <a href="https://archives.haskell.org/projects.haskell.org/diagrams/">Haskell diagrams</a></p></div>
    </content>
    <updated>2022-08-12T10:21:41Z</updated>
    <published>2021-09-13T01:00:00Z</published>
    <category scheme="https://readerunner.wordpress.com" term="Haskell"/>
    <category scheme="https://readerunner.wordpress.com" term="Maths"/>
    <category scheme="https://readerunner.wordpress.com" term="Dart"/>
    <category scheme="https://readerunner.wordpress.com" term="Haskell Diagrams"/>
    <category scheme="https://readerunner.wordpress.com" term="Kite"/>
    <category scheme="https://readerunner.wordpress.com" term="Non-Periodic"/>
    <category scheme="https://readerunner.wordpress.com" term="Penrose"/>
    <category scheme="https://readerunner.wordpress.com" term="Tiling"/>
    <author>
      <name>readerunner</name>
      <uri>https://readerunner.wordpress.com</uri>
    </author>
    <source>
      <id>http://readerunner.wordpress.com/feed/atom/</id>
      <link href="https://readerunner.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://readerunner.wordpress.com/feed/atom/" rel="self" type="application/atom+xml"/>
      <link href="https://readerunner.wordpress.com/osd.xml" rel="search" title="readerunner" type="application/opensearchdescription+xml"/>
      <link href="https://s1.wp.com/opensearch.xml" rel="search" title="WordPress.com" type="application/opensearchdescription+xml"/>
      <link href="https://readerunner.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle xml:lang="en">maths and computing experiments</subtitle>
      <title xml:lang="en">readerunner</title>
      <updated>2022-08-12T16:14:31Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://haskell.org/ghc/blog/20220807-ghc-9.4.1-released.html</id>
    <link href="http://haskell.org/ghc/blog/20220807-ghc-9.4.1-released.html" rel="alternate" type="text/html"/>
    <title>GHC 9.4.1 released</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>GHC 9.4.1 released</h1>
<h4 class="text-muted">bgamari - 2022-08-07</h4>

<p>The GHC developers are happy to announce the availability of GHC 9.4.1. Binary distributions, source distributions, and documentation are available at <a href="https://downloads.haskell.org/ghc/9.4.1">downloads.haskell.org</a>.</p>
<p>This release includes:</p>
<ul>
<li><p>A new profiling mode, <code>-fprof-late</code>, which adds automatic cost-center annotations to all top-level functions <em>after</em> Core optimisation has run. This provides informative profiles while interfering significantly less with GHC’s aggressive optimisations, making it easier to understand the performance of programs which depend upon simplification..</p></li>
<li><p>A variety of plugin improvements including the introduction of a new plugin type, <em>defaulting plugins</em>, and the ability for typechecking plugins to rewrite type-families.</p></li>
<li><p>An improved constructed product result analysis, allowing unboxing of nested structures, and a new boxity analysis, leading to less reboxing.</p></li>
<li><p>Introduction of a tag-check elision optimisation, bringing significant performance improvements in strict programs.</p></li>
<li><p>Generalisation of a variety of primitive types to be levity polymorphic. Consequently, the <code>ArrayArray#</code> type can at long last be retired, replaced by standard <code>Array#</code>.</p></li>
<li><p>Introduction of the <code>\cases</code> syntax from <a href="https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0302-cases.rst">GHC proposal 0302</a>.</p></li>
<li><p>A complete overhaul of GHC’s Windows support. This includes a migration to a fully Clang-based C toolchain, a deep refactoring of the linker, and many fixes in WinIO.</p></li>
<li><p>Support for multiple home packages, significantly improving support in IDEs and other tools for multi-package projects.</p></li>
<li><p>A refactoring of GHC’s error message infrastructure, allowing GHC to provide diagnostic information to downstream consumers as structured data, greatly easing IDE support.</p></li>
<li><p>Significant compile-time improvements to runtime and memory consumption.</p></li>
<li><p>On overhaul of our packaging infrastructure, allowing full traceability of release artifacts and more reliable binary distributions.</p></li>
<li><p>Reintroduction of deep subsumption (which was previously dropped with the <em>simplified subsumption</em> change) as a language extension.</p></li>
<li><p>… and much more. See the <a href="https://downloads.haskell.org/~ghc/9.4.1/docs/users_guide/9.4.1-notes.html">release notes</a> for a full accounting.</p></li>
</ul>
<p>Note that, as 9.4.1 is the first release for which the released artifacts will all be generated by our Hadrian build system, it is possible that there will be packaging issues. If you enounter trouble while using a binary distribution, please open a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">ticket</a>. Likewise, if you are a downstream packager, do consider migrating to <a href="https://gitlab.haskell.org/ghc/ghc/-/blob/e2520df3fffa0cf22fb19c5fb872832d11c07d35/hadrian">Hadrian</a> to run your build; the Hadrian build system can be built using <code>cabal-install</code>, <code>stack</code>, or the in-tree <a href="https://gitlab.haskell.org/ghc/ghc/-/blob/e2520df3fffa0cf22fb19c5fb872832d11c07d35/hadrian/bootstrap/README.md">bootstrap script</a>. See the accompanying <a href="https://www.haskell.org/ghc/blog/20220805-make-to-hadrian.html">blog post</a> for details on migrating packaging to Hadrian.</p>
<p>We would like to thank Microsoft Azure, GitHub, IOG, the Zw3rk stake pool, Well-Typed, Tweag I/O, Serokell, Equinix, SimSpace, Haskell Foundation, and other anonymous contributors whose on-going financial and in-kind support has facilitated GHC maintenance and release management over the years. Finally, this release would not have been possible without the hundreds of open-source contributors whose work comprise this release.</p>
<p>As always, do give this release a try and open a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">ticket</a> if you see anything amiss.</p>
<p>Happy testing,</p>
<ul>
<li>Ben</li>
</ul></div>
    </summary>
    <updated>2022-08-07T00:00:00Z</updated>
    <published>2022-08-07T00:00:00Z</published>
    <author>
      <name>ghc-devs</name>
    </author>
    <source>
      <id>http://haskell.org/ghc</id>
      <link href="http://haskell.org/ghc" rel="alternate" type="text/html"/>
      <link href="http://haskell.org/ghc/rss.xml" rel="self" type="application/rss+xml"/>
      <title>GHC Developer blog</title>
      <updated>2022-08-22T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.well-typed.com/blog/2022/08/ghc-2022-06-2022-07</id>
    <link href="https://well-typed.com/blog/2022/08/ghc-2022-06-2022-07" rel="alternate" type="text/html"/>
    <title>GHC activities report: June-July 2022</title>
    <summary>This is the thirteenth edition of our GHC activities report, which
describes the work on GHC and related projects that we are doing at
Well-Typed. The current edition covers roughly the months of June and
July 2022. You can find the previous editions collected under the
ghc-activities-report tag.

A [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This is the thirteenth edition of our GHC activities report, which describes the work on GHC and related projects that we are doing at Well-Typed. The current edition covers roughly the months of June and July 2022. You can find the previous editions collected under the <a href="https://well-typed.com/blog/tags/ghc-activities-report">ghc-activities-report tag</a>.</p>
<p>A bit of background: One aspect of our work at Well-Typed is to support GHC and the Haskell core infrastructure. Several companies, including IOHK and GitHub via the Haskell Foundation, are providing us with funding to do this work. We are also working with Hasura on <a href="https://well-typed.com/blog/2022/05/hasura-supports-haskell-tooling">better debugging tools and improvements to HLS</a>. We are very grateful on behalf of the whole Haskell community for the support these companies provide.</p>
<p>If you are interested in also contributing funding to ensure we can continue or even scale up this kind of work, please <a href="mailto:info@well-typed.com">get in touch</a>.</p>
<p>Of course, GHC is a large community effort, and Well-Typed’s contributions are just a small part of this. This report does not aim to give an exhaustive picture of <em>all</em> GHC work that is ongoing, and there are many fantastic features currently being worked on that are omitted here simply because none of us are currently involved in them in any way. Furthermore, the aspects we <em>do</em> mention are still the work of many people. In many cases, we have just been helping with the last few steps of integration. We are immensely grateful to everyone contributing to GHC!</p>

<h2 id="team">Team</h2>
<p>The current GHC team consists of <a href="https://well-typed.com/people/ben">Ben Gamari</a>, <a href="https://well-typed.com/people/andreask">Andreas Klebinger</a>, <a href="https://well-typed.com/people/matthew">Matthew Pickering</a>, <a href="https://well-typed.com/people/zubin">Zubin Duggal</a> and <a href="https://well-typed.com/people/sam">Sam Derbyshire</a>.</p>
<p>Many others within Well-Typed, including <a href="https://well-typed.com/people/adam">Adam Gundry</a>, <a href="https://well-typed.com/people/alfredo">Alfredo Di Napoli</a>, <a href="https://well-typed.com/people/alp">Alp Mestanogullari</a>, <a href="https://well-typed.com/people/douglas">Douglas Wilson</a> and <a href="https://well-typed.com/people/oleg">Oleg Grenrus</a>, are contributing to GHC more occasionally.</p>
<h2 id="releases">Releases</h2>
<ul>
<li><p>Zubin released GHC 9.2.4 which contains a backport of the <code>DeepSubsumption</code> language extension.</p></li>
<li><p>Ben, Matt and Doug have been finalising GHC 9.4.1, which is due to be released at the beginning of August.</p></li>
</ul>
<h2 id="ghci">GHCi</h2>
<ul>
<li><p>Matt extended the support for multiple components in GHCi. In particular, enough operations are now supported to be able to use <code>ghcid</code> with multiple components. (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8584">!8584</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8548">!8548</a>)</p></li>
<li><p>Zubin fixed Ctrl-C behaving very poorly in GHCi on Windows. This could cause broken terminals, even after exiting GHCi. (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21889">#21889</a>)</p></li>
</ul>
<h2 id="driver">Driver</h2>
<ul>
<li><p>Matt fixed a space leak in <code>--make</code> mode, greatly reducing the memory usage for projects which have module loops (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8710">!8710</a>). This patch has been observed to reduce the allocation peak in <code>--make</code> mode when compiling packages which contain many <code>hs-boot</code> files – such as GHC or Agda – by around 25-30%.</p></li>
<li><p>Matt fixed an issue where dependencies were calculated incorrectly when using multiple home units with <code>hs-boot</code> files (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8573">!8573</a>). This led to compiler crashes for projects with <code>hs-boot</code> files when used with multiple home units.</p></li>
<li><p>Matt fixed a bug where certain build steps were added into the build graph when they would never be executed. This avoids the last compilation build step in <code>--make</code> mode being displayed as, e.g., <code>[7 of 8]</code> instead of <code>[8 of 8]</code> (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8665">!8665</a>).</p></li>
</ul>
<h2 id="compiler-performance">Compiler performance</h2>
<ul>
<li>Andreas optimized the rule matching code in <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8608">!8608</a>, which resulted in a ~2% speedup when compiling the Cabal library.</li>
<li>Andreas investigated a compile time regression in <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21839">#21839</a>. This unearthed some potential improvements in the <a href="https://github.com/kolmodin/binary/issues/200">binary library</a> as well as potential improvements for inlining heuristics described in <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21938">#21938</a>.</li>
<li>Zubin and Matt discovered and fixed a space leak affecting HLS that manifested when using the <code>extendMG</code> function from the GHC API, and also backported a fix to GHC 9.2 (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21816">#21816</a>).</li>
</ul>
<h2 id="typechecker">Typechecker</h2>
<ul>
<li><p>Sam improved the disambiguation mechanism for record updates, fixing <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21443"/><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21443">#21443</a>. Now, a record update such as <code>r { fld1 = v1, fld2 = v2, fld3 = v3 }</code> will typecheck when there is a single constructor which has all of the fields <code>fld1</code>, <code>fld2</code> and <code>fld3</code>. (Beforehand, we would insist there be only one datatype with all those fields, without looking at constructors.)</p></li>
<li><p>Matt fixed a subtle issue to do with different varieties of built-in syntax which meant re-exports of <code>FUN</code>,<code>TYPE</code>,<code>One</code> and <code>Many</code> didn’t work properly (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21752">#21752</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20695">#20695</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/18302">#18302</a>).</p></li>
<li><p>Matt spent quite a bit of time helping Simon Peyton Jones with the <code>DeepSubsumption</code> patch by testing various iterations of the patch on the head.hackage package set. This uncovered quite a few regressions which we managed to fix before merging the feature.</p></li>
</ul>
<h2 id="error-messages">Error messages</h2>
<ul>
<li><p>Matt added a flag <code>-fsuppress-error-contexts</code> which makes error messages less verbose (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8563">!8563</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21722">#21722</a>).</p></li>
<li><p>Sam fixed <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21662">#21662</a>, a bug in the treatment of dictionaries in the pattern match checker. The pattern-match checker now does a better job at emitting warnings in the presence of class dictionaries.</p></li>
</ul>
<h2 id="code-generation">Code generation</h2>
<ul>
<li><p>Ben debugged <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21708">#21708</a>, identifying it as a soundness issue in the implementation of the <code>keepAlive#</code> primop where the Cmm pipeline could in very particular cases inappropriately drop the <code>touch#</code> to which <code>keepAlive#</code> was desugared (similar to the issue seen in <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/14346">#14346</a>, the issue which <code>keepAlive#</code> was intended to fix). As a stop-gap measure, he implemented a naive fix, making <code>keepAlive#</code> an out-of-line primop. He then began work on <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/16098">#16098</a>, an optimisation which will allow GHC to eliminate much of the overhead incurred by this approach. Whilst difficult to trigger, the issue manifested when compiling xmonad with GHC 9.2.3 so it was critical to fix promptly in the GHC 9.2.4 release.</p></li>
<li><p>While working on <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21708">#21708</a>, Ben identified a soundness issue in GHC’s current usage runtime-representationally polymorphic primops and started thinking about how this might be mitigated (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21868">#21868</a>).</p></li>
<li><p>Ben debugged and fixed a bug in the AArch64/Darwin NCG which lead to incorrect behavior in the presence of foreign calls to functions expecting narrow, signed arguments (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21773">#21773</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20735">#20735</a>).</p></li>
<li><p>Ben continued work on <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/3012">!3012</a>, a change introducing a standard thunk for unpacking of string literals. This significantly reduces both compilation time and code size for programs containing many strings.</p></li>
</ul>
<h2 id="primops">Primops</h2>
<ul>
<li><p>Sam changed the desugaring of the <code>withDict#</code> function to avoid GHC’s typeclass specialiser from performing incorrect, semantic-changing program transformations (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21575">#21575</a>). In future releases <code>withDict#</code> is intended to be a compiler primitive which replaces assumptions libraries such as <code>reflection</code> use about the internal representation of type class dictionaries.</p></li>
<li><p>Ben worked on finishing a rework of GHC’s treatment of undersaturated primops, simplifying the code generator’s treatment of primops and reducing the size of the compiler’s symbol table (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20155">#20155</a>).</p></li>
</ul>
<h2 id="core-to-core-pipeline">Core-to-Core pipeline</h2>
<ul>
<li><p>Andreas fixed a bug in the worker-wrapper implementation, which caused certain programs compiled with <code>-fmax-worker-args=20</code> to panic (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21472">#21472</a>).</p></li>
<li><p>Andreas fixed <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21770">#21770</a> which caused a debugged build of GHC to panic under certain circumstances.</p></li>
</ul>
<h2 id="runtime-system">Runtime system</h2>
<ul>
<li><p>Ben fixed a number of issues in the RTS linker. These included the introduction of proper support for global constructors and destructors, fixing the resolution of DSO handles on Darwin, and fixing unregistration of unwind information on Windows. Together, this work fixed a number of issues in statically-linked configurations as well as enabled the RTS linker to load <code>libc++</code> on Windows (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21618">#21618</a>).</p></li>
<li><p>Ben debugged and fixed a bug in GHC 9.4’s new adjustor-pool implementation which lead to double-allocation of adjustor slots and consequently crashes (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21768">#21768</a>).</p></li>
<li><p>Ben debugged and fixed a subtle bug in the non-moving garbage collector’s scavenging logic which could result in undefined behavior (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21885">#21885</a>).</p></li>
<li><p>Ben debugged and fixed a bug in the biographical profiler which resulted in program crashes in long-running programs (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21880">#21880</a>).</p></li>
</ul>
<h2 id="profiling">Profiling</h2>
<ul>
<li><p>Andreas fixed <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21233">#21233</a> by restoring the textual ticky output for ticky profiling.</p></li>
<li><p>Andreas improved how the (new in 9.4) profiling mode <code>-fprof-late</code> interacts with the creation of unfoldings, in order to avoid interfering with Core optimizations. This means that profiles produced with late cost centres will be more faithful to their original (optimised, unprofiled) programs (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21249">#21249</a>).</p></li>
</ul>
<h2 id="libraries">Libraries</h2>
<ul>
<li><p>Ben finished work on a set of interfaces allowing users to introspect on a program’s threads, their labels and statuses (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/2816">!2816</a>). In the process he came up with a few ideas for extending this infrastructure to enable better diagnostics of looping evaluation and multi-threaded deadlocks (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21877">#21877</a>).</p></li>
<li><p>Zubin discovered and implemented a workaround for a bug in the GHC linker affecting programs which use <code>text-2.0</code> in Template Haskell splices with a statically linked compiler (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21787">#21787</a>, <a href="https://github.com/haskell/text/pull/453"><code>text!453</code></a>).</p></li>
<li><p>Doug fixed a long latent concurrency bug in <code>GHC.Event.Thread.closeFdWith</code> (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21651">#21651</a>).</p></li>
<li><p>Doug fixed a bug in <code>forkOn</code>, where the wrong thread was context-switched (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21824">#21824</a>).</p></li>
<li><p>Ben worked-around <a href="https://github.com/haskell/process/issues/247"><code>process#247</code></a>, a spurious failure of <code>process</code>’s <code>posix_spawn</code> backend caused by an infelicity in Darwin’s implementation.</p></li>
</ul>
<h2 id="packaging">Packaging</h2>
<ul>
<li><p>Matt added a number of workarounds to fix latent issues in the soon-to-be retired Make build system (for example <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8751">!8751</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8731">!8731</a>).</p></li>
<li><p>Matt added support to the build system to allow a specific base-url to be used when generating haddock documentation so the result can be uploaded to hackage (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8542">!8542</a>).</p></li>
<li><p>Ben fixed a number of issues noticed when using Hadrian-built binary distributions on Darwin (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21506">#21506</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21570">#21570</a>).</p></li>
</ul>
<h2 id="hadrian">Hadrian</h2>
<ul>
<li><p>Sam added a Hadrian key-value setting which allows flags to be passed when running <code>Hsc2Hs</code>.</p></li>
<li><p>Matt added an experimental mode to hadrian which uses GHC’s <code>--make</code> mode rather than <code>-c</code> in order to compile libraries (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8640">!8640</a>). In the future, this should improve build times for GHC developers, as using <code>--make</code> mode is faster than using <code>-c</code>.</p></li>
<li><p>Matt added a new <code>./hadrian/ghci-multi</code> target which loads the GHC project into a single GHCi multi-repl using the new multiple home units feature.</p></li>
</ul>
<h2 id="infrastructure">Infrastructure</h2>
<ul>
<li><p>Ben began introducing CI infrastructure to validate building of GHC in a cross-compiled configuration (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/11958">#11958</a>).</p></li>
<li><p>Andreas did a maintenance pass over open merge requests to <code>nofib</code>.</p></li>
</ul></div>
    </content>
    <updated>2022-08-05T00:00:00Z</updated>
    <published>2022-08-05T00:00:00Z</published>
    <category term="well-typed"/>
    <category term="ghc"/>
    <category term="community"/>
    <category term="ghc-activities-report"/>
    <author>
      <name>ben, andreask, matthew, zubin, sam, adam, douglas</name>
    </author>
    <source>
      <id>https://well-typed.com/blog/</id>
      <logo>https://well-typed.com/img/wtnlogoplain.svg</logo>
      <link href="https://well-typed.com/blog/rss2.xml" rel="self" type="application/rss+xml"/>
      <link href="https://well-typed.com/blog/" rel="alternate" type="text/html"/>
      <subtitle>Because Well-Typed Programs Don't Go Wrong</subtitle>
      <title>Well-Typed Blog</title>
      <updated>2022-09-08T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://haskell.org/ghc/blog/20220805-make-to-hadrian.html</id>
    <link href="http://haskell.org/ghc/blog/20220805-make-to-hadrian.html" rel="alternate" type="text/html"/>
    <title>Migrating from Make to Hadrian (for packagers)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>Migrating from Make to Hadrian (for packagers)</h1>
<h4 class="text-muted">Sam Derbyshire - 2022-08-05</h4>

<p>As the <a href="https://gitlab.haskell.org/ghc/ghc/blob/master/hadrian/README.md">Hadrian build system for GHC</a> has reached maturity and the old Make-based build system is becoming increasingly costly to maintain, the GHC maintenance team has decided that it is finally time to remove GHC’s Make-based build system. GHC 9.4 will be the last release series compatible with Make, which will be limited to booting with GHC 9.0. From 9.6 onwards, the only supported way to build GHC will be to use Hadrian.</p>
<p>This blog post will give an overview of using Hadrian, which should help packagers migrate from the old Make-based build system.</p>

<h2 id="the-hadrian-build-system">The Hadrian build system</h2>
<p>Hadrian is a modular, statically-typed, extensible build system for GHC, introduced in the paper <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/03/hadrian.pdf">Non-recursive Make Considered Harmful</a>. It consists of a Haskell executable implemented using the <a href="https://hackage.haskell.org/package/shake">shake</a> library, and is used to configure and build GHC.</p>
<h2 id="building-hadrian">Building Hadrian</h2>
<p>Contributors to GHC will be accustomed to running the <code>./hadrian/build</code> script, which builds and runs Hadrian. This script calls out to <code>cabal</code>, which fetches the dependencies of the Hadrian package from Hackage before building the resulting Haskell executable. While this is convenient for developers, it isn’t appropriate for build environments in which one doesn’t have access to the network (e.g. in order to enforce a hermetic build environment). For that reason, Hadrian provides a set of scripts for bootstrapping the build system from source tarballs. These can be found in the <code>hadrian/bootstrap</code> directory.</p>
<h3 id="bootstrapping-hadrian">Bootstrapping Hadrian</h3>
<p>The Hadrian bootstrap scripts are driven by a set of precomputed build plans; these depend on the version of the bootstrap GHC being used. A typical workflow might look like the following:</p>
<ul>
<li>Locally:
<ul>
<li>Choose a build plan appropriate for the bootstrap GHC version, such as <code>hadrian/bootstrap/plan-bootstrap-8.10.7.json</code>. (These build plans can also be generated manually from a <code>cabal-install</code> build plan; see <code>generate_bootstrap_plans</code>)</li>
<li>Fetch the sources needed by the build plan: <code>bootstrap.py fetch -w &lt;path_to_ghc&gt; --deps plan-bootstrap-8.10.7.json -o 8_10_7_bootstrap_sources.tar.gz</code></li>
</ul></li>
<li>In the build environment:
<ul>
<li>Provision the <code>bootstrap-sources</code> tarball generated above.</li>
</ul></li>
<li>In your GHC build script:
<ul>
<li>Build Hadrian using the bootstrap script: <code>bootstrap.py -w &lt;path_to_ghc&gt; --bootstrap-sources 8_10_7_bootstrap_sources.tar.gz</code></li>
<li>Build GHC using the resulting Hadrian executable, located by default in <code>bin/hadrian</code>, e.g. <code>bin/hadrian -j --flavour=perf+debug_info -w &lt;path_to_ghc&gt;</code></li>
</ul></li>
</ul>
<p>An example of how to use these bootstrap scripts can be seen in the <a href="https://gitlab.haskell.org/bgamari/ghcs-nix/-/blob/master/hadrian-bootstrap.nix"><code>ghcs-nix</code> repository</a>. This repository contains Nix expressions specifying how to build many GHC versions, with both Make and Hadrian.</p>
<p>From now on, we will assume that you have built Hadrian (either via <code>./hadrian/build</code> or via bootstrapping), referring to the <code>hadrian</code> executable agnostically.</p>
<h2 id="using-hadrian">Using Hadrian</h2>
<h3 id="how-does-hadrian-replace-make">How does Hadrian replace make?</h3>
<p>To build GHC, we begin as before by running <code>./boot</code> (if necessary, i.e. a <code>configure</code> file doesn’t already exist) and then <code>./configure &lt;args&gt;</code>. As with Make, the build environment is determined by the configure script, which will read provided arguments as well as environment variables. For example, the selection of the bootstrap compiler is done via the <code>GHC</code> environment variable, and the selection of the C compiler uses the <code>CC</code> environment variable. This is unchanged, and details can be found on the <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/building/using#run-the-configure-script">GHC wiki</a>.</p>
<p>Once the configure script is run, we replace <code>make</code> commands with <code>hadrian</code> commands. The fundamental command to build GHC with Hadrian is</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="https://www.haskell.org/ghc/rss.xml#cb1-1"/><span class="ex">hadrian</span> <span class="op">&lt;</span>args<span class="op">&gt;</span></span></code></pre></div>
<h3 id="hadrian-stages">Hadrian stages</h3>
<p>GHC is a self-hosted compiler. This means that we need to provide a GHC executable in order to compile GHC. In Hadrian, this is done in <strong>stages</strong>:</p>
<ul>
<li>The <code>stage0</code> compiler is the bootstrap compiler: a user-provided executable which will be used to compile GHC. The bootstrap compiler is chosen via the <code>GHC</code> variable passed to the <code>configure</code> script.</li>
<li>The <code>stage1</code> compiler is the compiler built using the <code>stage0</code> compiler; it runs on the build platform and produces code for the target platform. The stage1 compiler is limited in that it does not support dynamic code loading via the internal bytecode interpreter.</li>
<li>The <code>stage2</code> compiler is the compiler built using the <code>stage1</code> compiler; it runs on the target platform. The <code>stage2</code> compiler is necessary for the implementation of Template Haskell and GHC plugins.</li>
</ul>
<p>In Hadrian, build artifacts are put in a subdirectory of the build folder (by default, <code>_build</code>) corresponding to the stage of the compiler <strong>used to perform the build</strong>. This means that the <code>stage2</code> compiler will be found (if using the default build directory, <code>_build</code>) at <code>_build/stage1/bin/ghc</code>.</p>
<p>Hadrian provides meta-targets which can be used to build particular subsets of the compiler. A typical Hadrian command, which builds a library or executable for a given stage, looks like</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="https://www.haskell.org/ghc/rss.xml#cb2-1"/><span class="ex">hadrian</span> <span class="op">&lt;</span>stage<span class="op">&gt;</span>:<span class="dt">{lib,exe}</span>:<span class="op">&lt;</span>package name<span class="op">&gt;</span></span></code></pre></div>
<p>For example, <code>hadrian stage2:lib:base</code> will build the <code>stage2</code> <code>base</code> library, and put it into the <code>_build/stage1</code> subdirectory.</p>
<h3 id="flavours-and-flavour-transformers">Flavours and flavour transformers</h3>
<p>A Hadrian <strong>build flavour</strong> is a pre-defined collection of build settings that fully define a GHC build. These are described <a href="https://gitlab.haskell.org/ghc/ghc/blob/master/hadrian/doc/flavours.md">here</a>. The flavour being used determines the ways in which GHC and its libraries will be built, as described in the <a href="https://gitlab.haskell.org/ghc/ghc/blob/master/hadrian/doc/flavours.md#ways">Hadrian documentation</a>. This replaces the variables of the <code>make</code> build system such as <code>GhcLibWays</code>, <code>DYNAMIC_GHC_PROGRAMS</code>, <code>DYNAMIC_BY_DEFAULT</code>.</p>
<p>A flavour is set using the <code>--flavour</code> command-line argument, e.g. <code>hadrian/build --flavour=perf</code>. As a packager you probably want to use either the <code>release</code> or <code>perf</code> flavour:</p>
<div class="table">
<table>
<colgroup>
<col style="width: 43%;"/>
<col style="width: 56%;"/>
</colgroup>
<thead>
<tr class="header">
<th>flavour name</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>perf</code></td>
<td>A fully optimised bindist</td>
</tr>
<tr class="even">
<td><code>release</code></td>
<td>The same configuration as <code>perf</code>, but with additional build products such as interface files containing Haddock docs</td>
</tr>
</tbody>
</table>
</div>
<p>Flavours can be modified using <em>flavour transformers</em>. For example, the <code>profiled_ghc</code> flavour transformer compiles the GHC library and executable with cost-centre profiling enabled. One can, e.g., apply the <code>profiled_ghc</code> transformer to the <code>perf</code> flavour with <code>hadrian --flavour=perf+profiled_ghc</code>.</p>
<div class="table">
<table>
<thead>
<tr class="header">
<th>Make variable</th>
<th>Hadrian flavour transformer</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>GhcProfiled</code></td>
<td><code>profiled_ghc</code></td>
</tr>
<tr class="even">
<td><code>GhcDebugged</code></td>
<td><code>debug_ghc</code></td>
</tr>
<tr class="odd">
<td><code>SplitObjs</code></td>
<td><code>split_sections</code></td>
</tr>
</tbody>
</table>
</div>
<p>The full list of supported flavour transformers is available <a href="https://gitlab.haskell.org/ghc/ghc/blob/master/hadrian/doc/flavours.md">here</a>.</p>
<h3 id="building-ghc-for-distribution">Building GHC for distribution</h3>
<p>Packagers will be interested in the <code>binary-dist</code> and <code>binary-dist-dir</code> Hadrian targets. For example, the command</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="https://www.haskell.org/ghc/rss.xml#cb3-1"/><span class="ex">hadrian/build</span> --flavour=release binary-dist</span></code></pre></div>
<p>will produce a complete release binary distribution tarball, while the <code>binary-dist-dir</code> target produces the directory only (not the tarball). The resulting bindist will be placed in <code>_build/bindist</code>.</p>
<p>When building the <code>binary-dist</code> target, documentation (namely, Haddock documentation and GHC’s <a href="https://www.sphinx-doc.org/">Sphinx</a>-built user’s guide) will be built by default. Building of documentation can be disabled using Hadrian’s <code>--docs=...</code> command-line flag. If you don’t want to build documentation, there are options to disable building various parts of the documentation. For example, if you don’t have Sphinx available, you can disable the parts of the documentation which require it:</p>
<pre><code># Build only the documentation for the base package, without using sphinx
hadrian {..} docs:base --docs=no-sphinx</code></pre>
<p>Further information about configuring the documentation built by Hadrian can be found in the <a href="https://www.haskell.org/ghc/hadrian/README.md#documentation">Hadrian readme</a>.</p>
<h3 id="large-integer-implementation">Large-integer implementation</h3>
<p>GHC supports several implementations of the <code>Integer</code>/<code>Natural</code> types and operations on them. The selection of the implementation is done using the <code>--bignum</code> Hadrian argument, e.g. <code>--bignum=gmp</code> to use the <a href="https://gmplib.org/">GMP library</a>, or <code>--bignum=native</code> to use a pure-Haskell implementation.</p>
<h3 id="key-value-settings">Key-value settings</h3>
<p>While we expect that the mechanisms described above will suffice for most builds, Hadrian also provides a fine-grained key-value configuration mechanism for modifying the command-lines passed to each of the tools run by Hadrian. For instance, one can pass an additional argument to all GHC invocations via:</p>
<pre><code>hadrian {..} "*.*.ghc.*.opts += -my-ghc-option"</code></pre>
<p>Passing an additional option when compiling the <code>ghc</code> library only:</p>
<pre><code>hadrian {..} "*.ghc.ghc.*.opts += -my-ghc-option"</code></pre>
<p>These settings can also be placed in a <code>hadrian.settings</code> file in the build root (by default <code>_build</code>), instead of passing them in the command line.</p>
<p>Hadrian currently supports the <a href="https://www.haskell.org/ghc/hadrian/doc/user-settings.md#key-value-and-key-value-style-settings">following key-value settings</a>:</p>
<ul>
<li><code>(&lt;stage&gt; or *).(&lt;package name&gt; or *).ghc.{hs, c, cpp, link, deps, *}.opts</code><br/>
Arguments passed to GHC invocations.
<ul>
<li><code>hs</code> for arguments passed to GHC when compiling Haskell modules</li>
<li><code>c</code> for arguments passed to the C compiler</li>
<li><code>cpp</code> for arguments passed to the C++ compiler</li>
<li><code>link</code> for arguments passed during linking</li>
<li><code>deps</code> for arguments to a <code>ghc -M</code> command, which outputs dependency information between Haskell modules</li>
</ul></li>
<li><code>(&lt;stage&gt; or *).(&lt;package name&gt; or *).cc.{c, deps, *}.opts</code><br/>
Arguments passed directly to the C compiler.</li>
<li><code>(&lt;stage&gt; or *).(&lt;package name&gt; or *).cabal.configure.opts</code><br/>
Arguments passed to the cabal configure step.</li>
<li><code>(&lt;stage&gt; or *).(&lt;package name&gt; or *).hsc2hs.run.opts</code><br/>
Arguments passed when running Hsc2Hs.</li>
</ul>
<p>These Hadrian key-value settings are useful to replace the assignment of Make variables, even though Hadrian is not intended to be a one-to-one replacement of Make; recovering the behaviour with Hadrian might require a few tweaks.</p>
<p>Consider for example the way that Make passes flags to GHC when compiling source Haskell files. Make has several different variables, such as <code>SRC_HC_OPTS</code>, <code>WAY_&lt;way&gt;_&lt;pkg&gt;_OPTS</code>, <code>EXTRA_HC_OPTS</code>. These are passed in order, with later flags overriding previous ones. With Hadrian, things are much simpler, and one can usually achieve the same goal by simply setting the <code>*.*.ghc.hs.opts</code> Hadrian key-value setting.</p>
<p>The following table serves as a general guideline in migrating the use of Make variables (bearing the above caveats in mind):</p>
<div class="table">
<table>
<colgroup>
<col style="width: 49%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr class="header">
<th>Make variable</th>
<th>Hadrian key-value setting</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>GhcLibOpts</code></td>
<td><code>*.*.ghc.*.opts</code></td>
</tr>
<tr class="even">
<td><code>GhcRtsHcOpts</code></td>
<td><code>*.*.rts.*.opts</code></td>
</tr>
<tr class="odd">
<td><code>SRC_HC_OPTS</code>, <code>EXTRA_HC_OPTS</code></td>
<td><code>*.*.ghc.hs.opts</code></td>
</tr>
<tr class="even">
<td><code>SRC_CC_OPTS</code>, <code>EXTRA_CC_OPTS</code></td>
<td><code>*.*.ghc.c.opts</code> with <code>-optc</code> prefix</td>
</tr>
<tr class="odd">
<td><code>SRC_CPP_OPTS</code>, <code>EXTRA_CPP_OPTS</code></td>
<td>a combination of <code>*.*.ghc.c.opts</code> with <code>-optc</code> prefix and <code>*.*.cc.c.opts</code></td>
</tr>
<tr class="even">
<td><code>SRC_LD_OPTS</code>, <code>EXTRA_LD_OPTS</code></td>
<td><code>*.*.ghc.link.opts</code> with <code>-optl</code> prefix</td>
</tr>
<tr class="odd">
<td><code>&lt;pkg&gt;_EXTRA_LD_OPTS</code></td>
<td><code>*.&lt;pkg&gt;.ghc.link.opts</code> with <code>-optl</code> prefix</td>
</tr>
<tr class="even">
<td><code>&lt;pkg&gt;_CONFIGURE_OPTS</code></td>
<td><code>*.&lt;pkg&gt;.cabal.configure.opts</code></td>
</tr>
<tr class="odd">
<td><code>utils/hsc2hs_dist-install_EXTRA_LD_OPTS</code></td>
<td><code>*.*.hsc2hs.run.opt</code> with <code>-L</code> prefix</td>
</tr>
</tbody>
</table>
</div>
<p>To pass module-specific or way-specific options, e.g. passing a C pre-processor option when compiling specific modules in a certain <code>way</code> (as when using a <code>Way_&lt;way&gt;_&lt;pkg&gt;_OPTS</code> Make variable), please use the programmatic interface described <a href="https://www.haskell.org/ghc/rss.xml#programmatic-configuration">below</a>.</p>
<h3 id="programmatic-configuration">Programmatic configuration</h3>
<p>If the above configuration mechanisms aren’t sufficient, it is also possible to directly add new configurations to Hadrian. This allows finer-grained changes, such as changing the options when compiling a specific module or set of modules. If you really need to do this, you can read about it in the <a href="https://gitlab.haskell.org/ghc/ghc/-/blob/master/hadrian/doc/user-settings.md#directly-modifying-hadrian-configuration">Hadrian manual</a>. A good starting place to look for inspiration is <a href="https://www.haskell.org/ghc/hadrian/src/Settings/Packages.hs">Settings.Packages</a>, which contains the arguments used to build GHC and the libraries it depends upon. The <a href="https://hackage.haskell.org/package/shake">documentation for Shake</a> is also a helpful resource, as Hadrian uses the Shake EDSL to implement its build rules.</p>
<h2 id="further-support">Further support</h2>
<p>If you are having any issues with packaging GHC after these changes, or find yourself needing to use the programmatic interface, please open an issue on the issue tracker, so that we can work together to modify Hadrian for your needs.</p></div>
    </summary>
    <updated>2022-08-05T00:00:00Z</updated>
    <published>2022-08-05T00:00:00Z</published>
    <author>
      <name>ghc-devs</name>
    </author>
    <source>
      <id>http://haskell.org/ghc</id>
      <link href="http://haskell.org/ghc" rel="alternate" type="text/html"/>
      <link href="http://haskell.org/ghc/rss.xml" rel="self" type="application/rss+xml"/>
      <title>GHC Developer blog</title>
      <updated>2022-08-22T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://reasonablypolymorphic.com/blog/monotonous-web/index.html</id>
    <link href="https://reasonablypolymorphic.com/blog/monotonous-web/index.html" rel="alternate" type="text/html"/>
    <title>Why Is the Web So Monotonous? Google.</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Does it ever feel like the internet is getting worse? Thatâ€™s been my impression for the last decade. The internet feels now like it consists of ten big sites, plus fifty auxiliary sites that come up whenever you search for something outside of the everyday ten. It feels like itâ€™s harder to find amateur opinions on matters, except if you look on social media, where amateur opinions are shared, unsolicited, with much more enthusiasm than they deserve. The accessibility of the top ten seems like it collapses the internet into a monoculture of extremism, and, perhaps even more disappointingly, a monoculture that echos the offline world.</p>
<p>Contrast this to the internet of yore. By virtue of being hard to access, the internet filtered away the mass appeal it has today. It was hard and expensive to get on, and in the absence of authoring tools, you were only creating internet content if you <em>had something to say.</em> Which meant that, as a consumer, if you found something, you had good reason to believe it was well-informed. Why would someone go through the hassle of making a website about something they werenâ€™t interested in?</p>
<p>In 2022, we have a resoundingly sad answer to that question: advertising. The primary purpose of the web today is â€œengagement,â€� which is Silicon Valley jargon for â€œhow many ads can we push through someoneâ€™s optical nerve?â€� Under the purview of engagement, it makes sense to publish webpages on every topic imaginable, regardless of whether or not you know what youâ€™re talking about. In fact, engagement goes up if you <em>donâ€™t</em> know what youâ€™re talking about; your poor reader might mistakenly believe that theyâ€™ll find the answer theyâ€™re looking for elsewhere on your site. Thatâ€™s twice the advertising revenue, baby!</p>
<p>But the spirit of the early web isnâ€™t gone: the bookmarks Iâ€™ve kept these long decades mostly still work, and many of them still receive new content. Thereâ€™s still weird, amateur, passion-project stuff out there. Itâ€™s just hard to find. Which brings us to our main topic: search.</p>
<p>Google is inarguably the front page of the internet. Maybe you already know where your next destination is, in which case you probably search for the website on Google and click on the first link, rather than typing in the address yourself. Or maybe you donâ€™t already know your destination, and you search for it. Either way, you hit Google first.</p>
<p>When I say the internet is getting worse, what I really mean is that the Google search results are significantly less helpful than they used to be. This requires some qualification. Google has gotten exceedingly good at organizing everyday life. It reliably gets me news, recipes, bus schedules, tickets for local events, sports scores, simple facts, popular culture, official regulations, and access to businesses. Itâ€™s essentially the yellow pages and the newspaper put together. For queries like this, which are probably 95% of Googles traffic, Google does an excellent job.</p>
<p>The difficulties come in for that other 5%, the so-called â€œlong tail.â€� The long tail is all those other things we want to know about. Things without well-established, factual answers. Opinions. Abstract ideas. Technical information. If youâ€™re cynical, perhaps itâ€™s all the stuff that doesnâ€™t have wide-enough appeal to drive engagement. Whatever the reason, the long tail is the stuff thatâ€™s hard to find on the modern internet.</p>
<p>Notice that the long-tail is exactly the stuff we need search for. Mass-appeal queries are, almost by definition, not particularly hard to find. If I need a bus schedule, I know to talk to my local transit authority. If Iâ€™m looking to keep up with the Kardashians, Iâ€™m not going to have any problems (at least, no <em>search</em> problems.) On the other hand, itâ€™s much less clear where to get information on why my phone starts overheating when I open the chess app.</p>
<p>So what happens if you search for the long tail on Google? If youâ€™re like me, you flail around for ten minutes wasting your time reading crap articles before you remember that Google is awful for the long tail, and you come away significantly more frustrated, not having found what you were looking for in the first place.</p>
<p>Lets look at some examples. One of my favorite places in the world is Koh Lanta, Thailand. When traveling, <a href="https://reasonablypolymorphic.com/href">Iâ€™m always on the lookout</a> for places that give off the Koh Lanta vibe. What does that mean? Hard to say, exactly, but having tourist amenities without being touristy. Charming, slow, cheap. I donâ€™t know exactly; if I did, itâ€™d be easier to find. Anyway, forgetting that Google is bad at long tails, I search for <code>what is the koh lanta of croatia?</code> and get:</p>
<ul>
<li>Koh-Lanta - Wikipedia [note: not the island, the game show]</li>
<li>Top 15 Unique Things to Do in Koh Lanta</li>
<li>Visit Koh Lanta on a trip to Thailand</li>
<li>Beautiful places to travel, Koh lanta, Sunset</li>
<li>Holiday Vacation to Koh Lanta: Our favourite beaches and â€¦</li>
<li>Koh Lanta Activities: 20 Best Things to Do</li>
<li>etc</li>
</ul>
<p>With the exception of â€œfind a flight from Dubrovnik to Koh Lantaâ€� on page two, you need to get to page five before you see any results that even acknowledge I <em>also</em> searched for <code>croatia</code>. Not very impressive.</p>
<p>When you start paying attention, youâ€™ll notice it on almost every search â€” Google isnâ€™t actually giving you answers to things you searched for. Now, maybe the reason here is that there <em>arenâ€™t</em> any good results for the query, but thatâ€™s a valuable thing to know as well. Donâ€™t just hit me with garbage, itâ€™s an insult to my intelligence and time.</p>
<h2 id="where-things-go-wrong"><a class="header-link" href="https://reasonablypolymorphic.com/atom.xml#where-things-go-wrong">Where Things Go Wrong<span class="header-link-emoji">ğŸ”—</span></a></h2>
<p>I wanted to figure out why exactly the internet is getting worse. Whatâ€™s going on with Googleâ€™s algorithm that leads to such a monotonous, boring, corporate internet landscape? I thought Iâ€™d dig into search engine optimization (SEO) â€” essentially, techniques that improve a websiteâ€™s ranking in Google searches. Iâ€™d always thought SEO was better at selling itself than it was at improving search results, but my god was I wrong.</p>
<p>SEO techniques are extremely potent, and their widespread adoption is whatâ€™s wrong with the modern web.</p>
<p>For example, have you ever noticed that the main content of most websites is something like 70% down the page? Every recipe site Iâ€™ve ever seen is like this â€” nobody cares about how this recipe was originally your great-grandmotherâ€™s. Just tell us whatâ€™s in it. Why is this so prevalent on the web?</p>
<p>Google rewards a website for how long a user stays on it, with the reasoning being that a bad website has the user immediately hit the back button. Seems reasonable, until you notice the problem of incentives here. Websites arenâ€™t being rewarded for having good content under this scheme, theyâ€™re rewarded for wasting your time and making information hard to find. Outcome: websites that answer questions, but hide the information somewhere on a giant (ad-filled) page.</p>
<p>Relatedly, have you noticed how every website begins with a stupid paragraph overviewing the thing youâ€™re searching for? Itâ€™s always followed by a stupid paragraph describing why you should care about the thing. For example, I just searched for <code>garden irrigation</code>, and the first result is:</p>
<blockquote>
<p>Water is vital to plant health, but watering by hand can be a hassle. You have to drag hoses between gardens, move sprinklers around, or take the time to water each plant. Our innovative watering systems take the hassle out of watering. Theyâ€™re the easiest way to give plants the consistent moisture they need for your biggest harvest and most beautiful blooms.</p>
</blockquote>
<p><em>Water is vital to plant health.</em> Wow, who knew! Why in godâ€™s name would I be searching for garden irrigation if I didnâ€™t know that water was vital to plant health. Why is copy like this so prevalent on the web?</p>
<p>Things become clearer when you look at some of the context of this page:</p>
<blockquote>
<p>Url: https://[redacted]/how-to/how-to-choose-a-watering-system/8747.html</p>
<p>Title: How to Choose a Garden Irrigation System</p>
<p>Heading: Soak, Drip or Spray: Which is right for you?</p>
<p>Subheading: Choose the best of our easy, customizable, irrigation systems to help your plants thrive and save water</p>
</blockquote>
<p>As it happens, Google rewards websites which use keywords in their url, title, headings, and first 100 words. Just by eyeballing, we can see that this particular website is targeting the keywords â€œwaterâ€�, â€œsystemâ€�, â€œirrigationâ€�, and â€œgardenâ€�. Pages like these hyper-optimized to come up for particular searches. The stupid expository stuff exists only to pack â€œimportant keywordsâ€� into the first 100 words.</p>
<p>But keyword targeting doesnâ€™t stop there. As I was reading through this SEO stuff (that is, the first page of a Google search for <code>seo tricks</code>,) every single page offered 15-25 great, technical SEO tricks. And then, without fail, the final point on each page was â€œbut really, the best SEO strategy is having great content!â€� Thatâ€™s weird. â€œGreat contentâ€� isnâ€™t something an algorithm can identify; if it were, you wouldnâ€™t be currently reading the ravings of a madman, angry about the state of the internet.</p>
<p>So, why do all of these highly-optimized SEO pages ubiquitously break form, switching from concrete techniques to platitudes? You guessed it, itâ€™s a SEO technique! Google offers a keyword dashboard, where you can see which keywords group together, and (shudder) which keywords are <em>trending.</em> Google rewards you for having other keywords in the group on your page. And it extra rewards you for having trending keywords. You will not be surprised to learn that â€œquality contentâ€� is a keyword that clusters with â€œseo,â€� nor that it is currently a trending keyword.</p>
<p>Think about that for a moment. Under this policy, Google is incentivizing pages to become <em>less focused,</em> by adding text that is only tangentially related. But, how do related keywords come about? The only possible answer here is to find keywords that often cluster on other pages. But this is a classic death spiral, pulling every page in a topic to have the same content.</p>
<p>Another way of looking at it is that if you are being incentivized, you are being <em>disincentivized.</em> Webpages are being penalized for including original information, because original information canâ€™t possibly be in the keyword cluster.</p>
<p>There are a multitude of perverse incentives from Google, but Iâ€™ll mention only two more. The first is that websites are penalized for having low-ranking pages. The conventional advice here is to delete â€œunderperformingâ€� pages, which only makes the search problem worse â€” sites are being rewarded for deleting pages that donâ€™t align with the current search algorithm.</p>
<p>My last point: websites are penalized for even <em>linking</em> to low-ranking pages!</p>
<p>Itâ€™s not hard to put all of the pieces together and see why the modern web is so bland and monotonous. Not only is the front-page of the internet aggressively penalizing websites which <em>arenâ€™t</em> bland and monotonous, itâ€™s also punishing any site which has the audacity to link to more interesting parts of the web.</p>
<h2 id="how-culpable-is-google"><a class="header-link" href="https://reasonablypolymorphic.com/atom.xml#how-culpable-is-google">How Culpable is Google?<span class="header-link-emoji">ğŸ”—</span></a></h2>
<p>So the discoverable part of web sucks. But is that really Googleâ€™s fault? Iâ€™d argue no. By virtue of being the front-page, Googleâ€™s search results are under extreme scrutiny. In the eyes of the non-technical population, especially the older generations, the internet and Google are synonymous. The fact is that Google gets unfairly targeted by legislation because itâ€™s a big, powerful tech company, and we as a society are uncomfortable with that.</p>
<p>Worse, the guys doing the regulation donâ€™t exactly <a href="https://youtu.be/wmuROTmazco?t=71">have a grasp</a> on how internet things work.</p>
<p>Society at large has been getting very worried about disinformation. Whoâ€™s problem is that? Googleâ€™s â€” duh. Google is how we get information on the internet, so itâ€™s up to them to defend us from disinformation.</p>
<p>Unfortunately itâ€™s really hard to spot disinformation. Sometimes even the <em>government</em> lies to us (gasp!). I can think of two ways of avoiding getting in trouble with respect to disinformation. One: link only to <em>official sites,</em> thus changing the problem of trustworthiness to one of authority. If there is no authority, just give back the consensus. Two: donâ€™t return any information whatsoever.</p>
<p>Googleâ€™s current strategy seems to be somewhere between one and two. For example, we can try a controversialish search like <code>long covid doesn't exist</code>. The top results at time of writing are:</p>
<ol type="1">
<li>The search for Long Covid (science.org)</li>
<li>Small Study Finds No Obvious Physical Causes for Long COVID (medscape.com)</li>
<li>Fact Check-â€˜Long COVIDâ€™ is not fake, quoted French study did â€¦ (reuters.com)</li>
<li>Harvard Medical School expert explains â€˜long COVIDâ€™ (harvard.edu)</li>
<li>Claim that French study showed long COVID doesnâ€™t exist â€¦ (healthfeedback.org)</li>
<li>What doctors wish patients knew about long COVID (ama-assn.org)</li>
</ol>
<p>Iâ€™m not particularly in the know, but I recognize most of these organizations. Science.org sounds official. Not only is one of the pages from Harvard, but also itâ€™s from a Harvard Medical School <em>expert.</em> I especially like the fifth one, the metadata says:</p>
<blockquote>
<p>Claim: Long COVID is â€œmostly a mental diseaseâ€�; the condition long COVID is solely due to a personâ€™s belief, not actual disease; long COVID doesnâ€™t exist</p>
<p>Fact check by Health Feedback: Inaccurate</p>
</blockquote>
<p>Every one of these websites comes off as <em>authoritative</em> â€” not in sense of â€œknowing what theyâ€™re talking aboutâ€� because thatâ€™s hard to verify â€” but in the sense of being the sort of organization weâ€™d trust to answer this question for us. Or, in the case of number five, at least telling us that they fact checked it.</p>
<p>Letâ€™s try a search for something requiring less authority, like â€œbest books.â€� In the past I would get a list of books considered the best. But now I get:</p>
<ol type="1">
<li>The Greatest Books: The Best Books of All Time - 1 to 50</li>
<li>The Best Books of All Time | chapters.indigo.ca</li>
<li>100 Best Books of All Time - Readerâ€™s Digest</li>
<li>Best Book Lists - Goodreads</li>
<li>Best Books 2022: Books We Love : NPR</li>
</ol>
<p>Youâ€™ll notice there are no actual books here. There are only <em>lists</em> of best books. Cynical me notes that if you were to actually list a book, someone could find it controversial. Instead, you can link to institutional websites, and let them take the controversy for their picks.</p>
<p>This isnâ€™t the way the web needs to be. Google could just as well given me personal blogs of people talking about long covid and their favorite books, except (says cynical me) that these arenâ€™t authoritative sources, and thus, linking to them could be considered endorsement. And the web is too big and too fast moving to risk linking to anything that hasnâ€™t been vetted in advance. Itâ€™s just too easy to accidentally give a <em>good</em> result to a controversial topic, and have the law makers pounce on you. Instead, punt the problem back to authorities.</p>
<p>The web promised us a democratic, decentralized public forum, and all we got was the stinking yellow pages in digital format. I hope the crypto people can learn a lesson here.</p>
<p>Anyway, all of this is to say that I think lawmakers and liability concerns are the real reason the web sucks. All things being equal, Google would like to give us good results, but it prefers making boatloads of money, and that would be hard to do if it got regulated into nothingness.</p>
<h2 id="a-note-on-other-search-engines"><a class="header-link" href="https://reasonablypolymorphic.com/atom.xml#a-note-on-other-search-engines">A Note on Other Search Engines<span class="header-link-emoji">ğŸ”—</span></a></h2>
<p>Google isnâ€™t the only search engine around. There are others, but itâ€™s fascinating that none of them compete on the basis of providing better results. DDG claims to have better privacy. Ecosia claims to plant trees. Bing exists to keep Microsoft relevant post-2010, and for some reason, ranks websites for being highly-shared on social media (again, things that are, by definition, not hard to find.)</p>
<p>Why donâ€™t other search engines compete on search results? It canâ€™t be hard to do better than Google for the long tail.</p>
<h2 id="what-can-we-do"><a class="header-link" href="https://reasonablypolymorphic.com/atom.xml#what-can-we-do">What Can We Do?<span class="header-link-emoji">ğŸ”—</span></a></h2>
<p>Itâ€™s interesting to note that the problems of regulatory-fear and SEO-capture are functions of Googleâ€™s cultural significance. If Google were smaller or less important, thereâ€™d be significantly less negative-optimization pressure on it. Google is a victim of its own success.</p>
<p>That is to say, I donâ€™t think all search engines are doomed to fail in the same way that Google has. A small search engine doesnâ€™t need to be authoritative, because nobody is paying attention to it. And it doesnâ€™t have to worry about SEO for the same reason â€” thereâ€™s no money to be made in manipulating its results.</p>
<p>What I dream of is Google circa 2006. A time where a search engine searched what you asked for. A time before aggressive SEO. A time before social media, when the only people on the internet had a reason to be there. A time before sticky headers and full-screen modal pop-ups asking you to subscribe to a newsletter before reading the article. A time before click-bait and subscription-only websites which tease you with a paragraph before blurring out the rest of the content.</p>
<p>These problems are all solvable with by a search engine. But that search engine isnâ€™t going to be Google. Letâ€™s de-rank awful sites, and boost personal blogs of people with interesting things to say. Letâ€™s de-rank any website that contains ads. Letâ€™s not index any click-bait websites, which unfortunately in 2022 includes most of the news.</p>
<p>What we need is a search engine, by the people, and for the people. Fuck the corporate interests and the regulatory bullshit. None of this is hard to do. It just requires someone to get started.</p></div>
    </content>
    <updated>2022-08-04T00:00:00Z</updated>
    <published>2022-08-04T00:00:00Z</published>
    <source>
      <id>https://reasonablypolymorphic.com</id>
      <author>
        <name>Sandy Maguire</name>
      </author>
      <link href="https://reasonablypolymorphic.com/atom.xml" rel="self" type="application/atom+xml"/>
      <title>Reasonably Polymorphic</title>
      <updated>2022-08-04T09:15:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.well-typed.com/blog/2022/08/plutus-cores</id>
    <link href="https://well-typed.com/blog/2022/08/plutus-cores" rel="alternate" type="text/html"/>
    <title>The Plutus Compilation Pipeline: Understanding Plutus Core(s)</title>
    <summary>Plutus is a strict, pure functional language. It is developed by IOHK
for use on the Cardano blockchain, but in this blog post we will not be
concerned with specific applications of the language, but instead look
at its compilation pipeline.

Technically speaking, Plutus is not one language, but three, [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://github.com/input-output-hk/plutus">Plutus</a> is a strict, pure functional language. It is developed by IOHK for use on the Cardano blockchain, but in this blog post we will not be concerned with specific applications of the language, but instead look at its compilation pipeline.</p>
<p>Technically speaking, Plutus is not one language, but three, and most people who write “Plutus” are not really writing Plutus at all, but Haskell. These Haskell programs are translated to the Plutus Intermediate Representation (PIR). After that, data types are replaced by their Scott encodings, and recursion is replaced by explicit fixpoints to get to typed Plutus Core (PLC). Finally, types are erased to get to the Untyped Plutus Core (UPLC).</p>
<p>In this blog post, we will explain this entire process, with a particular focus on</p>
<ul>
<li>The consequences of polymorphism in the typed language on the untyped language</li>
<li>Scott encoding</li>
<li>Type and term level fixpoints</li>
</ul>

<p>We won’t try to explain the default syntax of Plutus Core in this blog post, because it is very verbose; the syntax we used here is generated by a custom pretty-printer we wrote. If you want to learn more about the default syntax, or need a more gentle introduction to lambda calculus, you might want to check out <a href="https://blog.hachi.one/post/an-introduction-to-plutus-core/">An Introduction to Plutus Core</a>.</p>
<h3 id="polymorphism">Polymorphism</h3>
<p>Throughout this blog post we will assume the reader is familiar with Haskell, and we will use Haskell in sections marked <em>In Haskell</em> as a vehicle for explaining some of the concepts needed to understand Plutus code, before showing those concepts in Plutus itself.</p>
<h4 id="in-haskell.-force-and-delay"><em>In Haskell</em>. Force and Delay</h4>
<p>Suppose we need to work with an API that is stricter than we’d like it to be. To have a concrete but simple (if contrived) example, let’s say we want to use this strict implementation of <code>if-then-else</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://well-typed.com/blog/rss2.xml#cb1-1" tabindex="-1"/><span class="ot">strictIfThenElse ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb1-2"><a href="https://well-typed.com/blog/rss2.xml#cb1-2" tabindex="-1"/>strictIfThenElse <span class="op">!</span>b <span class="op">!</span>t <span class="op">!</span>f <span class="ot">=</span> <span class="kw">if</span> b <span class="kw">then</span> t <span class="kw">else</span> f</span></code></pre></div>
<p>If we call this function with two arguments <code>t</code> and <code>f</code>, it will evaluate <em>both</em> arguments before even looking at <code>b</code>, even though only one will be required.</p>
<pre><code>&gt; strictIfThenElse True 'a' undefined
*** Exception: Prelude.undefined</code></pre>
<p>If we want to avoid this problem, we somehow need to <em>delay</em> evaluation of the arguments. We could do this by giving them a dummy argument of unit type:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="https://well-typed.com/blog/rss2.xml#cb3-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">Delayed</span> a <span class="ot">=</span> () <span class="ot">-&gt;</span> a</span>
<span id="cb3-2"><a href="https://well-typed.com/blog/rss2.xml#cb3-2" tabindex="-1"/></span>
<span id="cb3-3"><a href="https://well-typed.com/blog/rss2.xml#cb3-3" tabindex="-1"/><span class="ot">delay ::</span> a <span class="ot">-&gt;</span> <span class="dt">Delayed</span> a</span>
<span id="cb3-4"><a href="https://well-typed.com/blog/rss2.xml#cb3-4" tabindex="-1"/>delay x <span class="ot">=</span> <span class="fu">const</span> x</span></code></pre></div>
<p>Going the other direction, if we have a delayed argument, in order to evaluate it be must <em>force</em> it:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://well-typed.com/blog/rss2.xml#cb4-1" tabindex="-1"/><span class="ot">force ::</span> <span class="dt">Delayed</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb4-2"><a href="https://well-typed.com/blog/rss2.xml#cb4-2" tabindex="-1"/>force x <span class="ot">=</span> x ()</span></code></pre></div>
<p>Using <code>delay</code> and <code>force</code> we can get the behaviour we’d expect:</p>
<pre><code>&gt; force $ strictIfThenElse True (delay 'a') (delay undefined)
'a'</code></pre>
<h4 id="simple-example-function-application">Simple example: function application</h4>
<p>With these first preliminaries out of the way, let’s start taking a look at Plutus now. The compilation pipeline is as follows:</p>
<ol start="0" type="1">
<li>Plutus programs are written using Haskell as a surface language.</li>
<li>The Haskell code is translated to the Plutus Intermediate Representation (<strong>PIR</strong>).</li>
<li>Through a series of transformations the compiler turns PIR into (typed) Plutus Core (<strong>PLC</strong>). The main difference between PIR and PLC is that the former has support for datatypes and recursion, and the latter does not.</li>
<li>Finally, PLC is turned into Untyped Plutus Core (<strong>UPLC</strong>).</li>
</ol>
<p>We will see lots of examples of each of these representations in this blog post, but let’s start with something very simple. Consider the following Haskell code:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://well-typed.com/blog/rss2.xml#cb6-1" tabindex="-1"/><span class="ot">apMono ::</span> (<span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>) <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb6-2"><a href="https://well-typed.com/blog/rss2.xml#cb6-2" tabindex="-1"/>apMono f x <span class="ot">=</span> f x</span></code></pre></div>
<p>For these first few simple examples, the PIR and PLC representations are identical:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://well-typed.com/blog/rss2.xml#cb7-1" tabindex="-1"/>λ (<span class="ot">f ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>) (<span class="ot">x ::</span> <span class="dt">Integer</span>) <span class="ot">-&gt;</span> f x</span></code></pre></div>
<p>PIR and PLC are explicitly typed languages, so every variable binder is given a type annotation. These types are then removed in the translation to UPLC:</p>
<pre><code>λ f x -&gt; f x</code></pre>
<p>No surprises so far, so let’s consider something a bit more interesting:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://well-typed.com/blog/rss2.xml#cb9-1" tabindex="-1"/><span class="ot">apId ::</span> (<span class="kw">forall</span> a<span class="op">.</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb9-2"><a href="https://well-typed.com/blog/rss2.xml#cb9-2" tabindex="-1"/>apId f x <span class="ot">=</span> f x</span></code></pre></div>
<p>Same code as above, but with a different type: we now insist that the first argument is polymorphic in <code>a</code>. The only (total) function of type <code>forall a. a -&gt; a</code> is the identity, so <code>apId</code> isn’t particularly useful, but it will serve to illustrate a point. The PIR/PLC translation of <code>apId</code> is:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="https://well-typed.com/blog/rss2.xml#cb10-1" tabindex="-1"/>λ (<span class="ot">f ::</span> ∀ a<span class="op">.</span> a <span class="ot">-&gt;</span> a) (<span class="ot">x ::</span> <span class="dt">Integer</span>) <span class="ot">-&gt;</span> f {<span class="dt">Integer</span>} x</span></code></pre></div>
<p>Polymorphic functions in Haskell become functions that take type arguments in PIR; in the body we see <code>f</code> being applied to the type argument <code>Integer</code> and then to the regular argument <code>x</code>. (We will use curly brackets for type arguments and type application.) Still nothing unusual, but in the translation to UPLC we see the first Plutus specific feature:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="https://well-typed.com/blog/rss2.xml#cb11-1" tabindex="-1"/>λ f x <span class="ot">-&gt;</span> f<span class="op">!</span> x</span></code></pre></div>
<p>That exclamation mark is the <a href="https://well-typed.com/blog/rss2.xml#in-haskell.-force-and-delay">force operator we discussed above</a>. UPLC has explicit constructs for delay and force, which we will write as <code>λ ~ -&gt; e</code> and <code>e!</code>, respectively:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="https://well-typed.com/blog/rss2.xml#cb12-1" tabindex="-1"/>λ <span class="op">~</span> <span class="ot">-&gt;</span> e  <span class="op">==</span>  delay e</span>
<span id="cb12-2"><a href="https://well-typed.com/blog/rss2.xml#cb12-2" tabindex="-1"/>e<span class="op">!</span>        <span class="op">==</span>  force e</span></code></pre></div>
<p>The question is: why is <code>f</code> being forced here?</p>
<h4 id="polymorphism-versus-strictness">Polymorphism versus strictness</h4>
<p>To illustrate why <code>f</code> was being forced in that last example, let’s consider a slightly more interesting PIR program<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn1" id="fnref1"><sup>1</sup></a></p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://well-typed.com/blog/rss2.xml#cb13-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> <span class="op">!</span>boom <span class="ot">=</span> λ {a} <span class="ot">-&gt;</span> <span class="dt">ERROR</span></span>
<span id="cb13-2"><a href="https://well-typed.com/blog/rss2.xml#cb13-2" tabindex="-1"/>     <span class="op">!</span><span class="fu">id</span>   <span class="ot">=</span> λ {a} (<span class="ot">x ::</span> a) <span class="ot">-&gt;</span> x</span>
<span id="cb13-3"><a href="https://well-typed.com/blog/rss2.xml#cb13-3" tabindex="-1"/><span class="kw">in</span> λ (<span class="ot">b ::</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> ifThenElse {∀ a<span class="op">.</span> a <span class="ot">-&gt;</span> a} b boom <span class="fu">id</span></span></code></pre></div>
<p>This defines a function that takes an argument <code>b</code> of type <code>Bool</code>. When the caller passes <code>True</code>, the function evaluates to <code>ERROR</code> (aka <code>undefined</code> in Haskell); otherwise it evaluates to the identity function.</p>
<p>You might expect the untyped version of this program to look something like this:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="https://well-typed.com/blog/rss2.xml#cb14-1" tabindex="-1"/>λ b <span class="ot">-&gt;</span> ifThenElse b <span class="dt">ERROR</span> (λ x <span class="ot">-&gt;</span> x)</span></code></pre></div>
<p>However, as we mentioned above, Plutus Core is a strict language: function arguments are evaluated <em>before</em> the function is called. This means that this translation is not correct: the call to <code>ERROR</code> would be evaluated and the program would crash, independent of the value of <code>b</code>.</p>
<p>In the original program this is not the case: the argument passed to <code>ifThenElse</code> is <code>(λ {a} -&gt; ERROR)</code>, <em>which is a function</em>. Evaluating a function does nothing, so the original PIR program does have the behaviour we need.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn2" id="fnref2"><sup>2</sup></a></p>
<p>This means that when we erase types to get from PLC to UPLC, we have to make sure that we don’t make programs stricter than they were. The Plutus compiler does this by replacing type arguments by delays. The UPLC translation of our example is:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="https://well-typed.com/blog/rss2.xml#cb15-1" tabindex="-1"/>λ b <span class="ot">-&gt;</span> ifThenElse<span class="op">#</span> <span class="op">!</span> b (λ <span class="op">~</span> <span class="ot">-&gt;</span> <span class="dt">ERROR</span>) (λ <span class="op">~</span> y <span class="ot">-&gt;</span> y)</span></code></pre></div>
<p>Using the definitions from the <a href="https://well-typed.com/blog/rss2.xml#in-haskell.-force-and-delay">section on Force and Delay</a>, we could write this UPLC code in (Pseudo-)Haskell as</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="https://well-typed.com/blog/rss2.xml#cb16-1" tabindex="-1"/><span class="ot">maybeExplode ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Delayed</span> (∀ a<span class="op">.</span> a <span class="ot">-&gt;</span> a)</span>
<span id="cb16-2"><a href="https://well-typed.com/blog/rss2.xml#cb16-2" tabindex="-1"/>maybeExplode b <span class="ot">=</span> strictIfThenElse b (delay <span class="fu">undefined</span>) (delay <span class="fu">id</span>)</span></code></pre></div>
<p>This is nearly identical to the <code>strictIfThenElse</code> example we saw before, except that there is no need to force the final result: we <em>want</em> to return a delayed function, because we are returning a <em>polymorphic</em> function.</p>
<p>Finally, this also explains why we need to force the call to the built-in function <code>ifThenElse#</code>: it too is a polymorphic function, and hence it too is delayed.</p>
<h3 id="datatypes">Datatypes</h3>
<h4 id="in-haskell.-scott-encoding"><em>In Haskell</em>. Scott encoding</h4>
<p>Consider pattern matching on a value of type <code>Maybe a</code>: we will need two cases, one case for <code>Nothing</code> and one case for <code>Just (x :: a)</code>. We can capture this notion of “pattern matching on <code>Maybe</code>” as a function:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="https://well-typed.com/blog/rss2.xml#cb17-1" tabindex="-1"/><span class="ot">toSMaybe ::</span> ∀ a<span class="op">.</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> (∀ r<span class="op">.</span> r <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r)</span>
<span id="cb17-2"><a href="https://well-typed.com/blog/rss2.xml#cb17-2" tabindex="-1"/>toSMaybe x <span class="ot">=</span> λ n j <span class="ot">-&gt;</span> <span class="fu">maybe</span> n j x</span></code></pre></div>
<p>As is clear from the definition, this is just the well-known function <code>maybe</code> from the standard library with the arguments in a different order (the reason for the strange name <code>toSMaybe</code> will become apparent soon). We can also go the other way: from the pattern matching function to the value of type <code>Maybe a</code>:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="https://well-typed.com/blog/rss2.xml#cb18-1" tabindex="-1"/><span class="ot">fromSMaybe ::</span> (∀ r<span class="op">.</span> r <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb18-2"><a href="https://well-typed.com/blog/rss2.xml#cb18-2" tabindex="-1"/>fromSMaybe x <span class="ot">=</span> x <span class="dt">Nothing</span> <span class="dt">Just</span></span></code></pre></div>
<p>In fact, it’s not difficult to see that these two functions are mutually inverse. This means that the two representations <code>Maybe a</code> and <code>(∀ r. r -&gt; (a -&gt; r) -&gt; r)</code> are isomorphic, and we could define <code>Maybe</code> to <em>be</em> the type of pattern matching functions. This is known as the <em>Scott encoding</em> of <code>Maybe</code>:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="https://well-typed.com/blog/rss2.xml#cb19-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">SMaybe</span> a <span class="ot">=</span> <span class="kw">forall</span> r<span class="op">.</span> r <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span></code></pre></div>
<p>As some further examples of Scott encoding, we will consider the case for booleans, pairs, and unit (we will see the Plutus equivalent of all of these later). In the case of <code>Bool</code>, pattern matching will need a case for <code>True</code> and a case for <code>False</code>; this means that the translation to the Scott encoding turns out to be <code>if-then-else</code>:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="https://well-typed.com/blog/rss2.xml#cb20-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">SBool</span> <span class="ot">=</span> <span class="kw">forall</span> r<span class="op">.</span> r <span class="ot">-&gt;</span> r <span class="ot">-&gt;</span> r</span>
<span id="cb20-2"><a href="https://well-typed.com/blog/rss2.xml#cb20-2" tabindex="-1"/></span>
<span id="cb20-3"><a href="https://well-typed.com/blog/rss2.xml#cb20-3" tabindex="-1"/><span class="ot">toSBool ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">SBool</span></span>
<span id="cb20-4"><a href="https://well-typed.com/blog/rss2.xml#cb20-4" tabindex="-1"/>toSBool x <span class="ot">=</span> λ t f <span class="ot">-&gt;</span> <span class="kw">if</span> x <span class="kw">then</span> t <span class="kw">else</span> f</span>
<span id="cb20-5"><a href="https://well-typed.com/blog/rss2.xml#cb20-5" tabindex="-1"/></span>
<span id="cb20-6"><a href="https://well-typed.com/blog/rss2.xml#cb20-6" tabindex="-1"/><span class="ot">fromSBool ::</span> <span class="dt">SBool</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb20-7"><a href="https://well-typed.com/blog/rss2.xml#cb20-7" tabindex="-1"/>fromSBool x <span class="ot">=</span> x <span class="dt">True</span> <span class="dt">False</span></span></code></pre></div>
<p>For pairs, we only need <em>one</em> case, which will need to accept both components of the pair as arguments. This means that the Scott-encoding is essentially <code>uncurry</code>:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="https://well-typed.com/blog/rss2.xml#cb21-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">SPair</span> a b <span class="ot">=</span> <span class="kw">forall</span> r<span class="op">.</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb21-2"><a href="https://well-typed.com/blog/rss2.xml#cb21-2" tabindex="-1"/></span>
<span id="cb21-3"><a href="https://well-typed.com/blog/rss2.xml#cb21-3" tabindex="-1"/><span class="ot">toSPair ::</span> (a, b) <span class="ot">-&gt;</span> <span class="dt">SPair</span> a b</span>
<span id="cb21-4"><a href="https://well-typed.com/blog/rss2.xml#cb21-4" tabindex="-1"/>toSPair x <span class="ot">=</span> λ f <span class="ot">-&gt;</span> <span class="fu">uncurry</span> f x</span>
<span id="cb21-5"><a href="https://well-typed.com/blog/rss2.xml#cb21-5" tabindex="-1"/></span>
<span id="cb21-6"><a href="https://well-typed.com/blog/rss2.xml#cb21-6" tabindex="-1"/><span class="ot">fromSPair ::</span> <span class="dt">SPair</span> a b <span class="ot">-&gt;</span> (a, b)</span>
<span id="cb21-7"><a href="https://well-typed.com/blog/rss2.xml#cb21-7" tabindex="-1"/>fromSPair x <span class="ot">=</span> x (,)</span></code></pre></div>
<p>Finally, for unit we only need one case, with no arguments; i.e., the Scott-encoding of the unit value <code>()</code> is the identity function:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="https://well-typed.com/blog/rss2.xml#cb22-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">SUnit</span> <span class="ot">=</span> <span class="kw">forall</span> r<span class="op">.</span> r <span class="ot">-&gt;</span> r</span>
<span id="cb22-2"><a href="https://well-typed.com/blog/rss2.xml#cb22-2" tabindex="-1"/></span>
<span id="cb22-3"><a href="https://well-typed.com/blog/rss2.xml#cb22-3" tabindex="-1"/><span class="ot">toSUnit ::</span> () <span class="ot">-&gt;</span> <span class="dt">SUnit</span></span>
<span id="cb22-4"><a href="https://well-typed.com/blog/rss2.xml#cb22-4" tabindex="-1"/>toSUnit () <span class="ot">=</span> <span class="fu">id</span></span>
<span id="cb22-5"><a href="https://well-typed.com/blog/rss2.xml#cb22-5" tabindex="-1"/></span>
<span id="cb22-6"><a href="https://well-typed.com/blog/rss2.xml#cb22-6" tabindex="-1"/><span class="ot">fromSUnit ::</span> <span class="dt">SUnit</span> <span class="ot">-&gt;</span> ()</span>
<span id="cb22-7"><a href="https://well-typed.com/blog/rss2.xml#cb22-7" tabindex="-1"/>fromSUnit x <span class="ot">=</span> x ()</span></code></pre></div>
<p>This last example may seem a bit silly, but we will encounter it again later.</p>
<h5 id="scott-encoding-is-not-church-encoding">Scott encoding is not Church encoding</h5>
<p>For readers familiar with the Church encoding, it may be worth pointing out that the Scott encoding is <em>not</em> a fold; it <em>only</em> captures pattern matching, not recursion. Concretely, the Scott encoding of natural numbers is given by</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="https://well-typed.com/blog/rss2.xml#cb23-1" tabindex="-1"/><span class="kw">newtype</span> <span class="dt">SNat</span> <span class="ot">=</span> <span class="dt">SNat</span> (<span class="kw">forall</span> r<span class="op">.</span> (<span class="dt">SNat</span> <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r <span class="ot">-&gt;</span> r)</span></code></pre></div>
<p>Note the recursive occurrence of <code>SNat</code> here. This means for example that unlike with Church encodings, we can easily define a predecessor function:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="https://well-typed.com/blog/rss2.xml#cb24-1" tabindex="-1"/><span class="fu">pred</span><span class="ot"> ::</span> <span class="dt">SNat</span> <span class="ot">-&gt;</span> <span class="dt">SNat</span></span>
<span id="cb24-2"><a href="https://well-typed.com/blog/rss2.xml#cb24-2" tabindex="-1"/><span class="fu">pred</span> (<span class="dt">SNat</span> x) <span class="ot">=</span> x <span class="fu">id</span> (<span class="fu">error</span> <span class="st">"pred: zero"</span>)</span></code></pre></div>
<p>This example will look different in Plutus, however; we will come back to it when we discuss recursion.</p>
<h4 id="simple-example-booleans">Simple example: booleans</h4>
<p>Now that we understand what Scott encodings are, let’s look at how booleans work in Plutus Core, and consider compilation of the the Haskell expression</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="https://well-typed.com/blog/rss2.xml#cb25-1" tabindex="-1"/><span class="ot">ifThenElse ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb25-2"><a href="https://well-typed.com/blog/rss2.xml#cb25-2" tabindex="-1"/>ifThenElse <span class="ot">=</span> λ b t f <span class="ot">-&gt;</span> <span class="kw">if</span> b <span class="kw">then</span> t <span class="kw">else</span> f</span></code></pre></div>
<p>In PIR, this looks like</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="https://well-typed.com/blog/rss2.xml#cb26-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> <span class="kw">data</span> <span class="dt">Bool</span> <span class="ot">=</span> <span class="dt">True</span>  <span class="op">|</span> <span class="dt">False</span></span>
<span id="cb26-2"><a href="https://well-typed.com/blog/rss2.xml#cb26-2" tabindex="-1"/><span class="kw">in</span> λ {a} (<span class="ot">b ::</span> <span class="dt">Bool</span>) (<span class="ot">t ::</span> a) (<span class="ot">f ::</span> a) <span class="ot">-&gt;</span></span>
<span id="cb26-3"><a href="https://well-typed.com/blog/rss2.xml#cb26-3" tabindex="-1"/>     <span class="dt">Bool_match</span> b {∀ _<span class="op">.</span> a} (λ {_} <span class="ot">-&gt;</span> t) (λ {_} <span class="ot">-&gt;</span> f) {_}</span></code></pre></div>
<p>Every PIR program is entirely self-contained (no external libraries), so all datatype and function definitions are included. Unlike in Haskell, datatype declarations are scoped, and automatically introduce an explicit pattern matching function; for <code>Bool</code> this pattern matching function is called <code>Bool_match</code>.</p>
<p>The body of the function does not introduce any concepts we didn’t see before: <code>if-then-else</code> is translated<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn3" id="fnref3"><sup>3</sup></a> by a call to the pattern matching function on <code>Bool</code>. In order to prevent the evaluation of <code>t</code> and <code>f</code> before the pattern match on <code>b</code>, we <em>delay</em> those arguments by giving them a dummy type argument; this makes them polymorphic functions, and we then <em>force</em> the choice once it is made by applying it a dummy type argument<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn4" id="fnref4"><sup>4</sup></a>. As we discussed above, this type abstraction and application will then be translated to <code>force</code>/<code>delay</code> calls when the program is translated to UPLC, as we will see shortly.</p>
<p>Of course, in this particular case, the Plutus compiler is being overly conservative: since <code>t</code> and <code>f</code> are <em>variables</em> (lambda arguments), we know that they <em>must already have been evaluated</em> (Plutus is a strict language after all), and so the force/delay in this example is redundant and could in principle be optimized away.</p>
<p>This is our first example of a program that looks different in PIR and PLC, because PLC does not have data types; instead, we see the Scott encoding of <code>Bool</code> appear:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="https://well-typed.com/blog/rss2.xml#cb27-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> <span class="kw">type</span> <span class="dt">Bool</span>   <span class="ot">=</span> ∀ r<span class="op">.</span> r <span class="ot">-&gt;</span> r <span class="ot">-&gt;</span> r</span>
<span id="cb27-2"><a href="https://well-typed.com/blog/rss2.xml#cb27-2" tabindex="-1"/>     <span class="op">!</span><span class="dt">True</span>       <span class="ot">=</span> λ {r} (<span class="ot">t ::</span> r) (<span class="ot">f ::</span> r) <span class="ot">-&gt;</span> t</span>
<span id="cb27-3"><a href="https://well-typed.com/blog/rss2.xml#cb27-3" tabindex="-1"/>     <span class="op">!</span><span class="dt">False</span>      <span class="ot">=</span> λ {r} (<span class="ot">t ::</span> r) (<span class="ot">f ::</span> r) <span class="ot">-&gt;</span> f</span>
<span id="cb27-4"><a href="https://well-typed.com/blog/rss2.xml#cb27-4" tabindex="-1"/>     <span class="op">!</span><span class="dt">Bool_match</span> <span class="ot">=</span> λ (<span class="ot">x ::</span> ∀ r<span class="op">.</span> r <span class="ot">-&gt;</span> r <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> x</span>
<span id="cb27-5"><a href="https://well-typed.com/blog/rss2.xml#cb27-5" tabindex="-1"/><span class="kw">in</span> λ {a} (<span class="ot">b ::</span> <span class="dt">Bool</span>) (<span class="ot">t ::</span> a) (<span class="ot">f ::</span> a) <span class="ot">-&gt;</span></span>
<span id="cb27-6"><a href="https://well-typed.com/blog/rss2.xml#cb27-6" tabindex="-1"/>     <span class="dt">Bool_match</span> b {∀ _<span class="op">.</span> a} (λ {_} <span class="ot">-&gt;</span> t) (λ {_} <span class="ot">-&gt;</span> f) {_}</span></code></pre></div>
<p>We can see that <code>Bool</code> is now the Scott-encoding of <code>Bool</code> we saw in the previous section; <code>True</code> and <code>False</code> have become functions that select the first and second argument respectively, and <code>Bool_match</code> is now the identity function because Scott-encoded data types <em>are</em> pattern matching functions.</p>
<p>Finally, the UPLC translation is</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="https://well-typed.com/blog/rss2.xml#cb28-1" tabindex="-1"/>λ <span class="op">~</span> b t f <span class="ot">-&gt;</span> ( b<span class="op">!</span> (λ <span class="op">~</span> <span class="ot">-&gt;</span> t) (λ <span class="op">~</span> <span class="ot">-&gt;</span> f) )<span class="op">!</span></span></code></pre></div>
<p>We have now seen all concepts required to understand this code:</p>
<ol type="1">
<li>The function <em>itself</em> is polymorphic, and so it is delayed; this explains the initial dummy argument.</li>
<li><code>b</code> is the Scott-encoding of a Bool, is therefore a polymorphic function, which turned into a function with a dummy argument in UPLC, and so we must <em>force</em> <code>b</code> in order to actually use that function.</li>
<li>We delay both <code>t</code> and <code>f</code>, and once the choice is made, we force the result.</li>
</ol>
<p>This definition is very similar to the <a href="https://well-typed.com/blog/rss2.xml#in-haskell.-force-and-delay"><code>strictIfThenElse</code> example above</a>; the only difference really is the top-level delay; it’s as if we had written this in Haskell:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="https://well-typed.com/blog/rss2.xml#cb29-1" tabindex="-1"/>delay <span class="op">$</span> λ b t f <span class="ot">-&gt;</span> force <span class="op">$</span> force b (delay t) (delay f)</span></code></pre></div>
<h4 id="types-with-arguments-pairs">Types with arguments: pairs</h4>
<p>The <code>Bool</code> type discussed in the previous section had no arguments: it had kind <code>Type</code>. As a second example of Scott encodings, let’s consider a type that <em>does</em> have arguments: the type of pairs. This type has <em>two</em> type arguments (the two components), and hence has kind <code>Type -&gt; Type -&gt; Type</code> (also written <code>* -&gt; * -&gt; *</code>).</p>
<p>Let’s consider the compilation of the Haskell program</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="https://well-typed.com/blog/rss2.xml#cb30-1" tabindex="-1"/><span class="fu">fst</span><span class="ot"> ::</span> (a, b) <span class="ot">-&gt;</span> a</span>
<span id="cb30-2"><a href="https://well-typed.com/blog/rss2.xml#cb30-2" tabindex="-1"/><span class="fu">fst</span> (x, _y) <span class="ot">=</span> x</span></code></pre></div>
<p>In PIR, this program looks like:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="https://well-typed.com/blog/rss2.xml#cb31-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> <span class="kw">data</span> (<span class="dt">Tuple2</span><span class="ot"> ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) a b <span class="ot">=</span> <span class="dt">Tuple2</span> a b</span>
<span id="cb31-2"><a href="https://well-typed.com/blog/rss2.xml#cb31-2" tabindex="-1"/><span class="kw">in</span> λ {a} {b} (<span class="ot">pair ::</span> <span class="dt">Tuple2</span> a b) <span class="ot">-&gt;</span></span>
<span id="cb31-3"><a href="https://well-typed.com/blog/rss2.xml#cb31-3" tabindex="-1"/>     <span class="dt">Tuple2_match</span> {a} {b} pair {a} (λ (<span class="ot">x ::</span> a) (<span class="ot">y ::</span> b) <span class="ot">-&gt;</span> x)</span></code></pre></div>
<p>Like before, the pattern match on the pair has been replaced by an explicit call to the pattern matching function. Unlike in the <code>Bool</code> case, this pattern matching function now has <em>three</em> type arguments: two for the type arguments of the pair (<code>a</code> and <code>b</code>), and one for the result type (here, <code>a</code>, because we are selecting the first component of the pair).</p>
<p>The PLC version of this program is</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="https://well-typed.com/blog/rss2.xml#cb32-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> <span class="kw">type</span> <span class="dt">Tuple2</span><span class="ot"> ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span> <span class="ot">=</span> Λ a b<span class="op">.</span> ∀ r<span class="op">.</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb32-2"><a href="https://well-typed.com/blog/rss2.xml#cb32-2" tabindex="-1"/>     <span class="op">!</span><span class="dt">Tuple2</span>       <span class="ot">=</span> λ {a} {b} (<span class="ot">x ::</span> a) (<span class="ot">y ::</span> b) {r} (<span class="ot">f ::</span> a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> f x y</span>
<span id="cb32-3"><a href="https://well-typed.com/blog/rss2.xml#cb32-3" tabindex="-1"/>     <span class="op">!</span><span class="dt">Tuple2_match</span> <span class="ot">=</span> λ {a} {b} (<span class="ot">x ::</span> (Λ a b<span class="op">.</span> ∀ r<span class="op">.</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r) a b) <span class="ot">-&gt;</span> x</span>
<span id="cb32-4"><a href="https://well-typed.com/blog/rss2.xml#cb32-4" tabindex="-1"/><span class="kw">in</span> λ {a} {b} (<span class="ot">pair ::</span> <span class="dt">Tuple2</span> a b) <span class="ot">-&gt;</span></span>
<span id="cb32-5"><a href="https://well-typed.com/blog/rss2.xml#cb32-5" tabindex="-1"/>     <span class="dt">Tuple2_match</span> {a} {b} pair {a} (λ (<span class="ot">x ::</span> a) (<span class="ot">y ::</span> b) <span class="ot">-&gt;</span> x)</span></code></pre></div>
<p>The most interesting thing here is that the type <code>Tuple2</code> has become a <em>type-level function</em> (syntax <code>Λ a. t</code>), which computes the type of the pattern matching function <em>given</em> two arguments <code>a</code> and <code>b</code>. Note the kind difference between</p>
<pre><code>Λ a b. ... :: * -&gt; * -&gt; *</code></pre>
<p>and (for a given <code>a</code> and <code>b</code>)</p>
<pre><code>∀ r. ... :: *</code></pre>
<p>The rest of the code is reasonably straight-forward: the <code>Tuple2</code> term is the constructor for pairs, <code>Tuple2_match</code> is the pattern matching function and is again the identity function (because data types <em>are</em> pattern matching functions when we use Scott encodings).</p>
<p>Finally, this program compiles down to the following UPLC:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="https://well-typed.com/blog/rss2.xml#cb35-1" tabindex="-1"/>λ <span class="op">~</span> <span class="op">~</span> pair <span class="ot">-&gt;</span> pair<span class="op">!</span> (λ x y <span class="ot">-&gt;</span> x)</span></code></pre></div>
<p>No new concepts here; it is perhaps somewhat surprising to see the <em>double</em> delay of this function, arising from the fact that it has <em>two</em> type arguments. Indeed, one might wonder if some of these calls to delay/force might not be avoided through a compiler optimization pass.</p>
<h3 id="type-level-recursion">Type-level recursion</h3>
<h4 id="in-haskell.-type-level-fixpoints"><em>In Haskell</em>. Type-level fixpoints</h4>
<p>When we introduced Scott encoding, we saw that we can take something that we normally think of as a feature <em>of</em> a language (pattern matching) and turn it into something that we can work with <em>in</em> the language (functions). In this section we will see that we can do the same with another language feature: type-level recursion (we will delay a discussion of <em>term</em> level recursion until the next section). For a discussion of why one might do this in Haskell, see for example the <a href="https://www.andres-loeh.de/Rec/MutualRec.pdf" title="Generic programming with fixed points for mutually recursive datatypes">paper by Rodriguez et al. on generic programming</a>, or the <a href="https://dl.acm.org/doi/10.1145/2036918.2036930" title="Compositional data types">paper by Bahr and Hvitved on compositional data types</a>; why the Plutus compiler does it is discussed in the <a href="https://github.com/input-output-hk/plutus#academic-papers" title="Unraveling Recursion: compiling an IR with recursion to System F">Plutus paper</a>.</p>
<p>Consider the standard definition of lists:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="https://well-typed.com/blog/rss2.xml#cb36-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">List</span> a <span class="ot">=</span> <span class="dt">Nil</span> <span class="op">|</span> <span class="dt">Cons</span> a (<span class="dt">List</span> a)</span></code></pre></div>
<p><code>List</code> takes a single type argument, and hence has kind</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="https://well-typed.com/blog/rss2.xml#cb37-1" tabindex="-1"/><span class="dt">List</span><span class="ot"> ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span></span></code></pre></div>
<p>In order to identify recursion as its own concept, we can abstract out the recursive use of <code>List</code>, and give <code>List</code> an additional argument that will stand in for “recursive calls”:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb38-1"><a href="https://well-typed.com/blog/rss2.xml#cb38-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">ListF</span> f a <span class="ot">=</span> <span class="dt">Nil</span> <span class="op">|</span> <span class="dt">Cons</span> a (f a)</span></code></pre></div>
<p>Now <code>f</code> has the same kind that <code>List</code> had previously, which means that we have</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="https://well-typed.com/blog/rss2.xml#cb39-1" tabindex="-1"/><span class="dt">ListF</span><span class="ot"> ::</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">-&gt;</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>)</span></code></pre></div>
<p>What should we pass as the value for <code>f</code>? In a sense, we want to pass <code>ListF</code> <em>itself</em>, but if we do, then <em>that</em> <code>ListF</code> also wants an argument, ad infinitum:</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="https://well-typed.com/blog/rss2.xml#cb40-1" tabindex="-1"/><span class="dt">ListF</span> (<span class="dt">ListF</span> (<span class="dt">ListF</span> (<span class="dt">ListF</span> <span class="op">..</span>)))  a</span></code></pre></div>
<p>This, of course, is precisely recursion. We can capture this using a type-level fixpoint operator:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="https://well-typed.com/blog/rss2.xml#cb41-1" tabindex="-1"/><span class="kw">newtype</span> <span class="dt">Fix</span> (<span class="ot">t ::</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">-&gt;</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>)) (<span class="ot">a ::</span> <span class="op">*</span>) <span class="ot">=</span> <span class="dt">WrapFix</span> (t (<span class="dt">Fix</span> t) a)</span></code></pre></div>
<p>The kind of the argument <code>t</code> to <code>Fix</code> is precisely the kind of <code>ListF</code>, so we can define</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="https://well-typed.com/blog/rss2.xml#cb42-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">List</span> <span class="ot">=</span> <span class="dt">Fix</span> <span class="dt">ListF</span></span></code></pre></div>
<p>Let’s check if this makes sense:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="https://well-typed.com/blog/rss2.xml#cb43-1" tabindex="-1"/>   <span class="dt">List</span> a</span>
<span id="cb43-2"><a href="https://well-typed.com/blog/rss2.xml#cb43-2" tabindex="-1"/><span class="op">==</span> <span class="dt">Fix</span> <span class="dt">ListF</span> a</span>
<span id="cb43-3"><a href="https://well-typed.com/blog/rss2.xml#cb43-3" tabindex="-1"/><span class="op">==</span> <span class="dt">ListF</span> (<span class="dt">Fix</span> <span class="dt">ListF</span>) a</span>
<span id="cb43-4"><a href="https://well-typed.com/blog/rss2.xml#cb43-4" tabindex="-1"/><span class="op">==</span> <span class="dt">ListF</span> <span class="dt">List</span> a</span></code></pre></div>
<h4 id="in-haskell.-generalizing-to-arbitrary-kinds-ifix"><em>In Haskell</em>. Generalizing to arbitrary kinds: <code>IFix</code></h4>
<p>If we look closely at the arguments of <code>Fix</code>, we realize that it is more (kind) monomorphic than it needs to be, and there is an obvious generalization:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb44-1"><a href="https://well-typed.com/blog/rss2.xml#cb44-1" tabindex="-1"/><span class="kw">newtype</span> <span class="dt">IFix</span> (<span class="ot">t ::</span> (k <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">-&gt;</span> (k <span class="ot">-&gt;</span> <span class="op">*</span>)) (<span class="ot">a ::</span> k) <span class="ot">=</span> <span class="dt">WrapIFix</span> (t (<span class="dt">IFix</span> t) a)</span></code></pre></div>
<p>The <a href="https://github.com/input-output-hk/plutus#academic-papers" title="Unraveling Recursion: compiling an IR with recursion to System F">Plutus paper</a> goes through some length explaining why this definition is sufficient to capture <em>all</em> datatypes (Section 3.1, Recursive types). We will not do that in this blog post, but we will see three different example use cases, starting with lists: notice that we get <code>Fix</code> back simply by instantiating <code>k</code> to <code>*</code>:</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb45-1"><a href="https://well-typed.com/blog/rss2.xml#cb45-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">List</span> <span class="ot">=</span> <span class="dt">IFix</span> <span class="dt">FListF</span></span></code></pre></div>
<p>Let’s introduce two functions to wrap and unwrap <code>IFix</code>:</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb46-1"><a href="https://well-typed.com/blog/rss2.xml#cb46-1" tabindex="-1"/><span class="ot">wrap ::</span> t (<span class="dt">IFix</span> t) a <span class="ot">-&gt;</span> <span class="dt">IFix</span> t a</span>
<span id="cb46-2"><a href="https://well-typed.com/blog/rss2.xml#cb46-2" tabindex="-1"/>wrap <span class="ot">=</span> <span class="dt">WrapIFix</span></span>
<span id="cb46-3"><a href="https://well-typed.com/blog/rss2.xml#cb46-3" tabindex="-1"/></span>
<span id="cb46-4"><a href="https://well-typed.com/blog/rss2.xml#cb46-4" tabindex="-1"/><span class="ot">unwrap ::</span> <span class="dt">IFix</span> t a <span class="ot">-&gt;</span> t (<span class="dt">IFix</span> t) a</span>
<span id="cb46-5"><a href="https://well-typed.com/blog/rss2.xml#cb46-5" tabindex="-1"/>unwrap (<span class="dt">WrapIFix</span> t) <span class="ot">=</span> t</span></code></pre></div>
<p>If we now write functions on lists, we must <code>wrap</code> and <code>unwrap</code> at the appropriate times:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb47-1"><a href="https://well-typed.com/blog/rss2.xml#cb47-1" tabindex="-1"/><span class="ot">nil ::</span> <span class="dt">FList</span> a</span>
<span id="cb47-2"><a href="https://well-typed.com/blog/rss2.xml#cb47-2" tabindex="-1"/>nil <span class="ot">=</span> wrap <span class="op">$</span> <span class="dt">Nil</span></span>
<span id="cb47-3"><a href="https://well-typed.com/blog/rss2.xml#cb47-3" tabindex="-1"/></span>
<span id="cb47-4"><a href="https://well-typed.com/blog/rss2.xml#cb47-4" tabindex="-1"/><span class="ot">cons ::</span> a <span class="ot">-&gt;</span> <span class="dt">FList</span> a <span class="ot">-&gt;</span> <span class="dt">FList</span> a</span>
<span id="cb47-5"><a href="https://well-typed.com/blog/rss2.xml#cb47-5" tabindex="-1"/>cons x xs <span class="ot">=</span> wrap <span class="op">$</span> <span class="dt">Cons</span> x xs</span>
<span id="cb47-6"><a href="https://well-typed.com/blog/rss2.xml#cb47-6" tabindex="-1"/></span>
<span id="cb47-7"><a href="https://well-typed.com/blog/rss2.xml#cb47-7" tabindex="-1"/><span class="fu">null</span><span class="ot"> ::</span> <span class="dt">FList</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb47-8"><a href="https://well-typed.com/blog/rss2.xml#cb47-8" tabindex="-1"/><span class="fu">null</span> xs <span class="ot">=</span></span>
<span id="cb47-9"><a href="https://well-typed.com/blog/rss2.xml#cb47-9" tabindex="-1"/>   <span class="kw">case</span> unwrap xs <span class="kw">of</span></span>
<span id="cb47-10"><a href="https://well-typed.com/blog/rss2.xml#cb47-10" tabindex="-1"/>     <span class="dt">Nil</span>      <span class="ot">-&gt;</span> <span class="dt">True</span></span>
<span id="cb47-11"><a href="https://well-typed.com/blog/rss2.xml#cb47-11" tabindex="-1"/>     <span class="dt">Cons</span> _ _ <span class="ot">-&gt;</span> <span class="dt">False</span></span></code></pre></div>
<h4 id="in-haskell.-combining-with-scott-encoding"><em>In Haskell</em>. Combining with Scott encoding</h4>
<p>Before we look at how these fixpoints are used in Plutus, let’s stay in Haskell a tiny bit longer, and first see how fixpoints can be combined with Scott encoding.</p>
<p>First, let’s see the Scott encoding of lists <em>without</em> the use of <code>IFix</code>:</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb48-1"><a href="https://well-typed.com/blog/rss2.xml#cb48-1" tabindex="-1"/><span class="kw">newtype</span> <span class="dt">List</span> a <span class="ot">=</span> <span class="dt">List</span> {</span>
<span id="cb48-2"><a href="https://well-typed.com/blog/rss2.xml#cb48-2" tabindex="-1"/><span class="ot">      listMatch ::</span> <span class="kw">forall</span> r<span class="op">.</span> r <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">List</span> a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb48-3"><a href="https://well-typed.com/blog/rss2.xml#cb48-3" tabindex="-1"/>    }</span></code></pre></div>
<p>The pattern matching function needs two cases: one for <code>nil</code> and one for <code>cons</code>; the latter then takes two arguments, the head and tail of the list. Some simple examples:</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb49-1"><a href="https://well-typed.com/blog/rss2.xml#cb49-1" tabindex="-1"/><span class="ot">nil ::</span> <span class="dt">List</span> a</span>
<span id="cb49-2"><a href="https://well-typed.com/blog/rss2.xml#cb49-2" tabindex="-1"/>nil <span class="ot">=</span> <span class="dt">List</span> <span class="op">$</span> λ n _c <span class="ot">-&gt;</span> n</span>
<span id="cb49-3"><a href="https://well-typed.com/blog/rss2.xml#cb49-3" tabindex="-1"/></span>
<span id="cb49-4"><a href="https://well-typed.com/blog/rss2.xml#cb49-4" tabindex="-1"/><span class="ot">cons ::</span> a <span class="ot">-&gt;</span> <span class="dt">List</span> a <span class="ot">-&gt;</span> <span class="dt">List</span> a</span>
<span id="cb49-5"><a href="https://well-typed.com/blog/rss2.xml#cb49-5" tabindex="-1"/>cons x xs <span class="ot">=</span> <span class="dt">List</span> <span class="op">$</span> λ _ c <span class="ot">-&gt;</span> c x xs</span>
<span id="cb49-6"><a href="https://well-typed.com/blog/rss2.xml#cb49-6" tabindex="-1"/></span>
<span id="cb49-7"><a href="https://well-typed.com/blog/rss2.xml#cb49-7" tabindex="-1"/><span class="fu">null</span><span class="ot"> ::</span> <span class="dt">List</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb49-8"><a href="https://well-typed.com/blog/rss2.xml#cb49-8" tabindex="-1"/><span class="fu">null</span> xs <span class="ot">=</span> listMatch xs <span class="dt">True</span> (λ _ _ <span class="ot">-&gt;</span> <span class="dt">False</span>)</span></code></pre></div>
<p>To combine the Scott encoding with the use of explicit fixpoints, we need to go through the same process as before, and give <code>List</code> an additional argument that captures the recursive uses:</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb50-1"><a href="https://well-typed.com/blog/rss2.xml#cb50-1" tabindex="-1"/><span class="kw">newtype</span> <span class="dt">ListF</span> f a <span class="ot">=</span> <span class="dt">List</span> {</span>
<span id="cb50-2"><a href="https://well-typed.com/blog/rss2.xml#cb50-2" tabindex="-1"/><span class="ot">      listMatch ::</span> <span class="kw">forall</span> r<span class="op">.</span> r <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb50-3"><a href="https://well-typed.com/blog/rss2.xml#cb50-3" tabindex="-1"/>    }</span>
<span id="cb50-4"><a href="https://well-typed.com/blog/rss2.xml#cb50-4" tabindex="-1"/></span>
<span id="cb50-5"><a href="https://well-typed.com/blog/rss2.xml#cb50-5" tabindex="-1"/><span class="kw">type</span> <span class="dt">List</span> <span class="ot">=</span> <span class="dt">IFix</span> <span class="dt">IListF</span></span></code></pre></div>
<p>The same three functions we defined above now become:</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb51-1"><a href="https://well-typed.com/blog/rss2.xml#cb51-1" tabindex="-1"/><span class="ot">nil ::</span> <span class="dt">List</span> a</span>
<span id="cb51-2"><a href="https://well-typed.com/blog/rss2.xml#cb51-2" tabindex="-1"/>nil <span class="ot">=</span> wrap <span class="op">$</span> <span class="dt">List</span> <span class="op">$</span> λ n _c <span class="ot">-&gt;</span> n</span>
<span id="cb51-3"><a href="https://well-typed.com/blog/rss2.xml#cb51-3" tabindex="-1"/></span>
<span id="cb51-4"><a href="https://well-typed.com/blog/rss2.xml#cb51-4" tabindex="-1"/><span class="ot">cons ::</span> a <span class="ot">-&gt;</span> <span class="dt">List</span> a <span class="ot">-&gt;</span> <span class="dt">List</span> a</span>
<span id="cb51-5"><a href="https://well-typed.com/blog/rss2.xml#cb51-5" tabindex="-1"/>cons x xs <span class="ot">=</span> wrap <span class="op">$</span> <span class="dt">List</span> <span class="op">$</span> λ _n c <span class="ot">-&gt;</span> c x xs</span>
<span id="cb51-6"><a href="https://well-typed.com/blog/rss2.xml#cb51-6" tabindex="-1"/></span>
<span id="cb51-7"><a href="https://well-typed.com/blog/rss2.xml#cb51-7" tabindex="-1"/><span class="fu">null</span><span class="ot"> ::</span> <span class="dt">List</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb51-8"><a href="https://well-typed.com/blog/rss2.xml#cb51-8" tabindex="-1"/><span class="fu">null</span> xs <span class="ot">=</span> listMatch (unwrap xs) <span class="dt">True</span> (λ _ _ <span class="ot">-&gt;</span> <span class="dt">False</span>)</span></code></pre></div>
<h4 id="simple-example-lists">Simple example: lists</h4>
<p>We are now finally ready to look at how lists work in Plutus. Let’s start with the definition of <code>nil</code>. In PIR:</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb52-1"><a href="https://well-typed.com/blog/rss2.xml#cb52-1" tabindex="-1"/><span class="kw">let</span> rec <span class="kw">data</span> (<span class="dt">List</span><span class="ot"> ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) a <span class="ot">=</span> <span class="dt">Nil</span>  <span class="op">|</span> <span class="dt">Cons</span> a (<span class="dt">List</span> a)</span>
<span id="cb52-2"><a href="https://well-typed.com/blog/rss2.xml#cb52-2" tabindex="-1"/><span class="kw">in</span> <span class="dt">Nil</span></span></code></pre></div>
<p>The only new PIR feature we see here is marking the definition of <code>Nat</code> as recursive: <code>let</code>-bindings in PIR are non-recursive unless otherwise indicated.</p>
<p>Let’s look the PLC version now, which is considerably more involved; PLC has neither datatypes nor recursion, and instead uses Scott encodings and the <code>IFix</code> combinator<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn5" id="fnref5"><sup>5</sup></a>:</p>
<div class="sourceCode" id="cb53"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb53-1"><a href="https://well-typed.com/blog/rss2.xml#cb53-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> <span class="kw">type</span> <span class="dt">ListF</span> <span class="ot">=</span> Λ (<span class="ot">f ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>)<span class="op">.</span> Λ a<span class="op">.</span> ∀ r<span class="op">.</span> r <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> (f a) <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb53-2"><a href="https://well-typed.com/blog/rss2.xml#cb53-2" tabindex="-1"/>     <span class="kw">type</span> <span class="dt">List</span>  <span class="ot">=</span> Λ a<span class="op">.</span> ifix <span class="dt">ListF</span> a</span>
<span id="cb53-3"><a href="https://well-typed.com/blog/rss2.xml#cb53-3" tabindex="-1"/>     <span class="op">!</span><span class="dt">Nil</span>       <span class="ot">=</span> λ {a} <span class="ot">-&gt;</span></span>
<span id="cb53-4"><a href="https://well-typed.com/blog/rss2.xml#cb53-4" tabindex="-1"/>                    wrap {<span class="dt">ListF</span>} {a} (</span>
<span id="cb53-5"><a href="https://well-typed.com/blog/rss2.xml#cb53-5" tabindex="-1"/>                      λ {r} (<span class="ot">n ::</span> r) (<span class="ot">c ::</span> a <span class="ot">-&gt;</span> <span class="dt">List</span> a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> n)</span>
<span id="cb53-6"><a href="https://well-typed.com/blog/rss2.xml#cb53-6" tabindex="-1"/>     <span class="op">!</span><span class="dt">Cons</span>      <span class="ot">=</span> λ {a} (<span class="ot">x ::</span> a) (<span class="ot">xs ::</span> <span class="dt">List</span> a) <span class="ot">-&gt;</span></span>
<span id="cb53-7"><a href="https://well-typed.com/blog/rss2.xml#cb53-7" tabindex="-1"/>                    wrap {<span class="dt">ListF</span>} {a} (</span>
<span id="cb53-8"><a href="https://well-typed.com/blog/rss2.xml#cb53-8" tabindex="-1"/>                      λ {r} (<span class="ot">n ::</span> r) (<span class="ot">c ::</span> a <span class="ot">-&gt;</span> (<span class="dt">List</span> a) <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> c x xs)</span>
<span id="cb53-9"><a href="https://well-typed.com/blog/rss2.xml#cb53-9" tabindex="-1"/>     <span class="op">!</span><span class="dt">List_match</span> <span class="ot">=</span> λ {a} (<span class="ot">x ::</span> <span class="dt">List</span> a) <span class="ot">-&gt;</span></span>
<span id="cb53-10"><a href="https://well-typed.com/blog/rss2.xml#cb53-10" tabindex="-1"/>                    unwrap x</span>
<span id="cb53-11"><a href="https://well-typed.com/blog/rss2.xml#cb53-11" tabindex="-1"/><span class="kw">in</span> <span class="dt">Nil</span></span></code></pre></div>
<p>Hopefully this PLC code is not difficult to understand anymore now; <code>ifix</code>, <code>wrap</code> and <code>unwrap</code> are PLC primitives. To understand the untyped Plutus code, we merely need to know that <code>wrap</code> and <code>unwrap</code> are simply erased, so this whole program compiles down to</p>
<div class="sourceCode" id="cb54"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb54-1"><a href="https://well-typed.com/blog/rss2.xml#cb54-1" tabindex="-1"/>λ <span class="op">~</span> <span class="op">~</span> n c <span class="ot">-&gt;</span> n</span></code></pre></div>
<p>The double delay comes from the two type parameters: the type of the list elements <code>a</code>, and the type of the continuation <code>r</code>.</p>
<p>As another example, let’s look at <code>null</code> (check if a list is empty). First, in PIR:</p>
<div class="sourceCode" id="cb55"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb55-1"><a href="https://well-typed.com/blog/rss2.xml#cb55-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> <span class="kw">data</span> <span class="dt">Bool</span> <span class="ot">=</span> <span class="dt">True</span>  <span class="op">|</span> <span class="dt">False</span></span>
<span id="cb55-2"><a href="https://well-typed.com/blog/rss2.xml#cb55-2" tabindex="-1"/>     rec <span class="kw">data</span> <span class="dt">List</span><span class="ot"> ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span> a <span class="ot">=</span> <span class="dt">Nil</span>  <span class="op">|</span> <span class="dt">Cons</span> a (<span class="dt">List</span> a)</span>
<span id="cb55-3"><a href="https://well-typed.com/blog/rss2.xml#cb55-3" tabindex="-1"/><span class="kw">in</span> λ {a} (<span class="ot">xs ::</span> <span class="dt">List</span> a) <span class="ot">-&gt;</span></span>
<span id="cb55-4"><a href="https://well-typed.com/blog/rss2.xml#cb55-4" tabindex="-1"/>     <span class="dt">List_match</span> {a} xs {∀ _<span class="op">.</span> <span class="dt">Bool</span>}</span>
<span id="cb55-5"><a href="https://well-typed.com/blog/rss2.xml#cb55-5" tabindex="-1"/>       (λ {_} <span class="ot">-&gt;</span> <span class="dt">True</span>)</span>
<span id="cb55-6"><a href="https://well-typed.com/blog/rss2.xml#cb55-6" tabindex="-1"/>       (λ (<span class="ot">x ::</span> a) (<span class="ot">xs' ::</span> <span class="dt">List</span> a) {_} <span class="ot">-&gt;</span> <span class="dt">False</span>)</span>
<span id="cb55-7"><a href="https://well-typed.com/blog/rss2.xml#cb55-7" tabindex="-1"/>       {_}</span></code></pre></div>
<p>The pattern match on the list is replaced by a call to the pattern matching function, and the two arguments for the <code>Nil</code> and <code>Cons</code> cases are delayed, to avoid unnecessary computation; we have seen these patterns before (and, as before, here too the use of <code>delay</code> is unnecessarily conservative). In PLC:</p>
<div class="sourceCode" id="cb56"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb56-1"><a href="https://well-typed.com/blog/rss2.xml#cb56-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> <span class="co">-- definition of IListF, List, Nil, Cons, List_match as above</span></span>
<span id="cb56-2"><a href="https://well-typed.com/blog/rss2.xml#cb56-2" tabindex="-1"/>     <span class="co">-- definition of Bool, True, False as discussed in section on datatypes</span></span>
<span id="cb56-3"><a href="https://well-typed.com/blog/rss2.xml#cb56-3" tabindex="-1"/>     <span class="op">..</span></span>
<span id="cb56-4"><a href="https://well-typed.com/blog/rss2.xml#cb56-4" tabindex="-1"/><span class="kw">in</span> λ {a} (<span class="ot">xs ::</span> <span class="dt">List</span> a) <span class="ot">-&gt;</span></span>
<span id="cb56-5"><a href="https://well-typed.com/blog/rss2.xml#cb56-5" tabindex="-1"/>     <span class="dt">List_match</span> {a} xs {∀ _<span class="op">.</span> <span class="dt">Bool</span>}</span>
<span id="cb56-6"><a href="https://well-typed.com/blog/rss2.xml#cb56-6" tabindex="-1"/>       (λ {_} <span class="ot">-&gt;</span> <span class="dt">True</span>)</span>
<span id="cb56-7"><a href="https://well-typed.com/blog/rss2.xml#cb56-7" tabindex="-1"/>       (λ (<span class="ot">x ::</span> a) (<span class="ot">xs ::</span> <span class="dt">List</span> a) {_} <span class="ot">-&gt;</span> <span class="dt">False</span>)</span>
<span id="cb56-8"><a href="https://well-typed.com/blog/rss2.xml#cb56-8" tabindex="-1"/>       {_}</span></code></pre></div>
<p>The main code looks identical, but the definitions have changed from the PLC version: <code>List_match</code>, <code>True</code> and <code>False</code> are now all using the Scott-encoding. In UPLC:</p>
<div class="sourceCode" id="cb57"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb57-1"><a href="https://well-typed.com/blog/rss2.xml#cb57-1" tabindex="-1"/>λ <span class="op">~</span> xs <span class="ot">-&gt;</span> ( xs<span class="op">!</span> (λ <span class="op">~</span> <span class="op">~</span> t f <span class="ot">-&gt;</span> t) (λ x xs <span class="op">~</span> <span class="op">~</span> t f <span class="ot">-&gt;</span> f) )<span class="op">!</span></span></code></pre></div>
<p>Let’s make sure we really understand this code:</p>
<ol type="1">
<li>The top-level delay <code>(λ ~ xs -&gt; ..)</code> is there because <code>nil</code> is a polymorphic function (type argument <code>a</code>).</li>
<li>We must force <code>xs</code> because <code>xs</code> is represented by the Scott-encoding of a list, which is therefore itself a polymorphic function (type argument <code>r</code>).</li>
<li>We give two arguments to <code>xs</code>: the case for <code>nil</code> and the case for <code>cons</code>. We delay both of those arguments, and then force the result once the choice is made.</li>
<li>Finally, <code>True</code> (i.e., <code>(λ t f -&gt; t)</code> in Scott encoding) and <code>False</code> (i.e, <code>(λ t f -&gt; f)</code>) <em>themselves</em> are polymorphic functions (they have their own <code>r</code> type argument), and we therefore have one more delay in both arguments to <code>xs</code>.</li>
</ol>
<h4 id="in-haskell.-types-of-kind"><em>In Haskell</em>. Types of kind <code>*</code></h4>
<p>Lists are probably the simplest example of <code>IFix</code>, because the kind of <code>ListF</code></p>
<div class="sourceCode" id="cb58"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb58-1"><a href="https://well-typed.com/blog/rss2.xml#cb58-1" tabindex="-1"/><span class="dt">ListF</span><span class="ot"> ::</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">-&gt;</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>)</span></code></pre></div>
<p>lines up very nicely with the kind of <code>IFix</code>:</p>
<div class="sourceCode" id="cb59"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb59-1"><a href="https://well-typed.com/blog/rss2.xml#cb59-1" tabindex="-1"/><span class="dt">IFix</span><span class="ot"> ::</span> ∀ k<span class="op">.</span> ((k <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">-&gt;</span> (k <span class="ot">-&gt;</span> <span class="op">*</span>)) <span class="ot">-&gt;</span> (k <span class="ot">-&gt;</span> <span class="op">*</span>)</span></code></pre></div>
<p>simply by picking <code>k = *</code>. We’ll now discuss an example that doesn’t line up quite so nicely: natural numbers. Basic definition:</p>
<div class="sourceCode" id="cb60"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb60-1"><a href="https://well-typed.com/blog/rss2.xml#cb60-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">Nat</span> <span class="ot">=</span> <span class="dt">Succ</span> <span class="dt">Nat</span> <span class="op">|</span> <span class="dt">Zero</span></span></code></pre></div>
<p>Abstracting out the recursion:</p>
<div class="sourceCode" id="cb61"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb61-1"><a href="https://well-typed.com/blog/rss2.xml#cb61-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">NatF</span> f <span class="ot">=</span> <span class="dt">Succ</span> f <span class="op">|</span> <span class="dt">Zero</span></span></code></pre></div>
<p>Since <code>NatF</code> does not take any argument, its kind does not line up with what <code>IFix</code> wants:</p>
<div class="sourceCode" id="cb62"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb62-1"><a href="https://well-typed.com/blog/rss2.xml#cb62-1" tabindex="-1"/><span class="dt">NatF</span><span class="ot"> ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span></span></code></pre></div>
<p>What we will do instead is pick some type <code>SimpleRec</code> such that</p>
<div class="sourceCode" id="cb63"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb63-1"><a href="https://well-typed.com/blog/rss2.xml#cb63-1" tabindex="-1"/><span class="dt">IFix</span> <span class="dt">SimpleRec</span><span class="ot"> ::</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">-&gt;</span> <span class="op">*</span></span></code></pre></div>
<p>In other words, we will pick <code>k = * -&gt; *</code>. This then allows us to then define</p>
<div class="sourceCode" id="cb64"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb64-1"><a href="https://well-typed.com/blog/rss2.xml#cb64-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">Nat</span> <span class="ot">=</span> <span class="dt">IFix</span> <span class="dt">SimpleRec</span> <span class="dt">NatF</span></span></code></pre></div>
<p>Unlike in the list example, <code>NatF</code> is now the <em>second</em> argument to <code>IFix</code>, not the first; this is quite a different use of <code>IFix</code>.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn6" id="fnref6"><sup>6</sup></a></p>
<p>Here’s how we can define <code>SimpleRec</code>:</p>
<div class="sourceCode" id="cb65"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb65-1"><a href="https://well-typed.com/blog/rss2.xml#cb65-1" tabindex="-1"/><span class="kw">newtype</span> <span class="dt">SimpleRec</span> (<span class="ot">rec ::</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">-&gt;</span> <span class="op">*</span>) (<span class="ot">f ::</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>)) <span class="ot">=</span> <span class="dt">SimpleRec</span> (f (rec f))</span></code></pre></div>
<p>Let’s see if this makes sense:</p>
<div class="sourceCode" id="cb66"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb66-1"><a href="https://well-typed.com/blog/rss2.xml#cb66-1" tabindex="-1"/>   <span class="dt">Nat</span></span>
<span id="cb66-2"><a href="https://well-typed.com/blog/rss2.xml#cb66-2" tabindex="-1"/><span class="op">==</span> <span class="dt">IFix</span> <span class="dt">SimpleRec</span> <span class="dt">NatF</span></span>
<span id="cb66-3"><a href="https://well-typed.com/blog/rss2.xml#cb66-3" tabindex="-1"/><span class="op">==</span> <span class="dt">SimpleRec</span> (<span class="dt">IFix</span> <span class="dt">SimpleRec</span>) <span class="dt">NatF</span></span>
<span id="cb66-4"><a href="https://well-typed.com/blog/rss2.xml#cb66-4" tabindex="-1"/><span class="op">==</span> <span class="dt">NatF</span> (<span class="dt">IFix</span> <span class="dt">SimpleRec</span> <span class="dt">NatF</span>)</span>
<span id="cb66-5"><a href="https://well-typed.com/blog/rss2.xml#cb66-5" tabindex="-1"/><span class="op">==</span> <span class="dt">NatF</span> <span class="dt">Nat</span></span></code></pre></div>
<h4 id="example-natural-numbers">Example: natural numbers</h4>
<p>Now that we have seen the theory in Haskell, the Plutus translation is not that difficult anymore. Let’s consider the compilation of</p>
<div class="sourceCode" id="cb67"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb67-1"><a href="https://well-typed.com/blog/rss2.xml#cb67-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">Nat</span> <span class="ot">=</span> <span class="dt">Zero</span> <span class="op">|</span> <span class="dt">Succ</span> <span class="dt">Nat</span></span>
<span id="cb67-2"><a href="https://well-typed.com/blog/rss2.xml#cb67-2" tabindex="-1"/></span>
<span id="cb67-3"><a href="https://well-typed.com/blog/rss2.xml#cb67-3" tabindex="-1"/><span class="ot">isZero ::</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb67-4"><a href="https://well-typed.com/blog/rss2.xml#cb67-4" tabindex="-1"/>isZero <span class="dt">Zero</span> <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb67-5"><a href="https://well-typed.com/blog/rss2.xml#cb67-5" tabindex="-1"/>isZero _    <span class="ot">=</span> <span class="dt">False</span></span></code></pre></div>
<p>to Plutus. First, PIR:</p>
<div class="sourceCode" id="cb68"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb68-1"><a href="https://well-typed.com/blog/rss2.xml#cb68-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span>    <span class="kw">data</span> <span class="dt">Bool</span> <span class="ot">=</span> <span class="dt">True</span> <span class="op">|</span> <span class="dt">False</span></span>
<span id="cb68-2"><a href="https://well-typed.com/blog/rss2.xml#cb68-2" tabindex="-1"/><span class="kw">let</span> rec <span class="kw">data</span> <span class="dt">Nat</span>  <span class="ot">=</span> <span class="dt">Succ</span> <span class="dt">Nat</span> <span class="op">|</span> <span class="dt">Zero</span></span>
<span id="cb68-3"><a href="https://well-typed.com/blog/rss2.xml#cb68-3" tabindex="-1"/><span class="kw">in</span> λ (<span class="ot">n ::</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span></span>
<span id="cb68-4"><a href="https://well-typed.com/blog/rss2.xml#cb68-4" tabindex="-1"/>     <span class="dt">Nat_match</span> n {∀ _<span class="op">.</span> <span class="dt">Bool</span>}</span>
<span id="cb68-5"><a href="https://well-typed.com/blog/rss2.xml#cb68-5" tabindex="-1"/>       (λ (<span class="ot">n' ::</span> <span class="dt">Nat</span>) {_} <span class="ot">-&gt;</span> <span class="dt">False</span>)</span>
<span id="cb68-6"><a href="https://well-typed.com/blog/rss2.xml#cb68-6" tabindex="-1"/>       (λ {_} <span class="ot">-&gt;</span> <span class="dt">True</span>)</span>
<span id="cb68-7"><a href="https://well-typed.com/blog/rss2.xml#cb68-7" tabindex="-1"/>       {_}</span></code></pre></div>
<p>Nothing new here. Let’s look at PLC:</p>
<div class="sourceCode" id="cb69"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb69-1"><a href="https://well-typed.com/blog/rss2.xml#cb69-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> <span class="kw">type</span> <span class="dt">SimpleRec</span> <span class="ot">=</span> Λ (<span class="ot">rec ::</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">-&gt;</span> <span class="op">*</span>)<span class="op">.</span> Λ (<span class="ot">f ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>)<span class="op">.</span> f (rec f)</span>
<span id="cb69-2"><a href="https://well-typed.com/blog/rss2.xml#cb69-2" tabindex="-1"/>     <span class="kw">type</span> <span class="dt">NatF</span>      <span class="ot">=</span> Λ f<span class="op">.</span> ∀ r<span class="op">.</span> (f <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r <span class="ot">-&gt;</span> r</span>
<span id="cb69-3"><a href="https://well-typed.com/blog/rss2.xml#cb69-3" tabindex="-1"/>     <span class="kw">type</span> <span class="dt">Nat</span>       <span class="ot">=</span> ifix <span class="dt">SimpleRec</span> <span class="dt">NatF</span></span>
<span id="cb69-4"><a href="https://well-typed.com/blog/rss2.xml#cb69-4" tabindex="-1"/></span>
<span id="cb69-5"><a href="https://well-typed.com/blog/rss2.xml#cb69-5" tabindex="-1"/>     <span class="op">!</span><span class="dt">Succ</span>      <span class="ot">=</span> λ (<span class="ot">n ::</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span> wrap {<span class="dt">SimpleRec</span>} {<span class="dt">NatF</span>} (</span>
<span id="cb69-6"><a href="https://well-typed.com/blog/rss2.xml#cb69-6" tabindex="-1"/>                    λ {r} (<span class="ot">s ::</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> r) (<span class="ot">z ::</span> r) <span class="ot">-&gt;</span> s n)</span>
<span id="cb69-7"><a href="https://well-typed.com/blog/rss2.xml#cb69-7" tabindex="-1"/>     <span class="op">!</span><span class="dt">Zero</span>      <span class="ot">=</span> wrap {<span class="dt">SimpleRec</span>} {<span class="dt">NatF</span>} (</span>
<span id="cb69-8"><a href="https://well-typed.com/blog/rss2.xml#cb69-8" tabindex="-1"/>                    λ {r} (<span class="ot">s ::</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> r) (<span class="ot">z ::</span> r) <span class="ot">-&gt;</span> z)</span>
<span id="cb69-9"><a href="https://well-typed.com/blog/rss2.xml#cb69-9" tabindex="-1"/>     <span class="op">!</span><span class="dt">Nat_match</span> <span class="ot">=</span> λ (<span class="ot">x ::</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span> unwrap x</span>
<span id="cb69-10"><a href="https://well-typed.com/blog/rss2.xml#cb69-10" tabindex="-1"/></span>
<span id="cb69-11"><a href="https://well-typed.com/blog/rss2.xml#cb69-11" tabindex="-1"/>     <span class="co">-- definition of Bool, True, False as discussed in section on datatypes</span></span>
<span id="cb69-12"><a href="https://well-typed.com/blog/rss2.xml#cb69-12" tabindex="-1"/></span>
<span id="cb69-13"><a href="https://well-typed.com/blog/rss2.xml#cb69-13" tabindex="-1"/><span class="kw">in</span> λ (<span class="ot">n ::</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span></span>
<span id="cb69-14"><a href="https://well-typed.com/blog/rss2.xml#cb69-14" tabindex="-1"/>     <span class="dt">Nat_match</span> n {∀ _<span class="op">.</span> <span class="dt">Bool</span>}</span>
<span id="cb69-15"><a href="https://well-typed.com/blog/rss2.xml#cb69-15" tabindex="-1"/>       (λ (<span class="ot">ipv ::</span> <span class="dt">Nat</span>) {_} <span class="ot">-&gt;</span> <span class="dt">False</span>)</span>
<span id="cb69-16"><a href="https://well-typed.com/blog/rss2.xml#cb69-16" tabindex="-1"/>       (λ {_} <span class="ot">-&gt;</span> <span class="dt">True</span>)</span>
<span id="cb69-17"><a href="https://well-typed.com/blog/rss2.xml#cb69-17" tabindex="-1"/>       {_}</span></code></pre></div>
<p>Other than the use of <code>SimpleRec</code> that we discussed in the previous section<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn7" id="fnref7"><sup>7</sup></a>, this introduces no new concepts. The UPLC code is straight-forward, because the wrapping/unwrapping simply disappears:</p>
<div class="sourceCode" id="cb70"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb70-1"><a href="https://well-typed.com/blog/rss2.xml#cb70-1" tabindex="-1"/>λ n <span class="ot">-&gt;</span> ( n<span class="op">!</span> (λ ipv <span class="op">~</span> <span class="op">~</span> t f <span class="ot">-&gt;</span> f) (λ <span class="op">~</span> <span class="op">~</span> t f <span class="ot">-&gt;</span> t) )<span class="op">!</span></span></code></pre></div>
<h3 id="term-level-recursion">Term-level recursion</h3>
<h4 id="in-haskell.-term-level-fixpoints"><em>In Haskell</em>. Term-level fixpoints</h4>
<p>So far we have been talking about recursive <em>types</em>; let’s now turn our attention to recursive <em>terms</em>. Let’s consider addition on natural numbers:</p>
<div class="sourceCode" id="cb71"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb71-1"><a href="https://well-typed.com/blog/rss2.xml#cb71-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">Nat</span> <span class="ot">=</span> <span class="dt">Succ</span> <span class="dt">Nat</span> <span class="op">|</span> <span class="dt">Zero</span></span>
<span id="cb71-2"><a href="https://well-typed.com/blog/rss2.xml#cb71-2" tabindex="-1"/></span>
<span id="cb71-3"><a href="https://well-typed.com/blog/rss2.xml#cb71-3" tabindex="-1"/><span class="ot">add ::</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span></span>
<span id="cb71-4"><a href="https://well-typed.com/blog/rss2.xml#cb71-4" tabindex="-1"/>add <span class="dt">Zero</span>     m <span class="ot">=</span> m</span>
<span id="cb71-5"><a href="https://well-typed.com/blog/rss2.xml#cb71-5" tabindex="-1"/>add (<span class="dt">Succ</span> n) m <span class="ot">=</span> <span class="dt">Succ</span> (add n m)</span></code></pre></div>
<p>Just like we did with types, we can abstract out the recursive call:</p>
<div class="sourceCode" id="cb72"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb72-1"><a href="https://well-typed.com/blog/rss2.xml#cb72-1" tabindex="-1"/><span class="ot">addF ::</span> (<span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span></span>
<span id="cb72-2"><a href="https://well-typed.com/blog/rss2.xml#cb72-2" tabindex="-1"/>addF f <span class="dt">Zero</span>     m <span class="ot">=</span> m</span>
<span id="cb72-3"><a href="https://well-typed.com/blog/rss2.xml#cb72-3" tabindex="-1"/>addF f (<span class="dt">Succ</span> n) m <span class="ot">=</span> <span class="dt">Succ</span> (f n m)</span></code></pre></div>
<p>And as with types, we really want to pass the function <em>itself</em> as its own argument:</p>
<div class="sourceCode" id="cb73"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb73-1"><a href="https://well-typed.com/blog/rss2.xml#cb73-1" tabindex="-1"/>addF (addF (addF (addF <span class="op">..</span>)))</span></code></pre></div>
<p>We can do this by defining a term-level fixpoint combinator:</p>
<div class="sourceCode" id="cb74"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb74-1"><a href="https://well-typed.com/blog/rss2.xml#cb74-1" tabindex="-1"/><span class="ot">fix ::</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a</span>
<span id="cb74-2"><a href="https://well-typed.com/blog/rss2.xml#cb74-2" tabindex="-1"/>fix f <span class="ot">=</span> f (fix f)</span>
<span id="cb74-3"><a href="https://well-typed.com/blog/rss2.xml#cb74-3" tabindex="-1"/></span>
<span id="cb74-4"><a href="https://well-typed.com/blog/rss2.xml#cb74-4" tabindex="-1"/><span class="ot">add ::</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span></span>
<span id="cb74-5"><a href="https://well-typed.com/blog/rss2.xml#cb74-5" tabindex="-1"/>add <span class="ot">=</span> fix addF</span></code></pre></div>
<p>Let’s verify:</p>
<div class="sourceCode" id="cb75"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb75-1"><a href="https://well-typed.com/blog/rss2.xml#cb75-1" tabindex="-1"/>   add</span>
<span id="cb75-2"><a href="https://well-typed.com/blog/rss2.xml#cb75-2" tabindex="-1"/><span class="op">==</span> fix addF</span>
<span id="cb75-3"><a href="https://well-typed.com/blog/rss2.xml#cb75-3" tabindex="-1"/><span class="op">==</span> addF (fix addF)</span>
<span id="cb75-4"><a href="https://well-typed.com/blog/rss2.xml#cb75-4" tabindex="-1"/><span class="op">==</span> addF add</span></code></pre></div>
<h4 id="in-haskell.-deriving-term-level-recursion-from-type-level-recursion"><em>In Haskell</em>. Deriving term-level recursion from type-level recursion</h4>
<p>In the previous section, we abstracted out the recursion from <code>add</code>, but we still used recursion in the definition of <code>fix</code>. Stunningly, it is possible to define the term-level fixpoint combinator without using recursion at all! This is the famous <a href="https://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator">Y-combinator</a>. As we saw above, at the heart of recursion is applying a function to itself, and this self-application is also at the heart of the Y-combinator; in pseudo-Haskell:</p>
<div class="sourceCode" id="cb76"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb76-1"><a href="https://well-typed.com/blog/rss2.xml#cb76-1" tabindex="-1"/><span class="ot">fix ::</span> <span class="kw">forall</span> a<span class="op">.</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a</span>
<span id="cb76-2"><a href="https://well-typed.com/blog/rss2.xml#cb76-2" tabindex="-1"/>fix <span class="ot">=</span> λ f <span class="ot">-&gt;</span> (λ s <span class="ot">-&gt;</span> f (s s)) (λ s <span class="ot">-&gt;</span> f (s s)) <span class="co">-- not real Haskell</span></span></code></pre></div>
<p>Let’s verify:</p>
<div class="sourceCode" id="cb77"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb77-1"><a href="https://well-typed.com/blog/rss2.xml#cb77-1" tabindex="-1"/>   add</span>
<span id="cb77-2"><a href="https://well-typed.com/blog/rss2.xml#cb77-2" tabindex="-1"/><span class="op">==</span> fix addF</span>
<span id="cb77-3"><a href="https://well-typed.com/blog/rss2.xml#cb77-3" tabindex="-1"/><span class="op">==</span> (λ s <span class="ot">-&gt;</span> addF (s s)) (λ s <span class="ot">-&gt;</span> addF (s s))</span>
<span id="cb77-4"><a href="https://well-typed.com/blog/rss2.xml#cb77-4" tabindex="-1"/><span class="op">==</span> addF ((λ s <span class="ot">-&gt;</span> addF (s s)) (λ s <span class="ot">-&gt;</span> addF (s s)))</span>
<span id="cb77-5"><a href="https://well-typed.com/blog/rss2.xml#cb77-5" tabindex="-1"/><span class="op">==</span> addF (fix addF)</span>
<span id="cb77-6"><a href="https://well-typed.com/blog/rss2.xml#cb77-6" tabindex="-1"/><span class="op">==</span> addF add</span></code></pre></div>
<p>The above definition is pseudo-Haskell, because it does not typecheck. Consider</p>
<div class="sourceCode" id="cb78"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb78-1"><a href="https://well-typed.com/blog/rss2.xml#cb78-1" tabindex="-1"/><span class="ot">selfApply ::</span> <span class="op">??</span></span>
<span id="cb78-2"><a href="https://well-typed.com/blog/rss2.xml#cb78-2" tabindex="-1"/>selfApply f <span class="ot">=</span> f f</span></code></pre></div>
<p>What would be the type of <code>selfApply</code>? Since we are apply <code>f</code> to <em>something</em>, it must have type <code>a -&gt; b</code> for some <code>a</code> and <code>b</code>; and since we are applying it to itself, we must then also have that <code>a</code> <em>is the same as</em> <code>a -&gt; b</code>. If we tried this in <code>ghc</code>, it would complain that it cannot solve this problem:</p>
<pre><code>• Occurs check: cannot construct the infinite type: a ~ a -&gt; b
• In the first argument of ‘f’, namely ‘f’
  In the expression: f f
  In an equation for ‘selfApply’: selfApply f = f f</code></pre>
<p>However, we <em>can</em> define a type <code>T b</code> such that <code>T b</code> is isomorphic to <code>T b -&gt; b</code>:</p>
<div class="sourceCode" id="cb80"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb80-1"><a href="https://well-typed.com/blog/rss2.xml#cb80-1" tabindex="-1"/><span class="kw">newtype</span> <span class="dt">Self</span> b <span class="ot">=</span> <span class="dt">WrapSelf</span> {<span class="ot"> unwrapSelf ::</span> <span class="dt">Self</span> b <span class="ot">-&gt;</span> b }</span></code></pre></div>
<p>This allows us to define self-application<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn8" id="fnref8"><sup>8</sup></a>:</p>
<div class="sourceCode" id="cb81"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb81-1"><a href="https://well-typed.com/blog/rss2.xml#cb81-1" tabindex="-1"/><span class="ot">selfApply ::</span> <span class="dt">Self</span> b <span class="ot">-&gt;</span> b</span>
<span id="cb81-2"><a href="https://well-typed.com/blog/rss2.xml#cb81-2" tabindex="-1"/><span class="ot">{-# NOINLINE selfApply #-}</span></span>
<span id="cb81-3"><a href="https://well-typed.com/blog/rss2.xml#cb81-3" tabindex="-1"/>selfApply f <span class="ot">=</span> (unwrapSelf f) f</span></code></pre></div>
<p>and therefore the Y-combinator:</p>
<div class="sourceCode" id="cb82"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb82-1"><a href="https://well-typed.com/blog/rss2.xml#cb82-1" tabindex="-1"/><span class="ot">fix ::</span> <span class="kw">forall</span> a<span class="op">.</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a</span>
<span id="cb82-2"><a href="https://well-typed.com/blog/rss2.xml#cb82-2" tabindex="-1"/>fix f <span class="ot">=</span> selfApply <span class="op">$</span> <span class="dt">WrapSelf</span> <span class="op">$</span> λ s <span class="ot">-&gt;</span> f (selfApply s)</span></code></pre></div>
<p>If we remove all the newtype wrapping and unwrapping, we can see that this is indeed the Y-combinator:</p>
<div class="sourceCode" id="cb83"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb83-1"><a href="https://well-typed.com/blog/rss2.xml#cb83-1" tabindex="-1"/>   fix f</span>
<span id="cb83-2"><a href="https://well-typed.com/blog/rss2.xml#cb83-2" tabindex="-1"/><span class="op">==</span> selfApply <span class="op">$</span> <span class="dt">WrapSelf</span> <span class="op">$</span> λ s <span class="ot">-&gt;</span> f (selfApply s)</span>
<span id="cb83-3"><a href="https://well-typed.com/blog/rss2.xml#cb83-3" tabindex="-1"/><span class="op">==</span> selfApply <span class="op">$</span> λ s <span class="ot">-&gt;</span> f (selfApply s)</span>
<span id="cb83-4"><a href="https://well-typed.com/blog/rss2.xml#cb83-4" tabindex="-1"/><span class="op">==</span> selfApply <span class="op">$</span> λ s <span class="ot">-&gt;</span> f (s s)</span>
<span id="cb83-5"><a href="https://well-typed.com/blog/rss2.xml#cb83-5" tabindex="-1"/><span class="op">==</span> (λ s <span class="ot">-&gt;</span> f (s s)) (λ s <span class="ot">-&gt;</span> f (s s))</span></code></pre></div>
<h4 id="in-haskell.-using-ifix"><em>In Haskell</em>. Using <code>IFix</code></h4>
<p>We have now managed to define a term-level fixpoint combinator without using term-level recursion, but we still used type-level recursion in the definition of <code>Self</code>. The final step is to define <code>Self</code> using <code>IFix</code> instead. As always, we first abstract out the recursion from <code>Self</code>:</p>
<div class="sourceCode" id="cb84"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb84-1"><a href="https://well-typed.com/blog/rss2.xml#cb84-1" tabindex="-1"/><span class="kw">newtype</span> <span class="dt">SelfF</span> (<span class="ot">self ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) (<span class="ot">a ::</span> <span class="op">*</span>) <span class="ot">=</span> <span class="dt">SelfF</span> {</span>
<span id="cb84-2"><a href="https://well-typed.com/blog/rss2.xml#cb84-2" tabindex="-1"/><span class="ot">      unSelfF ::</span> self a <span class="ot">-&gt;</span> a</span>
<span id="cb84-3"><a href="https://well-typed.com/blog/rss2.xml#cb84-3" tabindex="-1"/>    }</span></code></pre></div>
<p>Fortunately, the kind of <code>SelfF</code> lines up nicely with the kind expected by <code>IFix</code>, so we can simply define</p>
<div class="sourceCode" id="cb85"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb85-1"><a href="https://well-typed.com/blog/rss2.xml#cb85-1" tabindex="-1"/><span class="kw">type</span> <span class="dt">Self</span> <span class="ot">=</span> <span class="dt">IFix</span> <span class="dt">SelfF</span></span></code></pre></div>
<p>The definition of the fixpoint combinator remains essentially the same; we just need to now wrap/unwrap both the <code>SelfF</code> newtype and the <code>IFix</code> newtype.</p>
<div class="sourceCode" id="cb86"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb86-1"><a href="https://well-typed.com/blog/rss2.xml#cb86-1" tabindex="-1"/><span class="ot">fix ::</span> <span class="kw">forall</span> a<span class="op">.</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a</span>
<span id="cb86-2"><a href="https://well-typed.com/blog/rss2.xml#cb86-2" tabindex="-1"/>fix f <span class="ot">=</span> <span class="kw">let</span> w <span class="ot">=</span> wrap <span class="op">$</span> <span class="dt">SelfF</span> <span class="op">$</span> λ s <span class="ot">-&gt;</span> f (selfApply s) <span class="kw">in</span> selfApply w</span></code></pre></div>
<p>However, Since Plutus is a strict language, it only makes sense to take the fixpoint of functions (you can’t define an infinite list in Plutus, for example). The fixpoint in Plutus therefore is specialized to functions; in Haskell we could define this as:<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn9" id="fnref9"><sup>9</sup></a></p>
<div class="sourceCode" id="cb87"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb87-1"><a href="https://well-typed.com/blog/rss2.xml#cb87-1" tabindex="-1"/><span class="ot">fixFun ::</span> <span class="kw">forall</span> a b<span class="op">.</span> ((a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b)) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b)</span>
<span id="cb87-2"><a href="https://well-typed.com/blog/rss2.xml#cb87-2" tabindex="-1"/>fixFun f <span class="ot">=</span> <span class="kw">let</span> w <span class="ot">=</span> wrap <span class="op">$</span> <span class="dt">SelfF</span> <span class="op">$</span> λ s x <span class="ot">-&gt;</span> f (selfApply s) x <span class="kw">in</span> selfApply w</span></code></pre></div>
<h4 id="example-addition">Example: addition</h4>
<p>We are now ready to discuss our final and most involved Plutus program: addition. As a reminder, the Haskell code looked like</p>
<div class="sourceCode" id="cb88"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb88-1"><a href="https://well-typed.com/blog/rss2.xml#cb88-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">Nat</span> <span class="ot">=</span> <span class="dt">Succ</span> <span class="dt">Nat</span> <span class="op">|</span> <span class="dt">Zero</span></span>
<span id="cb88-2"><a href="https://well-typed.com/blog/rss2.xml#cb88-2" tabindex="-1"/></span>
<span id="cb88-3"><a href="https://well-typed.com/blog/rss2.xml#cb88-3" tabindex="-1"/><span class="ot">add ::</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span></span>
<span id="cb88-4"><a href="https://well-typed.com/blog/rss2.xml#cb88-4" tabindex="-1"/>add <span class="dt">Zero</span>     m <span class="ot">=</span> m</span>
<span id="cb88-5"><a href="https://well-typed.com/blog/rss2.xml#cb88-5" tabindex="-1"/>add (<span class="dt">Succ</span> n) m <span class="ot">=</span> <span class="dt">Succ</span> (add n m)</span></code></pre></div>
<p>In PIR:</p>
<div class="sourceCode" id="cb89"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb89-1"><a href="https://well-typed.com/blog/rss2.xml#cb89-1" tabindex="-1"/><span class="kw">let</span> rec <span class="kw">data</span> <span class="dt">Nat</span> <span class="ot">=</span> <span class="dt">Succ</span> <span class="dt">Nat</span> <span class="op">|</span> <span class="dt">Zero</span></span>
<span id="cb89-2"><a href="https://well-typed.com/blog/rss2.xml#cb89-2" tabindex="-1"/>    rec <span class="op">!</span>add <span class="ot">=</span> λ (<span class="ot">n ::</span> <span class="dt">Nat</span>) (<span class="ot">m ::</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span></span>
<span id="cb89-3"><a href="https://well-typed.com/blog/rss2.xml#cb89-3" tabindex="-1"/>           <span class="dt">Nat_match</span> n {∀ _<span class="op">.</span> <span class="dt">Nat</span>}</span>
<span id="cb89-4"><a href="https://well-typed.com/blog/rss2.xml#cb89-4" tabindex="-1"/>             (λ (<span class="ot">n' ::</span> <span class="dt">Nat</span>) {_} <span class="ot">-&gt;</span> <span class="dt">Succ</span> (add n' m))</span>
<span id="cb89-5"><a href="https://well-typed.com/blog/rss2.xml#cb89-5" tabindex="-1"/>             (λ {_} <span class="ot">-&gt;</span> m)</span>
<span id="cb89-6"><a href="https://well-typed.com/blog/rss2.xml#cb89-6" tabindex="-1"/>             {_}</span>
<span id="cb89-7"><a href="https://well-typed.com/blog/rss2.xml#cb89-7" tabindex="-1"/><span class="kw">in</span> add</span></code></pre></div>
<p>To go from PIR to PLC, we need to move the type-level recursion from <code>Nat</code>, the term-level recursion from <code>add</code>, and introduce Scott encoding:<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn10" id="fnref10"><sup>10</sup></a></p>
<div class="sourceCode" id="cb90"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb90-1"><a href="https://well-typed.com/blog/rss2.xml#cb90-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> <span class="kw">type</span> <span class="dt">SimpleRec</span> <span class="ot">=</span> Λ (<span class="ot">rec ::</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">-&gt;</span> <span class="op">*</span>)<span class="op">.</span> Λ (<span class="ot">f ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>)<span class="op">.</span> f (rec f)</span>
<span id="cb90-2"><a href="https://well-typed.com/blog/rss2.xml#cb90-2" tabindex="-1"/>     <span class="kw">type</span> <span class="dt">NatF</span>      <span class="ot">=</span> Λ f<span class="op">.</span> ∀ r<span class="op">.</span> (f <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r <span class="ot">-&gt;</span> r</span>
<span id="cb90-3"><a href="https://well-typed.com/blog/rss2.xml#cb90-3" tabindex="-1"/>     <span class="kw">type</span> <span class="dt">Nat</span>       <span class="ot">=</span> ifix <span class="dt">SimpleRec</span> <span class="dt">NatF</span></span>
<span id="cb90-4"><a href="https://well-typed.com/blog/rss2.xml#cb90-4" tabindex="-1"/></span>
<span id="cb90-5"><a href="https://well-typed.com/blog/rss2.xml#cb90-5" tabindex="-1"/>     <span class="op">!</span><span class="dt">Succ</span>      <span class="ot">=</span> λ (<span class="ot">n ::</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span></span>
<span id="cb90-6"><a href="https://well-typed.com/blog/rss2.xml#cb90-6" tabindex="-1"/>                   wrap {<span class="dt">SimpleRec</span>} {<span class="dt">NatF</span>} (</span>
<span id="cb90-7"><a href="https://well-typed.com/blog/rss2.xml#cb90-7" tabindex="-1"/>                     λ {r} (<span class="ot">s ::</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> r) (<span class="ot">z ::</span> r) <span class="ot">-&gt;</span> s n)</span>
<span id="cb90-8"><a href="https://well-typed.com/blog/rss2.xml#cb90-8" tabindex="-1"/>     <span class="op">!</span><span class="dt">Zero</span>      <span class="ot">=</span> wrap {<span class="dt">SimpleRec</span>} {<span class="dt">NatF</span>} (</span>
<span id="cb90-9"><a href="https://well-typed.com/blog/rss2.xml#cb90-9" tabindex="-1"/>                     λ {r} (<span class="ot">s ::</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> r) (<span class="ot">z ::</span> r) <span class="ot">-&gt;</span> z)</span>
<span id="cb90-10"><a href="https://well-typed.com/blog/rss2.xml#cb90-10" tabindex="-1"/>     <span class="op">!</span><span class="dt">Nat_match</span> <span class="ot">=</span> λ (<span class="ot">x ::</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span> unwrap x</span>
<span id="cb90-11"><a href="https://well-typed.com/blog/rss2.xml#cb90-11" tabindex="-1"/></span>
<span id="cb90-12"><a href="https://well-typed.com/blog/rss2.xml#cb90-12" tabindex="-1"/>     <span class="kw">type</span> <span class="dt">SelfF</span> <span class="ot">=</span> Λ (<span class="ot">self ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>)<span class="op">.</span> Λ a<span class="op">.</span> self a <span class="ot">-&gt;</span> a</span>
<span id="cb90-13"><a href="https://well-typed.com/blog/rss2.xml#cb90-13" tabindex="-1"/>     <span class="kw">type</span> <span class="dt">Self</span>  <span class="ot">=</span> Λ a<span class="op">.</span> ifix <span class="dt">SelfF</span> a</span>
<span id="cb90-14"><a href="https://well-typed.com/blog/rss2.xml#cb90-14" tabindex="-1"/></span>
<span id="cb90-15"><a href="https://well-typed.com/blog/rss2.xml#cb90-15" tabindex="-1"/>     <span class="op">!</span>addF <span class="ot">=</span> λ (<span class="ot">f ::</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span>) (<span class="ot">n ::</span> <span class="dt">Nat</span>) (<span class="ot">m ::</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span></span>
<span id="cb90-16"><a href="https://well-typed.com/blog/rss2.xml#cb90-16" tabindex="-1"/>               <span class="dt">Nat_match</span> n {∀ _<span class="op">.</span> <span class="dt">Nat</span>}</span>
<span id="cb90-17"><a href="https://well-typed.com/blog/rss2.xml#cb90-17" tabindex="-1"/>                 (λ (<span class="ot">n' ::</span> <span class="dt">Nat</span>) {_} <span class="ot">-&gt;</span> <span class="dt">Succ</span> (f n' m))</span>
<span id="cb90-18"><a href="https://well-typed.com/blog/rss2.xml#cb90-18" tabindex="-1"/>                 (λ {_} <span class="ot">-&gt;</span> m)</span>
<span id="cb90-19"><a href="https://well-typed.com/blog/rss2.xml#cb90-19" tabindex="-1"/>                 {_}</span>
<span id="cb90-20"><a href="https://well-typed.com/blog/rss2.xml#cb90-20" tabindex="-1"/>     <span class="op">!</span>w    <span class="ot">=</span> wrap {<span class="dt">SelfF</span>} {<span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span>} (</span>
<span id="cb90-21"><a href="https://well-typed.com/blog/rss2.xml#cb90-21" tabindex="-1"/>               λ (<span class="ot">s ::</span> <span class="dt">Self</span> (<span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span>)) (<span class="ot">n ::</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span></span>
<span id="cb90-22"><a href="https://well-typed.com/blog/rss2.xml#cb90-22" tabindex="-1"/>                 addF ((unwrap s) s) n)</span>
<span id="cb90-23"><a href="https://well-typed.com/blog/rss2.xml#cb90-23" tabindex="-1"/>     <span class="op">!</span>add  <span class="ot">=</span> (unwrap w) w</span>
<span id="cb90-24"><a href="https://well-typed.com/blog/rss2.xml#cb90-24" tabindex="-1"/></span>
<span id="cb90-25"><a href="https://well-typed.com/blog/rss2.xml#cb90-25" tabindex="-1"/><span class="kw">in</span> add</span></code></pre></div>
<p>There is a lot of detail here, but no new concepts. The most important thing to realize is that the definition of <code>addF</code> is precisely <a href="https://well-typed.com/blog/rss2.xml#in-haskell.-term-level-fixpoints">the one we expect</a>, and that we can recognize the definition of <code>w</code> and the use of <code>(unwrap w) w</code> as being precisely the application of (what we called) <code>fixFun</code> to <code>addF</code>.</p>
<p>We are now ready to understand the UPLC version:</p>
<div class="sourceCode" id="cb91"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb91-1"><a href="https://well-typed.com/blog/rss2.xml#cb91-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> w <span class="ot">=</span> λ s n <span class="ot">-&gt;</span></span>
<span id="cb91-2"><a href="https://well-typed.com/blog/rss2.xml#cb91-2" tabindex="-1"/>       <span class="kw">let</span><span class="op">*</span> add <span class="ot">=</span> s s</span>
<span id="cb91-3"><a href="https://well-typed.com/blog/rss2.xml#cb91-3" tabindex="-1"/>       <span class="kw">in</span> λ m <span class="ot">-&gt;</span> ( n<span class="op">!</span> (λ n' <span class="op">~</span> <span class="op">~</span> s z <span class="ot">-&gt;</span> s (add n' m)) (λ <span class="op">~</span> <span class="ot">-&gt;</span> m) )<span class="op">!</span></span>
<span id="cb91-4"><a href="https://well-typed.com/blog/rss2.xml#cb91-4" tabindex="-1"/><span class="kw">in</span> w w</span></code></pre></div>
<p>This code is pretty difficult to understand without seeing the typed version, but if we compare this to the PLC version we can see what is going on. The only somewhat confusing part is that the compiler has inlined the definition of <code>addF</code>, and assigned the name <code>add</code> to the term <code>(s s)</code> (not unjustifiably: it corresponds to the recursive calls). The double delay in the first argument to <code>n</code> comes from two places: one delay from the definition of <code>addF</code>, and one delay from the definition of <code>Succ</code>.</p>
<h3 id="the-cost-of-polymorphism">The cost of polymorphism</h3>
<p>In this final section we will not introduce any new Plutus concepts, but we will consider the following question: suppose we have a <em>monomorphic</em> top-level Plutus program; what is the cost of defining this in terms of some <em>polymorphic</em> functions? In an ideal world, this cost would be zero, but unfortunately this is not the case at the moment.</p>
<h4 id="parametric-polymorphism">Parametric polymorphism</h4>
<p>We have already seen the cost of polymorphism in the proliferation of <code>delay</code>/<code>force</code> calls in UPLC. However, there is another cost. Let’s consider the compilation of this Haskell code:</p>
<div class="sourceCode" id="cb92"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb92-1"><a href="https://well-typed.com/blog/rss2.xml#cb92-1" tabindex="-1"/><span class="ot">reversePoly ::</span> [a] <span class="ot">-&gt;</span> [a]</span>
<span id="cb92-2"><a href="https://well-typed.com/blog/rss2.xml#cb92-2" tabindex="-1"/>reversePoly <span class="ot">=</span> reversePoly' []</span>
<span id="cb92-3"><a href="https://well-typed.com/blog/rss2.xml#cb92-3" tabindex="-1"/></span>
<span id="cb92-4"><a href="https://well-typed.com/blog/rss2.xml#cb92-4" tabindex="-1"/><span class="ot">reversePoly' ::</span> [a] <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [a]</span>
<span id="cb92-5"><a href="https://well-typed.com/blog/rss2.xml#cb92-5" tabindex="-1"/>reversePoly' acc []     <span class="ot">=</span> acc</span>
<span id="cb92-6"><a href="https://well-typed.com/blog/rss2.xml#cb92-6" tabindex="-1"/>reversePoly' acc (x<span class="op">:</span>xs) <span class="ot">=</span> reversePoly' (x<span class="op">:</span>acc) xs</span>
<span id="cb92-7"><a href="https://well-typed.com/blog/rss2.xml#cb92-7" tabindex="-1"/></span>
<span id="cb92-8"><a href="https://well-typed.com/blog/rss2.xml#cb92-8" tabindex="-1"/><span class="ot">useReversePoly ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> [<span class="dt">Integer</span>]</span>
<span id="cb92-9"><a href="https://well-typed.com/blog/rss2.xml#cb92-9" tabindex="-1"/>useReversePoly <span class="ot">=</span> reversePoly <span class="op">.</span> reversePoly</span></code></pre></div>
<p>The PIR code is unsurprising:</p>
<div class="sourceCode" id="cb93"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb93-1"><a href="https://well-typed.com/blog/rss2.xml#cb93-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> rec <span class="kw">data</span> <span class="dt">List</span><span class="ot"> ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span> a <span class="ot">=</span> <span class="dt">Nil</span>  <span class="op">|</span> <span class="dt">Cons</span> a (<span class="dt">List</span> a)</span>
<span id="cb93-2"><a href="https://well-typed.com/blog/rss2.xml#cb93-2" tabindex="-1"/>     rec <span class="op">!</span>reversePoly' <span class="ot">=</span></span>
<span id="cb93-3"><a href="https://well-typed.com/blog/rss2.xml#cb93-3" tabindex="-1"/>            λ {a} (<span class="ot">acc ::</span> <span class="dt">List</span> a) (<span class="ot">xs ::</span> <span class="dt">List</span> a) <span class="ot">-&gt;</span></span>
<span id="cb93-4"><a href="https://well-typed.com/blog/rss2.xml#cb93-4" tabindex="-1"/>               <span class="dt">List_match</span> {a} xs {∀ _<span class="op">.</span> <span class="dt">List</span> a}</span>
<span id="cb93-5"><a href="https://well-typed.com/blog/rss2.xml#cb93-5" tabindex="-1"/>                 (λ {_} <span class="ot">-&gt;</span> acc)</span>
<span id="cb93-6"><a href="https://well-typed.com/blog/rss2.xml#cb93-6" tabindex="-1"/>                 (λ (<span class="ot">x ::</span> a) (<span class="ot">xs' ::</span> <span class="dt">List</span> a) {_} <span class="ot">-&gt;</span> reversePoly' {a} (<span class="dt">Cons</span> {a} x acc) xs')</span>
<span id="cb93-7"><a href="https://well-typed.com/blog/rss2.xml#cb93-7" tabindex="-1"/>                 {_}</span>
<span id="cb93-8"><a href="https://well-typed.com/blog/rss2.xml#cb93-8" tabindex="-1"/>     <span class="op">!</span>reversePoly <span class="ot">=</span> λ {a} <span class="ot">-&gt;</span> reversePoly' {a} (<span class="dt">Nil</span> {a})</span>
<span id="cb93-9"><a href="https://well-typed.com/blog/rss2.xml#cb93-9" tabindex="-1"/><span class="kw">in</span> (λ {b} {c} {a} (<span class="ot">f ::</span> b <span class="ot">-&gt;</span> c) (<span class="ot">g ::</span> a <span class="ot">-&gt;</span> b) (<span class="ot">x ::</span> a) <span class="ot">-&gt;</span> f (g x))</span>
<span id="cb93-10"><a href="https://well-typed.com/blog/rss2.xml#cb93-10" tabindex="-1"/>     {<span class="dt">List</span> <span class="dt">Integer</span>}</span>
<span id="cb93-11"><a href="https://well-typed.com/blog/rss2.xml#cb93-11" tabindex="-1"/>     {<span class="dt">List</span> <span class="dt">Integer</span>}</span>
<span id="cb93-12"><a href="https://well-typed.com/blog/rss2.xml#cb93-12" tabindex="-1"/>     {<span class="dt">List</span> <span class="dt">Integer</span>}</span>
<span id="cb93-13"><a href="https://well-typed.com/blog/rss2.xml#cb93-13" tabindex="-1"/>     (reversePoly {<span class="dt">Integer</span>})</span>
<span id="cb93-14"><a href="https://well-typed.com/blog/rss2.xml#cb93-14" tabindex="-1"/>     (reversePoly {<span class="dt">Integer</span>})</span></code></pre></div>
<p>But the PLC code isn’t; specifically, the compilation of <code>reversePoly'</code>:</p>
<div class="sourceCode" id="cb94"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb94-1"><a href="https://well-typed.com/blog/rss2.xml#cb94-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> <span class="kw">type</span> <span class="dt">Id</span>      <span class="ot">=</span> ∀ a<span class="op">.</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb94-2"><a href="https://well-typed.com/blog/rss2.xml#cb94-2" tabindex="-1"/>     <span class="kw">type</span> <span class="dt">Reverse</span> <span class="ot">=</span> ∀ a<span class="op">.</span> <span class="dt">List</span> a <span class="ot">-&gt;</span> <span class="dt">List</span> a <span class="ot">-&gt;</span> <span class="dt">List</span> a</span>
<span id="cb94-3"><a href="https://well-typed.com/blog/rss2.xml#cb94-3" tabindex="-1"/></span>
<span id="cb94-4"><a href="https://well-typed.com/blog/rss2.xml#cb94-4" tabindex="-1"/>     <span class="op">!</span>reversePoly'F <span class="ot">=</span></span>
<span id="cb94-5"><a href="https://well-typed.com/blog/rss2.xml#cb94-5" tabindex="-1"/>       λ (<span class="ot">f ::</span> <span class="dt">Id</span> <span class="ot">-&gt;</span> <span class="dt">Reverse</span>) (<span class="ot">_ ::</span> <span class="dt">Id</span>) {a} (<span class="ot">acc ::</span> <span class="dt">List</span> a) (<span class="ot">xs ::</span> <span class="dt">List</span> a) <span class="ot">-&gt;</span></span>
<span id="cb94-6"><a href="https://well-typed.com/blog/rss2.xml#cb94-6" tabindex="-1"/>         <span class="dt">List_match</span> {a} xs {∀ _<span class="op">.</span> <span class="dt">List</span> a}</span>
<span id="cb94-7"><a href="https://well-typed.com/blog/rss2.xml#cb94-7" tabindex="-1"/>           (λ {_} <span class="ot">-&gt;</span> acc)</span>
<span id="cb94-8"><a href="https://well-typed.com/blog/rss2.xml#cb94-8" tabindex="-1"/>           (λ (<span class="ot">x ::</span> a) (<span class="ot">xs' ::</span> <span class="dt">List</span> a) {_} <span class="ot">-&gt;</span> f (λ {a} (<span class="ot">x ::</span> a) <span class="ot">-&gt;</span> x) {a} (<span class="dt">Cons</span> {a} x acc) xs')</span>
<span id="cb94-9"><a href="https://well-typed.com/blog/rss2.xml#cb94-9" tabindex="-1"/>           {_}</span>
<span id="cb94-10"><a href="https://well-typed.com/blog/rss2.xml#cb94-10" tabindex="-1"/></span>
<span id="cb94-11"><a href="https://well-typed.com/blog/rss2.xml#cb94-11" tabindex="-1"/>     <span class="op">!</span>w <span class="ot">=</span> wrap {<span class="dt">SelfF</span>} {<span class="dt">Id</span> <span class="ot">-&gt;</span> <span class="dt">Reverse</span>} (λ (<span class="ot">s ::</span> <span class="dt">Self</span> (<span class="dt">Id</span> <span class="ot">-&gt;</span> <span class="dt">Reverse</span>)) (<span class="ot">x ::</span> <span class="dt">Id</span>) <span class="ot">-&gt;</span></span>
<span id="cb94-12"><a href="https://well-typed.com/blog/rss2.xml#cb94-12" tabindex="-1"/>            reversePoly'F ((unwrap s) s) x)</span>
<span id="cb94-13"><a href="https://well-typed.com/blog/rss2.xml#cb94-13" tabindex="-1"/><span class="kw">in</span> (unwrap w) w</span></code></pre></div>
<p>The definition of <code>reversePoly'F</code> is the version of <code>reversePoly'</code> with the recursive call abstracted out, as before. However, it seems to have gotten an additional argument of type <code>Id = ∀ a. a -&gt; a</code>. This is essentially a different way to delay. Recall from the <a href="https://well-typed.com/blog/rss2.xml#in-haskell.-force-and-delay">section on Force and Delay</a> that delay conceptually corresponds to introducing a parameter of type unit; recall furthermore from the <a href="https://well-typed.com/blog/rss2.xml#in-haskell.-scott-encoding">section on Scott encoding</a> that the Scott encoding of unit is <code>∀ a. a -&gt; a</code>.</p>
<p>So we can understand the (dummy) parameter of type <code>Id</code> as another delay, but the reason <em>why</em> this delay is there, and why it doesn’t just use another type abstraction, is <a href="https://github.com/input-output-hk/plutus/issues/4782">rather technical</a>. Here we will merely state that any recursive polymorphic function will receive such a dummy argument at present; unfortunately, this then also results in some additional code in UPLC, because this does <em>not</em> get translated the native <code>delay</code>/<code>force</code> constructs:</p>
<div class="sourceCode" id="cb95"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb95-1"><a href="https://well-typed.com/blog/rss2.xml#cb95-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> w <span class="ot">=</span> λ s _ <span class="ot">-&gt;</span> <span class="kw">let</span><span class="op">*</span> reversePoly <span class="ot">=</span> s s</span>
<span id="cb95-2"><a href="https://well-typed.com/blog/rss2.xml#cb95-2" tabindex="-1"/>                  <span class="kw">in</span> λ <span class="op">~</span> acc xs <span class="ot">-&gt;</span></span>
<span id="cb95-3"><a href="https://well-typed.com/blog/rss2.xml#cb95-3" tabindex="-1"/>                       ( xs<span class="op">!</span></span>
<span id="cb95-4"><a href="https://well-typed.com/blog/rss2.xml#cb95-4" tabindex="-1"/>                           (λ <span class="op">~</span> <span class="ot">-&gt;</span> acc)</span>
<span id="cb95-5"><a href="https://well-typed.com/blog/rss2.xml#cb95-5" tabindex="-1"/>                           (λ x xs' <span class="op">~</span> <span class="ot">-&gt;</span> reversePoly (λ <span class="op">~</span> x <span class="ot">-&gt;</span> x) <span class="op">!</span> (λ <span class="op">~</span> n c <span class="ot">-&gt;</span> c x acc) xs')</span>
<span id="cb95-6"><a href="https://well-typed.com/blog/rss2.xml#cb95-6" tabindex="-1"/>                       ) <span class="op">!</span></span>
<span id="cb95-7"><a href="https://well-typed.com/blog/rss2.xml#cb95-7" tabindex="-1"/>     reversePoly_0 <span class="ot">=</span> w w</span>
<span id="cb95-8"><a href="https://well-typed.com/blog/rss2.xml#cb95-8" tabindex="-1"/>     reversePoly_1 <span class="ot">=</span> λ <span class="op">~</span> <span class="ot">-&gt;</span> reversePoly_0 (λ <span class="op">~</span> x <span class="ot">-&gt;</span> x) <span class="op">!</span> (λ <span class="op">~</span> n c <span class="ot">-&gt;</span> n)</span>
<span id="cb95-9"><a href="https://well-typed.com/blog/rss2.xml#cb95-9" tabindex="-1"/>     f <span class="ot">=</span> reversePoly_1 <span class="op">!</span></span>
<span id="cb95-10"><a href="https://well-typed.com/blog/rss2.xml#cb95-10" tabindex="-1"/>     g <span class="ot">=</span> reversePoly_1 <span class="op">!</span></span>
<span id="cb95-11"><a href="https://well-typed.com/blog/rss2.xml#cb95-11" tabindex="-1"/><span class="kw">in</span> λ x_3 <span class="ot">-&gt;</span> f (g x_3)</span></code></pre></div>
<p>Not only do we see that <code>(λ ~ x -&gt; x)</code> being passed around, but it’s also not shared, so this can result in fairly significant code expansion.</p>
<h4 id="adhoc-polymorphism">Adhoc polymorphism</h4>
<p>Let’s now consider what happens if we have a type class constraint:</p>
<div class="sourceCode" id="cb96"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb96-1"><a href="https://well-typed.com/blog/rss2.xml#cb96-1" tabindex="-1"/><span class="ot">allEqualPoly ::</span> <span class="kw">forall</span> a<span class="op">.</span> <span class="dt">Eq</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb96-2"><a href="https://well-typed.com/blog/rss2.xml#cb96-2" tabindex="-1"/>allEqualPoly _ []     <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb96-3"><a href="https://well-typed.com/blog/rss2.xml#cb96-3" tabindex="-1"/>allEqualPoly x (y<span class="op">:</span>ys) <span class="ot">=</span> x <span class="op">==</span> y <span class="op">&amp;&amp;</span> allEqualPoly x ys</span>
<span id="cb96-4"><a href="https://well-typed.com/blog/rss2.xml#cb96-4" tabindex="-1"/></span>
<span id="cb96-5"><a href="https://well-typed.com/blog/rss2.xml#cb96-5" tabindex="-1"/><span class="ot">useAllEqualPoly ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb96-6"><a href="https://well-typed.com/blog/rss2.xml#cb96-6" tabindex="-1"/>useAllEqualPoly <span class="ot">=</span> allEqualPoly <span class="dv">1</span></span></code></pre></div>
<p>PIR:</p>
<div class="sourceCode" id="cb97"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb97-1"><a href="https://well-typed.com/blog/rss2.xml#cb97-1" tabindex="-1"/><span class="kw">let</span> rec <span class="op">!</span>allEqualPoly <span class="ot">=</span> λ {a} (<span class="ot">dEq ::</span> (Λa<span class="op">.</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) a) (<span class="ot">x ::</span> a) (<span class="ot">ys ::</span> <span class="dt">List</span> a) <span class="ot">-&gt;</span></span>
<span id="cb97-2"><a href="https://well-typed.com/blog/rss2.xml#cb97-2" tabindex="-1"/>      <span class="dt">List_match</span> {a} ys {∀ _<span class="op">.</span> <span class="dt">Bool</span>}</span>
<span id="cb97-3"><a href="https://well-typed.com/blog/rss2.xml#cb97-3" tabindex="-1"/>        (λ {_} <span class="ot">-&gt;</span> <span class="dt">True</span>)</span>
<span id="cb97-4"><a href="https://well-typed.com/blog/rss2.xml#cb97-4" tabindex="-1"/>        (λ (<span class="ot">y ::</span> a) (<span class="ot">ys' ::</span> <span class="dt">List</span> a) {_} <span class="ot">-&gt;</span></span>
<span id="cb97-5"><a href="https://well-typed.com/blog/rss2.xml#cb97-5" tabindex="-1"/>          <span class="kw">let</span><span class="op">*</span> <span class="op">!</span>l <span class="ot">=</span> dEq x y</span>
<span id="cb97-6"><a href="https://well-typed.com/blog/rss2.xml#cb97-6" tabindex="-1"/>               <span class="op">!</span>r <span class="ot">=</span> allEqualPoly {a} dEq x ys'</span>
<span id="cb97-7"><a href="https://well-typed.com/blog/rss2.xml#cb97-7" tabindex="-1"/>          <span class="kw">in</span> <span class="dt">Bool_match</span> l {∀ _<span class="op">.</span> <span class="dt">Bool</span>} (λ {_} <span class="ot">-&gt;</span> r) (λ {_} <span class="ot">-&gt;</span> <span class="dt">False</span>) {_})</span>
<span id="cb97-8"><a href="https://well-typed.com/blog/rss2.xml#cb97-8" tabindex="-1"/>        {_}</span>
<span id="cb97-9"><a href="https://well-typed.com/blog/rss2.xml#cb97-9" tabindex="-1"/><span class="kw">in</span> allEqualPoly {<span class="dt">Integer</span>} (λ (<span class="ot">x ::</span> <span class="dt">Integer</span>) (<span class="ot">y ::</span> <span class="dt">Integer</span>) <span class="ot">-&gt;</span></span>
<span id="cb97-10"><a href="https://well-typed.com/blog/rss2.xml#cb97-10" tabindex="-1"/>     ifThenElse {<span class="dt">Bool</span>} (equalsInteger x y) <span class="dt">True</span> <span class="dt">False</span>) <span class="dv">1</span></span></code></pre></div>
<p>We see that the type class constraint has been replaced with a dictionary argument. The unfortunate thing is that this dictionary argument does not get inlined; in UPLC this program looks like</p>
<div class="sourceCode" id="cb98"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb98-1"><a href="https://well-typed.com/blog/rss2.xml#cb98-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> <span class="dt">True</span>  <span class="ot">=</span> λ <span class="op">~</span> t f <span class="ot">-&gt;</span> t</span>
<span id="cb98-2"><a href="https://well-typed.com/blog/rss2.xml#cb98-2" tabindex="-1"/>     <span class="dt">False</span> <span class="ot">=</span> λ <span class="op">~</span> t f <span class="ot">-&gt;</span> f</span>
<span id="cb98-3"><a href="https://well-typed.com/blog/rss2.xml#cb98-3" tabindex="-1"/></span>
<span id="cb98-4"><a href="https://well-typed.com/blog/rss2.xml#cb98-4" tabindex="-1"/>     w <span class="ot">=</span> λ s _ <span class="ot">-&gt;</span> <span class="kw">let</span><span class="op">*</span> allEqualPoly <span class="ot">=</span> s s</span>
<span id="cb98-5"><a href="https://well-typed.com/blog/rss2.xml#cb98-5" tabindex="-1"/>                  <span class="kw">in</span> λ <span class="op">~</span> dEq x ys <span class="ot">-&gt;</span></span>
<span id="cb98-6"><a href="https://well-typed.com/blog/rss2.xml#cb98-6" tabindex="-1"/>                      ( ys<span class="op">!</span></span>
<span id="cb98-7"><a href="https://well-typed.com/blog/rss2.xml#cb98-7" tabindex="-1"/>                          (λ <span class="op">~</span> <span class="ot">-&gt;</span> <span class="dt">True</span>)</span>
<span id="cb98-8"><a href="https://well-typed.com/blog/rss2.xml#cb98-8" tabindex="-1"/>                          (λ y ys' <span class="op">~</span> <span class="ot">-&gt;</span> <span class="kw">let</span><span class="op">*</span> l <span class="ot">=</span> dEq x y;</span>
<span id="cb98-9"><a href="https://well-typed.com/blog/rss2.xml#cb98-9" tabindex="-1"/>                                             r <span class="ot">=</span> (allEqualPoly (λ <span class="op">~</span> x <span class="ot">-&gt;</span> x))<span class="op">!</span> dEq x ys'</span>
<span id="cb98-10"><a href="https://well-typed.com/blog/rss2.xml#cb98-10" tabindex="-1"/>                                        <span class="kw">in</span> ( l<span class="op">!</span> (λ <span class="op">~</span> <span class="ot">-&gt;</span> r) (λ <span class="op">~</span> <span class="ot">-&gt;</span> <span class="dt">False</span>) )<span class="op">!</span></span>
<span id="cb98-11"><a href="https://well-typed.com/blog/rss2.xml#cb98-11" tabindex="-1"/>                          )</span>
<span id="cb98-12"><a href="https://well-typed.com/blog/rss2.xml#cb98-12" tabindex="-1"/>                      )<span class="op">!</span></span>
<span id="cb98-13"><a href="https://well-typed.com/blog/rss2.xml#cb98-13" tabindex="-1"/>     allEqualPoly <span class="ot">=</span> w w</span>
<span id="cb98-14"><a href="https://well-typed.com/blog/rss2.xml#cb98-14" tabindex="-1"/></span>
<span id="cb98-15"><a href="https://well-typed.com/blog/rss2.xml#cb98-15" tabindex="-1"/><span class="kw">in</span> (allEqualPoly (λ <span class="op">~</span> x <span class="ot">-&gt;</span> x))<span class="op">!</span> (λ x y <span class="ot">-&gt;</span> ifThenElse<span class="op">#</span> <span class="op">!</span> (equalsInteger<span class="op">#</span> x y) <span class="dt">True</span> <span class="dt">False</span>) <span class="dv">1</span><span class="op">#</span></span></code></pre></div>
<p>This lack of specialization may also prevent further optimizations (we see the same <code>Id</code> dummy argument that we discussed in the previous section here too, because <code>allEqualPoly</code> is a polymorphic recursion function).</p>
<h4 id="multi-parameter-type-classes">Multi-parameter type classes</h4>
<p>Finally, let’s consider what happens with multi-parameter type classes</p>
<div class="sourceCode" id="cb99"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb99-1"><a href="https://well-typed.com/blog/rss2.xml#cb99-1" tabindex="-1"/><span class="kw">class</span> <span class="dt">Convert</span> a b <span class="kw">where</span></span>
<span id="cb99-2"><a href="https://well-typed.com/blog/rss2.xml#cb99-2" tabindex="-1"/><span class="ot">  convert ::</span> a <span class="ot">-&gt;</span> b</span>
<span id="cb99-3"><a href="https://well-typed.com/blog/rss2.xml#cb99-3" tabindex="-1"/></span>
<span id="cb99-4"><a href="https://well-typed.com/blog/rss2.xml#cb99-4" tabindex="-1"/><span class="kw">instance</span> <span class="dt">Convert</span> <span class="dt">Integer</span> <span class="dt">Bool</span> <span class="kw">where</span></span>
<span id="cb99-5"><a href="https://well-typed.com/blog/rss2.xml#cb99-5" tabindex="-1"/>  convert n <span class="ot">=</span> n <span class="op">==</span> <span class="dv">0</span></span>
<span id="cb99-6"><a href="https://well-typed.com/blog/rss2.xml#cb99-6" tabindex="-1"/></span>
<span id="cb99-7"><a href="https://well-typed.com/blog/rss2.xml#cb99-7" tabindex="-1"/><span class="ot">convertPair ::</span> (<span class="dt">Convert</span> a a', <span class="dt">Convert</span> b b') <span class="ot">=&gt;</span> (a, b) <span class="ot">-&gt;</span> (a', b')</span>
<span id="cb99-8"><a href="https://well-typed.com/blog/rss2.xml#cb99-8" tabindex="-1"/>convertPair (x, y) <span class="ot">=</span> (convert x, convert y)</span>
<span id="cb99-9"><a href="https://well-typed.com/blog/rss2.xml#cb99-9" tabindex="-1"/></span>
<span id="cb99-10"><a href="https://well-typed.com/blog/rss2.xml#cb99-10" tabindex="-1"/><span class="ot">useConvertPair ::</span> (<span class="dt">Integer</span>, <span class="dt">Integer</span>) <span class="ot">-&gt;</span> (<span class="dt">Bool</span>, <span class="dt">Bool</span>)</span>
<span id="cb99-11"><a href="https://well-typed.com/blog/rss2.xml#cb99-11" tabindex="-1"/>useConvertPair <span class="ot">=</span> convertPair</span></code></pre></div>
<p>(The Plutus compiler does not currently support associated data types, nor associated type synonyms.) In PIR:</p>
<div class="sourceCode" id="cb100"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb100-1"><a href="https://well-typed.com/blog/rss2.xml#cb100-1" tabindex="-1"/><span class="kw">let</span><span class="op">*</span> <span class="kw">data</span> <span class="dt">Bool</span> <span class="ot">=</span> <span class="dt">True</span>  <span class="op">|</span> <span class="dt">False</span></span>
<span id="cb100-2"><a href="https://well-typed.com/blog/rss2.xml#cb100-2" tabindex="-1"/>     fConvertIntegerBool <span class="ot">=</span> λ(<span class="ot">n ::</span> <span class="dt">Integer</span>) <span class="ot">-&gt;</span> ifThenElse {<span class="dt">Bool</span>} (equalsInteger n <span class="dv">0</span>) <span class="dt">True</span> <span class="dt">False</span></span>
<span id="cb100-3"><a href="https://well-typed.com/blog/rss2.xml#cb100-3" tabindex="-1"/>     <span class="kw">data</span> <span class="dt">Tuple2</span><span class="ot"> ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span> a b <span class="ot">=</span> <span class="dt">Tuple2</span> a b</span>
<span id="cb100-4"><a href="https://well-typed.com/blog/rss2.xml#cb100-4" tabindex="-1"/>     <span class="op">!</span>dConvert <span class="ot">=</span> fConvertIntegerBool</span>
<span id="cb100-5"><a href="https://well-typed.com/blog/rss2.xml#cb100-5" tabindex="-1"/>     <span class="op">!</span>dConvert <span class="ot">=</span> fConvertIntegerBool</span>
<span id="cb100-6"><a href="https://well-typed.com/blog/rss2.xml#cb100-6" tabindex="-1"/><span class="kw">in</span> λ(<span class="ot">pair ::</span> <span class="dt">Tuple2</span> <span class="dt">Integer</span> <span class="dt">Integer</span>) <span class="ot">-&gt;</span></span>
<span id="cb100-7"><a href="https://well-typed.com/blog/rss2.xml#cb100-7" tabindex="-1"/>     <span class="dt">Tuple2_match</span></span>
<span id="cb100-8"><a href="https://well-typed.com/blog/rss2.xml#cb100-8" tabindex="-1"/>       {<span class="dt">Integer</span>}</span>
<span id="cb100-9"><a href="https://well-typed.com/blog/rss2.xml#cb100-9" tabindex="-1"/>       {<span class="dt">Integer</span>}</span>
<span id="cb100-10"><a href="https://well-typed.com/blog/rss2.xml#cb100-10" tabindex="-1"/>       pair</span>
<span id="cb100-11"><a href="https://well-typed.com/blog/rss2.xml#cb100-11" tabindex="-1"/>       {<span class="dt">Tuple2</span> <span class="dt">Bool</span> <span class="dt">Bool</span>}</span>
<span id="cb100-12"><a href="https://well-typed.com/blog/rss2.xml#cb100-12" tabindex="-1"/>       (λ(<span class="ot">x ::</span> <span class="dt">Integer</span>) (<span class="ot">y ::</span> <span class="dt">Integer</span>) <span class="ot">-&gt;</span> <span class="dt">Tuple2</span> {<span class="dt">Bool</span>} {<span class="dt">Bool</span>} (dConvert x) (dConvert y))</span></code></pre></div>
<p>UPLC:</p>
<pre><code>let* fConvertIntegerBool = \ ~ n -&gt;
         ifThenElse# ! (equalsInteger# n 0#) (\ ~ t f -&gt; t) (\ ~ t f -&gt; f)

     dConvert  = fConvertIntegerBool!
     dConvert' = fConvertIntegerBool!

in \ ds -&gt; ds ! (\ x y ~ pair -&gt; pair (dConvert x) (dConvert' y))</code></pre>
<p>Fortunately, here we see no remnants of the fact that we used a type class with multiple parameters.</p>
<h4 id="taking-advantage-of-ghc-optimizations">Taking advantage of <code>ghc</code> optimizations</h4>
<p>You might wonder why <code>ghc</code> didn’t inline the dictionary in the <a href="https://well-typed.com/blog/rss2.xml#adhoc-polymorphism">example of adhoc polymorphism</a> that we saw above. The answer is that it <em>can</em>. All of the examples above had the definition of the Haskell code in the same Haskell module as the call to <code>compile</code>:</p>
<div class="sourceCode" id="cb102"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb102-1"><a href="https://well-typed.com/blog/rss2.xml#cb102-1" tabindex="-1"/><span class="ot">useAllEqualPoly ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb102-2"><a href="https://well-typed.com/blog/rss2.xml#cb102-2" tabindex="-1"/>useAllEqualPoly <span class="ot">=</span> <span class="op">..</span></span>
<span id="cb102-3"><a href="https://well-typed.com/blog/rss2.xml#cb102-3" tabindex="-1"/></span>
<span id="cb102-4"><a href="https://well-typed.com/blog/rss2.xml#cb102-4" tabindex="-1"/><span class="ot">compiledUseAllEqualPoly ::</span> <span class="dt">CompiledCode</span> ([<span class="dt">Integer</span>] <span class="ot">-&gt;</span> <span class="dt">Bool</span>)</span>
<span id="cb102-5"><a href="https://well-typed.com/blog/rss2.xml#cb102-5" tabindex="-1"/>compiledUseAllEqualPoly <span class="ot">=</span> <span class="op">$$</span>(compile [<span class="op">||</span> useAllEqualPoly <span class="op">||</span>])</span></code></pre></div>
<p>A consequence of this setup is that the Plutus compilation plugin will see the code <em>before</em> the <code>ghc</code> optimizer gets to work on it. If instead we put the definition of <code>useAllEqualPoly</code> in a different module than the call to <code>compile</code>, and we add</p>
<div class="sourceCode" id="cb103"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb103-1"><a href="https://well-typed.com/blog/rss2.xml#cb103-1" tabindex="-1"/><span class="ot">{-# OPTIONS_GHC -fexpose-all-unfoldings   #-}</span></span>
<span id="cb103-2"><a href="https://well-typed.com/blog/rss2.xml#cb103-2" tabindex="-1"/><span class="ot">{-# OPTIONS_GHC -fspecialize-aggressively #-}</span></span></code></pre></div>
<p>to the module defining <code>useAllEqualPoly</code>, we see that <code>ghc</code> inlines the dictionary entirely, and the resulting UPLC code is of the same size as the code resulting from a <em>monomorphic</em> definition of <code>allEqual</code>.</p>
<p>That is encouraging, but unfortunately this does not always result in smaller code. As a simple example, consider something like</p>
<div class="sourceCode" id="cb104"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb104-1"><a href="https://well-typed.com/blog/rss2.xml#cb104-1" tabindex="-1"/><span class="fu">pred</span><span class="ot"> ::</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span></span>
<span id="cb104-2"><a href="https://well-typed.com/blog/rss2.xml#cb104-2" tabindex="-1"/><span class="fu">pred</span> <span class="dt">Zero</span>     <span class="ot">=</span> <span class="fu">error</span> ()</span>
<span id="cb104-3"><a href="https://well-typed.com/blog/rss2.xml#cb104-3" tabindex="-1"/><span class="fu">pred</span> (<span class="dt">Succ</span> n) <span class="ot">=</span> n</span>
<span id="cb104-4"><a href="https://well-typed.com/blog/rss2.xml#cb104-4" tabindex="-1"/></span>
<span id="cb104-5"><a href="https://well-typed.com/blog/rss2.xml#cb104-5" tabindex="-1"/><span class="ot">predder ::</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span></span>
<span id="cb104-6"><a href="https://well-typed.com/blog/rss2.xml#cb104-6" tabindex="-1"/>predder <span class="ot">=</span> <span class="fu">pred</span> <span class="op">.</span> <span class="fu">pred</span></span></code></pre></div>
<p>The compilation of <code>predder</code> is about 50% larger when compiled with <code>ghc</code> optimizations, because <code>ghc</code> inlined the definition of <code>pred</code>. There are other, less obvious, examples too. For instance, in the <a href="https://well-typed.com/blog/rss2.xml#parametric-polymorphism">parametric polymorphic example of <code>reverse</code></a>, enabling the <code>ghc</code> optimizer results in more polymorphic recursive let-bindings of the shape discussed in that section, and hence in more of those <code>(λ ~ x -&gt; x)</code> terms, resulting in larger code size.</p>
<p>So your mileage may vary; perhaps enabling the <code>ghc</code> optimizer will result in smaller UPLC code, perhaps not. It may require careful tweaking of the code and/or the <code>ghc</code> optimization flags.</p>
<h3 id="conclusions">Conclusions</h3>
<p>For many Plutus developers, UPLC is of particular interest, because Plutus programs are subject to stringent resource bounds and so it is often necessary to optimize the UPLC code by making tweaks to the Haskell source code. In order to do so, it helps to understand the compilation pipeline, which is what this blog post attempted to illustrate.</p>
<p>This is of course not the only way to improve the UPLC code. For example, Well-Typed has been working on an <a href="https://github.com/well-typed/plutonomy">optimizing compiler for UPLC called Plutonomy</a>; as one example, Plutonomy can <a href="https://github.com/input-output-hk/marlowe-cardano/pull/182#issuecomment-1185518608">reduce the size of the Marlowe Plutus script</a> by about 20%. However, Plutonomy is hampered by the lack of type information in UPLC; indeed, the presence of explicit delay/force constructs in UPLC is a blessing, enabling some optimizations that would not otherwise be possible without type inference or some other kind of global analysis. Perhaps an optimizer that operated at the level of PLC instead of UPLC would be beneficial for some applications.</p>
<p>An alternative approach is to bypass the entire compilation pipeline altogether, and instead write UPLC code “directly.” One project that makes this possible is <a href="https://github.com/Plutonomicon/plutarch-plutus">Plutarch</a>, which provides a typed EDSL in Haskell for UPLC.</p>

<section class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>We hand-wrote this example in PIR for this blog post, since illustrating this with a PIR program that would result from the normal Haskell to PIR compiler would look more complicated.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref1">↩︎</a></p></li>
<li id="fn2"><p>This is different to the semantics of type arguments in <code>ghc</code>core: there evaluation does continue underneath the binder.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref2">↩︎</a></p></li>
<li id="fn3"><p>The Haskell <code>Bool</code> type does not translate to the built-in <code>Bool</code> type in Plutus Core; that is used only by built-in functions.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref3">↩︎</a></p></li>
<li id="fn4"><p>The actual dummy argument provided is <code>∀ a. a -&gt; a</code>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref4">↩︎</a></p></li>
<li id="fn5"><p>This is not quite the output of the Plutus compiler; cleaned up a bit to improve readability<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref5">↩︎</a></p></li>
<li id="fn6"><p>This is not the only possible approach. An alternative would be to define a version of <code>Nat</code> with an argument, over the unit kind. This would perhaps be more consistent; what we illustrate here is what the Plutus compiler does and it may not be unreasonable to special case types of kind <code>*</code>, given how common they are.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref6">↩︎</a></p></li>
<li id="fn7"><p><code>SimpleRec</code> is not named as such in PLC; the definition is simply inlined.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref7">↩︎</a></p></li>
<li id="fn8"><p><code>selfApply</code> must be marked as no-inline to prevent <code>ghc</code> from unrolling recursion at compile time forever.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref8">↩︎</a></p></li>
<li id="fn9"><p>We could of course just define <code>fixFun = fix</code>; the definition of <code>fixFun</code> we show here matches the one used in Plutus, and is therefore more helpful when trying to understand PLC/UPLC code.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref9">↩︎</a></p></li>
<li id="fn10"><p>Again, code cleaned up a bit for improved readability.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref10">↩︎</a></p></li>
</ol>
</section></div>
    </content>
    <updated>2022-08-03T00:00:00Z</updated>
    <published>2022-08-03T00:00:00Z</published>
    <category term="plutus"/>
    <category term="blockchain"/>
    <category term="cardano"/>
    <author>
      <name>edsko</name>
    </author>
    <source>
      <id>https://well-typed.com/blog/</id>
      <logo>https://well-typed.com/img/wtnlogoplain.svg</logo>
      <link href="https://well-typed.com/blog/rss2.xml" rel="self" type="application/rss+xml"/>
      <link href="https://well-typed.com/blog/" rel="alternate" type="text/html"/>
      <subtitle>Because Well-Typed Programs Don't Go Wrong</subtitle>
      <title>Well-Typed Blog</title>
      <updated>2022-09-08T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/791-The_Via_Alpina_red_trail_through_Slovenia</id>
    <link href="http://www.joachim-breitner.de/blog/791-The_Via_Alpina_red_trail_through_Slovenia" rel="alternate" type="text/html"/>
    <title xml:lang="en">The Via Alpina red trail through Slovenia</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>This July my girlfriend and I hiked the Slovenian part of the Red Trail of the <a href="http://www.via-alpina.org/">Via Alpina</a>, from the edge of the Julian Alps to Trieste, and I’d like to share some observations and tips that we might have found useful before our trip.</p>
<figure>
<img alt="Our most favorite camp spot" src="https://www.joachim-breitner.de/bilder/scales/20220717194029_full.jpg"/>
<figcaption>Our most favorite camp spot</figcaption>
</figure>
<h3 id="getting-there">Getting there</h3>
<p>As we traveled with complete camping gear and wanted to stay in our tent, we avoided the high alpine parts of the trail and started just where the trail came down from the Alps and entered the Karst. A great way to get there is to take the night train from Zurich or Munich towards Ljubljana, get off at Jesenice, have breakfast, take the local train to Podbrdo and you can start your tour at 9:15am. From there you can reach the trail at Pedrovo Brdo within 1½h.</p>
<h3 id="finding-the-way">Finding the way</h3>
<p>We did not use any paper maps, and instead relied on the <a href="https://wiki.openstreetmap.org/wiki/ViaAlpina">OpenStreetMap data</a>, which is very good, as well as the official(?) GPX tracks on Komoot, which are linked from the <a href="http://www.via-alpina.org/de/stage/189">official route descriptions</a>. We used <a href="https://osmand.net/">OsmAnd</a>.</p>
<p>In general, trails are generally very well marked (red circle with white center, and frequent signs), but the signs rarely tell you which way the Via Alpina goes, so the GPS was needed.</p>
<p>Sometimes the OpenStreetMap trail and the Komoot trail disagreed on short segments. We sometimes followed one and other times the other.</p>
<h3 id="variants">Variants</h3>
<p>We diverged from the trail in a few places:</p>
<ul>
<li><p>We did not care too much about the horses in Lipica and at least on the map it looked like a longish boringish and sun-exposed detour, so we cut the loop and hiked from Prelože pri Lokvi up onto the peak of the Veliko Gradišče (which unfortunately is too overgrown to provide a good view).</p></li>
<li><p>When we finally reached the top of Mali Kras and had a view across the bay of Trieste, it seemed silly to walk to down to Dolina, and instead we followed the ridge through Socerb, essentially the Alpe Adria Trail.</p></li>
<li><p>Not really a variant, but after arriving in Muggia, if one has to go to Trieste, the ferry is a probably nicer way to finish a trek than the bus.</p></li>
</ul>
<h3 id="pitching-a-tent">Pitching a tent</h3>
<p>We used our tent almost every night, only in Idrija we got a room (and a shower…). It was not trivial to find good camp spots, because most of the trail is on hills with slopes, and the flat spots tend to have housed built on them, but certainly possible. Sometimes we hid in the forest, other times we found nice small and freshly mowed meadows within the forest.</p>
<h3 id="water">Water</h3>
<p>Since this is Karst land, there is very little in terms of streams or lakes along the way, which is a pity.</p>
<p>The Idrijca river right south of Idrija was <em>very</em> tempting to take a plunge. Unfortunately we passed there early in the day and we wanted to cover some ground first, so we refrained.</p>
<p>As for drinking water, we used the taps at the bathrooms of the various touristic sites, a few (but rare) public fountains, and finally resorted to just ringing random doorbells and asking for water, which always worked.</p>
<h3 id="paths">Paths</h3>
<p>A few stages lead you through very pleasant narrow forest paths with a sight, but not all. On some days you find yourself plodding along wide graveled or even paved forest roads, though.</p>
<h3 id="landscape-and-sights">Landscape and sights</h3>
<p>The view from Nanos is amazing and, with this high peak jutting out over a wide plain, rather unique. It may seem odd that the trail goes up and down that mountain on the same day when it could go around, but it is certainly worth it.</p>
<p>The Karst is mostly a cultivated landscape, with lots of forestry. It is very hilly and green, which is pretty, but some might miss some craggedness. It’s not the high alps, after all, but at least they are in sight half the time.</p>
<p>But the upside is that there are few sights along the way that are worth visiting, in particular the the <a href="https://en.wikipedia.org/wiki/Franja_Partisan_Hospital">Franja Partisan Hospital</a> hidden in a very narrow gorge, the <a href="https://en.wikipedia.org/wiki/Predjama_Castle">Predjama Castle</a> and the <a href="https://en.wikipedia.org/wiki/%C5%A0kocjan_Caves">Škocjan Caves</a></p></div>
    </summary>
    <updated>2022-07-31T09:19:01Z</updated>
    <published>2022-07-31T09:19:01Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html"/>
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml"/>
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2022-09-15T10:00:55Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://haskell.org/ghc/blog/20220728-ghc-9.2.4-released.html</id>
    <link href="http://haskell.org/ghc/blog/20220728-ghc-9.2.4-released.html" rel="alternate" type="text/html"/>
    <title>GHC 9.2.4 is now available</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>GHC 9.2.4 is now available</h1>
<h4 class="text-muted">Zubin Duggal - 2022-07-28</h4>

<p>The GHC developers are very happy to at announce the availability of GHC 9.2.4. Binary distributions, source distributions, and documentation are available at <a href="https://downloads.haskell.org/ghc/9.2.4"><code>downloads.haskell.org</code></a>.</p>
<p>This release will include:</p>
<ul>
<li><p>The new <code>DeepSubsumption</code> language extension which reverses the effects of the <a href="https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0287-simplify-subsumption.rst">Simplified Subsumption Proposal</a> introduced in GHC 9.0. This is an attempt to make GHC 9.2.4 more backwards compatible with GHC 8.10 and eases migration for users who depended on this feature.</p>
<p>This extension is enabled by default with the <code>Haskell2010</code> and <code>Haskell98</code> languages but disabled with the <code>GHC2021</code> language originally introduced in GHC 9.2.1.</p>
<p>See the <a href="https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0511-deep-subsumption.rst">Deep Subsumption Proposal</a> for more details.</p></li>
<li><p>Fixes for segfaults that may arise due to a bug in the implementation of the <code>keepAlive#</code> primop. This may regress performance for certain programs which use this primop or functions which use the primop, such as <code>withForeignPtr</code>. These regressions are mostly small, but can be larger in certain edge cases. Judicious use of <code>unsafeWithForeignPtr</code> when its argument is known not to statically diverge can mitigate these in many cases. It is our judgment that the critical correctness issues justify the regression in performance and that it is important to get a release out with the fix while we work on a better approach which will improve performance for future releases (<a href="https://gitlab.haskell.org/ghc/ghc/issues/21708">#21708</a>).</p>
<p>We have a <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/with-combinator">wiki page</a> that tracks possible solutions to this problem, and Ben wrote a <a href="https://www.haskell.org/ghc/blog/20210607-the-keepAlive-story.html">blog post</a> detailing the introduction of the <code>keepAlive#</code> primop and its history.</p></li>
<li><p>Fixes for a number of miscompilations on AArch64 and other platforms (<a href="https://gitlab.haskell.org/ghc/ghc/issues/21624">#21624</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/21773">#21773</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/20735">#20735</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/21685">#21685</a>).</p></li>
<li><p>Fixes for segfaults due to bugs in the RTS and GC (<a href="https://gitlab.haskell.org/ghc/ghc/issues/21708">#21708</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/21880">#21880</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/21885">#21885</a>).</p></li>
<li><p>Fixing the behaviour of Ctrl-C with GHCi on Windows (<a href="https://gitlab.haskell.org/ghc/ghc/issues/21889">#21889</a>).</p></li>
<li><p>â€¦ and much more. See the <a href="https://downloads.haskell.org/~ghc/9.2.4/docs/users_guide/9.2.4-notes.html">release notes</a> for a full accounting.</p></li>
</ul>
<p>As some of the fixed issues do affect correctness users are encouraged to upgrade promptly.</p>
<p>We would like to thank Microsoft Azure, GitHub, IOG, the Zw3rk stake pool, Tweag I/O, Serokell, Equinix, SimSpace, Haskell Foundation, and other anonymous contributors whose on-going financial and in-kind support has facilitated GHC maintenance and release management over the years. Finally, this release would not have been possible without the hundreds of open-source contributors whose work comprise this release.</p>
<p>As always, do give this release a try and open a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">ticket</a> if you see anything amiss.</p>
<p>Happy compiling,</p>
<ul>
<li>Zubin</li>
</ul></div>
    </summary>
    <updated>2022-07-28T00:00:00Z</updated>
    <published>2022-07-28T00:00:00Z</published>
    <author>
      <name>ghc-devs</name>
    </author>
    <source>
      <id>http://haskell.org/ghc</id>
      <link href="http://haskell.org/ghc" rel="alternate" type="text/html"/>
      <link href="http://haskell.org/ghc/rss.xml" rel="self" type="application/rss+xml"/>
      <title>GHC Developer blog</title>
      <updated>2022-08-22T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-9757377.post-2057591620886198057</id>
    <link href="https://uncoverliverpool.com/events/loose-ends/" rel="related" title="Loose Ends" type="text/html"/>
    <link href="https://wadler.blogspot.com/feeds/2057591620886198057/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=9757377&amp;postID=2057591620886198057" rel="replies" title="1 Comments" type="text/html"/>
    <link href="https://www.blogger.com/feeds/9757377/posts/default/2057591620886198057" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/9757377/posts/default/2057591620886198057" rel="self" type="application/atom+xml"/>
    <link href="https://wadler.blogspot.com/2022/07/loose-ends.html" rel="alternate" title="Loose Ends" type="text/html"/>
    <title>Loose Ends</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p> </p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEhz5riSfBWbldOy_5uqQ91Hjdioz7KElOiMdl8ODP9bTexRKcgd3BWH3IEFs2u6KyYAbhl3yMeAqTa2ehIzEeVjOs4euNXofAmisqUB5vQyPhx_jb13_a9SUYlSDBAdJfoi50rL7_gBAZcF4nCBJ9tPmv9FRSI2LMPVk6C-UtHdmh-8sLF6ig" style="margin-left: 1em; margin-right: 1em;"><img alt="" height="334" src="https://blogger.googleusercontent.com/img/a/AVvXsEhz5riSfBWbldOy_5uqQ91Hjdioz7KElOiMdl8ODP9bTexRKcgd3BWH3IEFs2u6KyYAbhl3yMeAqTa2ehIzEeVjOs4euNXofAmisqUB5vQyPhx_jb13_a9SUYlSDBAdJfoi50rL7_gBAZcF4nCBJ9tPmv9FRSI2LMPVk6C-UtHdmh-8sLF6ig=w640-h334" width="640"/></a></div><br/><p/><p>My daughter Leora Wadler is directing and producing a play, <a href="https://uncoverliverpool.com/events/loose-ends/">Loose Ends</a>.</p><p><span style="background-color: white; color: #212529; font-family: arvo, serif; font-size: 16px;"/></p><blockquote>Four strangers from differing classes and backgrounds attempt to drink and make merry on their last night in halls against the backdrop of a missing girl â€“ but each of them are carrying secrets.</blockquote><p>Hope Street Theatre, Liverpool, 7.30pm, Thursday 4 and Saturday 6 August. </p><p><br/></p><p/></div>
    </content>
    <updated>2022-07-27T20:23:17Z</updated>
    <published>2022-07-27T20:23:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="Theatre"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="UK"/>
    <author>
      <name>Philip Wadler</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/12009347515095774366</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-9757377</id>
      <category term="Politics"/>
      <category term="Functional Programming"/>
      <category term="Programming Languages"/>
      <category term="Scotland"/>
      <category term="Computing"/>
      <category term="Independence"/>
      <category term="Yes!"/>
      <category term="Haskell"/>
      <category term="UK"/>
      <category term="Academia"/>
      <category term="Edinburgh"/>
      <category term="Cycling"/>
      <category term="Graphics"/>
      <category term="Mathematics"/>
      <category term="Science"/>
      <category term="Types"/>
      <category term="Logic"/>
      <category term="US"/>
      <category term="Covid-19"/>
      <category term="Security"/>
      <category term="Web"/>
      <category term="EU"/>
      <category term="Comics"/>
      <category term="Theory"/>
      <category term="Climate Change"/>
      <category term="Israel"/>
      <category term="Blockchain"/>
      <category term="Education"/>
      <category term="IOHK"/>
      <category term="Internet"/>
      <category term="SIGPLAN"/>
      <category term="Scala"/>
      <category term="Status"/>
      <category term="University"/>
      <category term="ACM"/>
      <category term="Comedy"/>
      <category term="Concurrency"/>
      <category term="Cryptocurrency"/>
      <category term="DSL"/>
      <category term="Databases"/>
      <category term="Dynamic and Static Typing"/>
      <category term="F#"/>
      <category term="Green"/>
      <category term="JavaScript"/>
      <category term="Lego"/>
      <category term="Privacy"/>
      <category term="Recursion"/>
      <category term="Session Types"/>
      <category term="Strange Loop"/>
      <category term="Writing"/>
      <category term="Agda"/>
      <category term="Category Theory"/>
      <category term="Developers"/>
      <category term="Formal Methods"/>
      <category term="Java"/>
      <category term="Object-Oriented"/>
      <category term="Technology"/>
      <category term="Architecture"/>
      <category term="Copyright"/>
      <category term="Distributed Computing"/>
      <category term="Europe"/>
      <category term="Productivity"/>
      <category term="Racket"/>
      <category term="Science Fiction"/>
      <category term="BLM"/>
      <category term="Brexit"/>
      <category term="DRM"/>
      <category term="Environment"/>
      <category term="Erlang"/>
      <category term="Finance"/>
      <category term="Gender"/>
      <category term="Theatre"/>
      <category term="BDS"/>
      <category term="Books"/>
      <category term="Cinema"/>
      <category term="Communication"/>
      <category term="Japan"/>
      <category term="Net Neutrality"/>
      <category term="Open Access"/>
      <category term="Palestine"/>
      <category term="Pyret"/>
      <category term="Scheme"/>
      <category term="Sweden"/>
      <author>
        <name>Philip Wadler</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/12009347515095774366</uri>
      </author>
      <link href="https://wadler.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom" rel="self" type="application/atom+xml"/>
      <link href="https://wadler.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom&amp;start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Wadler's Blog</title>
      <updated>2022-09-07T12:38:25Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://haskell.org/ghc/blog/20220721-ghc-9.4.1-rc1-released.html</id>
    <link href="http://haskell.org/ghc/blog/20220721-ghc-9.4.1-rc1-released.html" rel="alternate" type="text/html"/>
    <title>GHC 9.4.1-rc1 released</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>GHC 9.4.1-rc1 released</h1>
<h4 class="text-muted">bgamari - 2022-07-21</h4>

<p>The GHC developers are happy to announce the availability of the first (and likely last) release candidate of GHC 9.4.1. Binary distributions, source distributions, and documentation are available at <a href="https://downloads.haskell.org/ghc/9.4.1-rc1">downloads.haskell.org</a>.</p>
<p>This release will include:</p>
<ul>
<li><p>A new profiling mode, <code>-fprof-late</code>, which adds automatic cost-center annotations to all top-level functions <em>after</em> Core optimisation has run. This provides informative profiles while interfering significantly less with GHC’s aggressive optimisations, making it easier to understand the performance of programs which depend upon simplification..</p></li>
<li><p>A variety of plugin improvements including the introduction of a new plugin type, <em>defaulting plugins</em>, and the ability for typechecking plugins to rewrite type-families.</p></li>
<li><p>An improved constructed product result analysis, allowing unboxing of nested structures, and a new boxity analysis, leading to less reboxing.</p></li>
<li><p>Introduction of a tag-check elision optimisation, bringing significant performance improvements in strict programs.</p></li>
<li><p>Generalisation of a variety of primitive types to be levity polymorphic. Consequently, the <code>ArrayArray#</code> type can at long last be retired, replaced by standard <code>Array#</code>.</p></li>
<li><p>Introduction of the <code>\cases</code> syntax from <a href="https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0302-cases.rst">GHC proposal 0302</a>.</p></li>
<li><p>A complete overhaul of GHC’s Windows support. This includes a migration to a fully Clang-based C toolchain, a deep refactoring of the linker, and many fixes in WinIO.</p></li>
<li><p>Support for multiple home packages, significantly improving support in IDEs and other tools for multi-package projects.</p></li>
<li><p>A refactoring of GHC’s error message infrastructure, allowing GHC to provide diagnostic information to downstream consumers as structured data, greatly easing IDE support.</p></li>
<li><p>Significant compile-time improvements to runtime and memory consumption.</p></li>
<li><p>On overhaul of our packaging infrastructure, allowing full traceability of release artifacts and more reliable binary distributions.</p></li>
<li><p>Reintroduction of deep subsumption (which was previously dropped with the <em>simplified subsumption</em> change) as a language extension.</p></li>
<li><p>… and much more. See the <a href="https://downloads.haskell.org/~ghc/9.4.1-rc1/docs/users_guide/9.4.1-notes.html">release notes</a> for a full accounting.</p></li>
</ul>
<p>Note that, as 9.4.1 is the first release for which the released artifacts will all be generated by our Hadrian build system, it is possible that there will be packaging issues. If you enounter trouble while using a binary distribution, please open a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">ticket</a>. Likewise, if you are a downstream packager, do consider migrating to <a href="https://gitlab.haskell.org/ghc/ghc/-/blob/e2520df3fffa0cf22fb19c5fb872832d11c07d35/hadrian">Hadrian</a> to run your build; the Hadrian build system can be built using <code>cabal-install</code>, <code>stack</code>, or the in-tree <a href="https://gitlab.haskell.org/ghc/ghc/-/blob/e2520df3fffa0cf22fb19c5fb872832d11c07d35/hadrian/bootstrap/README.md">bootstrap script</a>. We will be publishing a blog post describing the migration process to Hadrian in the coming weeks.</p>
<p>We would like to thank Microsoft Azure, GitHub, IOG, the Zw3rk stake pool, Tweag I/O, Serokell, Equinix, SimSpace, Haskell Foundation, and other anonymous contributors whose on-going financial and in-kind support has facilitated GHC maintenance and release management over the years. Finally, this release would not have been possible without the hundreds of open-source contributors whose work comprise this release.</p>
<p>As always, do give this release a try and open a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">ticket</a> if you see anything amiss.</p>
<p>Happy testing,</p>
<ul>
<li>Ben</li>
</ul></div>
    </summary>
    <updated>2022-07-21T00:00:00Z</updated>
    <published>2022-07-21T00:00:00Z</published>
    <author>
      <name>ghc-devs</name>
    </author>
    <source>
      <id>http://haskell.org/ghc</id>
      <link href="http://haskell.org/ghc" rel="alternate" type="text/html"/>
      <link href="http://haskell.org/ghc/rss.xml" rel="self" type="application/rss+xml"/>
      <title>GHC Developer blog</title>
      <updated>2022-08-22T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6757805.post-7245776933931478949</id>
    <link href="http://kenta.blogspot.com/feeds/7245776933931478949/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=6757805&amp;postID=7245776933931478949&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/>
    <link href="http://www.blogger.com/feeds/6757805/posts/default/7245776933931478949" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/6757805/posts/default/7245776933931478949" rel="self" type="application/atom+xml"/>
    <link href="http://kenta.blogspot.com/2022/07/pcljyxvx-infix-notation-decreases.html" rel="alternate" title="[pcljyxvx] infix notation decreases parentheses" type="text/html"/>
    <title>[pcljyxvx] infix notation decreases parentheses</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>in Haskell, <code>binaryfunction (f x) (g y)</code> can be rewritten <code>f x `binaryfunction` g y</code> , removing a layer of parentheses, because function application has precedence higher than any operator.</p>  <p>permitting arbitrary binary functions to be turned into infix operators helps avoid Lisp's Too Many Parentheses.  previously, <a href="http://kenta.blogspot.com/2015/05/eyrfjqor-in-praise-of.html">praising the dollar-sign operator</a>.</p>  <p>however, I don't use this backticks feature very frequently, because if the operands are more complicated than simple function application, then infix notation does not decrease parenthesization.  for example: <code>binaryoperator (f $ g x) (p $ q y) == (f $ g x) `binaryoperator` (p $ q y)</code></p>  <p>previously on <a href="http://kenta.blogspot.com/2021/11/bawayqbd-binary-functions.html">binary operators</a>, and <a href="http://kenta.blogspot.com/2017/01/lvbetgkb-right-section.html">currying them</a>.</p></div>
    </content>
    <updated>2022-07-15T23:21:01Z</updated>
    <published>2022-07-15T23:21:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="cs"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="haskell"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6757805</id>
      <category term="cs"/>
      <category term="soc"/>
      <category term="plot"/>
      <category term="game"/>
      <category term="crypto"/>
      <category term="geom"/>
      <category term="sci"/>
      <category term="ui"/>
      <category term="wr"/>
      <category term="time"/>
      <category term="sex"/>
      <category term="speech"/>
      <category term="teach"/>
      <category term="haskell"/>
      <category term="edu"/>
      <category term="prod"/>
      <category term="transport"/>
      <category term="et"/>
      <category term="dance"/>
      <category term="ai"/>
      <category term="done"/>
      <category term="qi"/>
      <category term="answer"/>
      <category term="jour"/>
      <category term="food"/>
      <author>
        <name>Unknown</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://kenta.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/6757805/posts/default/-/haskell" rel="self" type="application/atom+xml"/>
      <link href="http://kenta.blogspot.com/search/label/haskell" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/6757805/posts/default/-/haskell/-/haskell?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>mostly on computers and mathematics</subtitle>
      <title>Ken's blog</title>
      <updated>2022-09-14T11:47:02Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://magnus.therning.org/2022-07-09-playing-with-setting-up-emacs.html</id>
    <link href="https://magnus.therning.org/2022-07-09-playing-with-setting-up-emacs.html" rel="alternate" type="text/html"/>
    <title>Playing with setting up Emacs</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
TL;DR: I've put together a small-ish Emacs configuration that I call <a href="https://gitlab.com/magus/mes">MES</a>.
Hopefully it can be of use to someone out there.
</p>

<div class="outline-2" id="outline-container-orgc00253e">
<h2 id="orgc00253e">My Emacs Setup - MES</h2>
<div class="outline-text-2" id="text-orgc00253e">
<p>
The other day I started watching some videos in the <a href="https://www.youtube.com/watch?v=74zOY-vgkyw&amp;list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ">Emacs From Scratch</a> series
from <a href="https://github.com/SystemCrafters">System Crafters</a>. It looked like something that could be fun to play with so
over the last couple of days I've been tinkering with putting together the
beginnings of a configuration.
</p>

<p>
During the process I realised just how much work it'd be to put together
something that comes close to the polish of <a href="http://spacemacs.org/">Spacemacs</a>, so I've currently no
intention of actually using <i>MES</i> myself. It was fun though, and maybe it can
serve as inspiration (or as a deterrent) for someone else.
</p>

<p>
The major parts are
</p>

<ul class="org-ul">
<li><a href="https://github.com/emacs-evil/evil">evil</a></li>
<li><a href="https://github.com/minad/vertico">vertico</a>/<a href="https://github.com/minad/consult">consult</a>/â€¦</li>
<li><a href="https://github.com/noctuid/general.el">general.el</a></li>
<li><a href="https://magit.vc/">magit</a></li>
<li><a href="https://github.com/mclear-tools/tabspaces">tabpspaces</a> (minimal config so I'm not sure it's useful)</li>
<li><a href="https://orgmode.org/">orgmode</a> (only the very basics)</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a></div></div>
    </summary>
    <updated>2022-07-09T20:37:00Z</updated>
    <published>2022-07-09T20:37:00Z</published>
    <category term="emacs"/>
    <source>
      <id>https://magnus.therning.org/</id>
      <author>
        <name>Magnus Therning</name>
      </author>
      <link href="https://magnus.therning.org/" rel="alternate" type="text/html"/>
      <link href="https://magnus.therning.org/feed.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Magnus web site</subtitle>
      <title>Magnus web site</title>
      <updated>2022-08-21T20:35:13Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2022:/prog/git/tips-2</id>
    <link href="https://blog.plover.com/prog/git/tips-2.html" rel="alternate" type="text/html"/>
    <title>Things I wish everyone knew about Git (Part II)</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>This is a writeup of
<a href="https://perl.plover.com/classes/git-tips/">a talk I gave in December</a> for
my previous employer. It's long so I'm publishing it in several parts:</p>

<ul>
<li><a href="https://blog.plover.com/prog/git/tips.html">Part I</a>:
<ul>
<li><a href="https://blog.plover.com/prog/git/tips.html#gt-sec1">How to approach Git; general strategy</a></li>
<li><a href="https://blog.plover.com/prog/git/tips.html#gt-sec2">Read <em>Git From the Bottom Up</em></a></li>
</ul></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html">Part II</a> (you are here):
<ul>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec3">It is really hard to lose stuff</a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec4">But what if you do lose something?</a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec5">Finding old stuff with <code>git-reflog</code></a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec6">What if you can't find it?</a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec7">What if you regret something you did?</a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec8">Git leaves a trail</a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec9">A few things <em>can</em> be lost forever!</a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec10"><code>git-rev-parse</code></a></li>
</ul></li>
<li>More coming later:
<ul>
<li>Branches are fictitious</li>
<li>Committing partial changes</li>
<li>Push and fetch; tracking branches</li>
<li>Aliases and custom commands</li>
</ul></li>
</ul>

<p>The most important material is in
<a href="https://blog.plover.com/prog/git/tips.html">Part I</a>.</p>

<p><a name="gt-sec3">‌</a></p>

<h2>It is really hard to lose stuff</h2>

<p>A Git repository is an append-only filesystem.  You can add snapshots
of files and directories, but you can't modify or delete <em>anything</em>.
Git commands sometimes purport to  modify data.  For
example <code>git commit --amend</code> suggests that it amends a commit.
It doesn't.  There is no such thing as amending a commit; commits are
immutable.</p>

<p>Rather, it writes a completely new commit, and then
kinda turns its back on the old one.  But the old commit is still in
there, pristine, forever.</p>

<p>In a Git repository you can <em>lose</em> things, in the sense of forgetting
where they are.  But they can almost always be found again, one way or
another, and when you find them they will be exactly the same as they
were before.  If you <code>git commit --amend</code> and change your mind later,
it's not hard to get the old ⸢unamended⸣ commit back if you want it
for some reason.</p>

<ul>
<li><p>If you have the SHA for a file, it will always be the exact same
version of the file with the exact same contents.</p></li>
<li><p>If you have the SHA for a directory (a “tree” in Git jargon) it will
always contain the exact same versions of the exact same files with
the exact same names.</p></li>
<li><p>If you have the SHA for a commit, it will always contain the exact
same metainformation (description, when made, by whom, etc.) and the
exact same snapshot of the entire file tree.</p></li>
</ul>

<p>Objects can have other names and descriptions that come and go, but
the SHA is forever.</p>

<p>(There's a small qualification to this: if the SHA is the <em>only</em> way
to refer to a certain object, if it has no other names, and if you
haven't used it for a few months, Git might
discard it from the repository entirely.)</p>

<p><a name="gt-sec4">‌</a></p>

<h3>But what if you do lose something?</h3>

<p>There are many good answers to this question but I think the one to
know first is <code>git-reflog</code>, because it covers the great majority of
cases.</p>

<p>The <code>git-reflog</code> command means:</p>

<p align="center"><font size="+2">“List the SHAs of commits I have visited
recently”</font></p>

<p>When I run <code>git reflog</code> the top of the output says what commits I
had checked out at recently, with the top line being the commit I have checked
out right now:</p>

<pre><code>    523e9fa1 HEAD@{0}: checkout: moving from dev to pasha
    5c31648d HEAD@{1}: pull: Fast-forward
    07053923 HEAD@{2}: checkout: moving from pr2323 to dev
    ...
</code></pre>

<p>The last thing I did was check out the branch named <code>pasha</code>; its tip
commit is at 523e9f1a.</p>

<p>Before
that, I did <code>git pull</code> and Git updated my local <code>dev</code> branch from the
remote one, updating it to <code>5c31648d</code>.</p>

<p>Before that, I had switched to <code>dev</code> from a different branch,
<code>pr2323</code>.  At that time, before the pull, <code>dev</code> referred to commit
<code>07053923</code>.</p>

<p>Farther down in the output are some commits I visited last August:</p>

<pre><code>    ...
    58ec94f6 HEAD@{928}: pull --rebase origin dev: checkout 58ec94f6d6cb375e09e29a7a6f904e3b3c552772
    e0cfbaee HEAD@{929}: commit: WIP: model classes for condensedPlate and condensedRNAPlate
    f8d17671 HEAD@{930}: commit: Unskip tests that depend on standard seed data
    31137c90 HEAD@{931}: commit (amend): migrate pedigree tests into test/pedigree
    a4a2431a HEAD@{932}: commit: migrate pedigree tests into test/pedigree
    1fe585cb HEAD@{933}: checkout: moving from LAB-808-dao-transaction-test-mode to LAB-815-pedigree-extensions
    ...
</code></pre>

<p><img alt="Flux capacitor (magic time-travel doohickey) from &#x201C;Back to the Future&#x201D;" src="https://pic.blog.plover.com/prog/git/tips-2/flux-capacitor.jpg" style="float: right;"/></p>

<p>Suppose I'm caught in some horrible Git nightmare.  Maybe I deleted
the entire test suite or accidentally put my <em>Small Wonder</em> fanfic
into a commit message or overwrote the report templates with 150
gigabytes of goat porn. I can go back to how things were before.  I
look in the reflog for the SHA of the commit just before I made my big
blunder, and then:</p>

<pre><code>    git reset --hard 881f53fa
</code></pre>

<p>Phew, it was just a bad dream.</p>

<p>(Of course, if my colleagues actually <em>saw</em> the goat porn, it can't
fix that.)</p>

<p>I would like to nominate <a href="https://en.wikipedia.org/wiki/Wile_E%2e_Coyote">Wile E. Coyote</a> to be
the mascot of Git.  Because Wile E. is always getting himself into
situations like this one:</p>

<p><a href="https://pic.blog.plover.com/prog/git/tips-2/coyote.jpg"><img alt="Wile E., a cartoon coyote has just fired a shotgun at Bugs Bunny.  For some reason the shotgun has fired backwards and blown his face off, as Git sometimes does." class="center" src="https://pic.blog.plover.com/prog/git/tips-2/coyote-th.jpg"/></a></p>

<p>But then, in the next scene, he is magically unharmed.  That's Git.</p>

<p><a name="gt-sec5">‌</a></p>

<h3>Finding old stuff with <code>git-reflog</code></h3>

<ul>
<li><code>git reflog</code> by itself lists the places that <code>HEAD</code> has been</li>
<li><code>git reflog some-branch</code> lists the places that <code>some-branch</code> has been</li>
<li>That <code>HEAD@{1}</code> thing in the <code>reflog</code> output is another way to name
that commit if you don't want to use the SHA.</li>
<li>You can abbreviate it to just <code>@{1}</code>.</li>
<li><p>The following locutions can be used with <em>any</em> git command that wants you to identify a commit:</p>

<ul>
<li><code>@{17}</code> (<code>HEAD</code> as it was 17 actions ago)</li>
<li><code>@{18:43}</code> (<code>HEAD</code> as it was at 18:43 today)</li>
<li><code>@{yesterday}</code> (<code>HEAD</code> as it was 24 hours ago)</li>
<li><code>dev@{'3 days ago'}</code> (<code>dev</code> as it was 3 days ago)</li>
<li><code>some-branch@{'Aug 22'}</code> (<code>some-branch</code> as it was last August 22)</li>
</ul>

<p>(Use with <code>git-checkout</code>, <code>git-reset</code>, <code>git-show</code>, <code>git-diff</code>, etc.)</p></li>
<li><p>Also useful:</p>

<pre><code>git show dev@{'Aug 22'}:path/to/some/file.txt
</code></pre>

<p>“Print out that file, as it was on <code>dev</code>, as <code>dev</code> was on August 22”</p></li>
</ul>

<p>It's all still in there.</p>

<p><a name="gt-sec6">‌</a></p>

<h3>What if you can't find it?</h3>

<p>Don't panic!  Someone with more experience can probably find it for
you.  If you have a local Git expert, ask them for help.</p>

<p>And if they are busy and can't help you immediately, the thing you're looking for
won't disappear while you wait for them.  The repository is append-only.
Every version of everything is saved.  If they could have found it
today, they will still be able to find it tomorrow.</p>

<p>(Git will <em>eventually</em> throw away lost and unused snapshots, but
typically not anything you have used in the last 90 days.)</p>

<p><a name="gt-sec7">‌</a></p>

<h2>What if you regret something you did?</h2>

<p>Don't panic! It can probably put it back the way it was.</p>

<p><a name="gt-sec8">‌</a></p>

<h3>Git leaves a trail</h3>

<p>When you make a commit, Git prints something like this:</p>

<pre><code>    your-topic-branch 4e86fa23 Rework foozle subsystem
</code></pre>

<p>If you need to find that commit again, the SHA <code>4e86fa23</code> is in your
terminal scrollback.</p>

<p>When you fetch a remote branch, Git prints:</p>

<pre><code>       6e8fab43..bea7535b  dev        -&gt; origin/dev
</code></pre>

<p>What commit was <code>origin/dev</code> before the fetch?  At <code>6e8fab43</code>.
What commit is it now?  <code>bea7535b</code>.</p>

<p>What if you want to look at how it was before? No problem, <code>6e8fab43</code>
is still there.  It's not called <code>origin/dev</code> any more, but the SHA is
forever.  You can still check it out and look at it:</p>

<pre><code>    git checkout -b how-it-was-before 6e8fab43
</code></pre>

<p>What if you want to compare how it was with how it is now?</p>

<pre><code>    git log 6e8fab43..bea7535b
    git show 6e8fab43..bea7535b
    git diff 6e8fab43..bea7535b
</code></pre>

<p>Git tries to leave a trail of breadcrumbs in your terminal.  It's
constantly printing out SHAs that you might want again.</p>

<p><a name="gt-sec9">‌</a></p>

<h2>A few things <em>can</em> be lost forever!</h2>

<p>After all that talk about how Git will not lose things, I should point
out the exceptions.  The big exception is that if you have created
files or made changes in the working tree, Git is unaware of them
until you have added them with <code>git-add</code>.  Until then, those changes
are in the working tree but not in the repository, and if you discard
them Git cannot help you get them back.</p>

<p>Good advice is <strong>Commit early and often</strong>. If you don't commit, at
least add changes with <code>git-add</code>.  Files added but not committed are
saved in the repository,
<a href="https://blog.plover.com/prog/git-reset-disaster.html">although they can be hard to find</a>
because they haven't been packaged into a commit with a single SHA id.</p>

<p>Some people automate this: they have a process that runs every few
minutes and commits the current working tree to a special branch that
they look at only in case of disaster.</p>

<blockquote>
  <p>The <strong>dangerous commands</strong> are <code>git-reset</code> and <code>git-checkout</code></p>
</blockquote>

<p>which
modify the working tree, and so might wipe out changes that aren't in
the repository. Git will try to warn you before doing something
destructive to your working tree changes.</p>

<p><a name="gt-sec10">‌</a></p>

<h3><code>git-rev-parse</code></h3>

<p>We saw a little while ago that Git's language for talking about
commits and files is quite sophisticated:</p>

<pre><code>            my-topic-branch@{'Aug 22'}:path/to/some/file.txt
</code></pre>

<p>Where is this language documented?  Maybe not where you would expect: it's in the
manual for <a href="https://git-scm.com/docs/git-rev-parse"><code>git-rev-parse</code></a>.</p>

<p>The <code>git rev-parse</code> command is less well-known than it should be.  It takes a
description of some object and turns it into a SHA.
Why is that useful?  Maybe not, but</p>

<blockquote>
  <p><a href="https://git-scm.com/docs/git-rev-parse">The <code>git-rev-parse</code> man page</a> explains the
  syntax of the descriptions Git understands.</p>
</blockquote>

<p>A good habit is to skim
over the manual every few months.  You'll pick up something new and useful
every time.</p>

<p>My favorite is that if you use the syntax <code>:/foozle</code> you get the most
recent commit on the current branch whose message mentions
<code>foozle</code>. For example:</p>

<pre><code>    git show :/foozle
</code></pre>

<p>or</p>

<pre><code>    git log :/introduce..:/remove
</code></pre>

<p>Coming next week (probably), a few miscellaneous matters about using Git more
effectively.</p></div>
    </content>
    <updated>2022-07-06T12:07:00Z</updated>
    <published>2022-07-06T12:07:00Z</published>
    <category term="/prog/git"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml"/>
      <link href="https://blog.plover.com" rel="alternate" type="text/html"/>
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2022-09-13T02:12:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://gergo.erdi.hu/blog/2022-07-02-a_small_benchmark_for_functional_languages_targeting_web_browsers</id>
    <link href="http://gergo.erdi.hu/blog/2022-07-02-a_small_benchmark_for_functional_languages_targeting_web_browsers" rel="alternate" type="text/html"/>
    <title>A small benchmark for functional languages targeting web browsers</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
      I had an idea for a retro-gaming project that will require a MOS
      6502 emulator that runs smoothly in the browser and can be
      customized easily. Because I only need the most basic of
      functionality from the emulation (I don't need to support
      interrupts, timing accuracy, or even the notion of cycles), I
      thought I'd just quickly write one. This post is not about the
      actual retro-gaming project that prompted this, but instead, my
      experience with the performance of the generated code using
      various functional-for-web languages.
    </p><p>
      As I usually do in situations like this, I started with a
      Haskell implementation to serve as a kind of executable
      specification, to make sure my understanding of the details of
      various 6502 instructions is correct.  This Haskell
      implementation is nothing fancy: the outside world is modelled
      as a class MonadIO m =&gt; MonadMachine m, and the CPU
      itself runs in MonadMachine m =&gt; ReaderT CPU m,
      using IORefs in the CPU record for
      registers.
    </p><h3>The languages</h3><p>
      Ironing out all the wrinkles took a whole day, but once it
      worked well enough, it was time for the next step: rewriting it
      in a language that can then target the browser.  <a href="https://www.purescript.org/">PureScript</a> seemed like an
      obvious choice: it's used a lot in the real world so it should
      be mature enough, and with how simple my Haskell code is,
      PureScript's <a href="https://github.com/purescript/documentation/blob/ae29196b8d7ecfa86b6730413aad06bdeaf21f64/language/Differences-from-Haskell.md">idiosyncracies
      compared to Haskell</a> shouldn't really come into play beyond
      the syntax level. The one thing that annoyed me to no end was
      that numeric literals are not overloaded, so all
      Word8s in my code had to be manually
      fromIntegral'd; and, in an emulator of an eight-bit
      CPU, there's a <i>ton</i> of Word8 literals...
    </p><p>
      The second contender was <a href="https://idris-lang.org/">Idris
      2</a>. I've had good experience with Idris 1 for the web when I
      wrote the <a href="https://github.com/gergoerdi/icfp-bingo-2017-idris">ICFP
      Bingo</a> web app, but that project was all about the DOM
      manipulation and no computation. I was curious what performance
      I can get from Idris 2's JavaScript backend.
    </p><p>
      And then I had to include <a href="https://asterius.netlify.app/">Asterius</a>, a GHC-based
      compiler emitting WebAssembly. <a href="https://github.com/tweag/asterius">Its GitHub page</a>
      states it is "actively maintained by Tweag I/O", but it's
      actually in quite a rough shape: the <a href="https://asterius.netlify.app/building.html">documentation
      on how to build it</a> is out of date, so the only way to try it
      is via a 20G Docker container...
    </p><p>
      Notably missing from this list is GHCJS. Unfortunately, I
      couldn't find an up-to-date version of it; it seems the project,
      or at least work on integrating with standard Haskell tools like
      Stack, has died off.    
    </p><p>
      To compare performances, I load the same memory image into the
      various emulators, set the program counter to the same starting
      point, and run it for 4142 instructions until a certain target
      instruction is reached. To paper over the browser's JavaScript
      JIT engine etc., each test runs for 100 times first as a
      warm-up, then 100 times measured.
    </p><p>
      Beside the PureScript, Idris 2, and GHC/Asterius
      implementations, I have also added a fourth version to serve as
      the baseline: vanilla JavaScript. Of course, I tried to make it
      as close to the functional versions as possible; I hope what I
      wrote is close to what could reasonably be expected as the
      output of a compiler.
    </p><h3>Performance results</h3><p>
      The following numbers come from the collected implementations in
      <a href="https://github.com/gergoerdi/functional-mos6502-web-performance/tree/e68fa35d56e9d2eb455cadc285355a7a9483cd2f">this
      GitHub repo</a>. The PureScript and Idris 2 versions have been
      improved based on ideas from the respective Discord channels.
      For PureScript, using the CPS-transformed version of
      Reader helped; and in the case of Idris 2, <a href="https://github.com/stefan-hoeck">Stefan HÃ¶ck</a>'s changes
      of arguments instead of ReaderT, and using
      PrimIO when looping over instructions, improved
      performance dramatically.
    <table>
      <tbody><tr>
        <td>Implementation</td>
        <td>Generated code size (bytes)</td>
        <td>Average time of 4142 instructions (ms)</td>
      </tr>
      <tr>
        <td><a href="https://github.com/gergoerdi/functional-mos6502-web-performance/tree/master/implementations/js">JavaScript</a></td>
        <td>12,877</td>
        <td>0.98</td>
      </tr>
      <tr>
        <td><a href="https://github.com/gergoerdi/functional-mos6502-web-performance/tree/master/implementations/rescript">ReasonML/ReScript</a></td>
        <td>27,252</td>
        <td>1.77</td>
      </tr>
      <tr>
        <td><a href="https://github.com/gergoerdi/functional-mos6502-web-performance/tree/master/implementations/idris2">Idris 2</a></td>
        <td>60,379</td>
        <td>6.38</td>
      </tr>
      <tr>
        <td><a href="https://github.com/gergoerdi/functional-mos6502-web-performance/tree/master/implementations/clean">Clean</a></td>
        <td>225,283</td>
        <td>39.41</td>
      </tr>
      <tr>
        <td><a href="https://github.com/gergoerdi/functional-mos6502-web-performance/tree/master/implementations/purescript">PureScript</a></td>
        <td>151,536</td>
        <td>137.03</td>
      </tr>
      <tr>
        <td><a href="https://github.com/gergoerdi/functional-mos6502-web-performance/tree/master/implementations/asterius">GHC/Asterius</a></td>
        <td>1,448,826</td>
        <td>346.73</td>
      </tr>
    </tbody></table></p><p>
      So Idris 2 comes out way ahead of the pack here: unless you're
      willing to program in JavaScript, it's by far your best bet both
      for tiny deployment size and superb performance. All that
      remains to improve is to compile monad transformer stacks better
      so that the original ReaderT code works as well as
      the version using implicit parameters
    </p><p>
      To run the benchmark yourself, checkout <a href="https://github.com/gergoerdi/functional-mos6502-web-performance">the
      GitHub repo</a>, run make in the top-level
      directory, and then use a web browser to open
      _build/index.html and use the JavaScript console to
      run await measureAll().
    </p><h3>Update on 2022-07-08</h3><p>
      I've added <a href="https://rescript-lang.org/">ReScript</a>
      (<a href="https://reasonml.github.io/">ReasonML</a> for the
      browser), which comes in as the new functional champion! I still
      wouldn't want to write this program in ReScript, though, because
      of the extra pain caused it lacks not only overloaded literals,
      but even type-driven operator resolution...
    </p><p>
      Also today, I have received <a href="https://github.com/gergoerdi/functional-mos6502-web-performance/pull/5">a
      pull request</a> from <a href="https://camilstaps.nl/">Camil
      Staps</a> that adds a <a href="https://clean-lang.org/">Clean</a> implementation.
    </p></div>
    </summary>
    <updated>2022-07-02T16:54:00Z</updated>
    <published>2022-07-02T16:54:00Z</published>
    <source>
      <id>http://gergo.erdi.hu/blog/tags/haskell</id>
      <icon>http://gergo.erdi.hu/favicon.ico</icon>
      <author>
        <name>ERDI Gergo</name>
      </author>
      <link href="http://gergo.erdi.hu/blog/tags/haskell" rel="alternate" type="text/html"/>
      <link href="http://gergo.erdi.hu/blog/tags/haskell/feed.xml" rel="self" type="application/atom+xml"/>
      <title>Gergő.Érdi.hu — haskell</title>
      <updated>2022-07-08T15:01:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-9757377.post-2316175209798671538</id>
    <link href="https://wadler.blogspot.com/feeds/2316175209798671538/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=9757377&amp;postID=2316175209798671538" rel="replies" title="2 Comments" type="text/html"/>
    <link href="https://www.blogger.com/feeds/9757377/posts/default/2316175209798671538" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/9757377/posts/default/2316175209798671538" rel="self" type="application/atom+xml"/>
    <link href="https://wadler.blogspot.com/2022/05/no-no-no.html" rel="alternate" title="No, No, No" type="text/html"/>
    <title>No, No, No</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEipC2axB2-5PPVo3Ygj6IdkmaSw0BgbDIrlnYjuIxv-5mUDWL-iPgcC7AQg5_JT97tVJ0UUJ_U9oK5TZ7Tqz0Kh2nlOUAzxj08rDZvJXEspUnumH-4hg2RDpR6cYdsTvdb95z3xZgLdXFp-3_VJt0xE-6EhSCHPaBreiV6tnLVv4qnWAy8bhg" style="margin-left: 1em; margin-right: 1em;"><img alt="" height="450" src="https://blogger.googleusercontent.com/img/a/AVvXsEipC2axB2-5PPVo3Ygj6IdkmaSw0BgbDIrlnYjuIxv-5mUDWL-iPgcC7AQg5_JT97tVJ0UUJ_U9oK5TZ7Tqz0Kh2nlOUAzxj08rDZvJXEspUnumH-4hg2RDpR6cYdsTvdb95z3xZgLdXFp-3_VJt0xE-6EhSCHPaBreiV6tnLVv4qnWAy8bhg=w640-h450" width="640"/></a></div></div><div><br/></div><a href="https://www.starterstory.com/how-to-say-no">How to say no</a>, a collection of templates that answer "no" to any possible question.<div><br/></div><div><a href="http://paulgraham.com/makersschedule.html">Maker's schedule, manager's schedule</a>, an essay by Paul Graham explaining that meetings for makers and managers have very different costs.</div><div><br/></div><div><a href="https://thoughtcatalog.com/ryan-holiday/2017/01/to-everyone-who-asks-for-just-a-little-of-your-time/">Here's what it costs to say yes</a>, an essay by Ryan Holiday to explain his calendar anorexia.</div><div><br/></div><div>The last of these quotes Seneca:</div><div><span><blockquote>No person would give up even an inch of their estate, and the slightest dispute with a neighbor can mean hell to pay; yet we easily let others encroach on our lives—worse, we often pave the way for those who will take it over. No person hands out their money to passers-by, but to how many do each of us hand out our lives! We’re tight-fisted with property and money, yet think too little of wasting time, the one thing about which we should all be the toughest misers.</blockquote></span></div></div>
    </content>
    <updated>2022-06-30T21:06:07Z</updated>
    <published>2022-05-31T22:29:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="Productivity"/>
    <author>
      <name>Philip Wadler</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/12009347515095774366</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-9757377</id>
      <category term="Politics"/>
      <category term="Functional Programming"/>
      <category term="Programming Languages"/>
      <category term="Scotland"/>
      <category term="Computing"/>
      <category term="Independence"/>
      <category term="Yes!"/>
      <category term="Haskell"/>
      <category term="UK"/>
      <category term="Academia"/>
      <category term="Edinburgh"/>
      <category term="Cycling"/>
      <category term="Graphics"/>
      <category term="Mathematics"/>
      <category term="Science"/>
      <category term="Types"/>
      <category term="Logic"/>
      <category term="US"/>
      <category term="Covid-19"/>
      <category term="Security"/>
      <category term="Web"/>
      <category term="EU"/>
      <category term="Comics"/>
      <category term="Theory"/>
      <category term="Climate Change"/>
      <category term="Israel"/>
      <category term="Blockchain"/>
      <category term="Education"/>
      <category term="IOHK"/>
      <category term="Internet"/>
      <category term="SIGPLAN"/>
      <category term="Scala"/>
      <category term="Status"/>
      <category term="University"/>
      <category term="ACM"/>
      <category term="Comedy"/>
      <category term="Concurrency"/>
      <category term="Cryptocurrency"/>
      <category term="DSL"/>
      <category term="Databases"/>
      <category term="Dynamic and Static Typing"/>
      <category term="F#"/>
      <category term="Green"/>
      <category term="JavaScript"/>
      <category term="Lego"/>
      <category term="Privacy"/>
      <category term="Recursion"/>
      <category term="Session Types"/>
      <category term="Strange Loop"/>
      <category term="Writing"/>
      <category term="Agda"/>
      <category term="Category Theory"/>
      <category term="Developers"/>
      <category term="Formal Methods"/>
      <category term="Java"/>
      <category term="Object-Oriented"/>
      <category term="Technology"/>
      <category term="Architecture"/>
      <category term="Copyright"/>
      <category term="Distributed Computing"/>
      <category term="Europe"/>
      <category term="Productivity"/>
      <category term="Racket"/>
      <category term="Science Fiction"/>
      <category term="BLM"/>
      <category term="Brexit"/>
      <category term="DRM"/>
      <category term="Environment"/>
      <category term="Erlang"/>
      <category term="Finance"/>
      <category term="Gender"/>
      <category term="Theatre"/>
      <category term="BDS"/>
      <category term="Books"/>
      <category term="Cinema"/>
      <category term="Communication"/>
      <category term="Japan"/>
      <category term="Net Neutrality"/>
      <category term="Open Access"/>
      <category term="Palestine"/>
      <category term="Pyret"/>
      <category term="Scheme"/>
      <category term="Sweden"/>
      <author>
        <name>Philip Wadler</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/12009347515095774366</uri>
      </author>
      <link href="https://wadler.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom" rel="self" type="application/atom+xml"/>
      <link href="https://wadler.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom&amp;start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Wadler's Blog</title>
      <updated>2022-09-07T12:38:25Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2022:/prog/git/tips</id>
    <link href="https://blog.plover.com/prog/git/tips.html" rel="alternate" type="text/html"/>
    <title>Things I wish everyone knew about Git (Part I)</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>This is a writeup of
<a href="https://perl.plover.com/classes/git-tips/">a talk I gave in December</a> for
my previous employer. It's long so I'm publishing it in several parts:</p>

<ul>
<li><a href="https://blog.plover.com/prog/git/tips.html">Part I</a> (you are here):
<ul>
<li><a href="http://#gt-sec1">How to approach Git; general strategy</a></li>
<li><a href="http://#gt-sec2">Read <em>Git From the Bottom Up</em></a></li>
</ul></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html">Part II</a>: (coming later)
<ul>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec3">It is really hard to lose stuff</a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec4">But what if you do lose something?</a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec5">Finding old stuff with <code>git-reflog</code></a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec6">What if you can't find it?</a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec7">What if you regret something you did?</a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec8">Git leaves a trail</a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec9">A few things <em>can</em> be lost forever!</a></li>
<li><a href="https://blog.plover.com/prog/git/tips-2.html#gt-sec10"><code>git-rev-parse</code></a></li>
</ul></li>
<li>More coming later still:
<ul>
<li>Branches are fictitious</li>
<li>Committing partial changes</li>
<li>Push and fetch; tracking branches</li>
<li>Aliases and custom commands</li>
</ul></li>
</ul>

<p><a name="gt-sec1">‌</a></p>

<h2>How to approach Git; general strategy</h2>

<p>Git has an elegant and powerful underlying model based on a few simple concepts:</p>

<ol>
<li>Commits are immutable snapshots of the repository</li>
<li>Branches are named sequences of commits</li>
<li>Every object has a unique ID, derived from its content</li>
</ol>

<p><a href="https://pic.blog.plover.com/prog/git/tips/cathedral-crop.jpg"><img alt="black and white white ink diagram of the elegant geometry of the floor plan of a cathedral" class="center" src="https://pic.blog.plover.com/prog/git/tips/cathedral-crop-th.jpg" style=""/></a></p>

<p>Built atop this elegant system is a flaming trash pile.</p>

<p><a href="https://pic.blog.plover.com/prog/git/tips/DumpsterFire.jpg"><img alt="literal dumpster fire" class="center" src="https://pic.blog.plover.com/prog/git/tips/DumpsterFire.jpg"/></a></p>

<p>The command set wasn't always well thought out, and then over the
years it grew by accretion, with new stuff piled on top of old stuff
that couldn't be changed because Backward Compatibility.  The commands
are non-orthogonal and when two commands perform the same task they
often have inconsistent options or are described with different
terminology.  Even when the individual commands don't conflict with
one another, they are often badly-designed and confusing.
<a href="https://blog.plover.com/prog/git-reset.html">The documentation is often very poorly written</a>.</p>

<h3>What this means</h3>

<p>With a lot of software, you can opt to use it at a surface level
without understanding it at a deeper level:</p>

<p align="center"><font color="maroon" size="+2">“I don't need to
know how it works.<br/>
I just want to know which commands to run.”</font></p>

<p>This is often an effective strategy, but</p>

<p align="center"><font color="maroon" size="+2">with Git, this does not
work.</font></p>

<p>You can't “just know which commands to run” because the commands do
not make sense!</p>

<p>To work effectively with Git, you must have a model of what the
repository is like, so that you can formulate questions like “is the
repo on this state or that state?” and “the repo is in this state, how
do I get it into that state?”.  At that point you look around for a
command that answers your question, and there are probably several
ways to do what you want.</p>

<p>But if you try to understand the commands <em>without</em> the model, you
will suffer, because the commands do not make sense.</p>

<p>Just a few examples:</p>

<ul>
<li><p><code>git-reset</code> does up to three different things, depending on flags</p></li>
<li><p><code>git-checkout</code> is worse</p></li>
<li><p>The opposite of <code>git-push</code> is not <code>git-pull</code>, it's <code>git-fetch</code></p></li>
<li><p>etc.</p></li>
</ul>

<p>If you try to understand the commands without a clear idea of the
model, you'll be perpetually confused about what is happening and why,
and you won't know what questions to ask to find out what is going on.</p>

<p><a name="gt-sec2">‌</a></p>

<h2>READ THIS</h2>

<p>When I first used Git it drove me almost to tears of rage and
frustration.  But I did get it under control. I
don't love Git, but I use it every day, by choice, and I use it
effectively.</p>

<p>The magic key that rescued me was</p>

<p align="center"><a href="https://jwiegley.github.io/git-from-the-bottom-up/"><font color="darkgreen" size="+2">John Wiegley's<br/> <cite>Git From the
Bottom Up</cite></font></a></p>

<p><em>Git From the Bottom Up</em> explains the model.  I read it. After that I
wept no more.  I understood what was going on.  I knew how to try
things out and how to interpret what I saw. Even when I got
a surprise, I had a model to fit it into.</p>

<p><a href="https://jwiegley.github.io/git-from-the-bottom-up/">You should read it too</a>.</p>

<p>That's the best advice I have. Read Wiegley's explanation.  Set aside
time to go over it carefully and try out his examples.  It fixed me.</p>

<p>If I were going to tell every
programmer just one thing about Git, that would be it. </p>

<p>The rest of
this series is all downhill from here.</p>

<p>But
<a href="https://blog.plover.com/prog/two-things-about-git.html">if I were going to tell everyone just one more thing</a>,
it would be:</p>

<p align="center"><font color="darkgreen" size="+2">It is very hard to
permanently lose work.<br/>
If something seems to have gone wrong, don't panic.<br/>
Remain calm and ask an expert.</font></p>

<p><a href="https://blog.plover.com/prog/git/tips-2.html">Many more details about that are in the followup article.</a></p></div>
    </content>
    <updated>2022-06-29T17:16:00Z</updated>
    <published>2022-06-29T17:16:00Z</published>
    <category term="/prog/git"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml"/>
      <link href="https://blog.plover.com" rel="alternate" type="text/html"/>
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2022-09-13T02:12:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-1777990983847811806.post-810372623312147782</id>
    <link href="https://www.haskellforall.com/feeds/810372623312147782/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="https://www.haskellforall.com/2022/06/defaultable-map-applicative-wrapper-for.html#comment-form" rel="replies" title="0 Comments" type="text/html"/>
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/810372623312147782" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/810372623312147782" rel="self" type="application/atom+xml"/>
    <link href="https://www.haskellforall.com/2022/06/defaultable-map-applicative-wrapper-for.html" rel="alternate" title="defaultable-map: An Applicative wrapper for Maps" type="text/html"/>
    <title>defaultable-map: An Applicative wrapper for Maps</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">defaultable-map: An Applicative wrapper for Maps    <p>I’m announcing a small utility Haskell package I created that can wrap arbitrary <code>Map</code>-like types to provide <code>Applicative</code> and <code>Alternative</code> instances. You can find this package on Hackage here:</p><ul><li><a href="https://hackage.haskell.org/package/defaultable-map"><code>defaultable-map</code>: Applicative maps</a></li></ul><p>I can motivate why the <code>Applicative</code> and <code>Alternative</code> instances matter with a small example. Suppose that I define the following three <code>Map</code>s which are sort of like database tables:</p><div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-1" tabindex="-1"/><span class="kw">import</span> <span class="dt">Defaultable.Map</span> </span><br/><span id="cb1-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-2" tabindex="-1"/></span><br/><span id="cb1-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-3" tabindex="-1"/><span class="ot">firstNames ::</span> <span class="dt">Defaultable</span> (<span class="dt">Map</span> <span class="dt">Int</span>) <span class="dt">String</span></span><br/><span id="cb1-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-4" tabindex="-1"/>firstNames <span class="ot">=</span> fromList [(<span class="dv">0</span>, <span class="st">"Gabriella"</span>), (<span class="dv">1</span>, <span class="st">"Oscar"</span>), (<span class="dv">2</span>, <span class="st">"Edgar"</span>)]</span><br/><span id="cb1-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-5" tabindex="-1"/></span><br/><span id="cb1-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-6" tabindex="-1"/><span class="ot">lastNames ::</span> <span class="dt">Defaultable</span> (<span class="dt">Map</span> <span class="dt">Int</span>) <span class="dt">String</span></span><br/><span id="cb1-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-7" tabindex="-1"/>lastNames <span class="ot">=</span> fromList [(<span class="dv">0</span>, <span class="st">"Gonzalez"</span>), (<span class="dv">2</span>, <span class="st">"Codd"</span>), (<span class="dv">3</span>, <span class="st">"Bryant"</span>)]</span><br/><span id="cb1-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-8" tabindex="-1"/></span><br/><span id="cb1-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-9" tabindex="-1"/><span class="ot">handles ::</span> <span class="dt">Defaultable</span> (<span class="dt">Map</span> <span class="dt">Int</span>) <span class="dt">String</span></span><br/><span id="cb1-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-10" tabindex="-1"/>handles <span class="ot">=</span> fromList [(<span class="dv">0</span>, <span class="st">"GabriellaG439"</span>), (<span class="dv">1</span>, <span class="st">"posco"</span>), (<span class="dv">3</span>, <span class="st">"avibryant"</span>)]</span></code></pre></div><p>If you squint, you can think of these as analogous to database tables, where the primary key is an <code>Int</code> index:</p><div class="sourceCode" id="cb2"><pre class="sourceCode sql"><code class="sourceCode sql"><span id="cb2-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-1" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">CREATE</span> <span class="kw">TABLE</span> firstNames (<span class="kw">id</span> <span class="dt">integer</span>, firstName text);</span><br/><span id="cb2-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-2" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">INSERT</span> <span class="kw">INTO</span> firstNames (<span class="kw">id</span>, firstName) <span class="kw">VALUES</span> (<span class="dv">0</span>, <span class="st">'Gabriella'</span>);</span><br/><span id="cb2-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-3" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">INSERT</span> <span class="kw">INTO</span> firstNames (<span class="kw">id</span>, firstName) <span class="kw">VALUES</span> (<span class="dv">1</span>, <span class="st">'Oscar'</span>);</span><br/><span id="cb2-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-4" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">INSERT</span> <span class="kw">INTO</span> firstNames (<span class="kw">id</span>, firstName) <span class="kw">VALUES</span> (<span class="dv">2</span>, <span class="st">'Edgar'</span>);</span><br/><span id="cb2-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-5" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">SELECT</span> <span class="op">*</span> <span class="kw">FROM</span> firstNames;</span><br/><span id="cb2-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-6" tabindex="-1"/><span class="kw">id</span> | firstName</span><br/><span id="cb2-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-7" tabindex="-1"/><span class="co">---+----------</span></span><br/><span id="cb2-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-8" tabindex="-1"/><span class="dv">0</span>  | Gabriella</span><br/><span id="cb2-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-9" tabindex="-1"/><span class="dv">1</span>  | Oscar</span><br/><span id="cb2-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-10" tabindex="-1"/><span class="dv">2</span>  | Edgar</span><br/><span id="cb2-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-11" tabindex="-1"/></span><br/><span id="cb2-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-12" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">CREATE</span> <span class="kw">TABLE</span> lastNames (<span class="kw">id</span> <span class="dt">integer</span>, lastName text);</span><br/><span id="cb2-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-13" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">INSERT</span> <span class="kw">INTO</span> lastNames (<span class="kw">id</span>, lastName) <span class="kw">VALUES</span> (<span class="dv">0</span>, <span class="st">'Gonzalez'</span>);</span><br/><span id="cb2-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-14" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">INSERT</span> <span class="kw">INTO</span> lastNames (<span class="kw">id</span>, lastName) <span class="kw">VALUES</span> (<span class="dv">2</span>, <span class="st">'Codd'</span>);</span><br/><span id="cb2-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-15" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">INSERT</span> <span class="kw">INTO</span> lastNames (<span class="kw">id</span>, lastName) <span class="kw">VALUES</span> (<span class="dv">3</span>, <span class="st">'Bryant'</span>);</span><br/><span id="cb2-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-16" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">SELECT</span> <span class="op">*</span> <span class="kw">FROM</span> lastNames;</span><br/><span id="cb2-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-17" tabindex="-1"/><span class="kw">id</span> | lastName</span><br/><span id="cb2-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-18" tabindex="-1"/><span class="co">---+---------</span></span><br/><span id="cb2-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-19" tabindex="-1"/><span class="dv">0</span>  | Gonzalez</span><br/><span id="cb2-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-20" tabindex="-1"/><span class="dv">2</span>  | Codd</span><br/><span id="cb2-21"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-21" tabindex="-1"/><span class="dv">3</span>  | Bryant</span><br/><span id="cb2-22"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-22" tabindex="-1"/></span><br/><span id="cb2-23"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-23" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">CREATE</span> <span class="kw">TABLE</span> handles (<span class="kw">id</span> <span class="dt">integer</span>, handle text);</span><br/><span id="cb2-24"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-24" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">INSERT</span> <span class="kw">INTO</span> handles (<span class="kw">id</span>, handle) <span class="kw">VALUES</span> (<span class="dv">0</span>, <span class="st">'GabriellaG439'</span>);</span><br/><span id="cb2-25"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-25" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">INSERT</span> <span class="kw">INTO</span> handles (<span class="kw">id</span>, handle) <span class="kw">VALUES</span> (<span class="dv">1</span>, <span class="st">'posco'</span>);</span><br/><span id="cb2-26"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-26" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">INSERT</span> <span class="kw">INTO</span> handles (<span class="kw">id</span>, handle) <span class="kw">VALUES</span> (<span class="dv">3</span>, <span class="st">'avibryant'</span>);</span><br/><span id="cb2-27"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-27" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">SELECT</span> <span class="op">*</span> <span class="kw">FROM</span> handles;</span><br/><span id="cb2-28"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-28" tabindex="-1"/><span class="kw">id</span> | handle</span><br/><span id="cb2-29"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-29" tabindex="-1"/><span class="co">---+--------------</span></span><br/><span id="cb2-30"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-30" tabindex="-1"/><span class="dv">0</span>  | GabriellaG439</span><br/><span id="cb2-31"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-31" tabindex="-1"/><span class="dv">1</span>  | posco</span><br/><span id="cb2-32"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-32" tabindex="-1"/><span class="dv">3</span>  | avibryant</span></code></pre></div><p>The <code>Defaultable (Map Int)</code> type has a law-abiding <code>Applicative</code> instance, so we can safely “join” these “tables” using <code>Applicative</code> operations. For example, if we enable Haskell’s <code>ApplicativeDo</code> language extension then we can compute an “inner join” on tables like this:</p><div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-1" tabindex="-1"/><span class="ot">{-# LANGUAGE ApplicativeDo #-}</span></span><br/><span id="cb3-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-2" tabindex="-1"/></span><br/><span id="cb3-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-3" tabindex="-1"/><span class="ot">innerJoin ::</span> <span class="dt">Defaultable</span> (<span class="dt">Map</span> <span class="dt">Int</span>) (<span class="dt">String</span>, <span class="dt">String</span>)</span><br/><span id="cb3-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-4" tabindex="-1"/>innerJoin <span class="ot">=</span> <span class="kw">do</span></span><br/><span id="cb3-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-5" tabindex="-1"/>    firstName <span class="ot">&lt;-</span> firstNames</span><br/><span id="cb3-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-6" tabindex="-1"/>    lastName  <span class="ot">&lt;-</span> lastNames</span><br/><span id="cb3-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-7" tabindex="-1"/>    <span class="fu">return</span> (firstName, lastName)</span></code></pre></div><p>… and that evaluates to the following result:</p><div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-1" tabindex="-1"/><span class="dt">Defaultable</span></span><br/><span id="cb4-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-2" tabindex="-1"/>    (fromList</span><br/><span id="cb4-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-3" tabindex="-1"/>        [ (<span class="dv">0</span>, (<span class="st">"Gabriella"</span>,<span class="st">"Gonzalez"</span>))</span><br/><span id="cb4-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-4" tabindex="-1"/>        , (<span class="dv">2</span>, (<span class="st">"Edgar"</span>    ,<span class="st">"Codd"</span>    ))</span><br/><span id="cb4-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-5" tabindex="-1"/>        ]</span><br/><span id="cb4-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-6" tabindex="-1"/>    )</span><br/><span id="cb4-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-7" tabindex="-1"/>    <span class="dt">Nothing</span></span></code></pre></div><p>… which is the same result we would have gotten from doing an inner join in SQL:</p><div class="sourceCode" id="cb5"><pre class="sourceCode sql"><code class="sourceCode sql"><span id="cb5-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-1" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">SELECT</span> firstNames.<span class="kw">id</span>, firstName, lastName</span><br/><span id="cb5-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-2" tabindex="-1"/><span class="op">&gt;</span>     <span class="kw">FROM</span> firstNames <span class="kw">INNER</span> <span class="kw">JOIN</span> lastNames <span class="kw">on</span> firstNames.<span class="kw">id</span> <span class="op">=</span> lastNames.<span class="kw">id</span>;</span><br/><span id="cb5-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-3" tabindex="-1"/><span class="kw">id</span> | firstName | lastName</span><br/><span id="cb5-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-4" tabindex="-1"/><span class="co">---+-----------+---------</span></span><br/><span id="cb5-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-5" tabindex="-1"/><span class="dv">0</span>  | Gabriella | Gonzalez</span><br/><span id="cb5-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-6" tabindex="-1"/><span class="dv">2</span>  | Edgar     | Codd</span></code></pre></div><p>The <code>Defaultable (Map Int)</code> type also has a law-abiding <code>Alternative</code> instance, which we can combine with the <code>Applicative</code> instance to compute “left/right/outer joins”. For example, this “left join”:</p><div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-1" tabindex="-1"/><span class="ot">leftJoin ::</span> <span class="dt">Defaultable</span> (<span class="dt">Map</span> <span class="dt">Int</span>) (<span class="dt">String</span>, <span class="dt">Maybe</span> <span class="dt">String</span>)</span><br/><span id="cb6-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-2" tabindex="-1"/>leftJoin <span class="ot">=</span> <span class="kw">do</span></span><br/><span id="cb6-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-3" tabindex="-1"/>    firstName <span class="ot">&lt;-</span> firstNames</span><br/><span id="cb6-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-4" tabindex="-1"/>    lastName  <span class="ot">&lt;-</span> optional lastNames</span><br/><span id="cb6-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-5" tabindex="-1"/>    <span class="fu">return</span> (firstName, lastName)</span></code></pre></div><p>… evaluates to:</p><div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-1" tabindex="-1"/><span class="dt">Defaultable</span></span><br/><span id="cb7-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-2" tabindex="-1"/>    (fromList</span><br/><span id="cb7-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-3" tabindex="-1"/>        [ (<span class="dv">0</span>, (<span class="st">"Gabriella"</span>,<span class="dt">Just</span> <span class="st">"Gonzalez"</span>))</span><br/><span id="cb7-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-4" tabindex="-1"/>        , (<span class="dv">1</span>, (<span class="st">"Oscar"</span>    ,<span class="dt">Nothing</span>        ))</span><br/><span id="cb7-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-5" tabindex="-1"/>        , (<span class="dv">2</span>, (<span class="st">"Edgar"</span>    ,<span class="dt">Just</span> <span class="st">"Codd"</span>    ))</span><br/><span id="cb7-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-6" tabindex="-1"/>        ]</span><br/><span id="cb7-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-7" tabindex="-1"/>    )</span><br/><span id="cb7-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-8" tabindex="-1"/>    <span class="dt">Nothing</span></span></code></pre></div><p>… which is analogous to this SQL left join:</p><div class="sourceCode" id="cb8"><pre class="sourceCode sql"><code class="sourceCode sql"><span id="cb8-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-1" tabindex="-1"/><span class="op">&gt;</span> <span class="kw">SELECT</span> firstNames.<span class="kw">id</span>, firstName, lastName</span><br/><span id="cb8-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-2" tabindex="-1"/><span class="op">&gt;</span>     <span class="kw">FROM</span> firstNames <span class="kw">LEFT</span> <span class="kw">JOIN</span> lastNames <span class="kw">on</span> firstNames.<span class="kw">id</span> <span class="op">=</span> lastNames.<span class="kw">id</span>;</span><br/><span id="cb8-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-3" tabindex="-1"/><span class="kw">id</span> | firstName | lastName</span><br/><span id="cb8-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-4" tabindex="-1"/><span class="co">---+-----------+---------</span></span><br/><span id="cb8-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-5" tabindex="-1"/><span class="dv">0</span>  | Gabriella | Gonzalez</span><br/><span id="cb8-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-6" tabindex="-1"/><span class="dv">1</span>  | Oscar     |</span><br/><span id="cb8-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-7" tabindex="-1"/><span class="dv">2</span>  | Edgar     | Codd</span></code></pre></div><p>Since Haskell is a more fully-featured language than SQL, we can do more sophisticated things more easily than in SQL. For example, the following three-way join with some post-processing logic is much easier to express in Haskell than SQL:</p><div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-1" tabindex="-1"/><span class="ot">display ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span><br/><span id="cb9-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-2" tabindex="-1"/>display firstName <span class="dt">Nothing</span> handle <span class="ot">=</span></span><br/><span id="cb9-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-3" tabindex="-1"/>    firstName <span class="op">&lt;&gt;</span> <span class="st">": @"</span> <span class="op">&lt;&gt;</span> handle</span><br/><span id="cb9-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-4" tabindex="-1"/>display firstName (<span class="dt">Just</span> lastName) handle <span class="ot">=</span></span><br/><span id="cb9-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-5" tabindex="-1"/>    firstName <span class="op">&lt;&gt;</span> <span class="st">" "</span> <span class="op">&lt;&gt;</span> lastName <span class="op">&lt;&gt;</span> <span class="st">": @"</span> <span class="op">&lt;&gt;</span> handle</span><br/><span id="cb9-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-6" tabindex="-1"/></span><br/><span id="cb9-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-7" tabindex="-1"/><span class="ot">interestingJoin ::</span> <span class="dt">Defaultable</span> (<span class="dt">Map</span> <span class="dt">Int</span>) <span class="dt">String</span></span><br/><span id="cb9-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-8" tabindex="-1"/>interestingJoin <span class="ot">=</span> <span class="kw">do</span></span><br/><span id="cb9-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-9" tabindex="-1"/>    firstName <span class="ot">&lt;-</span> firstNames</span><br/><span id="cb9-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-10" tabindex="-1"/>    lastName  <span class="ot">&lt;-</span> optional lastNames</span><br/><span id="cb9-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-11" tabindex="-1"/>    handle    <span class="ot">&lt;-</span> handles</span><br/><span id="cb9-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-12" tabindex="-1"/>    <span class="fu">return</span> (display firstName lastName handle)</span></code></pre></div><p>… which evaluates to:</p><div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-1" tabindex="-1"/><span class="dt">Defaultable</span></span><br/><span id="cb10-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-2" tabindex="-1"/>    (fromList</span><br/><span id="cb10-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-3" tabindex="-1"/>        [ (<span class="dv">0</span>, <span class="st">"Gabriella Gonzalez: @GabriellaG439"</span>)</span><br/><span id="cb10-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-4" tabindex="-1"/>        , (<span class="dv">1</span>, <span class="st">"Oscar: @posco"</span>                     )</span><br/><span id="cb10-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-5" tabindex="-1"/>        ]</span><br/><span id="cb10-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-6" tabindex="-1"/>    )</span><br/><span id="cb10-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-7" tabindex="-1"/>    <span class="dt">Nothing</span></span></code></pre></div><h4 id="the-defaultable-type-constructor">The <code>Defaultable</code> type constructor</h4><p>The central data type exported by the package is the <code>Defaultable</code> type constructor, which has the following simple definition:</p><div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb11-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">Defaultable</span> <span class="fu">map</span> value <span class="ot">=</span> <span class="dt">Defaultable</span> (<span class="fu">map</span> value) (<span class="dt">Maybe</span> value)</span></code></pre></div><p>Here the <code>map</code> type parameter can be any <code>Map</code>-like type that includes the type of the key. For example, a typical instantiation of the <code>Defaultable</code> type constructor might be <code>Defaultable (Map key) value</code> or <code>Defaultable IntMap value</code>.</p><p>The first field of the type is the actual map that you want to wrap in order to get an <code>Applicative</code> and <code>Alternative</code> instance. The second field is an optional default value stored alongside the map that can be returned if a <code>lookup</code> does not find a matching key.</p><p>The default value is not required (it can be <code>Nothing</code>), but that default value is what makes the <code>Applicative</code> instance work. Specifically, without the ability to specify a default value there would be no way to implement <code>pure</code> for a <code>Map</code>-like type.</p><p>In case you’re curious, here is what the <code>Applicative</code> instance looks like:</p><div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-1" tabindex="-1"/><span class="kw">instance</span> (<span class="dt">Apply</span> <span class="fu">map</span>, <span class="kw">forall</span> a <span class="op">.</span> <span class="dt">Monoid</span> (<span class="fu">map</span> a)) <span class="ot">=&gt;</span> <span class="dt">Applicative</span> (<span class="dt">Defaultable</span> <span class="fu">map</span>)</span><br/><span id="cb12-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-2" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb12-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-3" tabindex="-1"/>    <span class="fu">pure</span> v <span class="ot">=</span> <span class="dt">Defaultable</span> <span class="fu">mempty</span> (<span class="fu">pure</span> v)</span><br/><span id="cb12-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-4" tabindex="-1"/></span><br/><span id="cb12-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-5" tabindex="-1"/>    <span class="dt">Defaultable</span> fMap fDefault <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> xMap xDefault <span class="ot">=</span></span><br/><span id="cb12-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-6" tabindex="-1"/>        <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb12-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-7" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb12-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-8" tabindex="-1"/>        fxMap <span class="ot">=</span> (fMap <span class="op">&lt;.&gt;</span> xMap) <span class="op">&lt;&gt;</span> fFallback <span class="op">&lt;&gt;</span> xFallback</span><br/><span id="cb12-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-9" tabindex="-1"/>          <span class="kw">where</span></span><br/><span id="cb12-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-10" tabindex="-1"/>            fFallback <span class="ot">=</span></span><br/><span id="cb12-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-11" tabindex="-1"/>                <span class="kw">case</span> fDefault <span class="kw">of</span></span><br/><span id="cb12-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-12" tabindex="-1"/>                    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb12-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-13" tabindex="-1"/>                    <span class="dt">Just</span> f  <span class="ot">-&gt;</span> <span class="fu">fmap</span> f xMap</span><br/><span id="cb12-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-14" tabindex="-1"/></span><br/><span id="cb12-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-15" tabindex="-1"/>            xFallback <span class="ot">=</span></span><br/><span id="cb12-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-16" tabindex="-1"/>                <span class="kw">case</span> xDefault <span class="kw">of</span></span><br/><span id="cb12-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-17" tabindex="-1"/>                    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb12-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-18" tabindex="-1"/>                    <span class="dt">Just</span> x  <span class="ot">-&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> x) fMap</span><br/><span id="cb12-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-19" tabindex="-1"/></span><br/><span id="cb12-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-20" tabindex="-1"/>        fxDefault <span class="ot">=</span> fDefault <span class="op">&lt;*&gt;</span> xDefault</span></code></pre></div><p>The neat part of the above instance is the class constraint:</p><div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-1" tabindex="-1"/>          ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br/><span id="cb13-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-2" tabindex="-1"/><span class="kw">instance</span> (<span class="dt">Apply</span> <span class="fu">map</span>, <span class="kw">forall</span> a <span class="op">.</span> <span class="dt">Monoid</span> (<span class="fu">map</span> a)) <span class="ot">=&gt;</span> <span class="dt">Applicative</span> (<span class="dt">Defaultable</span> <span class="fu">map</span>)</span></code></pre></div><p>The <code>Defaultable</code> type is set up in such a way that you can wrap any <code>Map</code>-like type that satisfies that constraint (which is basically all of them) and get a law-abiding <code>Applicative</code> instance (See the <a href="https://www.haskellforall.com/feeds/posts/default#appendix---proof-of-the-applicative-laws">Appendix</a> for a proof of the <code>Applicative</code> laws).</p><p>In particular, this constraint makes use of <a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/quantified_constraints.html">the <code>QuantifiedConstraints</code> language extension</a> introduced in GHC 8.6. Without that instance then we wouldn’t be able to generalize this type to wrap arbitrary <code>Map</code>s and we’d have to hard-code the package to work with a specific <code>Map</code> like <code>Data.Map.Map</code>.</p><p>The <code>Defaultable</code> type also implements <code>Alternative</code>, too, although that instance is much simpler:</p><div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-1" tabindex="-1"/><span class="kw">instance</span> (<span class="dt">Apply</span> <span class="fu">map</span>, <span class="kw">forall</span> a <span class="op">.</span> <span class="dt">Monoid</span> (<span class="fu">map</span> a)) <span class="ot">=&gt;</span> <span class="dt">Alternative</span> (<span class="dt">Defaultable</span> <span class="fu">map</span>) <span class="kw">where</span></span><br/><span id="cb14-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-2" tabindex="-1"/>    empty <span class="ot">=</span> <span class="dt">Defaultable</span> <span class="fu">mempty</span> empty</span><br/><span id="cb14-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-3" tabindex="-1"/></span><br/><span id="cb14-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-4" tabindex="-1"/>    <span class="dt">Defaultable</span> lMap lDefault <span class="op">&lt;|&gt;</span> <span class="dt">Defaultable</span> rMap rDefault <span class="ot">=</span></span><br/><span id="cb14-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-5" tabindex="-1"/>        <span class="dt">Defaultable</span> (lMap <span class="op">&lt;&gt;</span> rMap) (lDefault <span class="op">&lt;|&gt;</span> rDefault)</span></code></pre></div><p>This instance is only possible because the <code>Defaultable</code> type constructor doesn’t require the default value to be present. If the default value were required then we could not sensibly define <code>empty</code>.</p><h4 id="prior-art">Prior art</h4><p>I was surprised that something like this didn’t already exist on Hackage. The closest package I could find was this one:</p><ul><li><a href="https://hackage.haskell.org/package/total-map"><code>total-map</code>: Finitely represented total maps</a></li></ul><p>However, that wasn’t exactly what I wanted, because it requires the default value to be present. That means that you can’t implement an <code>Alternative</code> instance for the <code>TMap</code> type from that package and you therefore can’t do things like left/right/outer joins as I mentioned above.</p><p>Also, more generally, sometimes you want a <code>Map</code> to have an <code>Applicative</code> instance without having to specify a default value. Requiring the default to always be present is not necessary to implement <code>Applicative</code>.</p><p>The other issue I had with that package is that it’s hard-coded to use <code>Data.Map.Map</code> under the hood, whereas I wanted an API that could be used in conjunction with any <code>Map</code>-like type.</p><h4 id="conclusion">Conclusion</h4><p>The idea for this package originated from a LambdaConf presentation I gave a while ago where I brainstormed what a good “data science” ecosystem for Haskell might look like:</p><ul><li><a href="https://github.com/Gabriella439/slides/blob/main/lambdaconf/data/data.md#a-higher-level-api">Data science APIs in Haskell - slides</a></li></ul><p>I sat on this idea for years without publishing anything to Hackage because my original vision was a bit too ambitious and included much more than just an <code>Applicative</code> <code>Map</code> type. However, recently I needed this <code>Applicative</code> <code>Map</code> type, so I settled for publishing a narrower and more focused package to Hackage.</p><p>The personal use case I have in mind for this package is no longer data science, but I hope that people interested in building a data science ecosystem for Haskell consider using this package as a building block since I believe it is well-suited for that purpose.</p><h4 id="appendix---proof-of-the-applicative-laws">Appendix - Proof of the <code>Applicative</code> laws</h4><p>These proofs require a few additional assumptions about the interaction between the <code>Apply</code> and <code>Monoid</code> constraint on the <code>map</code> type parameter to <code>Defaultable</code>. These assumptions hold for <code>Map</code>-like types.</p><p>The first assumption is that <code>fmap</code> is a <code>Monoid</code> homomorphism:</p><div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb15-1" tabindex="-1"/><span class="fu">fmap</span> f <span class="fu">mempty</span> <span class="ot">=</span> <span class="fu">mempty</span></span><br/><span id="cb15-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb15-2" tabindex="-1"/></span><br/><span id="cb15-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb15-3" tabindex="-1"/><span class="fu">fmap</span> f (x <span class="op">&lt;&gt;</span> y) <span class="ot">=</span> <span class="fu">fmap</span> f x <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> f y</span></code></pre></div><p>The second assumption is that <code>f &lt;.&gt;</code> is a <code>Monoid</code> homorphism:</p><div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-1" tabindex="-1"/>f <span class="op">&lt;.&gt;</span> <span class="fu">mempty</span> <span class="ot">=</span> <span class="fu">mempty</span></span><br/><span id="cb16-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-2" tabindex="-1"/></span><br/><span id="cb16-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-3" tabindex="-1"/>f <span class="op">&lt;.&gt;</span> (x <span class="op">&lt;&gt;</span> y) <span class="ot">=</span> (f <span class="op">&lt;.&gt;</span> x) <span class="op">&lt;&gt;</span> (f <span class="op">&lt;.&gt;</span> y)</span></code></pre></div><p>The final assumption is specific to maps, which is:</p><div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-1" tabindex="-1"/><span class="co">-- Given:</span></span><br/><span id="cb17-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-2" tabindex="-1"/><span class="ot">mf ::</span> <span class="fu">map</span> (a <span class="ot">-&gt;</span> b)</span><br/><span id="cb17-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-3" tabindex="-1"/><span class="ot">mx ::</span> <span class="fu">map</span> a</span><br/><span id="cb17-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-4" tabindex="-1"/><span class="ot">kf ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> c</span><br/><span id="cb17-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-5" tabindex="-1"/><span class="ot">kx ::</span> a <span class="ot">-&gt;</span> c</span><br/><span id="cb17-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-6" tabindex="-1"/></span><br/><span id="cb17-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-7" tabindex="-1"/>  (mf <span class="op">&lt;.&gt;</span> mx) <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> kf mf <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> kx mx</span><br/><span id="cb17-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-8" tabindex="-1"/><span class="ot">=</span> (mf <span class="op">&lt;.&gt;</span> mx) <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> kx mx <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> kf mf</span></code></pre></div><p>The intuition here is if that <code>map</code> is a <code>Map</code>-like type constructor then we can think of those three expressions as having a set of keys associated with them, such that:</p><div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-1" tabindex="-1"/><span class="co">-- Given:</span></span><br/><span id="cb18-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-2" tabindex="-1"/><span class="ot">keys ::</span> <span class="fu">map</span> a <span class="ot">-&gt;</span> <span class="dt">Set</span> key</span><br/><span id="cb18-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-3" tabindex="-1"/></span><br/><span id="cb18-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-4" tabindex="-1"/>keys (mf <span class="op">&lt;.&gt;</span> mx) <span class="ot">=</span> keys (<span class="fu">fmap</span> kf mf) <span class="ot">`intersection`</span> keys (<span class="fu">fmap</span> kx mx)</span></code></pre></div><p>So normally the following equality would not be true:</p><pre><code>  fmap kf mf &lt;&gt; fmap kx mx<br/>= fmap kx mx &lt;&gt; fmap kf mf</code></pre><p>… because the result would change if there was a key collision. Then the order in which we union (<code>&lt;&gt;</code>) the two maps would change the result.</p><p>However, if you union yet another map (<code>mf &lt;.&gt; mx</code>) that shadows the colliding keys then result remains the same.</p><p>The proof below uses that assumption a bit less formally by just noting that we can commute a union operation if there is a downstream union operation that would shadow any colliding keys that might differ.</p><h5 id="proof-of-identity-law">Proof of identity law</h5><div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-1" tabindex="-1"/><span class="fu">pure</span> <span class="fu">id</span> <span class="op">&lt;*&gt;</span> v</span><br/><span id="cb20-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-2" tabindex="-1"/></span><br/><span id="cb20-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-3" tabindex="-1"/><span class="co">-- pure v = Defaultable mempty (pure v)</span></span><br/><span id="cb20-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-4" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> <span class="fu">mempty</span> (<span class="fu">pure</span> <span class="fu">id</span>) <span class="op">&lt;*&gt;</span> v</span><br/><span id="cb20-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-5" tabindex="-1"/></span><br/><span id="cb20-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-6" tabindex="-1"/><span class="co">-- Expand: v = Defaultable xMap xDefault</span></span><br/><span id="cb20-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-7" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> <span class="fu">mempty</span> (<span class="fu">pure</span> <span class="fu">id</span>) <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> xMap xDefault</span><br/><span id="cb20-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-8" tabindex="-1"/></span><br/><span id="cb20-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-9" tabindex="-1"/><span class="co">-- Definition of (&lt;*&gt;)</span></span><br/><span id="cb20-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-10" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb20-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-11" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb20-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-12" tabindex="-1"/>    fxMap <span class="ot">=</span> (<span class="fu">mempty</span> <span class="op">&lt;.&gt;</span> xMap) <span class="op">&lt;&gt;</span> fFallback <span class="op">&lt;&gt;</span> xFallback</span><br/><span id="cb20-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-13" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb20-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-14" tabindex="-1"/>        fFallback <span class="ot">=</span></span><br/><span id="cb20-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-15" tabindex="-1"/>            <span class="kw">case</span> <span class="fu">pure</span> <span class="fu">id</span> <span class="kw">of</span></span><br/><span id="cb20-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-16" tabindex="-1"/>                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb20-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-17" tabindex="-1"/>                <span class="dt">Just</span> f  <span class="ot">-&gt;</span> <span class="fu">fmap</span> f xMap</span><br/><span id="cb20-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-18" tabindex="-1"/></span><br/><span id="cb20-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-19" tabindex="-1"/>        xFallback <span class="ot">=</span></span><br/><span id="cb20-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-20" tabindex="-1"/>            <span class="kw">case</span> xDefault <span class="kw">of</span></span><br/><span id="cb20-21"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-21" tabindex="-1"/>                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb20-22"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-22" tabindex="-1"/>                <span class="dt">Just</span> x  <span class="ot">-&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> x) <span class="fu">mempty</span></span><br/><span id="cb20-23"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-23" tabindex="-1"/></span><br/><span id="cb20-24"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-24" tabindex="-1"/>    fxDefault <span class="ot">=</span> <span class="fu">pure</span> <span class="fu">id</span> <span class="op">&lt;*&gt;</span> xDefault</span><br/><span id="cb20-25"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-25" tabindex="-1"/></span><br/><span id="cb20-26"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-26" tabindex="-1"/><span class="co">-- mempty &lt;.&gt; xMap = mempty</span></span><br/><span id="cb20-27"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-27" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb20-28"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-28" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb20-29"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-29" tabindex="-1"/>    fxMap <span class="ot">=</span> <span class="fu">mempty</span> <span class="op">&lt;&gt;</span> fFallback <span class="op">&lt;&gt;</span> xFallback</span><br/><span id="cb20-30"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-30" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb20-31"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-31" tabindex="-1"/>        fFallback <span class="ot">=</span></span><br/><span id="cb20-32"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-32" tabindex="-1"/>            <span class="kw">case</span> <span class="fu">pure</span> <span class="fu">id</span> <span class="kw">of</span></span><br/><span id="cb20-33"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-33" tabindex="-1"/>                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb20-34"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-34" tabindex="-1"/>                <span class="dt">Just</span> f  <span class="ot">-&gt;</span> <span class="fu">fmap</span> f xMap</span><br/><span id="cb20-35"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-35" tabindex="-1"/></span><br/><span id="cb20-36"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-36" tabindex="-1"/>        xFallback <span class="ot">=</span></span><br/><span id="cb20-37"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-37" tabindex="-1"/>            <span class="kw">case</span> xDefault <span class="kw">of</span></span><br/><span id="cb20-38"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-38" tabindex="-1"/>                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb20-39"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-39" tabindex="-1"/>                <span class="dt">Just</span> x  <span class="ot">-&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> x) <span class="fu">mempty</span></span><br/><span id="cb20-40"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-40" tabindex="-1"/></span><br/><span id="cb20-41"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-41" tabindex="-1"/>    fxDefault <span class="ot">=</span> <span class="fu">pure</span> <span class="fu">id</span> <span class="op">&lt;*&gt;</span> xDefault</span><br/><span id="cb20-42"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-42" tabindex="-1"/></span><br/><span id="cb20-43"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-43" tabindex="-1"/><span class="co">-- Simplify `case pure id of …`</span></span><br/><span id="cb20-44"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-44" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb20-45"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-45" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb20-46"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-46" tabindex="-1"/>    fxMap <span class="ot">=</span> <span class="fu">mempty</span> <span class="op">&lt;&gt;</span> fFallback <span class="op">&lt;&gt;</span> xFallback</span><br/><span id="cb20-47"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-47" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb20-48"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-48" tabindex="-1"/>        fFallback <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">id</span> xMap</span><br/><span id="cb20-49"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-49" tabindex="-1"/></span><br/><span id="cb20-50"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-50" tabindex="-1"/>        xFallback <span class="ot">=</span></span><br/><span id="cb20-51"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-51" tabindex="-1"/>            <span class="kw">case</span> xDefault <span class="kw">of</span></span><br/><span id="cb20-52"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-52" tabindex="-1"/>                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb20-53"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-53" tabindex="-1"/>                <span class="dt">Just</span> x  <span class="ot">-&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> x) <span class="fu">mempty</span></span><br/><span id="cb20-54"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-54" tabindex="-1"/></span><br/><span id="cb20-55"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-55" tabindex="-1"/>    fxDefault <span class="ot">=</span> <span class="fu">pure</span> <span class="fu">id</span> <span class="op">&lt;*&gt;</span> xDefault</span><br/><span id="cb20-56"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-56" tabindex="-1"/></span><br/><span id="cb20-57"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-57" tabindex="-1"/><span class="co">-- fmap id x = x</span></span><br/><span id="cb20-58"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-58" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb20-59"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-59" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb20-60"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-60" tabindex="-1"/>    fxMap <span class="ot">=</span> <span class="fu">mempty</span> <span class="op">&lt;&gt;</span> fFallback <span class="op">&lt;&gt;</span> xFallback</span><br/><span id="cb20-61"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-61" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb20-62"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-62" tabindex="-1"/>        fFallback <span class="ot">=</span> xMap</span><br/><span id="cb20-63"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-63" tabindex="-1"/></span><br/><span id="cb20-64"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-64" tabindex="-1"/>        xFallback <span class="ot">=</span></span><br/><span id="cb20-65"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-65" tabindex="-1"/>            <span class="kw">case</span> xDefault <span class="kw">of</span></span><br/><span id="cb20-66"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-66" tabindex="-1"/>                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb20-67"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-67" tabindex="-1"/>                <span class="dt">Just</span> x  <span class="ot">-&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> x) <span class="fu">mempty</span></span><br/><span id="cb20-68"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-68" tabindex="-1"/></span><br/><span id="cb20-69"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-69" tabindex="-1"/>    fxDefault <span class="ot">=</span> <span class="fu">pure</span> <span class="fu">id</span> <span class="op">&lt;*&gt;</span> xDefault</span><br/><span id="cb20-70"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-70" tabindex="-1"/></span><br/><span id="cb20-71"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-71" tabindex="-1"/><span class="co">-- fmap f mempty = mempty</span></span><br/><span id="cb20-72"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-72" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb20-73"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-73" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb20-74"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-74" tabindex="-1"/>    fxMap <span class="ot">=</span> <span class="fu">mempty</span> <span class="op">&lt;</span> <span class="op">&gt;</span>fFallback <span class="op">&lt;&gt;</span> xFallback</span><br/><span id="cb20-75"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-75" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb20-76"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-76" tabindex="-1"/>        fFallback <span class="ot">=</span> xMap</span><br/><span id="cb20-77"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-77" tabindex="-1"/></span><br/><span id="cb20-78"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-78" tabindex="-1"/>        xFallback <span class="ot">=</span></span><br/><span id="cb20-79"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-79" tabindex="-1"/>            <span class="kw">case</span> xDefault <span class="kw">of</span></span><br/><span id="cb20-80"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-80" tabindex="-1"/>                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb20-81"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-81" tabindex="-1"/>                <span class="dt">Just</span> x  <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb20-82"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-82" tabindex="-1"/></span><br/><span id="cb20-83"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-83" tabindex="-1"/>    fxDefault <span class="ot">=</span> <span class="fu">pure</span> <span class="fu">id</span> <span class="op">&lt;*&gt;</span> xDefault</span><br/><span id="cb20-84"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-84" tabindex="-1"/></span><br/><span id="cb20-85"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-85" tabindex="-1"/><span class="co">-- pure id &lt;*&gt; v = v</span></span><br/><span id="cb20-86"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-86" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb20-87"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-87" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb20-88"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-88" tabindex="-1"/>    fxMap <span class="ot">=</span> <span class="fu">mempty</span> <span class="op">&lt;&gt;</span> fFallback <span class="op">&lt;&gt;</span> xFallback</span><br/><span id="cb20-89"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-89" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb20-90"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-90" tabindex="-1"/>        fFallback <span class="ot">=</span> xMap</span><br/><span id="cb20-91"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-91" tabindex="-1"/></span><br/><span id="cb20-92"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-92" tabindex="-1"/>        xFallback <span class="ot">=</span></span><br/><span id="cb20-93"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-93" tabindex="-1"/>            <span class="kw">case</span> xDefault <span class="kw">of</span></span><br/><span id="cb20-94"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-94" tabindex="-1"/>                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb20-95"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-95" tabindex="-1"/>                <span class="dt">Just</span> x  <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb20-96"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-96" tabindex="-1"/></span><br/><span id="cb20-97"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-97" tabindex="-1"/>    fxDefault <span class="ot">=</span> xDefault</span><br/><span id="cb20-98"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-98" tabindex="-1"/></span><br/><span id="cb20-99"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-99" tabindex="-1"/><span class="co">-- Simplify</span></span><br/><span id="cb20-100"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-100" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb20-101"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-101" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb20-102"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-102" tabindex="-1"/>    fxMap <span class="ot">=</span> <span class="fu">mempty</span> <span class="op">&lt;&gt;</span> xMap <span class="op">&lt;&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb20-103"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-103" tabindex="-1"/></span><br/><span id="cb20-104"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-104" tabindex="-1"/>    fxDefault <span class="ot">=</span> xDefault</span><br/><span id="cb20-105"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-105" tabindex="-1"/></span><br/><span id="cb20-106"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-106" tabindex="-1"/><span class="co">-- x &lt;&gt; mempty = x</span></span><br/><span id="cb20-107"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-107" tabindex="-1"/><span class="co">-- mempty &lt;&gt; x = x</span></span><br/><span id="cb20-108"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-108" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb20-109"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-109" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb20-110"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-110" tabindex="-1"/>    fxMap <span class="ot">=</span> xMap</span><br/><span id="cb20-111"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-111" tabindex="-1"/></span><br/><span id="cb20-112"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-112" tabindex="-1"/>    fxDefault <span class="ot">=</span> xDefault</span><br/><span id="cb20-113"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-113" tabindex="-1"/></span><br/><span id="cb20-114"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-114" tabindex="-1"/><span class="co">-- Simplify</span></span><br/><span id="cb20-115"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-115" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> xMap xDefault</span><br/><span id="cb20-116"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-116" tabindex="-1"/></span><br/><span id="cb20-117"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-117" tabindex="-1"/><span class="co">-- Contract: v = Defaultable xMap xDefault</span></span><br/><span id="cb20-118"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-118" tabindex="-1"/><span class="ot">=</span> v</span></code></pre></div><h5 id="proof-of-the-composition-law">Proof of the composition law</h5><div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-1" tabindex="-1"/><span class="fu">pure</span> (<span class="op">.</span>) <span class="op">&lt;*&gt;</span> u <span class="op">&lt;*&gt;</span> v <span class="op">&lt;*&gt;</span> w</span><br/><span id="cb21-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-2" tabindex="-1"/></span><br/><span id="cb21-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-3" tabindex="-1"/><span class="co">-- Expand:</span></span><br/><span id="cb21-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-4" tabindex="-1"/><span class="co">-- u = Defaultable uMap uDefault</span></span><br/><span id="cb21-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-5" tabindex="-1"/><span class="co">-- v = Defaultable vMap vDefault</span></span><br/><span id="cb21-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-6" tabindex="-1"/><span class="co">-- w = Defaultable wMap wDefault</span></span><br/><span id="cb21-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-7" tabindex="-1"/><span class="ot">=</span>       <span class="fu">pure</span> (<span class="op">.</span>)</span><br/><span id="cb21-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-8" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> uMap uDefault</span><br/><span id="cb21-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-9" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> vMap vDefault</span><br/><span id="cb21-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-10" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap wDefault</span><br/><span id="cb21-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-11" tabindex="-1"/></span><br/><span id="cb21-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-12" tabindex="-1"/><span class="co">-- pure v = Defaultable mempty (pure v)</span></span><br/><span id="cb21-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-13" tabindex="-1"/><span class="ot">=</span>       <span class="dt">Defaultable</span> <span class="fu">mempty</span> (<span class="fu">pure</span> (<span class="op">.</span>))</span><br/><span id="cb21-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-14" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> uMap uDefault</span><br/><span id="cb21-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-15" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> vMap vDefault</span><br/><span id="cb21-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-16" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap wDefault</span></code></pre></div><p>… before continuing, it’s easiest to prove all eight possible combinations of:</p><ul><li><code>uDefault</code> is <code>pure u</code> or <code>empty</code></li><li><code>vDefault</code> is <code>pure v</code> or <code>empty</code></li><li><code>wDefault</code> is <code>pure w</code> or <code>empty</code></li></ul><p>To avoid lots of repetition, I’ll only prove the most difficult case (where all defaults are present), since the other proofs are essentially subsets of that proof where some subterms disappear because they become <code>mempty</code>.</p><p>Case:</p><ul><li><code>uDefault = pure u</code></li><li><code>vDefault = pure v</code></li><li><code>wDefault = pure w</code></li></ul><div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-1" tabindex="-1"/><span class="ot">=</span>       <span class="dt">Defaultable</span> <span class="fu">mempty</span> (<span class="fu">pure</span> (<span class="op">.</span>))</span><br/><span id="cb22-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-2" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> uMap (<span class="fu">pure</span> u)</span><br/><span id="cb22-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-3" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> vMap (<span class="fu">pure</span> v)</span><br/><span id="cb22-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-4" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap (<span class="fu">pure</span> w)</span><br/><span id="cb22-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-5" tabindex="-1"/></span><br/><span id="cb22-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-6" tabindex="-1"/><span class="co">-- Definition of (&lt;*&gt;)</span></span><br/><span id="cb22-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-7" tabindex="-1"/><span class="ot">=</span>       (<span class="dt">Defaultable</span> cuMap cuDefault</span><br/><span id="cb22-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-8" tabindex="-1"/>          <span class="kw">where</span></span><br/><span id="cb22-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-9" tabindex="-1"/>            cuMap <span class="ot">=</span> (<span class="fu">mempty</span> <span class="op">&lt;.&gt;</span> uMap) <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> u) <span class="fu">mempty</span></span><br/><span id="cb22-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-10" tabindex="-1"/></span><br/><span id="cb22-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-11" tabindex="-1"/>            cuDefault <span class="ot">=</span> <span class="fu">pure</span> (<span class="op">.</span>) <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> u</span><br/><span id="cb22-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-12" tabindex="-1"/>        )</span><br/><span id="cb22-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-13" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> vMap (<span class="fu">pure</span> v)</span><br/><span id="cb22-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-14" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap (<span class="fu">pure</span> w)</span><br/><span id="cb22-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-15" tabindex="-1"/></span><br/><span id="cb22-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-16" tabindex="-1"/><span class="co">-- mempty &lt;.&gt; x = mempty</span></span><br/><span id="cb22-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-17" tabindex="-1"/><span class="ot">=</span>       (<span class="dt">Defaultable</span> cuMap cuDefault</span><br/><span id="cb22-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-18" tabindex="-1"/>          <span class="kw">where</span></span><br/><span id="cb22-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-19" tabindex="-1"/>            cuMap <span class="ot">=</span> <span class="fu">mempty</span> <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> u) <span class="fu">mempty</span></span><br/><span id="cb22-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-20" tabindex="-1"/></span><br/><span id="cb22-21"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-21" tabindex="-1"/>            cuDefault <span class="ot">=</span> <span class="fu">pure</span> (<span class="op">.</span>) <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> u</span><br/><span id="cb22-22"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-22" tabindex="-1"/>        )</span><br/><span id="cb22-23"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-23" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> vMap (<span class="fu">pure</span> v)</span><br/><span id="cb22-24"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-24" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap (<span class="fu">pure</span> w)</span><br/><span id="cb22-25"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-25" tabindex="-1"/></span><br/><span id="cb22-26"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-26" tabindex="-1"/><span class="co">-- fmap f mempty = mempty</span></span><br/><span id="cb22-27"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-27" tabindex="-1"/><span class="ot">=</span>       (<span class="dt">Defaultable</span> cuMap cuDefault</span><br/><span id="cb22-28"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-28" tabindex="-1"/>          <span class="kw">where</span></span><br/><span id="cb22-29"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-29" tabindex="-1"/>            cuMap <span class="ot">=</span> <span class="fu">mempty</span> <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb22-30"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-30" tabindex="-1"/></span><br/><span id="cb22-31"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-31" tabindex="-1"/>            cuDefault <span class="ot">=</span> <span class="fu">pure</span> (<span class="op">.</span>) <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> u</span><br/><span id="cb22-32"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-32" tabindex="-1"/>        )</span><br/><span id="cb22-33"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-33" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> vMap (<span class="fu">pure</span> v)</span><br/><span id="cb22-34"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-34" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap (<span class="fu">pure</span> w)</span><br/><span id="cb22-35"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-35" tabindex="-1"/></span><br/><span id="cb22-36"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-36" tabindex="-1"/><span class="co">-- pure f &lt;*&gt; pure x = pure (f x)</span></span><br/><span id="cb22-37"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-37" tabindex="-1"/><span class="ot">=</span>       (<span class="dt">Defaultable</span> cuMap cuDefault</span><br/><span id="cb22-38"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-38" tabindex="-1"/>          <span class="kw">where</span></span><br/><span id="cb22-39"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-39" tabindex="-1"/>            cuMap <span class="ot">=</span> <span class="fu">mempty</span> <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb22-40"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-40" tabindex="-1"/></span><br/><span id="cb22-41"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-41" tabindex="-1"/>            cuDefault <span class="ot">=</span> <span class="fu">pure</span> ((<span class="op">.</span>) u)</span><br/><span id="cb22-42"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-42" tabindex="-1"/>        )</span><br/><span id="cb22-43"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-43" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> vMap (<span class="fu">pure</span> v)</span><br/><span id="cb22-44"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-44" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap (<span class="fu">pure</span> w)</span><br/><span id="cb22-45"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-45" tabindex="-1"/></span><br/><span id="cb22-46"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-46" tabindex="-1"/><span class="co">-- x &lt;&gt; mempty = x</span></span><br/><span id="cb22-47"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-47" tabindex="-1"/><span class="co">-- mempty &lt;&gt; x = x</span></span><br/><span id="cb22-48"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-48" tabindex="-1"/><span class="ot">=</span>       (<span class="dt">Defaultable</span> cuMap cuDefault</span><br/><span id="cb22-49"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-49" tabindex="-1"/>          <span class="kw">where</span></span><br/><span id="cb22-50"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-50" tabindex="-1"/>            cuMap <span class="ot">=</span> <span class="fu">fmap</span> (<span class="op">.</span>) uMap</span><br/><span id="cb22-51"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-51" tabindex="-1"/></span><br/><span id="cb22-52"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-52" tabindex="-1"/>            cuDefault <span class="ot">=</span> <span class="fu">pure</span> ((<span class="op">.</span>) u)</span><br/><span id="cb22-53"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-53" tabindex="-1"/>        )</span><br/><span id="cb22-54"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-54" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> vMap (<span class="fu">pure</span> v)</span><br/><span id="cb22-55"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-55" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap (<span class="fu">pure</span> w)</span><br/><span id="cb22-56"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-56" tabindex="-1"/></span><br/><span id="cb22-57"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-57" tabindex="-1"/><span class="co">-- Simplify</span></span><br/><span id="cb22-58"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-58" tabindex="-1"/><span class="ot">=</span>       (<span class="dt">Defaultable</span> (<span class="fu">fmap</span> (<span class="op">.</span>) uMap) (<span class="fu">pure</span> (u <span class="op">.</span>)))</span><br/><span id="cb22-59"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-59" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> vMap (<span class="fu">pure</span> v)</span><br/><span id="cb22-60"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-60" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap (<span class="fu">pure</span> w)</span><br/><span id="cb22-61"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-61" tabindex="-1"/></span><br/><span id="cb22-62"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-62" tabindex="-1"/><span class="co">-- Definition of (&lt;*&gt;)</span></span><br/><span id="cb22-63"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-63" tabindex="-1"/><span class="ot">=</span>       (<span class="dt">Defaultable</span> cuvMap cuvDefault</span><br/><span id="cb22-64"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-64" tabindex="-1"/>          <span class="kw">where</span></span><br/><span id="cb22-65"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-65" tabindex="-1"/>            cuvMap <span class="ot">=</span></span><br/><span id="cb22-66"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-66" tabindex="-1"/>                    (<span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;.&gt;</span> vMap)</span><br/><span id="cb22-67"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-67" tabindex="-1"/>                <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span>) vMap</span><br/><span id="cb22-68"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-68" tabindex="-1"/>                <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> v) (<span class="fu">fmap</span> (<span class="op">.</span>) uMap)</span><br/><span id="cb22-69"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-69" tabindex="-1"/></span><br/><span id="cb22-70"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-70" tabindex="-1"/>            cuvDefault <span class="ot">=</span> <span class="fu">pure</span> (u <span class="op">.</span>) <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> v</span><br/><span id="cb22-71"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-71" tabindex="-1"/>        )</span><br/><span id="cb22-72"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-72" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap (<span class="fu">pure</span> w)</span><br/><span id="cb22-73"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-73" tabindex="-1"/></span><br/><span id="cb22-74"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-74" tabindex="-1"/><span class="co">-- fmap f (fmap g x) = fmap (f . g) x</span></span><br/><span id="cb22-75"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-75" tabindex="-1"/><span class="ot">=</span>       (<span class="dt">Defaultable</span> cuvMap cuvDefault</span><br/><span id="cb22-76"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-76" tabindex="-1"/>          <span class="kw">where</span></span><br/><span id="cb22-77"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-77" tabindex="-1"/>            cuvMap <span class="ot">=</span></span><br/><span id="cb22-78"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-78" tabindex="-1"/>                    (<span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;.&gt;</span> vMap)</span><br/><span id="cb22-79"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-79" tabindex="-1"/>                <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span>) vMap</span><br/><span id="cb22-80"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-80" tabindex="-1"/>                <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">.</span> v) uMap</span><br/><span id="cb22-81"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-81" tabindex="-1"/></span><br/><span id="cb22-82"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-82" tabindex="-1"/>            cuvDefault <span class="ot">=</span> <span class="fu">pure</span> (u <span class="op">.</span>) <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> v</span><br/><span id="cb22-83"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-83" tabindex="-1"/>        )</span><br/><span id="cb22-84"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-84" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap (<span class="fu">pure</span> w)</span><br/><span id="cb22-85"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-85" tabindex="-1"/></span><br/><span id="cb22-86"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-86" tabindex="-1"/><span class="co">-- ((.) u) = \v -&gt; u . v</span></span><br/><span id="cb22-87"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-87" tabindex="-1"/><span class="ot">=</span>       (<span class="dt">Defaultable</span> cuvMap cuvDefault</span><br/><span id="cb22-88"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-88" tabindex="-1"/>          <span class="kw">where</span></span><br/><span id="cb22-89"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-89" tabindex="-1"/>            cuvMap <span class="ot">=</span></span><br/><span id="cb22-90"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-90" tabindex="-1"/>                    (<span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;.&gt;</span> vMap)</span><br/><span id="cb22-91"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-91" tabindex="-1"/>                <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span>) vMap</span><br/><span id="cb22-92"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-92" tabindex="-1"/>                <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">.</span> v) uMap</span><br/><span id="cb22-93"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-93" tabindex="-1"/></span><br/><span id="cb22-94"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-94" tabindex="-1"/>            cuvDefault <span class="ot">=</span> <span class="fu">pure</span> (u <span class="op">.</span>) <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> v</span><br/><span id="cb22-95"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-95" tabindex="-1"/>        )</span><br/><span id="cb22-96"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-96" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap (<span class="fu">pure</span> w)</span><br/><span id="cb22-97"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-97" tabindex="-1"/></span><br/><span id="cb22-98"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-98" tabindex="-1"/><span class="co">-- pure f &lt;*&gt; pure x = pure (f x)</span></span><br/><span id="cb22-99"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-99" tabindex="-1"/><span class="ot">=</span>       (<span class="dt">Defaultable</span> cuvMap cuvDefault</span><br/><span id="cb22-100"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-100" tabindex="-1"/>          <span class="kw">where</span></span><br/><span id="cb22-101"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-101" tabindex="-1"/>            cuvMap <span class="ot">=</span></span><br/><span id="cb22-102"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-102" tabindex="-1"/>                    (<span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;.&gt;</span> vMap)</span><br/><span id="cb22-103"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-103" tabindex="-1"/>                <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span>) vMap</span><br/><span id="cb22-104"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-104" tabindex="-1"/>                <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">.</span> v) uMap</span><br/><span id="cb22-105"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-105" tabindex="-1"/></span><br/><span id="cb22-106"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-106" tabindex="-1"/>            cuvDefault <span class="ot">=</span> <span class="fu">pure</span> (u <span class="op">.</span> v)</span><br/><span id="cb22-107"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-107" tabindex="-1"/>        )</span><br/><span id="cb22-108"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-108" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap (<span class="fu">pure</span> w)</span><br/><span id="cb22-109"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-109" tabindex="-1"/></span><br/><span id="cb22-110"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-110" tabindex="-1"/><span class="co">-- Definition of (&lt;*&gt;)</span></span><br/><span id="cb22-111"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-111" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-112"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-112" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-113"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-113" tabindex="-1"/>    cuvwMap <span class="ot">=</span> (cuvMap <span class="op">&lt;.&gt;</span> wMap) <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (u <span class="op">.</span> v) wMap <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) cuvMap </span><br/><span id="cb22-114"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-114" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb22-115"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-115" tabindex="-1"/>        cuvMap <span class="ot">=</span></span><br/><span id="cb22-116"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-116" tabindex="-1"/>                (<span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;.&gt;</span> vMap)</span><br/><span id="cb22-117"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-117" tabindex="-1"/>            <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span>) vMap</span><br/><span id="cb22-118"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-118" tabindex="-1"/>            <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">.</span> v) uMap</span><br/><span id="cb22-119"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-119" tabindex="-1"/></span><br/><span id="cb22-120"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-120" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u <span class="op">.</span> v) <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> v</span><br/><span id="cb22-121"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-121" tabindex="-1"/></span><br/><span id="cb22-122"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-122" tabindex="-1"/><span class="co">-- (f &lt;&gt; g) &lt;.&gt; x = (f &lt;.&gt; x) &lt;&gt; (g &lt;.&gt; x)</span></span><br/><span id="cb22-123"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-123" tabindex="-1"/><span class="co">-- fmap f (x &lt;&gt; y) = fmap f x &lt;&gt; fmap f y</span></span><br/><span id="cb22-124"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-124" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-125"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-125" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-126"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-126" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-127"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-127" tabindex="-1"/>            (<span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;.&gt;</span> vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-128"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-128" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (<span class="fu">fmap</span> (u <span class="op">.</span>) vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-129"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-129" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (<span class="fu">fmap</span> (<span class="op">.</span> v) uMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-130"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-130" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span> v) wMap</span><br/><span id="cb22-131"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-131" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;.&gt;</span> vMap)</span><br/><span id="cb22-132"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-132" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (u <span class="op">.</span>) vMap)</span><br/><span id="cb22-133"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-133" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span> v) uMap)</span><br/><span id="cb22-134"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-134" tabindex="-1"/></span><br/><span id="cb22-135"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-135" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u <span class="op">.</span> v) <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> w</span><br/><span id="cb22-136"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-136" tabindex="-1"/></span><br/><span id="cb22-137"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-137" tabindex="-1"/><span class="co">-- pure f &lt;*&gt; pure x = pure (f x)</span></span><br/><span id="cb22-138"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-138" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-139"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-139" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-140"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-140" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-141"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-141" tabindex="-1"/>            (<span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;.&gt;</span> vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-142"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-142" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (<span class="fu">fmap</span> (u <span class="op">.</span>) vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-143"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-143" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (<span class="fu">fmap</span> (<span class="op">.</span> v) uMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-144"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-144" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span> v) wMap</span><br/><span id="cb22-145"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-145" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;.&gt;</span> vMap)</span><br/><span id="cb22-146"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-146" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (u <span class="op">.</span>) vMap)</span><br/><span id="cb22-147"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-147" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span> v) uMap)</span><br/><span id="cb22-148"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-148" tabindex="-1"/></span><br/><span id="cb22-149"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-149" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-150"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-150" tabindex="-1"/></span><br/><span id="cb22-151"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-151" tabindex="-1"/><span class="co">-- fmap (.) u &lt;.&gt; v &lt;.&gt; w = u &lt;.&gt; (v &lt;.&gt; w)</span></span><br/><span id="cb22-152"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-152" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-153"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-153" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-154"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-154" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-155"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-155" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-156"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-156" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (<span class="fu">fmap</span> (u <span class="op">.</span>) vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-157"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-157" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (<span class="fu">fmap</span> (<span class="op">.</span> v) uMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-158"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-158" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span> v) wMap</span><br/><span id="cb22-159"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-159" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;.&gt;</span> vMap)</span><br/><span id="cb22-160"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-160" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (u <span class="op">.</span>) vMap)</span><br/><span id="cb22-161"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-161" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span> v) uMap)</span><br/><span id="cb22-162"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-162" tabindex="-1"/></span><br/><span id="cb22-163"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-163" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-164"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-164" tabindex="-1"/></span><br/><span id="cb22-165"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-165" tabindex="-1"/><span class="co">-- fmap f (x &lt;.&gt; y) = fmap (f .) x &lt;.&gt; y</span></span><br/><span id="cb22-166"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-166" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-167"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-167" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-168"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-168" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-169"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-169" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-170"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-170" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-171"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-171" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (<span class="fu">fmap</span> (<span class="op">.</span> v) uMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-172"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-172" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span> v) wMap</span><br/><span id="cb22-173"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-173" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;.&gt;</span> vMap)</span><br/><span id="cb22-174"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-174" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (u <span class="op">.</span>) vMap)</span><br/><span id="cb22-175"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-175" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span> v) uMap)</span><br/><span id="cb22-176"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-176" tabindex="-1"/></span><br/><span id="cb22-177"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-177" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-178"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-178" tabindex="-1"/></span><br/><span id="cb22-179"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-179" tabindex="-1"/><span class="co">-- x &lt;.&gt; fmap f y = fmap (. f) x &lt;.&gt; y</span></span><br/><span id="cb22-180"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-180" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-181"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-181" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-182"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-182" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-183"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-183" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-184"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-184" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-185"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-185" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-186"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-186" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span> v) wMap</span><br/><span id="cb22-187"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-187" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span>) uMap <span class="op">&lt;.&gt;</span> vMap)</span><br/><span id="cb22-188"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-188" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (u <span class="op">.</span>) vMap)</span><br/><span id="cb22-189"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-189" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span> v) uMap)</span><br/><span id="cb22-190"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-190" tabindex="-1"/></span><br/><span id="cb22-191"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-191" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-192"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-192" tabindex="-1"/></span><br/><span id="cb22-193"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-193" tabindex="-1"/><span class="co">-- fmap f (x &lt;.&gt; y) = fmap (f .) x &lt;.&gt; y</span></span><br/><span id="cb22-194"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-194" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-195"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-195" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-196"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-196" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-197"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-197" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-198"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-198" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-199"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-199" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-200"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-200" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span> v) wMap</span><br/><span id="cb22-201"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-201" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (<span class="fu">fmap</span> ((<span class="op">$</span> w) <span class="op">.</span>) (<span class="fu">fmap</span> (<span class="op">.</span>) uMap) <span class="op">&lt;.&gt;</span> vMap)</span><br/><span id="cb22-202"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-202" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (u <span class="op">.</span>) vMap)</span><br/><span id="cb22-203"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-203" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span> v) uMap)</span><br/><span id="cb22-204"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-204" tabindex="-1"/></span><br/><span id="cb22-205"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-205" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-206"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-206" tabindex="-1"/></span><br/><span id="cb22-207"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-207" tabindex="-1"/><span class="co">-- fmap f (fmap g x) = fmap (f . g) x</span></span><br/><span id="cb22-208"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-208" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-209"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-209" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-210"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-210" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-211"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-211" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-212"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-212" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-213"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-213" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-214"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-214" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span> v) wMap</span><br/><span id="cb22-215"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-215" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (<span class="fu">fmap</span> (((<span class="op">$</span> w) <span class="op">.</span>) <span class="op">.</span> (<span class="op">.</span>)) uMap <span class="op">&lt;.&gt;</span> vMap)</span><br/><span id="cb22-216"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-216" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (u <span class="op">.</span>) vMap)</span><br/><span id="cb22-217"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-217" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span> v) uMap)</span><br/><span id="cb22-218"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-218" tabindex="-1"/></span><br/><span id="cb22-219"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-219" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-220"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-220" tabindex="-1"/></span><br/><span id="cb22-221"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-221" tabindex="-1"/><span class="co">-- ((($ w) .) . (.))</span></span><br/><span id="cb22-222"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-222" tabindex="-1"/><span class="co">-- = \u -&gt; (($ w) .) ((.) u)</span></span><br/><span id="cb22-223"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-223" tabindex="-1"/><span class="co">-- = \u -&gt; (($ w) .) (u .)</span></span><br/><span id="cb22-224"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-224" tabindex="-1"/><span class="co">-- = \u -&gt; ($ w) . (u .)</span></span><br/><span id="cb22-225"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-225" tabindex="-1"/><span class="co">-- = \u v -&gt; ($ w) ((u .) v)</span></span><br/><span id="cb22-226"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-226" tabindex="-1"/><span class="co">-- = \u v -&gt; ($ w) (u . v)</span></span><br/><span id="cb22-227"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-227" tabindex="-1"/><span class="co">-- = \u v -&gt; (u . v) w</span></span><br/><span id="cb22-228"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-228" tabindex="-1"/><span class="co">-- = \u v -&gt; u (v w)</span></span><br/><span id="cb22-229"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-229" tabindex="-1"/><span class="co">-- = \u v -&gt; u (($ w) v)</span></span><br/><span id="cb22-230"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-230" tabindex="-1"/><span class="co">-- = \u -&gt; u . ($ w)</span></span><br/><span id="cb22-231"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-231" tabindex="-1"/><span class="co">-- = (. ($ w))</span></span><br/><span id="cb22-232"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-232" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-233"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-233" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-234"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-234" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-235"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-235" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-236"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-236" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-237"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-237" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-238"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-238" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span> v) wMap</span><br/><span id="cb22-239"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-239" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (<span class="fu">fmap</span> (<span class="op">.</span> (<span class="op">$</span> w)) uMap <span class="op">&lt;.&gt;</span> vMap)</span><br/><span id="cb22-240"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-240" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (u <span class="op">.</span>) vMap)</span><br/><span id="cb22-241"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-241" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span> v) uMap)</span><br/><span id="cb22-242"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-242" tabindex="-1"/></span><br/><span id="cb22-243"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-243" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-244"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-244" tabindex="-1"/></span><br/><span id="cb22-245"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-245" tabindex="-1"/><span class="co">-- x &lt;.&gt; (f &lt;$&gt; y) = (. f) &lt;$&gt; x &lt;.&gt; y</span></span><br/><span id="cb22-246"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-246" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-247"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-247" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-248"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-248" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-249"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-249" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-250"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-250" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-251"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-251" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-252"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-252" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span> v) wMap</span><br/><span id="cb22-253"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-253" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap)</span><br/><span id="cb22-254"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-254" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (u <span class="op">.</span>) vMap)</span><br/><span id="cb22-255"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-255" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> w) (<span class="fu">fmap</span> (<span class="op">.</span> v) uMap)</span><br/><span id="cb22-256"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-256" tabindex="-1"/></span><br/><span id="cb22-257"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-257" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-258"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-258" tabindex="-1"/></span><br/><span id="cb22-259"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-259" tabindex="-1"/><span class="co">-- fmap f (fmap g x) = fmap (f . g) w</span></span><br/><span id="cb22-260"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-260" tabindex="-1"/><span class="co">-- (f . g) = \x -&gt; f (g x)</span></span><br/><span id="cb22-261"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-261" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-262"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-262" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-263"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-263" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-264"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-264" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-265"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-265" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-266"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-266" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-267"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-267" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\w <span class="ot">-&gt;</span> u (v w)) wMap</span><br/><span id="cb22-268"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-268" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap)</span><br/><span id="cb22-269"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-269" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\v <span class="ot">-&gt;</span> u (v w)) vMap</span><br/><span id="cb22-270"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-270" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\u <span class="ot">-&gt;</span> u (v w)) uMap</span><br/><span id="cb22-271"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-271" tabindex="-1"/></span><br/><span id="cb22-272"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-272" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-273"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-273" tabindex="-1"/></span><br/><span id="cb22-274"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-274" tabindex="-1"/><span class="co">-- `fmap (\w -&gt; u (v w)) wMap &lt;&gt; (uMap &lt;.&gt; fmap ($ w) vMap)` commutes because</span></span><br/><span id="cb22-275"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-275" tabindex="-1"/><span class="co">-- the colliding keys are shadowed by `(uMap &lt;.&gt; (vMap &lt;.&gt; wMap))`</span></span><br/><span id="cb22-276"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-276" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-277"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-277" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-278"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-278" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-279"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-279" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-280"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-280" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-281"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-281" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-282"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-282" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap)</span><br/><span id="cb22-283"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-283" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\w <span class="ot">-&gt;</span> u (v w)) wMap</span><br/><span id="cb22-284"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-284" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\v <span class="ot">-&gt;</span> u (v w)) vMap</span><br/><span id="cb22-285"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-285" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\u <span class="ot">-&gt;</span> u (v w)) uMap</span><br/><span id="cb22-286"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-286" tabindex="-1"/></span><br/><span id="cb22-287"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-287" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-288"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-288" tabindex="-1"/></span><br/><span id="cb22-289"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-289" tabindex="-1"/><span class="co">-- `fmap u (vMap &lt;.&gt; wMap) &lt;&gt; (uMap &lt;.&gt; fmap v wMap)` commutes because the</span></span><br/><span id="cb22-290"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-290" tabindex="-1"/><span class="co">-- colliding keys are sahdowed by `(uMap &lt;.&gt; (vMap &lt;.&gt; wMap))`</span></span><br/><span id="cb22-291"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-291" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-292"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-292" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-293"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-293" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-294"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-294" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-295"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-295" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-296"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-296" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-297"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-297" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap)</span><br/><span id="cb22-298"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-298" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\w <span class="ot">-&gt;</span> u (v w)) wMap</span><br/><span id="cb22-299"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-299" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\v <span class="ot">-&gt;</span> u (v w)) vMap</span><br/><span id="cb22-300"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-300" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\u <span class="ot">-&gt;</span> u (v w)) uMap</span><br/><span id="cb22-301"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-301" tabindex="-1"/></span><br/><span id="cb22-302"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-302" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-303"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-303" tabindex="-1"/></span><br/><span id="cb22-304"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-304" tabindex="-1"/><span class="co">-- `fmap u (vMap &lt;.&gt; wMap) &lt;&gt; (uMap &lt;.&gt; fmap ($ w) vMap)` commutes because the</span></span><br/><span id="cb22-305"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-305" tabindex="-1"/><span class="co">-- colliding keys are sahdowed by `(uMap &lt;.&gt; (vMap &lt;.&gt; wMap))`</span></span><br/><span id="cb22-306"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-306" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-307"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-307" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-308"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-308" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-309"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-309" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-310"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-310" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-311"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-311" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap)</span><br/><span id="cb22-312"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-312" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-313"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-313" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\w <span class="ot">-&gt;</span> u (v w)) wMap</span><br/><span id="cb22-314"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-314" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\v <span class="ot">-&gt;</span> u (v w)) vMap</span><br/><span id="cb22-315"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-315" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\u <span class="ot">-&gt;</span> u (v w)) uMap</span><br/><span id="cb22-316"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-316" tabindex="-1"/></span><br/><span id="cb22-317"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-317" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-318"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-318" tabindex="-1"/></span><br/><span id="cb22-319"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-319" tabindex="-1"/><span class="co">-- \w -&gt; u (v w) = u . v</span></span><br/><span id="cb22-320"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-320" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-321"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-321" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-322"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-322" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-323"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-323" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-324"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-324" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> (<span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-325"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-325" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap)</span><br/><span id="cb22-326"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-326" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-327"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-327" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span> v) wMap)</span><br/><span id="cb22-328"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-328" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\v <span class="ot">-&gt;</span> u (v w)) vMap</span><br/><span id="cb22-329"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-329" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\u <span class="ot">-&gt;</span> u (v w)) uMap</span><br/><span id="cb22-330"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-330" tabindex="-1"/></span><br/><span id="cb22-331"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-331" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-332"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-332" tabindex="-1"/></span><br/><span id="cb22-333"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-333" tabindex="-1"/><span class="co">-- fmap f (fmap g x) = fmap (f . g) x, in reverse</span></span><br/><span id="cb22-334"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-334" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-335"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-335" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-336"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-336" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-337"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-337" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-338"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-338" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> (<span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-339"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-339" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap)</span><br/><span id="cb22-340"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-340" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-341"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-341" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (<span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-342"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-342" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\v <span class="ot">-&gt;</span> u (v w)) vMap</span><br/><span id="cb22-343"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-343" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\u <span class="ot">-&gt;</span> u (v w)) uMap</span><br/><span id="cb22-344"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-344" tabindex="-1"/></span><br/><span id="cb22-345"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-345" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-346"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-346" tabindex="-1"/></span><br/><span id="cb22-347"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-347" tabindex="-1"/><span class="co">-- \v -&gt; u (v w)</span></span><br/><span id="cb22-348"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-348" tabindex="-1"/><span class="co">-- = \v -&gt; u (($ w) v)</span></span><br/><span id="cb22-349"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-349" tabindex="-1"/><span class="co">-- = u . ($ w)</span></span><br/><span id="cb22-350"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-350" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-351"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-351" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-352"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-352" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-353"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-353" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-354"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-354" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> (<span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-355"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-355" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap)</span><br/><span id="cb22-356"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-356" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-357"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-357" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (<span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-358"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-358" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (u <span class="op">.</span> (<span class="op">$</span> w)) vMap</span><br/><span id="cb22-359"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-359" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\u <span class="ot">-&gt;</span> u (v w)) uMap</span><br/><span id="cb22-360"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-360" tabindex="-1"/></span><br/><span id="cb22-361"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-361" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-362"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-362" tabindex="-1"/></span><br/><span id="cb22-363"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-363" tabindex="-1"/><span class="co">-- fmap f (fmap g x) = fmap (f . g) x, in reverse</span></span><br/><span id="cb22-364"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-364" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-365"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-365" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-366"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-366" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-367"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-367" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-368"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-368" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> (<span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-369"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-369" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap)</span><br/><span id="cb22-370"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-370" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-371"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-371" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (<span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-372"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-372" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (<span class="fu">fmap</span> (<span class="op">$</span> w) vMap)</span><br/><span id="cb22-373"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-373" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (\u <span class="ot">-&gt;</span> u (v w)) uMap</span><br/><span id="cb22-374"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-374" tabindex="-1"/></span><br/><span id="cb22-375"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-375" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-376"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-376" tabindex="-1"/></span><br/><span id="cb22-377"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-377" tabindex="-1"/><span class="co">-- \f -&gt; f x = ($ x)</span></span><br/><span id="cb22-378"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-378" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-379"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-379" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-380"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-380" tabindex="-1"/>    cuvwMap <span class="ot">=</span></span><br/><span id="cb22-381"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-381" tabindex="-1"/>            (uMap <span class="op">&lt;.&gt;</span> (vMap <span class="op">&lt;.&gt;</span> wMap))</span><br/><span id="cb22-382"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-382" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> (<span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-383"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-383" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  (uMap <span class="op">&lt;.&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap)</span><br/><span id="cb22-384"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-384" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (vMap <span class="op">&lt;.&gt;</span> wMap)</span><br/><span id="cb22-385"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-385" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (<span class="fu">fmap</span> v wMap)</span><br/><span id="cb22-386"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-386" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> u (<span class="fu">fmap</span> (<span class="op">$</span> w) vMap)</span><br/><span id="cb22-387"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-387" tabindex="-1"/>        <span class="op">&lt;&gt;</span>  <span class="fu">fmap</span> (<span class="op">$</span> (v w)) uMap</span><br/><span id="cb22-388"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-388" tabindex="-1"/></span><br/><span id="cb22-389"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-389" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-390"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-390" tabindex="-1"/></span><br/><span id="cb22-391"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-391" tabindex="-1"/><span class="co">-- f &lt;.&gt; (x &lt;&gt; y) = (f &lt;.&gt; x) &lt;&gt; (f &lt;.&gt; y), in reverse</span></span><br/><span id="cb22-392"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-392" tabindex="-1"/><span class="co">-- fmap f (x &lt;&gt; y) = fmap f x &lt;&gt; fmap f y, in reverse</span></span><br/><span id="cb22-393"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-393" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-394"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-394" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-395"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-395" tabindex="-1"/>    cuvwMap <span class="ot">=</span> (uMap <span class="op">&lt;.&gt;</span> vwMap) <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> u vwMap <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> (v w)) uMap</span><br/><span id="cb22-396"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-396" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb22-397"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-397" tabindex="-1"/>        vwMap <span class="ot">=</span> (vMap <span class="op">&lt;.&gt;</span> wMap) <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> v wMap <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap</span><br/><span id="cb22-398"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-398" tabindex="-1"/></span><br/><span id="cb22-399"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-399" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> (u (v w))</span><br/><span id="cb22-400"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-400" tabindex="-1"/></span><br/><span id="cb22-401"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-401" tabindex="-1"/><span class="co">-- pure f &lt;*&gt; pure x = pure (f x), in reverse</span></span><br/><span id="cb22-402"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-402" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> cuvwMap cuvwDefault</span><br/><span id="cb22-403"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-403" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb22-404"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-404" tabindex="-1"/>    cuvwMap <span class="ot">=</span> (uMap <span class="op">&lt;.&gt;</span> vwMap) <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> u vwMap <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> (v w)) uMap</span><br/><span id="cb22-405"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-405" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb22-406"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-406" tabindex="-1"/>        vwMap <span class="ot">=</span> (vMap <span class="op">&lt;.&gt;</span> wMap) <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> v wMap <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap</span><br/><span id="cb22-407"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-407" tabindex="-1"/></span><br/><span id="cb22-408"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-408" tabindex="-1"/>    cuvwDefault <span class="ot">=</span> <span class="fu">pure</span> u <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> (v w)</span><br/><span id="cb22-409"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-409" tabindex="-1"/></span><br/><span id="cb22-410"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-410" tabindex="-1"/><span class="co">-- Definition of (&lt;*&gt;), in reverse</span></span><br/><span id="cb22-411"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-411" tabindex="-1"/><span class="ot">=</span>   (   <span class="dt">Defaultable</span> uMap (<span class="fu">pure</span> u)</span><br/><span id="cb22-412"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-412" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> (<span class="dt">Defaultable</span> vwMap vwDefault</span><br/><span id="cb22-413"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-413" tabindex="-1"/>          <span class="kw">where</span></span><br/><span id="cb22-414"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-414" tabindex="-1"/>            vwMap <span class="ot">=</span> (vMap <span class="op">&lt;.&gt;</span> wMap) <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> v wMap <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap</span><br/><span id="cb22-415"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-415" tabindex="-1"/></span><br/><span id="cb22-416"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-416" tabindex="-1"/>            vwDefault <span class="ot">=</span> <span class="fu">pure</span> (v w)</span><br/><span id="cb22-417"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-417" tabindex="-1"/>        )</span><br/><span id="cb22-418"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-418" tabindex="-1"/>    )</span><br/><span id="cb22-419"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-419" tabindex="-1"/></span><br/><span id="cb22-420"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-420" tabindex="-1"/><span class="co">-- pure f &lt;*&gt; pure x = pure (f x), in reverse</span></span><br/><span id="cb22-421"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-421" tabindex="-1"/><span class="ot">=</span>   (   <span class="dt">Defaultable</span> uMap (<span class="fu">pure</span> u)</span><br/><span id="cb22-422"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-422" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> (<span class="dt">Defaultable</span> vwMap vwDefault</span><br/><span id="cb22-423"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-423" tabindex="-1"/>          <span class="kw">where</span></span><br/><span id="cb22-424"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-424" tabindex="-1"/>            vwMap <span class="ot">=</span> (vMap <span class="op">&lt;.&gt;</span> wMap) <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> v wMap <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> w) vMap </span><br/><span id="cb22-425"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-425" tabindex="-1"/></span><br/><span id="cb22-426"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-426" tabindex="-1"/>            vwDefault <span class="ot">=</span> <span class="fu">pure</span> v <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> w</span><br/><span id="cb22-427"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-427" tabindex="-1"/>        )</span><br/><span id="cb22-428"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-428" tabindex="-1"/>    )</span><br/><span id="cb22-429"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-429" tabindex="-1"/></span><br/><span id="cb22-430"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-430" tabindex="-1"/><span class="co">-- Definition of (&lt;*&gt;), in reverse</span></span><br/><span id="cb22-431"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-431" tabindex="-1"/><span class="ot">=</span>   (   <span class="dt">Defaultable</span> uMap (<span class="fu">pure</span> u)</span><br/><span id="cb22-432"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-432" tabindex="-1"/>    <span class="op">&lt;*&gt;</span> (   <span class="dt">Defaultable</span> vMap (<span class="fu">pure</span> v)</span><br/><span id="cb22-433"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-433" tabindex="-1"/>        <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> wMap (<span class="fu">pure</span> w)</span><br/><span id="cb22-434"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-434" tabindex="-1"/>        )</span><br/><span id="cb22-435"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-435" tabindex="-1"/>    )</span><br/><span id="cb22-436"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-436" tabindex="-1"/></span><br/><span id="cb22-437"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-437" tabindex="-1"/><span class="co">-- Contract:</span></span><br/><span id="cb22-438"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-438" tabindex="-1"/><span class="co">-- u = Defaultable uMap uDefault</span></span><br/><span id="cb22-439"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-439" tabindex="-1"/><span class="co">-- v = Defaultable vMap vDefault</span></span><br/><span id="cb22-440"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-440" tabindex="-1"/><span class="co">-- w = Defaultable wMap wDefault</span></span><br/><span id="cb22-441"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-441" tabindex="-1"/><span class="ot">=</span> u <span class="op">&lt;*&gt;</span> (v <span class="op">&lt;*&gt;</span> w)</span></code></pre></div><h5 id="proof-of-homomorphism-law">Proof of homomorphism law</h5><div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-1" tabindex="-1"/><span class="fu">pure</span> f <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> x</span><br/><span id="cb23-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-2" tabindex="-1"/></span><br/><span id="cb23-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-3" tabindex="-1"/><span class="co">-- pure v = Defaultable mempty (pure v)</span></span><br/><span id="cb23-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-4" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> <span class="fu">mempty</span> (<span class="fu">pure</span> f) <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> <span class="fu">mempty</span> (<span class="fu">pure</span> x)</span><br/><span id="cb23-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-5" tabindex="-1"/></span><br/><span id="cb23-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-6" tabindex="-1"/><span class="co">-- Definition of (&lt;*&gt;)</span></span><br/><span id="cb23-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-7" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb23-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-8" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb23-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-9" tabindex="-1"/>    fxMap <span class="ot">=</span>  (<span class="fu">mempty</span> <span class="op">&lt;.&gt;</span> <span class="fu">mempty</span>) <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> f <span class="fu">mempty</span> <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> x) <span class="fu">mempty</span></span><br/><span id="cb23-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-10" tabindex="-1"/></span><br/><span id="cb23-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-11" tabindex="-1"/>    fxDefault <span class="ot">=</span> <span class="fu">pure</span> f <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> x</span><br/><span id="cb23-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-12" tabindex="-1"/></span><br/><span id="cb23-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-13" tabindex="-1"/><span class="co">-- fmap f mempty = mempty</span></span><br/><span id="cb23-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-14" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb23-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-15" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb23-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-16" tabindex="-1"/>    fxMap <span class="ot">=</span> (<span class="fu">mempty</span> <span class="op">&lt;.&gt;</span> <span class="fu">mempty</span>) <span class="op">&lt;&gt;</span> <span class="fu">mempty</span> <span class="op">&lt;&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb23-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-17" tabindex="-1"/></span><br/><span id="cb23-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-18" tabindex="-1"/>    fxDefault <span class="ot">=</span> <span class="fu">pure</span> f <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> x</span><br/><span id="cb23-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-19" tabindex="-1"/></span><br/><span id="cb23-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-20" tabindex="-1"/><span class="co">-- mempty &lt;.&gt; x = mempty</span></span><br/><span id="cb23-21"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-21" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb23-22"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-22" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb23-23"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-23" tabindex="-1"/>    fxMap <span class="ot">=</span> <span class="fu">mempty</span> <span class="op">&lt;&gt;</span> <span class="fu">mempty</span> <span class="op">&lt;&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb23-24"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-24" tabindex="-1"/></span><br/><span id="cb23-25"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-25" tabindex="-1"/>    fxDefault <span class="ot">=</span> <span class="fu">pure</span> f <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> x</span><br/><span id="cb23-26"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-26" tabindex="-1"/></span><br/><span id="cb23-27"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-27" tabindex="-1"/><span class="co">-- mempty &lt;&gt; x = x</span></span><br/><span id="cb23-28"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-28" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb23-29"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-29" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb23-30"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-30" tabindex="-1"/>    fxMap <span class="ot">=</span> <span class="fu">mempty</span></span><br/><span id="cb23-31"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-31" tabindex="-1"/></span><br/><span id="cb23-32"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-32" tabindex="-1"/>    fxDefault <span class="ot">=</span> <span class="fu">pure</span> f <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> x</span><br/><span id="cb23-33"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-33" tabindex="-1"/></span><br/><span id="cb23-34"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-34" tabindex="-1"/><span class="co">-- pure f &lt;*&gt; pure x = pure (f x)</span></span><br/><span id="cb23-35"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-35" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> fxMap fxDefault</span><br/><span id="cb23-36"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-36" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb23-37"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-37" tabindex="-1"/>    fxMap <span class="ot">=</span> <span class="fu">mempty</span></span><br/><span id="cb23-38"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-38" tabindex="-1"/></span><br/><span id="cb23-39"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-39" tabindex="-1"/>    fxDefault <span class="ot">=</span> <span class="fu">pure</span> (f x)</span><br/><span id="cb23-40"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-40" tabindex="-1"/></span><br/><span id="cb23-41"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-41" tabindex="-1"/><span class="co">-- Simplify</span></span><br/><span id="cb23-42"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-42" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> <span class="fu">mempty</span> (<span class="fu">pure</span> (f x))</span><br/><span id="cb23-43"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-43" tabindex="-1"/></span><br/><span id="cb23-44"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-44" tabindex="-1"/><span class="co">-- pure v = Defaultable mempty (pure v), in reverse</span></span><br/><span id="cb23-45"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-45" tabindex="-1"/><span class="ot">=</span> <span class="fu">pure</span> (f x)</span></code></pre></div><h5 id="proof-of-interchange-law">Proof of interchange law</h5><div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-1" tabindex="-1"/>u <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> y</span><br/><span id="cb24-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-2" tabindex="-1"/></span><br/><span id="cb24-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-3" tabindex="-1"/><span class="co">-- pure v = Defaultable mempty (pure v)</span></span><br/><span id="cb24-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-4" tabindex="-1"/><span class="ot">=</span> u <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> <span class="fu">mempty</span> (<span class="fu">pure</span> y)</span><br/><span id="cb24-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-5" tabindex="-1"/></span><br/><span id="cb24-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-6" tabindex="-1"/><span class="co">-- Expand: u = Defaultable uMap uDefault</span></span><br/><span id="cb24-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-7" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> uMap uDefault <span class="op">&lt;*&gt;</span> <span class="dt">Defaultable</span> <span class="fu">mempty</span> (<span class="fu">pure</span> y)</span><br/><span id="cb24-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-8" tabindex="-1"/></span><br/><span id="cb24-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-9" tabindex="-1"/><span class="co">-- Definition of (&lt;*&gt;)</span></span><br/><span id="cb24-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-10" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> uyMap uyDefault</span><br/><span id="cb24-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-11" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb24-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-12" tabindex="-1"/>    uyMap <span class="ot">=</span> (uMap <span class="op">&lt;.&gt;</span> <span class="fu">mempty</span>) <span class="op">&lt;&gt;</span> uFallback <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> y) uMap</span><br/><span id="cb24-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-13" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb24-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-14" tabindex="-1"/>        uFallback <span class="ot">=</span></span><br/><span id="cb24-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-15" tabindex="-1"/>            <span class="kw">case</span> uDefault <span class="kw">of</span></span><br/><span id="cb24-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-16" tabindex="-1"/>                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb24-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-17" tabindex="-1"/>                <span class="dt">Just</span> u  <span class="ot">-&gt;</span> <span class="fu">fmap</span> y <span class="fu">mempty</span></span><br/><span id="cb24-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-18" tabindex="-1"/></span><br/><span id="cb24-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-19" tabindex="-1"/>    uyDefault <span class="ot">=</span> uDefault <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> y</span><br/><span id="cb24-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-20" tabindex="-1"/></span><br/><span id="cb24-21"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-21" tabindex="-1"/><span class="co">-- fmap f mempty = mempty</span></span><br/><span id="cb24-22"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-22" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> uyMap uyDefault</span><br/><span id="cb24-23"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-23" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb24-24"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-24" tabindex="-1"/>    uyMap <span class="ot">=</span> (uMap <span class="op">&lt;.&gt;</span> <span class="fu">mempty</span>) <span class="op">&lt;&gt;</span> uFallback <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> y) uMap</span><br/><span id="cb24-25"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-25" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb24-26"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-26" tabindex="-1"/>        uFallback <span class="ot">=</span></span><br/><span id="cb24-27"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-27" tabindex="-1"/>            <span class="kw">case</span> uDefault <span class="kw">of</span></span><br/><span id="cb24-28"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-28" tabindex="-1"/>                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb24-29"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-29" tabindex="-1"/>                <span class="dt">Just</span> u  <span class="ot">-&gt;</span> <span class="fu">mempty</span></span><br/><span id="cb24-30"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-30" tabindex="-1"/></span><br/><span id="cb24-31"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-31" tabindex="-1"/>    uyDefault <span class="ot">=</span> uDefault <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> y</span><br/><span id="cb24-32"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-32" tabindex="-1"/></span><br/><span id="cb24-33"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-33" tabindex="-1"/><span class="co">-- Simplify `case uDefault of …`</span></span><br/><span id="cb24-34"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-34" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> uyMap uyDefault</span><br/><span id="cb24-35"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-35" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb24-36"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-36" tabindex="-1"/>    uyMap <span class="ot">=</span> (uMap <span class="op">&lt;.&gt;</span> <span class="fu">mempty</span>) <span class="op">&lt;&gt;</span> uFallback <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> y) uMap</span><br/><span id="cb24-37"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-37" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb24-38"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-38" tabindex="-1"/>        uFallback <span class="ot">=</span> <span class="fu">mempty</span></span><br/><span id="cb24-39"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-39" tabindex="-1"/></span><br/><span id="cb24-40"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-40" tabindex="-1"/>    uyDefault <span class="ot">=</span> uDefault <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> y</span><br/><span id="cb24-41"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-41" tabindex="-1"/></span><br/><span id="cb24-42"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-42" tabindex="-1"/><span class="co">-- f &lt;.&gt; mempty = mempty</span></span><br/><span id="cb24-43"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-43" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> uyMap uyDefault</span><br/><span id="cb24-44"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-44" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb24-45"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-45" tabindex="-1"/>    uyMap <span class="ot">=</span> <span class="fu">mempty</span> <span class="op">&lt;&gt;</span> uFallback <span class="op">&lt;&gt;</span> <span class="fu">fmap</span> (<span class="op">$</span> y) uMap</span><br/><span id="cb24-46"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-46" tabindex="-1"/>      <span class="kw">where</span></span><br/><span id="cb24-47"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-47" tabindex="-1"/>        uFallback <span class="ot">=</span> <span class="fu">mempty</span></span><br/><span id="cb24-48"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-48" tabindex="-1"/></span><br/><span id="cb24-49"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-49" tabindex="-1"/>    uyDefault <span class="ot">=</span> uDefault <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> y</span><br/><span id="cb24-50"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-50" tabindex="-1"/></span><br/><span id="cb24-51"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-51" tabindex="-1"/><span class="co">-- mempty &lt;&gt; x = x</span></span><br/><span id="cb24-52"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-52" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> uyMap uyDefault</span><br/><span id="cb24-53"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-53" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb24-54"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-54" tabindex="-1"/>    uyMap <span class="ot">=</span> <span class="fu">fmap</span> (<span class="op">$</span> y) uMap</span><br/><span id="cb24-55"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-55" tabindex="-1"/></span><br/><span id="cb24-56"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-56" tabindex="-1"/>    uyDefault <span class="ot">=</span> uDefault <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> y</span><br/><span id="cb24-57"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-57" tabindex="-1"/></span><br/><span id="cb24-58"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-58" tabindex="-1"/><span class="co">-- u &lt;*&gt; pure y = pure ($ y) &lt;*&gt; u</span></span><br/><span id="cb24-59"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-59" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> uyMap uyDefault</span><br/><span id="cb24-60"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-60" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb24-61"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-61" tabindex="-1"/>    uyMap <span class="ot">=</span> <span class="fu">fmap</span> (<span class="op">$</span> y) uMap</span><br/><span id="cb24-62"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-62" tabindex="-1"/></span><br/><span id="cb24-63"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-63" tabindex="-1"/>    uyDefault <span class="ot">=</span> <span class="fu">pure</span> (<span class="op">$</span> y) <span class="op">&lt;*&gt;</span> uDefault</span><br/><span id="cb24-64"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-64" tabindex="-1"/></span><br/><span id="cb24-65"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-65" tabindex="-1"/><span class="co">-- pure f &lt;*&gt; x = fmap f x</span></span><br/><span id="cb24-66"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-66" tabindex="-1"/><span class="ot">=</span> <span class="dt">Defaultable</span> uyMap uyDefault</span><br/><span id="cb24-67"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-67" tabindex="-1"/>  <span class="kw">where</span></span><br/><span id="cb24-68"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-68" tabindex="-1"/>    uyMap <span class="ot">=</span> <span class="fu">fmap</span> (<span class="op">$</span> y) uMap</span><br/><span id="cb24-69"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-69" tabindex="-1"/></span><br/><span id="cb24-70"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-70" tabindex="-1"/>    uyDefault <span class="ot">=</span> <span class="fu">fmap</span> (<span class="op">$</span> y) uDefault</span><br/><span id="cb24-71"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-71" tabindex="-1"/></span><br/><span id="cb24-72"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-72" tabindex="-1"/><span class="co">-- Definition of `fmap`, in reverse</span></span><br/><span id="cb24-73"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-73" tabindex="-1"/><span class="ot">=</span> <span class="fu">fmap</span> (<span class="op">$</span> y) (<span class="dt">Defaultable</span> uMap uDefault)</span><br/><span id="cb24-74"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-74" tabindex="-1"/></span><br/><span id="cb24-75"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-75" tabindex="-1"/><span class="co">-- Contract: u = Defaultable uMap uDefault</span></span><br/><span id="cb24-76"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-76" tabindex="-1"/><span class="ot">=</span> <span class="fu">fmap</span> (<span class="op">$</span> y) u</span><br/><span id="cb24-77"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-77" tabindex="-1"/></span><br/><span id="cb24-78"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-78" tabindex="-1"/><span class="co">-- pure f &lt;*&gt; x = fmap f x, in reverse</span></span><br/><span id="cb24-79"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-79" tabindex="-1"/><span class="ot">=</span> <span class="fu">pure</span> (<span class="op">$</span> y) <span class="op">&lt;*&gt;</span> u</span></code></pre></div></div>
    </content>
    <updated>2022-06-27T02:03:59Z</updated>
    <published>2022-06-26T17:03:00Z</published>
    <author>
      <name>Gabriella Gonzalez</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/01917800488530923694</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-1777990983847811806</id>
      <author>
        <name>Gabriella Gonzalez</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/01917800488530923694</uri>
      </author>
      <link href="https://www.haskellforall.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default" rel="self" type="application/atom+xml"/>
      <link href="https://www.haskellforall.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Haskell for all</title>
      <updated>2022-09-14T10:40:09Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.well-typed.com/blog/2022/06/ghc-2022-04-2022-05</id>
    <link href="https://well-typed.com/blog/2022/06/ghc-2022-04-2022-05" rel="alternate" type="text/html"/>
    <title>GHC activities report: April-May 2022</title>
    <summary>This is the twelth edition of our GHC activities report, which describes
the work on GHC and related projects that we are doing at Well-Typed.
The current edition covers roughly the months of April and May 2022.

You can find the previous editions collected under the
ghc-activities-report tag.

A bit [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This is the twelth edition of our GHC activities report, which describes the work on GHC and related projects that we are doing at Well-Typed. The current edition covers roughly the months of April and May 2022.</p>
<p>You can find the previous editions collected under the <a href="https://well-typed.com/blog/tags/ghc-activities-report">ghc-activities-report tag</a>.</p>
<p>A bit of background: One aspect of our work at Well-Typed is to support GHC and the Haskell core infrastructure. Several companies, including IOHK and GitHub via the Haskell Foundation, are providing us with funding to do this work. We are also <a href="https://well-typed.com/blog/2020/09/working-with-hasura-ghc-tooling/">working with Hasura</a> on better debugging tools. We are very grateful on behalf of the whole Haskell community for the support these companies provide.</p>
<p>If you are interested in also contributing funding to ensure we can continue or even scale up this kind of work, please <a href="mailto:info@well-typed.com">get in touch</a>.</p>
<p>Of course, GHC is a large community effort, and Well-Typed’s contributions are just a small part of this. This report does not aim to give an exhaustive picture of <em>all</em> GHC work that is ongoing, and there are many fantastic features currently being worked on that are omitted here simply because none of us are currently involved in them in any way. Furthermore, the aspects we <em>do</em> mention are still the work of many people. In many cases, we have just been helping with the last few steps of integration. We are immensely grateful to everyone contributing to GHC. Please keep doing so (or start)!</p>

<h2 id="team">Team</h2>
<p>The current GHC team consists of <a href="https://well-typed.com/people/ben">Ben Gamari</a>, <a href="https://well-typed.com/people/andreask">Andreas Klebinger</a>, <a href="https://well-typed.com/people/matthew">Matthew Pickering</a>, <a href="https://well-typed.com/people/zubin">Zubin Duggal</a> and <a href="https://well-typed.com/people/sam">Sam Derbyshire</a>.</p>
<p>Many others within Well-Typed, including <a href="https://well-typed.com/people/adam">Adam Gundry</a>, <a href="https://well-typed.com/people/alfredo">Alfredo Di Napoli</a>, <a href="https://well-typed.com/people/alp">Alp Mestanogullari</a>, <a href="https://well-typed.com/people/douglas">Douglas Wilson</a> and <a href="https://well-typed.com/people/oleg">Oleg Grenrus</a>, are contributing to GHC more occasionally.</p>
<h2 id="releases">Releases</h2>
<ul>
<li><p>Ben, with help from Matt, did quite a bit of release wrangling on the 9.4 branch, producing two alpha releases with a third in the pipeline.</p></li>
<li><p>Matt has worked on the release management scripts so that all release artifacts are generated by a single CI pipeline which makes it easier to debug mistakes in the release process.</p></li>
<li><p>Zubin released GHC 9.2.3.</p></li>
</ul>
<h2 id="typechecker">Typechecker</h2>
<ul>
<li><p>Sam helped new contributor CarrieMY improve the typechecking of record updates. This allows record updates involving existentials to work properly, fixing tickets <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/2595"/><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/2595">#2595</a> <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/3632"/><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/3632">#3632</a> <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/10808"/><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/10808">#10808</a> <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/10856"/><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/10856">#10856</a> <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/16501"/><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/16501">#16501</a> <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/18311"/><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/18311">#18311</a> <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/18802"/><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/18802">#18802</a> <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21158"/><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21158">#21158</a> and <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21289"/><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21289">#21289</a>.</p></li>
<li><p>Sam improved the typechecking of partially applied functions which have representation-polymorphic arguments, such as <code>coerce</code>, unboxed tuples and sums, and newtype constructors with <code>-XUnliftedNewtypes</code>, fixing <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21544"/><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21544">#21544</a> and <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21650"/><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21650">#21650</a>.</p></li>
<li><p>Sam finished refactoring the representation-polymorphism checks in the typechecker, making use of a new flavour of metavariables (concrete metavariables). This simplifies the implementation and provides the final stepping stone to allow <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/13105">rewriting in <code>RuntimeRep</code>s</a>.</p></li>
<li><p>Matt fixed a compiler panic which was caused by not properly enforcing the Template Haskell level invariants for Typeable instances (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8264">!8264</a>).</p></li>
<li><p>Matt debugged an apparent infinite loop in the compiler which just turned out to be the result of attempting to print out a very large coercion. Removing the print happily fixes the issue (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8263">!8263</a>).</p></li>
<li><p>Matt wrote the <a href="https://github.com/ghc-proposals/ghc-proposals/pull/511">Deep Subsumption proposal</a> which aims to reduce the breakage from the simplified subsumption proposal.</p></li>
</ul>
<h2 id="code-generation">Code generation</h2>
<ul>
<li><p>Ben finished his rework of the migration to a <code>clang</code>-based toolchain on Windows (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21019">#21019</a>).</p></li>
<li><p>Ben fixed a calling-convention bug on Windows potentially leading to undefined behavior in programs using SIMD extensions on x86-64 (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21465">#21465</a>).</p></li>
<li><p>Ben finished, committed, and backported his fix for <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20959">#20959</a>, a correctness bug in GHC’s CAF analysis.</p></li>
<li><p>Ben fixed the AArch64 NCG’s implementation of the <code>IntMulMayOflo</code> machop and extended the <code>test-primops</code> testsuite to exercise the operation (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21624">#21624</a>).</p></li>
<li><p>Andreas changed <code>dataToTag#</code> code generation to take advantage of the tag inference. In short this means we can sometimes avoid a redundant eval on the argument to <code>dataToTag#</code>.</p></li>
</ul>
<h2 id="core">Core</h2>
<ul>
<li><p>Sam made several improvements to the treatment of casts in the simplifier and the simple optimiser. This was motivated by the work on allowing <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/13105">rewriting in <code>RuntimeRep</code>s</a>.</p></li>
<li><p>Sam <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7955">fixed a long-standing bug</a> in <code>pushCoercionIntoLambda</code>.</p></li>
<li><p>Ben continued work on his refactoring removing the somewhat-magical <code>GHC.PrimOpWrappers</code> module (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20155">#20155</a>)</p></li>
<li><p>Matt and Andreas debugged a panic in the optimiser which was caused by doing an incorrect eta-expansion (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21694">#21694</a>).</p></li>
<li><p>Andreas added logic to dump files in <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7998">!7998</a> which means dumps for different ways will now be written to different files instead of silently overwriting each other. The old behaviour is still available by passing <code>-fno-dump-with-ways</code>.</p></li>
<li><p>Andreas fixed a bug where the <code>SpecConstr</code> pass could generate invalid core leading to segfaults in <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8096">!8096</a>.</p></li>
<li><p>Andreas worked on reworking some invariants around core unfoldings and call-by-value argument passing in <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21497">#21497</a>. This will fix <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21472">#21472</a> and <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21496">#21496</a> once implemented.</p></li>
<li><p>Andreas fixed <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21685">#21685</a>. A bug where shadowing at the core level caused the <code>CSE</code> pass to potentially produce invalid core or segfaults.</p></li>
</ul>
<h2 id="runtime-system">Runtime system</h2>
<ul>
<li><p>Ben fixed <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21556">#21556</a>, a bug in the Windows runtime system linker’s treatment of weak symbols.</p></li>
<li><p>Ben started debugging a bug in the Windows runtime system linker triggered by <code>libc++</code> (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21618">#21618</a>).</p></li>
<li><p>To aid in debugging <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21618">#21618</a>, Ben started introducing support for <code>gdb</code>’s <a href="https://sourceware.org/gdb/onlinedocs/gdb/JIT-Interface.html">JIT interface</a> into GHC’s runtime linker (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8312">!8312</a>).</p></li>
<li><p>Ben debugged and fixed a bug in the bytecode interpreter causing some programs having data constructors with strict fields to crash when run under the interpreter due to missing pointer tags (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21390">#21390</a>).</p></li>
<li><p>Ben fixed a lurking bug in the runtime’s treatment of dead threads triggered when profiling is enabled (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8094">!8094</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21438">#21438</a>).</p></li>
<li><p>Matt fixed the fallback path when <code>clock_gettime</code> is not available (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8424">!8424</a>).</p></li>
<li><p>Andreas changed the runtime system to export symbols for utility macros useful for debugging in gdb (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8132">!8132</a>).</p></li>
</ul>
<h2 id="error-messages">Error messages</h2>
<ul>
<li>Andreas improved <code>-dstg-lint</code> in <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7941">!7941</a> and <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8012">!8012</a> which will now detect more uses of <code>unsafeCoerce#</code> which are guaranteed to cause segfaults.</li>
</ul>
<h2 id="renamer">Renamer</h2>
<ul>
<li>Sam fixed <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21654">a bug</a> with the computation of unused variables in <code>mdo</code> statements.</li>
</ul>
<h2 id="driver">Driver</h2>
<ul>
<li><p>Ben introduced response file support (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/16476">#16476</a>) to GHC’s driver, eliminating a persistent source of headaches for users on Windows.</p></li>
<li><p>Ben removed GHC’s long-vestigal dependency on <code>libtool</code> and cleaned up some adjacent linking logic (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/18826">#18826</a>).</p></li>
</ul>
<h2 id="foreign-function-interface">Foreign Function Interface</h2>
<ul>
<li>Sam strengthened the checks on the kind of <code>Any</code> appearing in foreign import and export declarations, avoiding GHC panics.</li>
</ul>
<h2 id="template-haskell">Template Haskell</h2>
<ul>
<li>Matt fixed the Template Haskell representation of <code>OPAQUE</code> pragmas to avoid a panic (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8133">!8133</a>).</li>
</ul>
<h2 id="profiling">Profiling</h2>
<ul>
<li>Andreas added a new flag <code>-fno-prof-manual</code> which causes GHC to ignore user-written cost centre annotations. The intended use is to allow suppression of cost centre annotations in libraries far up the dependency chain which one might not care about.</li>
<li>Andreas fixed <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21429">#21429</a>, a bug where profiling cost centres in certain positions could cause segfaults through incorrect demand analysis.</li>
</ul>
<h2 id="libraries">Libraries</h2>
<ul>
<li><p>Ben introduced a meta-package, <code>system-cxx-std-lib</code>, giving users an easy way to bind to C++ dependencies by capturing the link dependencies necessary to link against the C++ standard library (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20010">#20010</a>).</p></li>
<li><p>Ben fixed a long-standing but only recently-noticed bug in GHC’s treatment of file handle closure, allowing file flush failures to go unnoticed when run during handle finalization (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21336">#21336</a>).</p></li>
<li><p>Ben fixed a memory soundness bug in the <code>ghc-heap</code> package’s treatment of weak pointer objects (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21622">#21622</a>).</p></li>
</ul>
<h2 id="compiler-performance">Compiler performance</h2>
<ul>
<li><p>Doug has been working on a “jsem” feature which will allow multiple instances of <code>ghc --make</code> to cooperate in sharing available cores (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19416"/><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19416">#19416</a>).</p></li>
<li><p>Doug and Matt have been investigating parallelising the simplifier.</p></li>
<li><p>Andreas optimized a few cases where GHC used <code>O(n^2)</code> algorithms, replacing them with code running in <code>O(n*log(n))</code>. This should help in edge cases where modules have a very large number of exported functions.</p></li>
</ul>
<h2 id="packaging">Packaging</h2>
<ul>
<li><p>Matt has made a number of improvements to the creation of source distributions (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8371">!8371</a>).</p></li>
<li><p>Zubin added CI jobs and modified the release script to generate and upload sources to aid in bootstrapping Hadrian to build GHC without a pre-existing cabal-install installation.</p></li>
</ul>
<h2 id="runtime-performance">Runtime performance</h2>
<ul>
<li><p>Ben characterised the effect of <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7986">!7986</a>, a change to make IO performance more predictable in exchange for slightly higher overhead by dropping use of <code>O_NONBLOCK</code> on normal files. In his <a href="https://gitlab.haskell.org/bgamari/io-bench">microbenchmark</a>, he <a href="https://gitlab.haskell.org/bgamari/io-bench/-/blob/dda0a52648a6c95a4626717bb8e608c08a442409/analysis.ipynb">found</a> the change to regress IO performance by roughly 5% (see <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/15153">#15153</a>)</p></li>
<li><p>Inspired by his work on the <code>O_NONBLOCK</code> change, Ben rebased WJWH’s <code>io_uring</code>-based polling patch (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/3794">!3794</a>) and extended it to use <code>io_uring</code> for <code>Handle</code> read and write operations. This quickly ended up turning into a proof-of-concept <code>io_uring</code>-based IO manager implementation (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8073">!8073</a>)</p></li>
<li><p>Ben spent some time thinking about a C– optimization to widen narrow (8- and 16-bit) integer expressions to avoid partial register stalls on x86-64.</p></li>
</ul>
<h2 id="infrastructure">Infrastructure</h2>
<ul>
<li><p>Ben investigated a bootstrapping failure of 9.4 with the <code>make</code> build system (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21188">#21188</a>). Unfortunately, this ended up being attributable to a deficiency in the <code>make</code> build system’s handling of bootstrap dependencies, putting new urgency on the migration to Hadrian.</p></li>
<li><p>Matt refactored Hadrian to avoid the same bootstrap issues that have broken the make build system (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8339">!8339</a>).</p></li>
<li><p>Ben refactored Hadrian’s treatment of build information from Cabal, fixing a good number of issues in the process (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20566">#20566</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20579">#20579</a>).</p></li>
<li><p>Ben continued work on his branch removing the <code>make</code> build system from the tree in preparation for removal later this summer.</p></li>
<li><p>Ben investigated and fixed a rather perplexing set of Darwin CI failures involving <code>bytestring</code>’s use of ARM’s NEON extensions which ultimately were attributed to Rosetta’s unpredictable choice of execution platform (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21579">#21579</a>).</p></li>
<li><p>Ben investigated another set of equally-bizarre CI failures on Linux, which ended up being due to <a href="https://github.com/moby/moby/issues/42680">a bug</a> in Docker’s seccomp filters.</p></li>
</ul></div>
    </content>
    <updated>2022-06-23T00:00:00Z</updated>
    <published>2022-06-23T00:00:00Z</published>
    <category term="well-typed"/>
    <category term="ghc"/>
    <category term="community"/>
    <category term="ghc-activities-report"/>
    <author>
      <name>ben, andreask, matthew, zubin, sam, adam, douglas</name>
    </author>
    <source>
      <id>https://well-typed.com/blog/</id>
      <logo>https://well-typed.com/img/wtnlogoplain.svg</logo>
      <link href="https://well-typed.com/blog/rss2.xml" rel="self" type="application/rss+xml"/>
      <link href="https://well-typed.com/blog/" rel="alternate" type="text/html"/>
      <subtitle>Because Well-Typed Programs Don't Go Wrong</subtitle>
      <title>Well-Typed Blog</title>
      <updated>2022-09-08T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://ocharles.org.uk/blog/posts/2022-06-22-list-of-monoids-pattern.html</id>
    <link href="http://ocharles.org.uk/blog/posts/2022-06-22-list-of-monoids-pattern.html" rel="alternate" type="text/html"/>
    <title>The list of monoids pattern</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hello! Yes, this blog is still alive. In this post, I want to share a small little pattern that I’ve found to have a surprisingly high quality-of-life improvement, and I call it the <em>list of monoids</em> pattern.</p>
<p>The idea is that whenever we have a monoidal value - a type that is an instance of the <code>Monoid</code> type class - we can sometimes produce a more ergonomic API if we change our functions to instead to a list of these monoidal values.</p>
<p>I recently <a href="https://github.com/chrisdone/lucid/issues/127">proposed an instance of this pattern to <code>lucid</code></a>, and it was well received and ultimately merged as part of the new <a href="https://hackage.haskell.org/package/lucid2-0.0.20220526"><code>lucid2</code></a> package. To motivate this post, I’m going to start by reiterating my proposal.</p>
<p><code>lucid</code> is a domain specific language for producing HTML documents. In <code>lucid</code> we have the <a href="https://hackage.haskell.org/package/lucid-2.11.1/docs/Lucid-Base.html#t:Attribute"><code>Attribute</code></a> type which represents a single key-value pairing. When we construct HTML elements, we supply a <code>[Attribute]</code> list. For example,</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb1-1" tabindex="-1"/><span class="ot">div_ ::</span> [<span class="dt">Attribute</span>] <span class="ot">-&gt;</span> <span class="dt">Html</span> a <span class="ot">-&gt;</span> <span class="dt">Html</span> a</span></code></pre></div>
<p>(Note that <code>lucid</code> has an overloading mechanism, and this is one possible type of <code>div_</code>).</p>
<p>The problem with this API is that it makes it difficult to abstract groups of attributes and reuse them.</p>
<h2 id="example-1">Example 1</h2>
<p>My motivation came from using the fantastic <a href="https://htmx.org/">HTMX</a> library, and wanting to group a common set of attributes that are needed whenever you connect an element with an end-point that serves <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events">server-sent events</a>. More specifically, I wanted to “tail” an event stream, automatically scrolling the latest element of the stream into view (using <a href="https://alpinejs.dev/">Alpine.js</a>). An example of the attributes are:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb2-1" tabindex="-1"/><span class="kw">&lt;div</span></span>
<span id="cb2-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb2-2" tabindex="-1"/><span class="ot">   hx-sse=</span><span class="st">"connect:/stream"</span></span>
<span id="cb2-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb2-3" tabindex="-1"/><span class="ot">   hx-swap=</span><span class="st">"beforeend"</span></span>
<span id="cb2-4"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb2-4" tabindex="-1"/><span class="ot">   x-on:sse-message.camel=</span><span class="st">"$el.scrollIntoView(false);"</span><span class="kw">&gt;</span></span></code></pre></div>
<p>In <code>lucid</code>, we can express this as:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb3-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb3-1" tabindex="-1"/>div_</span>
<span id="cb3-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb3-2" tabindex="-1"/>  [ makeAttribute "hx-sse" "connect:/stream"</span>
<span id="cb3-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb3-3" tabindex="-1"/>  , makeAttribute "hx-swap" "beforeend"</span>
<span id="cb3-4"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb3-4" tabindex="-1"/>  , makeAttribute "x-on:sse-message.camel" "$el.scrollIntoView(false);"</span>
<span id="cb3-5"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb3-5" tabindex="-1"/>  ]</span></code></pre></div>
<p>This is great, but my problem is wanting to re-use these attributes. If I have another page that I also want to have a stream in, I could copy these attributes, but the programmer in me is unhappy with that. Instead, I want to try and share this definition.</p>
<p>One option is:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb4-1" tabindex="-1"/>tailSSE url <span class="ot">=</span></span>
<span id="cb4-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb4-2" tabindex="-1"/>  [ makeAttribute <span class="st">"hx-sse"</span> <span class="op">$</span> <span class="st">"connect:"</span> <span class="op">&lt;&gt;</span> url</span>
<span id="cb4-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb4-3" tabindex="-1"/>  , makeAttribute <span class="st">"hx-swap"</span> <span class="st">"beforeend"</span></span>
<span id="cb4-4"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb4-4" tabindex="-1"/>  , makeAttribute <span class="st">"x-on:sse-message.camel"</span> <span class="st">"$el.scrollIntoView(false);"</span></span>
<span id="cb4-5"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb4-5" tabindex="-1"/>  ]</span></code></pre></div>
<p>But look what happens when I use this:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb5-1" tabindex="-1"/>div_</span>
<span id="cb5-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb5-2" tabindex="-1"/>  (<span class="fu">concat</span> [ tailSSE <span class="st">"/stream"</span>, [ class_ <span class="st">"stream-container"</span> ] ])</span></code></pre></div>
<p>Urgh! Just using this requires that I call <code>concat</code>, and to use more attributes I have to nest them in another list, and then I have to surround the whole thing in parenthesis. Worse, look what happens if we consider this code in the context of more “ordinary” HTML:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb6-1" tabindex="-1"/>div_ [class_ <span class="st">"page"</span>] <span class="kw">do</span></span>
<span id="cb6-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb6-2" tabindex="-1"/>  h1_ <span class="st">"Heading"</span></span>
<span id="cb6-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb6-3" tabindex="-1"/>  div_</span>
<span id="cb6-4"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb6-4" tabindex="-1"/>    [class_ <span class="st">"scroll"</span>]</span>
<span id="cb6-5"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb6-5" tabindex="-1"/>    <span class="kw">do</span></span>
<span id="cb6-6"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb6-6" tabindex="-1"/>      div_</span>
<span id="cb6-7"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb6-7" tabindex="-1"/>        ( <span class="fu">concat</span></span>
<span id="cb6-8"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb6-8" tabindex="-1"/>            [ tailSSE <span class="st">"/stream"</span>,</span>
<span id="cb6-9"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb6-9" tabindex="-1"/>              [ class_ <span class="st">"stream-container"</span>,</span>
<span id="cb6-10"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb6-10" tabindex="-1"/>                id_ <span class="st">"stream-1"</span></span>
<span id="cb6-11"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb6-11" tabindex="-1"/>              ]</span>
<span id="cb6-12"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb6-12" tabindex="-1"/>            ]</span>
<span id="cb6-13"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb6-13" tabindex="-1"/>        )</span></code></pre></div>
<p>Our SSE attributes stand out like a sore thumb, ruining the nice DSL that <code>lucid</code> gives us.</p>
<p>At this point, we need to start thinking about ways to fix this.</p>
<p>Before we get to that, let’s look at one more example</p>
<h2 id="example-2">Example 2</h2>
<p>Continuing with <code>lucid</code>, I’m also a user of <a href="https://tailwindcss.com/">Tailwind</a> for styling pages. In Tailwind, we combine primitive classes to style our elements. Sometimes, this styling needs to be conditional. When we we layout a list, we might want to emphasize a particular element:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb7-1" tabindex="-1"/>ul_ <span class="kw">do</span></span>
<span id="cb7-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb7-2" tabindex="-1"/>  li_ [ class_ <span class="st">"p-4"</span> ] <span class="st">"Item 1"</span></span>
<span id="cb7-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb7-3" tabindex="-1"/>  li_ [ class_ <span class="st">"p-4 font-bold"</span> ] <span class="st">"Item 2"</span></span>
<span id="cb7-4"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb7-4" tabindex="-1"/>  li_ [ class_ <span class="st">"p-4"</span> ] <span class="st">"Item 3"</span></span></code></pre></div>
<p>Generally this list will come from another container which we want to enumerate over:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb8-1" tabindex="-1"/>ul_ <span class="kw">do</span></span>
<span id="cb8-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb8-2" tabindex="-1"/>  for_ items \item <span class="ot">-&gt;</span></span>
<span id="cb8-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb8-3" tabindex="-1"/>    li_ [ class_ <span class="op">$</span> <span class="kw">if</span> active item <span class="kw">then</span> <span class="st">"p-4 font-bold"</span> <span class="kw">else</span> <span class="st">"p-4"</span> ]</span></code></pre></div>
<p>It’s unfortunate that we’ve had to repeat <code>p-4</code> here. We could of course factor that out, but what I more generally want to do is define a common attribute for list items, and another attribute that indicates active. Then, for active items I can just conditionally add the “active” element:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb9-1" tabindex="-1"/>ul_ <span class="kw">do</span></span>
<span id="cb9-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb9-2" tabindex="-1"/>  for_ items \item <span class="ot">-&gt;</span></span>
<span id="cb9-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb9-3" tabindex="-1"/>    li_</span>
<span id="cb9-4"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb9-4" tabindex="-1"/>      [ class_ <span class="st">"p-4"</span></span>
<span id="cb9-5"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb9-5" tabindex="-1"/>      , <span class="kw">if</span> active item <span class="kw">then</span> class_ <span class="st">"font-bold"</span> <span class="kw">else</span> <span class="op">???</span></span>
<span id="cb9-6"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb9-6" tabindex="-1"/>      ]</span>
<span id="cb9-7"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb9-7" tabindex="-1"/>      (toHTML (caption item))</span></code></pre></div>
<p>But what we are we going to put for <code>???</code>? There isn’t really an “identity” attribute. A common hack is to add <code>class_ ""</code>, but that is definitely a hack.</p>
<h2 id="solutions">Solutions</h2>
<p>If you see both of these problems, a natural reaction might be to make <code>Attribute</code> an instance of <code>Monoid</code>. We might change the type of</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb10-1" tabindex="-1"/><span class="ot">div_ ::</span> <span class="dt">Attributes</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> a <span class="ot">-&gt;</span> <span class="dt">Html</span> a</span></code></pre></div>
<p>However, when we do this we momentarily make things a little worse. Starting with the second example 2:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb11-1" tabindex="-1"/>ul_ <span class="kw">do</span></span>
<span id="cb11-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb11-2" tabindex="-1"/>  for_ items \item <span class="ot">-&gt;</span></span>
<span id="cb11-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb11-3" tabindex="-1"/>    li_</span>
<span id="cb11-4"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb11-4" tabindex="-1"/>      ( <span class="fu">mconcat</span></span>
<span id="cb11-5"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb11-5" tabindex="-1"/>          [ class_ <span class="st">"p-4"</span>,</span>
<span id="cb11-6"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb11-6" tabindex="-1"/>          , <span class="kw">if</span> active item <span class="kw">then</span> class_ <span class="st">"font-bold"</span> <span class="kw">else</span> <span class="fu">mempty</span></span>
<span id="cb11-7"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb11-7" tabindex="-1"/>          ]</span>
<span id="cb11-8"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb11-8" tabindex="-1"/>      )</span>
<span id="cb11-9"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb11-9" tabindex="-1"/>      (toHTML (caption item))</span></code></pre></div>
<p>Our <code>???</code> becomes <code>mempty</code> which literally means “no attributes at all”. This solves our problem, but the cost is that overall the API has got more verbose.</p>
<p>How about our first example?</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb12-1" tabindex="-1"/>div_ (class_ <span class="st">"page"</span>) <span class="kw">do</span></span>
<span id="cb12-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb12-2" tabindex="-1"/>  h1_ <span class="st">"Heading"</span></span>
<span id="cb12-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb12-3" tabindex="-1"/>  div_</span>
<span id="cb12-4"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb12-4" tabindex="-1"/>    (class_ <span class="st">"scroll"</span>)</span>
<span id="cb12-5"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb12-5" tabindex="-1"/>    <span class="kw">do</span></span>
<span id="cb12-6"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb12-6" tabindex="-1"/>      div_</span>
<span id="cb12-7"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb12-7" tabindex="-1"/>        ( <span class="fu">mconcat</span></span>
<span id="cb12-8"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb12-8" tabindex="-1"/>            [ tailSSE <span class="st">"/stream"</span>,</span>
<span id="cb12-9"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb12-9" tabindex="-1"/>            , class_ <span class="st">"stream-container"</span>,</span>
<span id="cb12-10"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb12-10" tabindex="-1"/>            , id_ <span class="st">"stream-1"</span></span>
<span id="cb12-11"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb12-11" tabindex="-1"/>            ]</span>
<span id="cb12-12"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb12-12" tabindex="-1"/>        )</span></code></pre></div>
<p>The result here is somewhat mixed. Applying a single attribute isn’t too bad, but my main objection to this was that it’s inconsistent, and here it’s even more inconsistent - a single attribute uses parethesis, but multiple attributes need a call to <code>mconcat</code>. It is nice though that our <code>tailSSE</code> call no longer sticks out, and just looks like any other attribute.</p>
<h2 id="the-list-of-monoids-pattern">The list of monoids pattern</h2>
<p>With that setup, I can now present my solution - the list of monoids pattern. As the name suggests, the trick is to simply change our <code>Attributes</code> argument to now be a <code>[Attributes]</code>. This is essentially a list-of-lists of key-value pairs, which is probably not our first instinct when creating this API. However, I think it pays of when we try and lay out HTML using <code>lucid</code>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb13-1" tabindex="-1"/>div_ [ class_ <span class="st">"page"</span> ] <span class="kw">do</span></span>
<span id="cb13-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb13-2" tabindex="-1"/>  h1_ <span class="st">"Heading"</span></span>
<span id="cb13-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb13-3" tabindex="-1"/>  div_</span>
<span id="cb13-4"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb13-4" tabindex="-1"/>    [ class_ <span class="st">"scroll"</span> ]</span>
<span id="cb13-5"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb13-5" tabindex="-1"/>    <span class="kw">do</span></span>
<span id="cb13-6"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb13-6" tabindex="-1"/>      div_</span>
<span id="cb13-7"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb13-7" tabindex="-1"/>        [ tailSSE <span class="st">"/stream"</span>,</span>
<span id="cb13-8"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb13-8" tabindex="-1"/>        , class_ <span class="st">"stream-container"</span>,</span>
<span id="cb13-9"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb13-9" tabindex="-1"/>        , id_ <span class="st">"stream-1"</span></span>
<span id="cb13-10"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb13-10" tabindex="-1"/>        ]</span></code></pre></div>
<p>We’re back to where we started! However, we’ve also retained a solution to the second example:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb14-1" tabindex="-1"/>ul_ <span class="kw">do</span></span>
<span id="cb14-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb14-2" tabindex="-1"/>  for_ items \item <span class="ot">-&gt;</span></span>
<span id="cb14-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb14-3" tabindex="-1"/>    li_</span>
<span id="cb14-4"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb14-4" tabindex="-1"/>      [ class_ <span class="st">"p-4"</span>,</span>
<span id="cb14-5"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb14-5" tabindex="-1"/>      , <span class="kw">if</span> active item <span class="kw">then</span> class_ <span class="st">"font-bold"</span> <span class="kw">else</span> <span class="fu">mempty</span></span>
<span id="cb14-6"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb14-6" tabindex="-1"/>      ]</span>
<span id="cb14-7"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb14-7" tabindex="-1"/>      (toHTML (caption item))</span></code></pre></div>
<h2 id="lucid-could-go-further"><code>lucid</code> could go further</h2>
<p>Interestingly, once I had this observation I realised that <code>lucid</code> could actually go further. <code>Html a</code> is a <code>Monoid</code>, but notice that when we construct a <code>div_</code> we supply a single <code>Html a</code>. This post suggests that an alternative API is instead:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb15-1" tabindex="-1"/><span class="ot">div_ ::</span> [<span class="dt">Attributes</span>] <span class="ot">-&gt;</span> [<span class="dt">Html</span> a] <span class="ot">-&gt;</span> <span class="dt">Html</span> a</span></code></pre></div>
<p>Users of Elm might be getting a sense of déjà vu, as this is very similar to the type that Elm uses! I like this form because I think it makes HTML documents much more regular:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb16-1" tabindex="-1"/>div_</span>
<span id="cb16-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb16-2" tabindex="-1"/>  [ class_ <span class="st">"p-4 font-bold"</span> ]</span>
<span id="cb16-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb16-3" tabindex="-1"/>  [ p_ <span class="st">"Paragraph 1"</span></span>
<span id="cb16-4"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb16-4" tabindex="-1"/>  , img_ [ src_ <span class="st">"haskell.gif"</span> ]</span>
<span id="cb16-5"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb16-5" tabindex="-1"/>  , p_ <span class="st">"More"</span></span>
<span id="cb16-6"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb16-6" tabindex="-1"/>  ]</span></code></pre></div>
<p>Elm falls short of the pattern advocated in this blog post, as both attributes and html elements lack an identity element, so while Elm uses lists, they aren’t lists of monoidal values.</p>
<h2 id="optparse-applicative"><code>optparse-applicative</code></h2>
<p>I want to briefly compare this to the API in <code>optparse-applicative</code>. <a href="https://twitter.com/GabriellaG439/status/1539325694991249408">Gabriella postulated</a> that <code>optparse-applicative</code> might be more approachable if it used records instead of its current monoidal based API. While I don’t disagree, I want to suggest that the list-of-monoids pattern here might also help.</p>
<p>When we use <code>optparse-applicative</code>, we often end up with code like:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb17-1" tabindex="-1"/>flag</span>
<span id="cb17-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb17-2" tabindex="-1"/>  <span class="dt">True</span></span>
<span id="cb17-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb17-3" tabindex="-1"/>  <span class="dt">False</span></span>
<span id="cb17-4"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb17-4" tabindex="-1"/>   ( long <span class="st">"no-extensions"</span></span>
<span id="cb17-5"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb17-5" tabindex="-1"/>   <span class="op">&lt;&gt;</span> short <span class="ch">'E'</span></span>
<span id="cb17-6"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb17-6" tabindex="-1"/>   <span class="op">&lt;&gt;</span> help <span class="st">"Don't show the possible extensions for physical files"</span> </span>
<span id="cb17-7"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb17-7" tabindex="-1"/>   )</span></code></pre></div>
<p>Here we’re using a <code>&lt;&gt;</code> like a list. Unfortunately, this has two problems:</p>
<ul>
<li><p>Automatic code formatters already have a way to format lists, but they aren’t generally aware that we’re using <code>&lt;&gt;</code> as if it were constructing a list. This leads to either unexpected formatting, or special-casing within the formatter.</p></li>
<li><p>It’s less discoverable to new Haskell users that they can supply multiple values. Even an experienced Haskell user will likely have to look up the type and spot the <code>Monoid</code> instance.</p></li>
</ul>
<p>If <code>optparse-applicative</code> instead used a list of monoids, the API would be a little more succinct for users, while not losing any functionality:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb18-1" tabindex="-1"/>flag</span>
<span id="cb18-2"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb18-2" tabindex="-1"/>  <span class="dt">True</span></span>
<span id="cb18-3"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb18-3" tabindex="-1"/>  <span class="dt">False</span></span>
<span id="cb18-4"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb18-4" tabindex="-1"/>  [ long <span class="st">"no-extensions"</span></span>
<span id="cb18-5"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb18-5" tabindex="-1"/>  , short <span class="ch">'E'</span></span>
<span id="cb18-6"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb18-6" tabindex="-1"/>  , help <span class="st">"Don't show the possible extensions for physical files"</span></span>
<span id="cb18-7"><a href="https://blog.ocharles.org.uk/blog/posts.rss#cb18-7" tabindex="-1"/>  ]</span></code></pre></div>
<p>Modifiers can be grouped and abstracted as before, and if we want to compute modifiers with an option to produce no modifiers at all, we can still return <code>mempty</code>. However users are no longer burdened with needing to combine modifiers using <code>&lt;&gt;</code>, and can instead lean on Haskell’s special syntax for lists.</p>
<h2 id="concluding-thoughts">Concluding thoughts</h2>
<p>If at this point you’re somewhat underwhelmed by this blog post, don’t worry! This pattern is extremely simple - there are no complex tricks required, it’s just literally wrapping things in a list, moving a call to <code>mconcat</code>, and you’re done. However, I think the implications are fairly significant, and I highly recommend you give this a try.</p></div>
    </summary>
    <updated>2022-06-22T00:00:00Z</updated>
    <published>2022-06-22T00:00:00Z</published>
    <author>
      <name>Oliver Charles</name>
    </author>
    <source>
      <id>http://ocharles.org.uk/blog</id>
      <link href="http://ocharles.org.uk/blog" rel="alternate" type="text/html"/>
      <link href="http://ocharles.org.uk/blog/posts.rss" rel="self" type="application/rss+xml"/>
      <subtitle>Haskell geek. Wannabe mathematician. Electronic music fanatic.</subtitle>
      <title>Inside ocharles</title>
      <updated>2022-06-22T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://byorgey.wordpress.com/?p=2449</id>
    <link href="https://byorgey.wordpress.com/2022/06/20/swarm-status-report/" rel="alternate" type="text/html"/>
    <link href="https://byorgey.wordpress.com/2022/06/20/swarm-status-report/#comments" rel="replies" type="text/html"/>
    <link href="https://byorgey.wordpress.com/2022/06/20/swarm-status-report/feed/atom/" rel="replies" type="application/atom+xml"/>
    <title xml:lang="en">Swarm: status report</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml">Swarm is a 2D programming and resource gathering game, written in Haskell. I announced it last September and gave an update one week after that, but haven’t written anything since then. However, that doesn’t mean development has stopped! Since last … <a href="https://byorgey.wordpress.com/2022/06/20/swarm-status-report/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://github.com/swarm-game/swarm/">Swarm</a> is a 2D programming and resource gathering game, written in Haskell. I <a href="https://byorgey.wordpress.com/2021/09/23/swarm-preview-and-call-for-collaboration/">announced it last September</a> and <a href="https://byorgey.wordpress.com/2021/10/01/swarm-a-lot-can-happen-in-a-week/">gave an update one week after that</a>, but haven’t written anything since then. However, that doesn’t mean development has stopped! Since last October, the repo has grown by an additional 4K lines of Haskell code (to 12K). Notable changes since then include:</p>
<ul>
<li>Many UI improvements, like a main menu, ASCII art recipes, and mouse support</li>
<li>Many new entities and recipes (multiple types of motors, drills, and mines; new materials like iron, silver, quartz, and glass; new devices like circuits, clocks, cameras, comparators, compasses, …)</li>
<li>The game now supports <em>scenarios</em>, generically describing how to initialize the game and what the winning conditions should be: scenarios can be used to describe open-world games, tutorials, tricky programming challenges, … <em>etc.</em></li>
<li>Improvements to the programming language, like a new dedicated <code>robot</code> type, and a “delay” type for things that should be evaluated lazily</li>
<li>Increased emphasis on exploration, with the ability to <code>scan</code> unknown entities in the world</li>
</ul>
<div style="text-align: center;">
<p><img src="https://byorgey.files.wordpress.com/2022/06/main-menu.png?w=640"/></p>
</div>
<div style="text-align: center;">
<p><img src="https://byorgey.files.wordpress.com/2022/06/trees.png?w=640"/></p>
</div>
<p>Development has picked up considerably in the past few weeks, and we’re making good progress toward a planned <a href="https://github.com/orgs/swarm-game/projects/1/views/5">alpha release</a> (though no concrete plans in terms of a release date yet). If you’re interested in getting involved, check out our <a href="https://github.com/swarm-game/swarm/blob/main/CONTRIBUTING.md">contribution guide</a>, come join us on IRC (<code>#swarm</code> on Libera.Chat) and take a look at the list of <a href="https://github.com/swarm-game/swarm/issues?q=is%3Aissue+is%3Aopen+label%3A%22C-Low+Hanging+Fruit%22">issues marked “low-hanging fruit”</a>—as of this writing there are 28 such issues, so plenty of tasks for everyone!</p></div>
    </content>
    <updated>2022-06-20T16:26:36Z</updated>
    <published>2022-06-20T16:26:36Z</published>
    <category scheme="https://byorgey.wordpress.com" term="haskell"/>
    <category scheme="https://byorgey.wordpress.com" term="projects"/>
    <category scheme="https://byorgey.wordpress.com" term="game"/>
    <category scheme="https://byorgey.wordpress.com" term="programming"/>
    <category scheme="https://byorgey.wordpress.com" term="resource"/>
    <category scheme="https://byorgey.wordpress.com" term="robot"/>
    <category scheme="https://byorgey.wordpress.com" term="Swarm"/>
    <author>
      <name>Brent</name>
      <uri>http://ozark.hendrix.edu/~yorgey/</uri>
    </author>
    <source>
      <id>http://byorgey.wordpress.com/feed/atom/</id>
      <link href="https://byorgey.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://byorgey.wordpress.com/feed/atom/" rel="self" type="application/atom+xml"/>
      <link href="https://byorgey.wordpress.com/osd.xml" rel="search" title="blog :: Brent -&gt; [String]" type="application/opensearchdescription+xml"/>
      <link href="https://s1.wp.com/opensearch.xml" rel="search" title="WordPress.com" type="application/opensearchdescription+xml"/>
      <link href="https://byorgey.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title xml:lang="en">blog :: Brent -&gt; [String]</title>
      <updated>2022-09-01T17:04:53Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://magnus.therning.org/2022-06-15-power-mode-in-spacemacs.html</id>
    <link href="https://magnus.therning.org/2022-06-15-power-mode-in-spacemacs.html" rel="alternate" type="text/html"/>
    <title>Power-mode in Spacemacs</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
I just found the <a href="https://github.com/elizagamedev/power-mode.el">Power Mode</a> for Emacs. If you want to try it out in Spacemacs
you can make sure that your <code>~/.spacemacs</code> contains the following
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">dotspacemacs-additional-packages
'<span class="org-rainbow-delimiters-depth-1">(</span>
  ...
  <span class="org-rainbow-delimiters-depth-2">(</span>power-mode <span class="org-builtin">:location</span> <span class="org-rainbow-delimiters-depth-3">(</span>recipe
                         <span class="org-builtin">:fetcher</span> github
                         <span class="org-builtin">:repo</span> <span class="org-string">"elizagamedev/power-mode.el"</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
After a restart Power Mode can be turned on using <code>SPC SPC power-mode</code>.
</p>

<p>
Unfortunately I found that it slows down rendering so badly that Emacs isn't
keeping up with my typing. Even though I removed it right away again it was fun
to try it out, and I did learn how to add package to Spacemacs that aren't on
MELPA.
</p>

<p>
A useful resource is this <a href="https://github.com/melpa/melpa#recipe-format">reference on the recipe format</a>.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-spacemacs.html">spacemacs</a></div></div>
    </summary>
    <updated>2022-06-15T06:08:00Z</updated>
    <published>2022-06-15T06:08:00Z</published>
    <category term="emacs"/>
    <category term="spacemacs"/>
    <source>
      <id>https://magnus.therning.org/</id>
      <author>
        <name>Magnus Therning</name>
      </author>
      <link href="https://magnus.therning.org/" rel="alternate" type="text/html"/>
      <link href="https://magnus.therning.org/feed.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Magnus web site</subtitle>
      <title>Magnus web site</title>
      <updated>2022-08-21T20:35:13Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-1777990983847811806.post-1659249216193744870</id>
    <link href="https://www.haskellforall.com/feeds/1659249216193744870/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="https://www.haskellforall.com/2022/06/the-appeal-of-bidirectional-type.html#comment-form" rel="replies" title="2 Comments" type="text/html"/>
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1659249216193744870" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1659249216193744870" rel="self" type="application/atom+xml"/>
    <link href="https://www.haskellforall.com/2022/06/the-appeal-of-bidirectional-type.html" rel="alternate" title="The appeal of bidirectional type-checking" type="text/html"/>
    <title>The appeal of bidirectional type-checking</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">The appeal of bidirectional type-checking    <p>In this post I hope to explain why <a href="https://www.cl.cam.ac.uk/~nk480/bidir.pdf">bidirectional type-checking</a> has a lot of cultural cachet within the programming language theory community. To be clear, I’m an amateur and I have no formal background in computer science or type theory. Nonetheless, I believe I’ve learned enough and compared notes with others to motivate bidirectional type-checking.</p><h4 id="subtyping">Subtyping</h4><p>The fundamental problem that bidirectional type-checking solves well is <strong>subtyping</strong>. I will not explain why in this post, so for now take it as an article of faith that bidirectional type-checking provides a simple and consistent framework for supporting subtyping within a programming language’s type system.</p><p>Bidirectional type-checking does other things well, too (such as inferring the types of inputs from outputs), but subtyping is the thing that bidirectional type-checking does uniquely well.  For example, you can infer inputs from outputs using unification instead of bidirectional type-checking, which is why I don't motivate bidirectional type-checking in terms of doing inference "in reverse".</p><p>By “subtyping”, I mean that a type <code>A</code> is a subtype of type <code>B</code> if any expression of type <code>A</code> is also a valid expression of type <code>B</code>.</p><p>For example, we could create a language that provides two numeric types:</p><ul><li><p><code>Natural</code> - The type of non-negative integers (ℕ)</p></li><li><p><code>Integer</code> - The type of all integers (ℤ)</p></li></ul><p>Furthermore, we could define <code>Natural</code> to be a subtype of <code>Integer</code> (i.e. ℕ ⊆ ℤ). In other words, if a scalar literal like <code>4</code> were a valid <code>Natural</code> number then <code>4</code> would also be a valid <code>Integer</code>, too. That would permit us to write something like this <a href="https://github.com/Gabriella439/grace">Fall-from-Grace</a> code:</p><div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-1" tabindex="-1"/><span class="kw">let</span> x <span class="ot">=</span> <span class="dv">4</span> <span class="op">:</span> <span class="dt">Natural</span></span><br/><span id="cb1-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-2" tabindex="-1"/></span><br/><span id="cb1-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-3" tabindex="-1"/><span class="kw">in</span>  [ x, <span class="op">-</span><span class="dv">5</span> ] <span class="op">:</span> <span class="dt">List</span> <span class="dt">Integer</span></span></code></pre></div><p>… and the type-checker would not complain that we put a <code>Natural</code> number inside a <code>List</code> of <code>Integer</code>s, because a <code>Natural</code> number is a subtype of an <code>Integer</code>.</p><h4 id="why-subtyping-matters">Why subtyping matters</h4><p>Now, automatic numeric coercions like that are convenient but in the grand scheme of things they are not a big deal from a language implementer’s point of view. The real appeal of subtyping is that subtyping appears in more places than you’d expect.</p><p>I’m not even talking about object-oriented subtyping like “The <code>Dog</code> class is a subtype of the <code>Animal</code> class”. Subtyping occurs quite frequently in even non-OOP languages, in the form of universal quantification (a.k.a. “polymorphism” or “generics”).</p><p>For example, we can define a polymorphic identity function, but then use the function as if it had a narrower (more specialized) type:</p><div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-1" tabindex="-1"/><span class="kw">let</span> <span class="fu">id</span> <span class="op">:</span> <span class="kw">forall</span> (a <span class="op">:</span> <span class="dt">Type</span>) <span class="op">.</span> a <span class="ot">-&gt;</span> a</span><br/><span id="cb2-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-2" tabindex="-1"/>       <span class="ot">=</span> \x <span class="ot">-&gt;</span> x</span><br/><span id="cb2-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-3" tabindex="-1"/></span><br/><span id="cb2-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-4" tabindex="-1"/><span class="kw">in</span>  <span class="fu">id</span> <span class="op">:</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span></span></code></pre></div><p>… and that works because <code>forall (a : Type) . a -&gt; a</code> is a subtype of <code>Text -&gt; Text</code>.</p><p>Yes, you read that right; I didn’t get the subtyping direction backwards. A polymorphic type is a subtype of a more specialized type.</p><p>In fact, <code>forall (a : Type) . a -&gt; a</code> is a subtype of multiple types, such as:</p><ul><li><code>Integer -&gt; Integer</code></li><li><code>List Natural -&gt; List Natural</code></li><li><code>{ x: Bool } -&gt; { x: Bool }</code></li><li>…</li></ul><p>… and so on. This might be a bit counter-intuitive if you come from an OOP background where usually each type is a subtype of at most one other (explicitly declared) supertype.</p><p>This type specialization is implicit, meaning that we don’t need the type annotation to use <code>id</code> on a value of type <code>Text</code>. Instead, the specialization happens automatically, so we can use <code>id</code> on any value without annotations:</p><div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-1" tabindex="-1"/><span class="kw">let</span> <span class="fu">id</span> <span class="op">:</span> <span class="kw">forall</span> (a <span class="op">:</span> <span class="dt">Type</span>) <span class="op">.</span> a <span class="ot">-&gt;</span> a</span><br/><span id="cb3-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-2" tabindex="-1"/>       <span class="ot">=</span> \x <span class="ot">-&gt;</span> x</span><br/><span id="cb3-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-3" tabindex="-1"/></span><br/><span id="cb3-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-4" tabindex="-1"/><span class="kw">in</span>  <span class="fu">id</span> <span class="st">"ABC"</span></span></code></pre></div><p>If our language didn’t support subtyping then we’d need to explicitly abstract over and apply type arguments. For example, this is how that same <code>id</code> example would work in <a href="https://dhall-lang.org">Dhall</a> (which does not support any form of subtyping):</p><div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-1" tabindex="-1"/><span class="kw">let</span> <span class="fu">id</span> <span class="op">:</span> <span class="kw">forall</span> (a <span class="op">:</span> <span class="dt">Type</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span><br/><span id="cb4-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-2" tabindex="-1"/>       <span class="ot">=</span> \(a <span class="op">:</span> <span class="dt">Type</span>) <span class="ot">-&gt;</span> \(x <span class="op">:</span> a) <span class="ot">-&gt;</span> x</span><br/><span id="cb4-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-3" tabindex="-1"/>        <span class="co">-- ↑ Explicit type abstraction</span></span><br/><span id="cb4-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-4" tabindex="-1"/></span><br/><span id="cb4-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-5" tabindex="-1"/><span class="kw">in</span>  <span class="fu">id</span> <span class="dt">Text</span> <span class="st">"ABC"</span></span><br/><span id="cb4-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-6" tabindex="-1"/>    <span class="co">-- ↑ Explicit type application</span></span></code></pre></div><p>Typically I refer to a Dhall-style type system as “explicit type abstraction and type application”. Vice versa, I refer to a Grace-style language as “implicit type abstraction and type application”.</p><p>The real reason why subtyping matters is because you need to support subtyping in order to implement a language with “implicit type abstraction/application”. In other words, you need some way to automatically produce and consume polymorphic types without explicit types or type annotations from the end user and that is essentially a form of subtyping.</p><h4 id="bidirectional-type-checking-vs-hindley-milner">Bidirectional type-checking vs unification</h4><p>Bidirectional type-checking is not the only way to implement a language with implicit type abstraction/application. For example, <a href="https://en.wikipedia.org/wiki/Hindley&#x2013;Milner_type_system">Hindley-Milner type inference</a> is a type system that is based on unification instead of bidirectional type-checking type system and Hindley-Milner inference still supports implicit type abstraction/application.</p><p>The reason why Hindley Milner type inference works, though, is by exploiting a narrow set of requirements that do not generalize well to more sophisticated type systems. Specifically:</p><ul><li><p>Hindley Milner type inference only permits “top-level polymorphism”</p><p>In other words, Hindley Milner type inference only permits universal quantification at the top-level of a program or at the top-level of a <code>let</code>-bound expression</p></li><li><p>Hindley Milner type inference does not support any other form of subtyping</p></li></ul><p>To expand on the latter point, language implementers often want to add other forms of subtyping to our languages beyond implicit type abstraction/application, such as:</p><ul><li>Implicit numeric coercions</li><li>Object-oriented inheritance</li><li><a href="https://en.wikipedia.org/wiki/Existential_quantification">Existential quantification</a> (the dual of universal quantification)</li><li><a href="https://en.wikipedia.org/wiki/Refinement_type">Refinement types</a></li></ul><p>… and if you try to extend Hindley Milner type inference to add any other language feature that requires subtyping then you run into issues pretty quickly. This is because Hindley Milner exploits a cute hack that does not generalize well.</p><p>In contrast, bidirectional type-checking is not just a method for handling implicit type abstraction/application. Rather, bidirectional type-checking is a framework for introducing any form of subtyping, of which implicit type abstraction/application is just a special case.</p><h4 id="conclusion">Conclusion</h4><p>If you’d like to learn more about bidirectional type-checking then I recommend reading:</p><ul><li><p><a href="https://www.cl.cam.ac.uk/~nk480/bidir.pdf">Complete and Easy Bidirectional Typechecking for Higher-Rank Polymorphism</a></p><p>This paper provides an all-in-one presentation of how to implement a bidirectional type-checking system</p></li><li><p><a href="https://www.cl.cam.ac.uk/~nk480/bidir-survey.pdf">Bidirectional Typing</a></p><p>This explains the general principles behind bidirectional type-checking so that you can better understand how to extend the type system with new features</p></li></ul><p>As I mentioned earlier, bidirectional type-checking has a lot of cultural cachet within the programming language theory community, so even if you don’t plan on using it, understanding it will help you speak the same language as many others within the community.</p></div>
    </content>
    <updated>2022-06-10T22:04:50Z</updated>
    <published>2022-06-03T13:12:00Z</published>
    <author>
      <name>Gabriella Gonzalez</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/01917800488530923694</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-1777990983847811806</id>
      <author>
        <name>Gabriella Gonzalez</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/01917800488530923694</uri>
      </author>
      <link href="https://www.haskellforall.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default" rel="self" type="application/atom+xml"/>
      <link href="https://www.haskellforall.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Haskell for all</title>
      <updated>2022-09-14T10:40:09Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-9757377.post-1723352648675791523</id>
    <link href="https://twitter.com/PLDI/status/1534937508760281091" rel="related" title="Should PLDI join PACMPL?" type="text/html"/>
    <link href="https://wadler.blogspot.com/feeds/1723352648675791523/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=9757377&amp;postID=1723352648675791523" rel="replies" title="1 Comments" type="text/html"/>
    <link href="https://www.blogger.com/feeds/9757377/posts/default/1723352648675791523" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/9757377/posts/default/1723352648675791523" rel="self" type="application/atom+xml"/>
    <link href="https://wadler.blogspot.com/2022/06/should-pldi-join-pacmpl.html" rel="alternate" title="Should PLDI join PACMPL?" type="text/html"/>
    <title>Should PLDI join PACMPL?</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><span style="font-size: large;"><span/></span></p><p/><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEhjHNmo2159FyCmjIk7j6J_lKj5q-h1KP5FHA9AnlLMHmNuD7GFTlRfubGPHg6nDx5CvgE8_PUyxNB0SnwPHcH1mQzkgYU8uI-dnJ2flVKfIdSnjcwhwBgrdDfhSyjC-NEsICbRa8wSIVSYIfoqESAoO6qOjz1Oc0Z-uOyFz1fP_XnykM5n3w" style="margin-left: 1em; margin-right: 1em;"><img alt="" height="286" src="https://blogger.googleusercontent.com/img/a/AVvXsEhjHNmo2159FyCmjIk7j6J_lKj5q-h1KP5FHA9AnlLMHmNuD7GFTlRfubGPHg6nDx5CvgE8_PUyxNB0SnwPHcH1mQzkgYU8uI-dnJ2flVKfIdSnjcwhwBgrdDfhSyjC-NEsICbRa8wSIVSYIfoqESAoO6qOjz1Oc0Z-uOyFz1fP_XnykM5n3w=w640-h286" width="640"/></a></div><p/><p>Via a <a href="https://twitter.com/PLDI/status/1534937508760281091">tweet</a>, the PLDI steering community is asking whether PLDI should join PACMPL. <a href="https://twitter.com/PLDI/status/1534937508760281091">Have your say!</a> (My vote is yes.) </p><blockquote><p><span style="font-size: large;"><span style="font-family: arial;"><span style="background-color: white; color: #0f1419; white-space: pre-wrap;">Should </span><a class="css-4rbku5 css-18t94o4 css-901oao css-16my406 r-1cvl2hr r-1loqt21 r-poiln3 r-bcqeeo r-qvutc0" dir="ltr" href="https://twitter.com/PLDI" style="border: 0px solid black; color: #1d9bf0; cursor: pointer; display: inline; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: inherit; white-space: inherit;">@pldi</a> <span class="css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0" style="background-color: white; border: 0px solid black; color: #0f1419; display: inline; line-height: inherit; margin: 0px; padding: 0px; white-space: pre-wrap;">join</span></span><span class="css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0"> ICFP, OOPSLA and POPL in publishing its proceedings in the PACM-PL journal? The PLDI Steering Committee would appreciate your views. Please complete this short survey before the end of Thursday 16 June (AoE): </span><a class="css-4rbku5 css-18t94o4 css-901oao css-16my406 r-1cvl2hr r-1loqt21 r-poiln3 r-bcqeeo r-qvutc0" dir="ltr" href="https://t.co/weH2tlnfGd" rel="noopener noreferrer" target="_blank"><span class="css-901oao css-16my406 r-poiln3 r-hiw28u r-qvk6io r-bcqeeo r-qvutc0" style="border: 0px solid black; color: inherit; display: inline; font-family: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 0px; margin: 0px; padding: 0px; white-space: inherit;">https://</span>forms.office.com/r/HjwYvq1CGw</a></span></p><div/></blockquote><div><br/></div></div>
    </content>
    <updated>2022-06-09T21:38:18Z</updated>
    <published>2022-06-09T21:38:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="Academia"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="ACM"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Programming Languages"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="SIGPLAN"/>
    <author>
      <name>Philip Wadler</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/12009347515095774366</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-9757377</id>
      <category term="Politics"/>
      <category term="Functional Programming"/>
      <category term="Programming Languages"/>
      <category term="Scotland"/>
      <category term="Computing"/>
      <category term="Independence"/>
      <category term="Yes!"/>
      <category term="Haskell"/>
      <category term="UK"/>
      <category term="Academia"/>
      <category term="Edinburgh"/>
      <category term="Cycling"/>
      <category term="Graphics"/>
      <category term="Mathematics"/>
      <category term="Science"/>
      <category term="Types"/>
      <category term="Logic"/>
      <category term="US"/>
      <category term="Covid-19"/>
      <category term="Security"/>
      <category term="Web"/>
      <category term="EU"/>
      <category term="Comics"/>
      <category term="Theory"/>
      <category term="Climate Change"/>
      <category term="Israel"/>
      <category term="Blockchain"/>
      <category term="Education"/>
      <category term="IOHK"/>
      <category term="Internet"/>
      <category term="SIGPLAN"/>
      <category term="Scala"/>
      <category term="Status"/>
      <category term="University"/>
      <category term="ACM"/>
      <category term="Comedy"/>
      <category term="Concurrency"/>
      <category term="Cryptocurrency"/>
      <category term="DSL"/>
      <category term="Databases"/>
      <category term="Dynamic and Static Typing"/>
      <category term="F#"/>
      <category term="Green"/>
      <category term="JavaScript"/>
      <category term="Lego"/>
      <category term="Privacy"/>
      <category term="Recursion"/>
      <category term="Session Types"/>
      <category term="Strange Loop"/>
      <category term="Writing"/>
      <category term="Agda"/>
      <category term="Category Theory"/>
      <category term="Developers"/>
      <category term="Formal Methods"/>
      <category term="Java"/>
      <category term="Object-Oriented"/>
      <category term="Technology"/>
      <category term="Architecture"/>
      <category term="Copyright"/>
      <category term="Distributed Computing"/>
      <category term="Europe"/>
      <category term="Productivity"/>
      <category term="Racket"/>
      <category term="Science Fiction"/>
      <category term="BLM"/>
      <category term="Brexit"/>
      <category term="DRM"/>
      <category term="Environment"/>
      <category term="Erlang"/>
      <category term="Finance"/>
      <category term="Gender"/>
      <category term="Theatre"/>
      <category term="BDS"/>
      <category term="Books"/>
      <category term="Cinema"/>
      <category term="Communication"/>
      <category term="Japan"/>
      <category term="Net Neutrality"/>
      <category term="Open Access"/>
      <category term="Palestine"/>
      <category term="Pyret"/>
      <category term="Scheme"/>
      <category term="Sweden"/>
      <author>
        <name>Philip Wadler</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/12009347515095774366</uri>
      </author>
      <link href="https://wadler.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom" rel="self" type="application/atom+xml"/>
      <link href="https://wadler.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom&amp;start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Wadler's Blog</title>
      <updated>2022-09-07T12:38:25Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://patternsinfp.wordpress.com/?p=230</id>
    <link href="https://patternsinfp.wordpress.com/2022/06/06/richard-bird/" rel="alternate" type="text/html"/>
    <link href="https://patternsinfp.wordpress.com/2022/06/06/richard-bird/#comments" rel="replies" type="text/html"/>
    <link href="https://patternsinfp.wordpress.com/2022/06/06/richard-bird/feed/atom/" rel="replies" type="application/atom+xml"/>
    <title xml:lang="en">Richard Bird, 1943-2022</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml">My mentor, colleague, and friend Richard Bird died in April 2022 after a long battle with cancer. I wrote an obituary of him for The Guardian, his favoured newspaper; this post is a hybrid of that obituary and a eulogy … <a href="https://patternsinfp.wordpress.com/2022/06/06/richard-bird/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>My mentor, colleague, and friend Richard Bird died in April 2022 after a long battle with cancer. I wrote an <a href="https://www.theguardian.com/technology/2022/jun/03/richard-bird-obituary">obituary</a> of him for The Guardian, his favoured newspaper; this post is a hybrid of that obituary and a eulogy I delivered at his funeral.</p>


<figure class="wp-block-image size-large"><a href="https://patternsinfp.files.wordpress.com/2022/06/bird.jpg"><img alt="" class="wp-image-406" src="https://patternsinfp.files.wordpress.com/2022/06/bird.jpg?w=725"/></a></figure>


<p>Richard was born in 1943 in London. His parents Kay and Jack were landlords of a series of pubs in South London. Richard attended St Olave’s Grammar School, then matriculated to read mathematics at Cambridge in 1960. After graduation, he had a brief spell working in sales for <a href="https://en.wikipedia.org/wiki/International_Computers_and_Tabulators">International Computers and Tabulators</a>, the mainframe computer company that eventually became ICL. He was evidently effective in this role, being as personable as he was; but it involved flying around the country in small planes, which Richard did not enjoy at all. No amount of money or approval could persuade him to stay, so he left after a year to do postgraduate study at the <a href="https://en.wikipedia.org/wiki/Institute_of_Computer_Science">University of London Institute of Computer Science</a>.</p>

<p>Richard met Norma Lapworth at a friend’s 21st birthday party. Norma trained as an ecologist, later becoming a teacher, education advisor, and Ofsted schools inspector. Richard and Norma married in 1967.</p>

<p>After a year lecturing in Vancouver 1971-1972, Richard and Norma returned to the UK for Richard to take up a lectureship at the University of Reading. He was given the time finally to complete his PhD thesis, on <a href="https://ethos.bl.uk/OrderDetails.do?uin=uk.bl.ethos.644167">Computational Complexity on Register Machines</a>, in 1973. But Reading was a rather linguistically oriented department, which did not suit Richard’s mathematical temperament. So he leapt at the opportunity to join Tony Hoare’s expanding <a href="https://www.cs.ox.ac.uk/aboutus/cshistory.html">Programming Research Group</a> at Oxford University Computing Laboratory in 1983. He was appointed as a University Lecturer in Computation, with a non-tutorial fellowship at St Cross College, assuming responsibility as Director of the MSc in Computation. He moved to a Tutorial Fellowship at Lincoln College in 1988. Richard stayed at the PRG for the remainder of his career, being promoted to Reader in Computation in 1990 and then to Professor in 1996, serving as Director of OUCL from 1998 to 2003, and finally retiring in 2008 after 25 years.</p>

<p>Richard’s research area was functional programming—an approach to computer programming centred around obeying the conventions of traditional mathematics. To Richard, it was self-evident that programs are mathematical entities, and that you can manipulate them in precisely the same way as you do quadratic equations. No immediate need for consideration of the capabilities of computer hardware; no entanglement in the vagaries of specific programming languages. Just algebra, pure and simple.</p>

<p>His PhD thesis in the early 1970s was already concerned with program transformation: the rules by which one program is shown to be equivalent to another. He wasn’t so interested in the program you actually end up with, so much as the process by which you got there, and how you know you ended up in the right place, and what alternative directions you didn’t follow en route. Specifically, he was interested in the calculus of equivalences with which you could conduct equational reasoning on programs, just as in high-school algebra.</p>

<p>In 1980 he was invited to participate in <a href="https://ifipwg21.org/">IFIP Working Group 2.1 on Algorithmic Languages and Calculi</a>. This was the group that had designed the seminal programming language Algol68, and that continues to research into notations and techniques for designing and describing algorithms today. Richard had a very fruitful collaboration in WG2.1 with <a href="https://www.kestrel.edu/people/meertens/">Lambert Meertens</a> from the CWI at Amsterdam, developing what came to be known as the <em>Bird-Meertens Formalism</em>, or <a href="http://www.cs.ox.ac.uk/publications/publication13852-abstract.html">Squiggol</a> to its friends. This was a concise and somewhat cryptic algebraic program notation with a powerful accompanying corpus of theorems, supporting the equational reasoning style that Richard sought.</p>

<p>Richard is known and respected around the world for his elegant writing. He published about 100 scientific papers in his life—not especially prolific for a scientist, but every one of those papers was very well polished. He also wrote or co-wrote seven books, starting with <a href="https://isbnsearch.org/isbn/9780471016502">Programs and Machines</a> (1976), which featured among other constructions a machine called NoRMa, the Number-Theoretic Register Machine.</p>

<p>I won’t go through all seven books, much as I would like to; I will just pick out a few highlights. Richard’s second book, <a href="https://isbnsearch.org/isbn/9780134841892">Introduction to Functional Programming</a> (1988, with Phil Wadler), set out his vision for teaching functional programming. Many people love this book. <a href="http://www.cs.nott.ac.uk/~pszgmh/">Graham Hutton</a> wrote to me to say: 
</p><blockquote>Richard set the standards for elegance and clarity, and the original Bird &amp; Wadler is my all-time favourite book. It still stands up today as one of the best programming books ever written—every page is a gem.</blockquote>
<p/>

<p>Richard’s next book, <a href="https://isbnsearch.org/isbn/9780135072455">Algebra of Programming</a> (1996, with Oege de Moor), was much more research-oriented, extending his Squiggol agenda from functions to relations. Tim Sears <a href="https://twitter.com/csTimSears/status/1511405124253466626">tweeted</a>: 
</p><blockquote>This book blew my mind regarding what the relationship could be between math, programming and systems. I never met Richard, but his work has had a profound impact on me.</blockquote>
<p/>

<p>Richard’s fifth book <a href="https://www.cambridge.org/gb/academic/subjects/computer-science/programming-languages-and-applied-logic/pearls-functional-algorithm-design">Pearls of Functional Algorithm Design</a> collected and repolished some of the <em>Functional Pearls</em> he had published over the years. These Pearls emulated Jon Bentley’s famous <em>Programming Pearls</em> column in CACM in the 1980s. Bentley explained:
</p><blockquote>Just as natural pearls grow from grains of sand that have irritated oysters, these programming pearls have grown from real problems that have irritated programmers. The programs are fun, and they teach important programming techniques and fundamental design principles.
</blockquote>
Richard established and was the founding editor of the Functional Pearls column, from the very first issue in 1991 of the <a href="https://www.cambridge.org/core/journals/journal-of-functional-programming">Journal of Functional Programming</a> until he retired in 2008. He characterized Functional Pearls as “polished, elegant, instructive, entertaining”. He had high standards for them: he advised reviewers to 
<blockquote>stop reading when you get bored, or the material gets too complicated, or too much specialist knowledge is needed, or the writing is bad.</blockquote>
He gave a <a href="http://dx.doi.org/10.1145/1159803.1159832">keynote lecture</a> about Pearls in 2006, where he observed that “most of them need more time in the oyster”.<p/>

<p>Functional Pearls are the epitome of Richard’s writing style. Erik Meijer called him “the poet laureate of functional programming”. Greg Fitzgerald <a href="https://twitter.com/garious14/status/1511369667155308544">tweeted</a> that 
</p><blockquote>When life got hard, Iâ€™d read his pearls to settle my mind. His proofs read like poetry.</blockquote>
Ed Kmett <a href="https://www.facebook.com/jeremy.gibbons/posts/10158212198567553?comment_id=10158214997982553">commented</a> that Richard’s pearls book 
<blockquote>is the only real clear exposition of how to <em>think</em> like a functional programmer that I’ve ever seen</blockquote>
<p/>

<p>I was honoured to be Richard’s co-author on his final book, <a href="http://www.cs.ox.ac.uk/publications/books/adwh/">Algorithm Design with Haskell</a>, written during his illness and published in 2020. Working with him was always a joy.</p>

<p>Despite the global influence of his publications, Richard always saw teaching as his main duty, and research as something he did for relaxation. <a href="http://www.cs.ox.ac.uk/andrew.ker/home.html">Andrew Ker</a> thanked Richard for the way he had taught him as a first-year undergraduate—a way which Andrew has passed on to his own students, and which he now sees them repeating in turn. Andrew wrote: 
</p><blockquote>I’ve come to see that passing on our knowledge to the next generation is the most important thing we do, even more than generating new knowledge through research. And the ideas and attitudes persist through the generations. Your influence and example extends far beyond what you know, and countless students are grateful for it.</blockquote>
<p/>

<p>My own favourite Richard story is a teaching one. Richard was giving a tutorial about algorithm analysis: how many steps does this program take—for example, something about processing hierarchical tree-shaped data? You’d expect a question about counting steps to have an answer in whole numbers; but in fact, the answer often involves logarithms. One student asked why this was. Richard thought for a moment, then said “logs come from trees”. The students broke out in laughter, and it took Richard a while to work out why. In fact, I think this was Richard’s own favourite Richard story too, because I know that he continued to tell it in tutorials for years afterwards.</p>

<p>I want to close by mentioning Richard’s openness, considerateness, and egalitarianism. The departmental secretaries always looked forward to him coming in, because he treated them with the same friendliness that he treated the most eminent of his colleagues. Several once-overawed students have written to me to express gratitude for his welcome—“no Herr Professor Doktor Doktor here, we are all colleagues”—and for helping them to find their own way.</p>

<p>Richard’s collaborator Lambert Meertens says: 
</p><blockquote>His lectures were a joy to attend, because of their clarity and the entertaining delivery. But I’ll remember him at least as much for his kindness, his generosity, his warm interest in people’s wellbeing—expressed not only in words, but also deeds.</blockquote>
<a href="https://www.th-deg.de/en/Cezar-Ionescu-Fakult%C3%A4t%20Angewandte%20Informatik-Professor:innen-1975">Cezar Ionescu</a> remembers being apprehensive about first meeting Richard at WG2.1—you should never meet your heroes—but says he 
<blockquote>was exactly the way I had imagined him to be: very sharp, funny, wise. We talked about opera and Shakespeare, and fought (and won!) a hard battle for tap water with the hotel staff.</blockquote>
<p/>

<p>My own involvement with Richard started when I applied in 1987 to do a DPhil at Oxford, on a project that turned out to have finished by the time I arrived. I rattled around the Lab for a year, not even seeing my official supervisor. But Richard invited me to join his weekly <em>Problem Solving Club</em>. He took me under his wing, and I have never looked back. He became my DPhil supervisor, then some years later hired me into my current position, and I am privileged to have been able to call him my colleague and my friend. I basically owe him my whole career, and I have no words sufficient to convey my gratitude to him. I will miss him greatly.</p></div>
    </content>
    <updated>2022-06-06T16:00:38Z</updated>
    <published>2022-06-06T10:30:18Z</published>
    <category scheme="https://patternsinfp.wordpress.com" term="Uncategorized"/>
    <author>
      <name>jeremygibbons</name>
      <uri>https://patternsinfp.wordpress.com</uri>
    </author>
    <source>
      <id>http://patternsinfp.wordpress.com/feed/atom/</id>
      <link href="https://patternsinfp.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://patternsinfp.wordpress.com/feed/atom/" rel="self" type="application/atom+xml"/>
      <link href="https://patternsinfp.wordpress.com/osd.xml" rel="search" title="Patterns in Functional Programming" type="application/opensearchdescription+xml"/>
      <link href="https://s1.wp.com/opensearch.xml" rel="search" title="WordPress.com" type="application/opensearchdescription+xml"/>
      <link href="https://patternsinfp.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle xml:lang="en">Exploiting the relationship between data structure and program structure</subtitle>
      <title xml:lang="en">Patterns in Functional Programming</title>
      <updated>2022-06-06T16:00:38Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-23427281.post-2280585822858646791</id>
    <link href="http://blog.holdenkarau.com/feeds/2280585822858646791/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=23427281&amp;postID=2280585822858646791" rel="replies" title="0 Comments" type="text/html"/>
    <link href="http://www.blogger.com/feeds/23427281/posts/default/2280585822858646791" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/23427281/posts/default/2280585822858646791" rel="self" type="application/atom+xml"/>
    <link href="http://blog.holdenkarau.com/2022/05/making-hibernate-work-on-ubuntu-2204.html" rel="alternate" title="Making Hibernate work on Ubuntu 22.04 (jammy) on the Framework Laptop w/full disk encryption" type="text/html"/>
    <title>Making Hibernate work on Ubuntu 22.04 (jammy) on the Framework Laptop w/full disk encryption</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p> <span style="font-family: Arial; font-size: 11pt; white-space: pre-wrap;">Making Hibernate work on Ubuntu 22.04 (jammy) on the Framework Laptop w/full disk encryption</span></p><span id="docs-internal-guid-b30ab1c0-7fff-cf87-2efe-4462c4475342"><div><span><br/></span></div><div><span>The 0th step is disabling secure boot in the bios (reboot, press F2 to get into the BIOS, disable secure boot).</span></div><br/><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">The first step is to make a swapfile large enough for your device to suspend to.</span></p><br/><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">sudo swapoff /swapfile</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">sudo dd </span><span face="Consolas, sans-serif" style="color: green; font-size: 10pt; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;">if</span><span face="Consolas, sans-serif" style="color: #666666; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">=</span><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">/dev/zero </span><span face="Consolas, sans-serif" style="color: #19177c; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">of</span><span face="Consolas, sans-serif" style="color: #666666; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">=</span><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">/swapfile </span><span face="Consolas, sans-serif" style="color: #19177c; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">bs</span><span face="Consolas, sans-serif" style="color: #666666; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">=</span><span face="Consolas, sans-serif" style="color: green; font-size: 10pt; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;">$(</span><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">cat /proc/meminfo | awk </span><span face="Consolas, sans-serif" style="color: #ba2121; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">'/MemTotal/ {print $2}'</span><span face="Consolas, sans-serif" style="color: green; font-size: 10pt; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;">)</span><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;"> </span><span face="Consolas, sans-serif" style="color: #19177c; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">count</span><span face="Consolas, sans-serif" style="color: #666666; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">=1024</span><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;"> </span><span face="Consolas, sans-serif" style="color: #19177c; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">conv</span><span face="Consolas, sans-serif" style="color: #666666; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">=</span><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">notrunc</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">sudo mkswap /swapfile</span></p><p dir="ltr" style="line-height: 1.32955; margin-bottom: 0pt; margin-top: 0pt;"><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">sudo swapon /swapfile</span></p><br/><br/><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">Then make sure it's enabled on reboot, e.g: </span><span face="Consolas, sans-serif" style="color: green; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">echo</span><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;"> </span><span face="Consolas, sans-serif" style="color: #ba2121; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">'/swapfile swap swap defaults 0 0'</span><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;"> | sudo tee -a /etc/fstab</span></p><br/><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">If there is another swap partition or file in /etc/fstab you may need to take it out.</span></p><br/><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">Find the device your swapfile is located on (e.g. </span><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">findmnt  -no </span><span face="Consolas, sans-serif" style="color: green; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">source</span><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;"> -T /swapfile</span><span style="font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">), note here some guides recommend using the UUID, in my experience, this resulted in some errors.</span></p><br/><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">To find the resume offset of your file run </span><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">filefrag -v /swapfile</span><span style="font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> and then look at the first value under physical_offset.</span></p><br/><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">Set `GRUB_CMDLINE_LINUX_DEFAULT="splash resume=${RESUME_DEVICE} resume_offset=${RESUME_OFFSET} nvme.noacpi=1"` in `/etc/default/grub` and then update grub with </span><span face="Consolas, sans-serif" style="font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;">sudo update-grub</span></p><br/><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">If you want to enable hibernation on lid close set `HandleLidSwitch=hibernate` in `/etc/systemd/logind.conf`.</span></p><div><span style="font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"><br/></span></div></span></div>
    </content>
    <updated>2022-06-03T19:49:31Z</updated>
    <published>2022-05-31T00:44:00Z</published>
    <author>
      <name>Holden Karau</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/05915225834474424123</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-23427281</id>
      <category term="all the code"/>
      <category term="life"/>
      <category term="random"/>
      <category term="codeing"/>
      <category term="atc"/>
      <category term="business"/>
      <category term="amazon web services"/>
      <category term="google summer of code"/>
      <category term="openmoko"/>
      <category term="spark"/>
      <category term="demo"/>
      <category term="democamp"/>
      <category term="freerunner"/>
      <category term="google"/>
      <category term="haskell"/>
      <category term="programming"/>
      <category term="spark-project"/>
      <category term="ssc"/>
      <category term="work"/>
      <category term="amazon"/>
      <category term="amazon web search platform"/>
      <category term="linux"/>
      <category term="scala"/>
      <category term="bugs"/>
      <category term="computer science"/>
      <category term="devicescape"/>
      <category term="ninjas"/>
      <category term="software"/>
      <category term="spam"/>
      <category term="subversion"/>
      <category term="talks"/>
      <category term="ubuntu"/>
      <category term="wireless"/>
      <category term="amazon ec2"/>
      <category term="awsp"/>
      <category term="barcamp"/>
      <category term="bigdata"/>
      <category term="boingo mobile"/>
      <category term="canada"/>
      <category term="computer science club"/>
      <category term="copyright"/>
      <category term="crazyness"/>
      <category term="csc"/>
      <category term="database builds"/>
      <category term="datamining"/>
      <category term="democampguelph"/>
      <category term="developement"/>
      <category term="dnsrbl"/>
      <category term="emacs"/>
      <category term="encryption"/>
      <category term="failboat"/>
      <category term="functional programming"/>
      <category term="funding"/>
      <category term="funtimes"/>
      <category term="gsoc"/>
      <category term="java"/>
      <category term="mzscheme"/>
      <category term="plugins"/>
      <category term="rms"/>
      <category term="ruby on rails"/>
      <category term="scheme"/>
      <category term="security"/>
      <category term="ssl"/>
      <category term="university of waterloo"/>
      <category term="videos"/>
      <category term="wifi"/>
      <category term="yahoo"/>
      <category term="802.11a"/>
      <category term="802.11b"/>
      <category term="802.11g"/>
      <category term="Bjarne Stroustrup"/>
      <category term="almost useless information"/>
      <category term="amazon s3"/>
      <category term="antispam"/>
      <category term="apache spark"/>
      <category term="asus"/>
      <category term="atom"/>
      <category term="barcampwaterloo"/>
      <category term="barcampwaterloo4"/>
      <category term="beer"/>
      <category term="blogging"/>
      <category term="boingo"/>
      <category term="build systems"/>
      <category term="c++"/>
      <category term="cabal"/>
      <category term="cabalandhunittogether"/>
      <category term="cellphone"/>
      <category term="character encodings"/>
      <category term="co-op"/>
      <category term="code"/>
      <category term="cogent"/>
      <category term="competitors"/>
      <category term="computers"/>
      <category term="concurrency"/>
      <category term="darcs"/>
      <category term="databases"/>
      <category term="democamp2"/>
      <category term="deployment"/>
      <category term="dns"/>
      <category term="dodgy"/>
      <category term="eclipse"/>
      <category term="emacs subversion"/>
      <category term="esr"/>
      <category term="facebook"/>
      <category term="fail"/>
      <category term="failboatish"/>
      <category term="feedback"/>
      <category term="filtering ai rss aiderss waterloo companies product-launches"/>
      <category term="fixing"/>
      <category term="fun"/>
      <category term="git"/>
      <category term="github"/>
      <category term="globalive"/>
      <category term="gmail"/>
      <category term="gmailprivacy"/>
      <category term="googleprivacy"/>
      <category term="gsm"/>
      <category term="guelphdemocamp"/>
      <category term="guelphdemocamp2"/>
      <category term="hackage"/>
      <category term="hackday"/>
      <category term="happy"/>
      <category term="hobos"/>
      <category term="httppostmail"/>
      <category term="hunit"/>
      <category term="ide"/>
      <category term="imap"/>
      <category term="improvements"/>
      <category term="integrating cabal and haskell"/>
      <category term="internationalization"/>
      <category term="internet"/>
      <category term="iphone"/>
      <category term="iphoneyahoo"/>
      <category term="jobs"/>
      <category term="krugle"/>
      <category term="lack of privacy"/>
      <category term="launch"/>
      <category term="law"/>
      <category term="linuxphone"/>
      <category term="mail"/>
      <category term="man in the middle"/>
      <category term="math"/>
      <category term="mobile"/>
      <category term="neo"/>
      <category term="neofreerunner"/>
      <category term="news"/>
      <category term="numbers"/>
      <category term="ogg"/>
      <category term="oops"/>
      <category term="optimism"/>
      <category term="parsing xml"/>
      <category term="phones"/>
      <category term="pi"/>
      <category term="pie charts"/>
      <category term="pigs can fly"/>
      <category term="pigs can fly site monitor"/>
      <category term="plt scheme"/>
      <category term="porting"/>
      <category term="presentations"/>
      <category term="press"/>
      <category term="pretty printing"/>
      <category term="privacy"/>
      <category term="programming languages"/>
      <category term="projects"/>
      <category term="python"/>
      <category term="rexml"/>
      <category term="rss"/>
      <category term="ruby"/>
      <category term="scaling"/>
      <category term="scaling ruby on rails"/>
      <category term="selling"/>
      <category term="servers"/>
      <category term="shopping"/>
      <category term="sillyness"/>
      <category term="sketchy launch"/>
      <category term="slashdot"/>
      <category term="soc"/>
      <category term="software developement"/>
      <category term="spelling"/>
      <category term="stalin scheme"/>
      <category term="starbucks"/>
      <category term="stats"/>
      <category term="stumbleupon"/>
      <category term="stupidty"/>
      <category term="su.pr"/>
      <category term="summer of code"/>
      <category term="swig"/>
      <category term="teliasonera"/>
      <category term="testing"/>
      <category term="topatoco"/>
      <category term="university"/>
      <category term="upgrades"/>
      <category term="usability"/>
      <category term="utf8"/>
      <category term="utf_8"/>
      <category term="video talk"/>
      <category term="vim"/>
      <category term="web applications"/>
      <category term="web apps"/>
      <category term="web2.0collage"/>
      <category term="weekend project"/>
      <category term="wi-fi"/>
      <category term="xandros"/>
      <category term="xml"/>
      <category term="yak"/>
      <category term="zimbra"/>
      <author>
        <name>Holden Karau</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/05915225834474424123</uri>
      </author>
      <link href="http://blog.holdenkarau.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/23427281/posts/default?redirect=false" rel="self" type="application/atom+xml"/>
      <link href="http://blog.holdenkarau.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/23427281/posts/default?start-index=26&amp;max-results=25&amp;redirect=false" rel="next" type="application/atom+xml"/>
      <subtitle>A Canadian developer in America.</subtitle>
      <title>Holden's Blog</title>
      <updated>2022-08-18T01:41:45Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2022:/tech/mac-lock-button</id>
    <link href="https://blog.plover.com/tech/mac-lock-button.html" rel="alternate" type="text/html"/>
    <title>Disabling the awful Macbook screen lock key</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>(The actual answer is at the very bottom of the article, if you want
to skip my complaining.)</p>

<p>My new job wants me to do my work on a Macbook Pro, which in most ways is
only a little more terrible than the Linux laptops I am used to.  I
don't love anything about it, and one of the things I love the least
is the Mystery Key.  It's the blank one above the delete key:</p>

<p><img alt="Upper right corner of a MacBook Pro, with keys as described." class="center" src="https://pic.blog.plover.com/tech/mac-lock-button/mystery-key-th.jpg"/></p>

<p>This is sometimes called the power button, and sometimes the TouchID.
It is a sort of combined power-lock-unlock button.  It has something
to do with turning the laptop on and off, putting it to sleep and waking it
up again, if you press it in the right way for the right amount of
time.  I understand that it can also be trained to recognize my
fingerprints, which sounds like something I would want to do only a
little more than stabbing
myself in the eye with a fork.</p>

<p>If you tap the mystery button momentarily, the screen locks, which is
very convenient, I guess, if you have to pee a lot.  But they put the
mystery button right above the delete key, and several times a day I
fat-finger the delete key, tap the corner of the
mystery button, and the screen locks.  Then I have to stop what I am
doing and type in my password to unlock the screen again.</p>

<p>No problem, I will just turn off that behavior in the System
Preferences.  Ha ha, wrong‑o.  (Pretend I inserted a sub-article here
about the shitty design of the System Preferences app, I'm not in the
mood to actually do it.) </p>

<p>Fortunately there is
<a href="https://discussions.apple.com/thread/252892735">a discussion of the issue</a>
on the Apple community support forum. It was posted nearly a year ago,
and 316 people have pressed the button that says "I have this question
too".  But there is no answer.  YAAAAAAY community support.</p>

<p><a href="https://discussions.apple.com/thread/252811794">Here it is again</a>.
292 more people have this question.  This time there is an answer!</p>

<blockquote>
  <p>practice will teach your muscle memory from avoiding it.</p>
</blockquote>

<p><img alt="Two business men in suits and ties.  One is saying &#x201C;Did you just tll me to go fuck myself?&#x201D; and the other is replying &#x201C;I believe I did, Bob.&#x201D;" class="center" src="https://pic.blog.plover.com/tech/mac-lock-button/go-fuck-yourself.png"/></p>

<p>This question was tough to search for. I found a lot of questions
about disabling touch ID, about configuring the touch ID key to <em>lock</em>
the screen, basically every possible incorrect permutation of what I
actually wanted.  I did eventually find what I wanted on Stack
Exchange and on Quora — but no useful answers.</p>

<p>There
<a href="https://www.reddit.com/r/MacOS/comments/kpfzst/how_do_you_turn_off_the_lock_screen_when_you/">was a discussion of the issue on Reddit</a>:</p>

<blockquote>
  <p>How do you turn off the lock screen when you press the Touch ID button
  on MacBook Pro.
  Every time I press the Touch ID button it locks my screen and its
  super irritating. how do I disable this?</p>
</blockquote>

<p>I think the answer might be my single favorite Reddit comment ever:</p>

<blockquote>
  <p>My suggestion would be not to press it unless you want to lock the
  screen. Why do you keep pressing it if that does something you don't
  want?</p>
</blockquote>

<p><img alt="Two business men in suits and ties.  One is saying &#x201C;Did you just tll me to go fuck myself?&#x201D; and the other is replying &#x201C;I believe I did, Bob.&#x201D;" class="center" src="https://pic.blog.plover.com/tech/mac-lock-button/go-fuck-yourself.png"/></p>

<h3>Victory!</h3>

<p>I did find a solution!  The key to the mystery was provided by Roslyn
Chu.  She suggested
<a href="https://osxdaily.com/2014/04/09/stop-power-button-turning-off-mac-display/">this page from 2014</a>
which has an incantation that worked back in ancient times.
That incantation didn't work on my computer, but it put me on the
trail to the right one. I did need to use the <code>defaults</code> command and
operate on the <code>com.apple.loginwindow</code> thing, but the property name
had changed since 2014.  There seems to be no way to interrogate the
meaningful property names; you can set anything you want, just like
Unix environment variables.  But
<a href="https://developer.apple.com/documentation/devicemanagement/loginwindow">The current developer documentation for the <code>com.apple.loginwindow</code> thing</a>
has the current list of properties and one of them is the one I want.</p>

<p>To fix it, run the following command in a terminal:</p>

<p><a name="answer"/></p><a name="answer">

<pre><code>    defaults write com.apple.loginwindow DisableScreenLockImmediate -bool yes
</code></pre>

</a><p><a name="answer"/></p>

<p>They documenation claims will it will work on macOS 10.13 and later;
it did work on my 12.4 system.</p>

<p>Something something famous Macintosh user experience.</p>

<p>[ The cartoon is from <a href="http://howfuckedismydatabase.com/nosql/">howfuckedismydatabase.com</a>. ]</p></div>
    </content>
    <updated>2022-06-03T01:45:00Z</updated>
    <published>2022-06-03T01:45:00Z</published>
    <category term="/tech"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml"/>
      <link href="https://blog.plover.com" rel="alternate" type="text/html"/>
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2022-09-13T02:12:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://blog.poisson.chat/posts/2022-05-27-formalizing-finite-sets.html</id>
    <link href="https://blog.poisson.chat/posts/2022-05-27-formalizing-finite-sets.html" rel="alternate" type="text/html"/>
    <title>Formalizing finite sets</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Combinatorics studies mathematical structures by counting. Counting may seem like a benign activity, but the same rigor necessary to prevent double- or under-counting mistakes arguably underpins all of mathematics.<a class="footnote-ref" href="https://blog.poisson.chat/rss.xml#fn1" id="fnref1"><sup>1</sup></a></p>
<p>Combining my two favorite topics, I’ve always wanted to mechanize combinatorics in Coq.<a class="footnote-ref" href="https://blog.poisson.chat/rss.xml#fn2" id="fnref2"><sup>2</sup></a> An immediate challenge is to formalize the idea of “set”.<a class="footnote-ref" href="https://blog.poisson.chat/rss.xml#fn3" id="fnref3"><sup>3</sup></a> We have to be able to define the set of things we want to count. It turns out that there are at least two ways of encoding sets in type theory: sets as types, and sets as predicates. They are suitable for defining different classes of operations: sums (disjoint union) are a natural operation on types, while unions and intersections are naturally defined on predicates.</p>
<p>The interplay between these two notions of sets, and finiteness, will then let us prove the standard formula for the cardinality of unions, aka. the binary inclusion-exclusion formula:</p>
<pre><code>#|X ∪ Y| = #|X| + #|Y| - #|X ∩ Y|</code></pre>
<details>

Imports and options

<pre class="alectryon"><code>From Coq Require Import ssreflect ssrbool.

Set Implicit Arguments.</code></pre>
</details>
<h2 id="sets-as-types">Sets as types</h2>
<p>The obvious starting point is to view a type as the set of its inhabitants.</p>
<p>How do we count its inhabitants? We will say that a set <code>A</code> has cardinality <code>n</code> if there is a bijection between <code>A</code> and the set <code>{0 .. n-1}</code> of natural numbers between <code>0</code> and <code>n-1</code>.</p>
<h3 id="bijections">Bijections</h3>
<p>A bijection is a standard way to represent a one-to-one correspondence between two sets, with a pair of inverse functions. We define the type <code>bijection A B</code> as a record containing the two functions and a proof of their inverse relationship.</p>
<pre class="alectryon"><code>Record is_bijection {A B} (to : A -&gt; B) (from : B -&gt; A) : Prop :=
  { from_to : forall a, from (to a) = a
  ; to_from : forall b, to (from b) = b }.

Record bijection (A B : Type) : Type :=
  { bij_to : A -&gt; B
  ; bij_from : B -&gt; A
  ; bij_is_bijection :&gt; is_bijection bij_to bij_from }.

Infix "&lt;--&gt;" := bijection (at level 90) : type_scope.</code></pre>
<p>We say that <code>A</code> and <code>B</code> are isomorphic when there exists a bijection between <code>A</code> and <code>B</code>. Isomorphism is an equivalence relation: reflexive, symmetric, transitive.<a class="footnote-ref" href="https://blog.poisson.chat/rss.xml#fn4" id="fnref4"><sup>4</sup></a></p>
<pre class="alectryon"><code>Definition bijection_refl {A} : A &lt;--&gt; A.
Admitted. (* Easy exercise *)

Definition bijection_sym {A B} : (A &lt;--&gt; B) -&gt; (B &lt;--&gt; A).
Admitted. (* Easy exercise *)

Definition bijection_trans {A B C} : (A &lt;--&gt; B) -&gt; (B &lt;--&gt; C) -&gt; (A &lt;--&gt; C).
Admitted. (* Easy exercise *)

Infix "&gt;&gt;&gt;" := bijection_trans (at level 40).</code></pre>
<h3 id="finite-sets">Finite sets</h3>
<p>Our “bijective” definition of cardinality shall rely on a primitive, canonical family of finite types <code>{0 .. n-1}</code> that is taken for granted. We can define them as the following sigma type, using the familiar set comprehension notation, also known as <a href="https://math-comp.github.io/htmldoc/mathcomp.ssreflect.fintype.html#ordinal"><code>ordinal</code> in <em>math-comp</em></a>:</p>
<pre class="alectryon"><code>Definition fin (n : nat) : Type := { p | p &lt; n }.</code></pre>
<p>An inhabitant of <code>fin n</code> is a pair of a <code>p : nat</code> and a proof object of <code>p &lt; n</code>. Such proofs objects are unique for a given <code>p</code> and <code>n</code>, so the first component uniquely determines the second component, and <code>fin n</code> does have exactly <code>n</code> inhabitants.<a class="footnote-ref" href="https://blog.poisson.chat/rss.xml#fn5" id="fnref5"><sup>5</sup></a></p>
<h4 id="finiteness">Finiteness</h4>
<p>We can now say that a type <code>A</code> has cardinality <code>n</code> if there is a bijection between <code>A</code> and <code>fin n</code>, <em>i.e.</em>, there is an inhabitant of <code>A &lt;--&gt; fin n</code>. Note that this only defines finite cardinalities, which is fine for doing finite combinatorics. Infinity is really weird so let’s not think about it.</p>
<p>As a sanity check, you can verify the cardinalities of the usual suspects, <code>bool</code>, <code>unit</code>, and <code>Empty_set</code>.</p>
<pre class="alectryon"><code>Definition bijection_bool : bool &lt;--&gt; fin 2.
Admitted. (* Easy exercise *)

Definition bijection_unit : unit &lt;--&gt; fin 1.
Admitted. (* Easy exercise *)

Definition bijection_Empty_set : Empty_set &lt;--&gt; fin 0.
Admitted. (* Easy exercise *)</code></pre>
<p>A type <code>A</code> is finite when it has some cardinality <code>n : nat</code>. When speaking informally, it’s common to view finiteness as a property, a thing that a set either <em>is</em> or <em>is not</em>. To prove finiteness is merely to exhibit the relevant data: a number to be the cardinality, and an associated bijection (which we call an <em>enumeration</em> of <code>A</code>, <code>enum</code> for short). Hence we formalize “finiteness” as the type of that data.</p>
<pre class="alectryon"><code>Record is_finite (A : Type) : Type :=
  { card : nat
  ; enum : A &lt;--&gt; fin card }.</code></pre>
<p>Further bundling <code>is_finite A</code> proofs with their associated set <code>A</code>, we obtain a concept aptly named “finite type”.<a class="footnote-ref" href="https://blog.poisson.chat/rss.xml#fn6" id="fnref6"><sup>6</sup></a> A finite type is a type <code>A</code> paired with a proof of <code>is_finite A</code>.</p>
<pre class="alectryon"><code>Record finite_type : Type :=
  { ft_type :&gt; Type
  ; ft_is_finite :&gt; is_finite ft_type }.</code></pre>
<p>We leverage coercions (indicated by <code>:&gt;</code>) to lighten the notation of expressions involving <code>finite_type</code>.</p>
<p>The first coercion <code>ft_type</code> lets us use a <code>finite_type</code> as a <code>Type</code>. So if <code>E : finite_type</code>, we can write the judgement that “<code>e</code> is an element of <code>E</code>” as <code>e : E</code>, which implicitly expands to the more cumbersome <code>e : ft_type E</code>.</p>
<p>Similarly, the second coercion <code>ft_is_finite</code> lets us access the evidence of finiteness without naming that field. In particular, we can write the cardinality of <code>E : finite_type</code> as <code>card E</code>, as if <code>card</code> were a proper field of <code>E</code> rather than the nested record it actually belongs to. This is a convenient mechanism for overloading, letting us reuse the name <code>card</code>(inality) even though records technically cannot have fields with the same name. With that, we define <code>#|A|</code> as sugar for <code>card A</code>:</p>
<pre class="alectryon"><code>Notation "'#|' A '|'" := (card A).</code></pre>
<details>

Some notation boilerplate

<pre class="alectryon"><code>Declare Scope fintype_scope.
Delimit Scope fintype_scope with fintype.
Bind Scope fintype_scope with finite_type.</code></pre>
</details>
<h4 id="uniqueness-of-cardinality">Uniqueness of cardinality</h4>
<p>The phrase “cardinality of a set” suggests that cardinality is an inherent property of sets. But now we’ve defined “finite type” essentially as a tuple where the cardinality is just one component. What’s to prevent us from putting a different number there, for the same underlying type?</p>
<p>We can prove that this cannot happen. Cardinality is unique: any two finiteness proofs for the same type must yield the same cardinality.</p>
<p>(The proof is a little tedious and technical.)</p>
<pre class="alectryon"><code>Theorem card_unique {A} (F1 F2 : is_finite A) : card F1 = card F2.
Admitted. (* Intermediate exercise *)</code></pre>
<p>A slightly more general result is that isomorphic types (<em>i.e.</em>, related by a bijection) have the same cardinality. It can first be proved in terms of <code>is_finite</code>, from which a corollary in terms of <code>finite_type</code> follows.</p>
<pre class="alectryon"><code>Theorem card_bijection {A B} (FA : is_finite A) (FB : is_finite B)
  : (A &lt;--&gt; B) -&gt; card FA = card FB.
Admitted. (* Like card_unique *)

Theorem card_bijection_finite_type {A B : finite_type}
  : (A &lt;--&gt; B) -&gt; #|A| = #|B|.
Proof.
  apply card_bijection.
Qed.</code></pre>
<p>The converse is also true and useful: two types with the same cardinality are isomorphic.</p>
<pre class="alectryon"><code>Theorem bijection_card {A B} (FA : is_finite A) (FB : is_finite B)
  : card FA = card FB -&gt; (A &lt;--&gt; B).
Admitted. (* Easy exercise *)

Theorem bijection_card_finite_type {A B : finite_type}
  : #|A| = #|B| -&gt; (A &lt;--&gt; B).
Proof.
  apply bijection_card.
Qed.</code></pre>
<h3 id="operations-on-finite-sets">Operations on finite sets</h3>
<h4 id="sum">Sum</h4>
<p>The sum of sets is also known as the disjoint union.</p>
<pre class="coq"><code>Inductive sum (A B : Type) : Type :=
| inl : A -&gt; A + B
| inr : B -&gt; A + B
where "A + B" := (sum A B) : type_scope.</code></pre>
<p><code>sum</code> is a binary operation on types. We must work to make it an operation on finite types.</p>
<p>There is a bijection between <code>fin n + fin m</code> (sum of sets) and <code>fin (n + m)</code> (sum of nats).</p>
<pre class="alectryon"><code>Definition bijection_sum_fin {n m} : fin n + fin m &lt;--&gt; fin (n + m).
Admitted. (* Intermediate exercise *)</code></pre>
<p>The sum is a bifunctor.</p>
<pre class="alectryon"><code>Definition bijection_sum {A A' B B'}
  : (A &lt;--&gt; B) -&gt; (A' &lt;--&gt; B') -&gt; (A + A' &lt;--&gt; B + B').
Admitted. (* Easy exercise *)</code></pre>
<p>Combining those facts, we can prove that the sum of two finite sets is finite (<code>finite_sum</code>), and the cardinality of the sum is the sum of the cardinalities (<code>card_sum</code>).</p>
<pre class="alectryon"><code>Definition is_finite_sum {A B} (FA : is_finite A) (FB : is_finite B)
  : is_finite (A + B) :=
  {| card := #|FA| + #|FB|
  ;  enum := bijection_sum (enum FA) (enum FB) &gt;&gt;&gt; bijection_sum_fin |}.

Definition finite_sum (A B : finite_type) : finite_type :=
  {| ft_type := A + B ; ft_is_finite := is_finite_sum A B |}.

Infix "+" := finite_sum : fintype_scope.</code></pre>
<pre class="alectryon"><code>Theorem card_sum {A B : finite_type} : #|(A + B)%fintype| = #|A| + #|B|.
Proof.
  reflexivity.
Qed.</code></pre>
<h4 id="product">Product</h4>
<p>The cartesian product has structure dual to the sum.</p>
<pre class="coq"><code>Inductive prod (A B : Type) : Type :=
| pair : A -&gt; B -&gt; A * B
where "A * B" := (prod A B) : type_scope.</code></pre>
<ul>
<li>There is a bijection <code>fin n * fin m &lt;--&gt; fin (n * m)</code>.</li>
<li>The product is a bifunctor.</li>
<li>The product of finite sets is finite.</li>
<li>The cardinality of the product is the product of the cardinalities.</li>
</ul>
<details>

Coq code

<pre class="alectryon"><code>Definition bijection_prod_fin {n m} : fin n * fin m &lt;--&gt; fin (n * m).
Admitted. (* Intermediate exercise *)

Definition bijection_prod {A A' B B'}
  : (A &lt;--&gt; B) -&gt; (A' &lt;--&gt; B') -&gt; (A * A' &lt;--&gt; B * B').
Admitted. (* Easy exercise *)

Definition is_finite_prod {A B} (FA : is_finite A) (FB : is_finite B)
  : is_finite (A * B) :=
  {| card := #|FA| * #|FB|
  ;  enum := bijection_prod (enum FA) (enum FB) &gt;&gt;&gt; bijection_prod_fin |}.

Definition finite_prod (A B : finite_type) : finite_type :=
  {| ft_type := A * B ; ft_is_finite := is_finite_prod A B |}.

Infix "*" := finite_prod : fintype_scope.

Theorem card_prod {A B : finite_type} : #|(A * B)%fintype| = #|A| * #|B|.
Proof.
  reflexivity.
Qed.</code></pre>
</details>
<h2 id="sets-as-predicates">Sets as predicates</h2>
<p>Two other common operations on sets are union and intersection. However, those operations don’t fit in the view of sets as types. While set membership <code>x ∈ X</code> is a proposition, type inhabitation <code>x : X</code> is a judgement, which is a completely different thing,<a class="footnote-ref" href="https://blog.poisson.chat/rss.xml#fn7" id="fnref7"><sup>7</sup></a> so we need a different approach.</p>
<p>The idea of set membership <code>x ∈ X</code> as a proposition presumes that <code>x</code> and <code>X</code> are entities that exist independently of each other. This suggests that there is some “universe” that elements <code>x</code> live in, and the sets <code>X</code> under consideration are subsets of that same universe. We represent the universe by a type <code>A</code>, and sets (<em>i.e.</em>, “subsets of the universe”) by predicates on <code>A</code>.</p>
<pre class="alectryon"><code>Definition set_of (A : Type) := (A -&gt; bool).</code></pre>
<p>Hence, if <code>x : A</code> is an element of the universe, and <code>X : set A</code> is a set (subset of the universe), we will denote set membership <code>x ∈ X</code> simply as <code>X x</code> (<code>x</code> satisfies the predicate <code>X</code>).</p>
<p>Those predicates are boolean, <em>i.e.</em>, decidable. This is necessary in several constructions and proofs here, notably to prove that the union or intersection of finite sets is finite. We rely on a coercion to implicitly convert booleans to <code>Prop</code>: <code>is_true : bool &gt;-&gt; Prop</code>, which is exported by <code>ssreflect</code>.</p>
<h3 id="union-intersection-complement">Union, intersection, complement</h3>
<p>Those common set operations correspond to the usual logical connectives.</p>
<pre class="alectryon"><code>Section Operations.

Context {A : Type}.

Definition union' (X Y : set_of A) : set_of A := fun a =&gt; X a || Y a.
Definition intersection' (X Y : set_of A) : set_of A := fun a =&gt; X a &amp;&amp; Y a.
Definition complement' (X : set_of A) : set_of A := fun a =&gt; negb (X a).

End Operations.</code></pre>
<p>Define the familiar infix notation for union and intersection.</p>
<pre class="alectryon"><code>Declare Scope set_of_scope.
Delimit Scope set_of_scope with set_of.
Bind Scope set_of_scope with set_of.

Infix "∪" := union' (at level 40) : set_of_scope.
Infix "∩" := intersection' (at level 40) : set_of_scope.</code></pre>
<h3 id="finiteness-1">Finiteness</h3>
<p>Again, we will characterize finite sets using bijections to <code>fin n</code>. We first transform the set <code>X</code> into a type <code>to_type X</code>, so we can form the type of bijections <code>to_type X &lt;--&gt; fin n</code>. Like <code>fin</code>, we define <code>to_type A</code> as a sigma type. Thanks to the predicate <code>X</code> being boolean, there is at most one proof <code>p : X a</code> for each <code>a</code>, so the type <code>{ a : A | X a }</code> has exactly one inhabitant for each inhabitant <code>a : A</code> satisfying <code>X a</code>.</p>
<pre class="alectryon"><code>Definition to_type {A : Type} (X : set_of A) : Type := { a : A | X a }.

Coercion to_type : set_of &gt;-&gt; Sortclass.</code></pre>
<p>We obtain a notion of finite set by imitating the structure of <code>finite_type</code>. The set-as-predicate <code>X</code> is finite if the set-as-type <code>to_type X</code> is finite.</p>
<pre class="alectryon"><code>Record finite_set_of (A : Type) : Type :=
  { elem_of :&gt; set_of A
  ; fso_is_finite :&gt; is_finite (to_type elem_of)
  }.</code></pre>
<p>Similarly, a <code>finite_type_of</code> can be coerced to a <code>finite_type</code>.</p>
<pre class="alectryon"><code>Definition to_finite_type {A} (X : finite_set_of A) : finite_type :=
  {| ft_type := elem_of X
  ;  ft_is_finite := X |}.

Coercion to_finite_type : finite_set_of &gt;-&gt; finite_type.</code></pre>
<h3 id="finite-unions-and-intersections">Finite unions and intersections</h3>
<p>We then prove that the union and intersection of finite sets are finite. This is actually fairly challenging, since proving finiteness means to calculate the cardinality of the set and to construct the associated bijection. Unlike sum and product, there is no simple formula for the cardinality of union and intersection. One candidate may seem to be the binary inclusion-exclusion formula:</p>
<pre><code>#|X ∪ Y| = #|X| + #|Y| - #|X ∩ Y|</code></pre>
<p>But that only gives the cardinality of the union in terms of the intersection, or vice versa, and we don’t know either yet.</p>
<p>Rather than constructing the bijections directly, we decompose the proof. The intuition is that <code>X ∪ Y</code> and <code>X ∩ Y</code> can easily be “bounded” by known finite sets, namely <code>X + Y</code> and <code>X</code> respectively. By “bounded”, we mean that there is an injection from one set to the other.</p>
<p>The standard definition of injectivity is via an implication <code>f x = f y -&gt; x = y</code>. However, a better definition for our purposes comes from a one-sided inverse property: a function <code>f : A -&gt; B</code> is a section if there exists another function <code>g : B -&gt; A</code> (called a retraction) such that <code>g (f x) = x</code>. Every section is an injection, but the converse requires the law of excluded middle.</p>
<pre class="alectryon"><code>Record is_section {A B} (to : A -&gt; B) (from : B -&gt; A) : Prop :=
  { s_from_to : forall a, from (to a) = a }.

Record section (A B : Type) : Type :=
  { s_from : A -&gt; B
  ; s_to : B -&gt; A
  ; s_is_section : is_section s_from s_to }.</code></pre>
<p>The point is that, given a section to a finite set, <code>section A (fin n)</code>, we can construct a bijection <code>A &lt;--&gt; fin m</code> for some <code>m</code>, that is smaller than <code>n</code>. We formalize this result with a proof-relevant sigma type.</p>
<pre class="alectryon"><code>Definition section_bijection (A : Type) (n : nat)
  : section A (fin n) -&gt; { m &amp; A &lt;--&gt; fin m }.
Admitted. (* Hard exercise *)</code></pre>
<p>This construction is rather involved. It is much more general than when we were looking specifically at union and intersection, but at the same time it is easier to come up with as it abstracts away the distracting details of those operations.</p>
<p>Now there is a section from <code>X ∪ Y</code> to <code>X + Y</code>, and from <code>X ∩ Y</code> to <code>X</code>.</p>
<pre class="alectryon"><code>Definition section_union {A} (X Y : set_of A)
  : section (X ∪ Y)%set_of (X + Y).
Admitted. (* Easy exercise *)

Definition section_intersection {A} (X Y : set_of A)
  : section (X ∩ Y)%set_of X.
Admitted. (* Easy exercise *)</code></pre>
<p>We can then rely on the finiteness of <code>X</code> and <code>X + Y</code> to extend those sections to <code>fin n</code> for some <code>n</code> via the following theorem:</p>
<pre class="alectryon"><code>Theorem section_extend (A B C : Type)
  : section A B -&gt; (B &lt;--&gt; C) -&gt; section A C.
Admitted. (* Easy exercise *)

Definition section_union' {A} (X Y : finite_set_of A)
  : section (X ∪ Y)%set_of (fin (#|X| + #|Y|)).
Proof.
  eapply section_extend.
  - apply section_union.
  - apply is_finite_sum.
Qed.

Definition section_intersection' {A} (X Y : finite_set_of A)
  : section (X ∩ Y)%set_of (fin #|X|).
Proof.
  eapply section_extend.
  - apply section_intersection.
  - apply enum.
Qed.</code></pre>
<p>Finally, by <code>section_bijection</code>, we obtain finiteness proofs of <code>union'</code> and <code>intersection'</code>, which let us define <code>union</code> and <code>intersection</code> properly as operations on finite sets.</p>
<pre class="alectryon"><code>Theorem is_finite_union {A} {X Y : set_of A}
    (FX : is_finite X) (FY : is_finite Y)
  : is_finite (X ∪ Y)%set_of.
Proof.
  refine {| enum := projT2 (section_bijection _) |}.
  eapply (section_extend (B := X + Y)%type).
  - apply section_union.
  - apply (is_finite_sum FX FY).
Qed.

Theorem is_finite_intersection {A} {X Y : set_of A}
    (FX : is_finite X) (FY : is_finite Y)
  : is_finite (X ∩ Y)%set_of.
Proof.
  refine {| enum := projT2 (section_bijection _) |}.
  eapply section_extend.
  - apply section_intersection.
  - apply (enum FX).
Qed.

Definition union {A} (X Y : finite_set_of A) : finite_set_of A :=
  {| fso_is_finite := is_finite_union X Y |}.

Definition intersection {A} (X Y : finite_set_of A) : finite_set_of A :=
  {| fso_is_finite := is_finite_intersection X Y |}.</code></pre>
<pre class="alectryon"><code>Declare Scope fso_scope.
Delimit Scope fso_scope with fso.
Bind Scope fso_scope with finite_set_of.

Infix "∪" := union (at level 40) : fso_scope.
Infix "∩" := intersection (at level 40) : fso_scope.</code></pre>
<p>Hereafter, <code>∪</code> and <code>∩</code> will denote finite unions and intersections.</p>
<pre class="alectryon"><code>#[local] Open Scope fso_scope.</code></pre>
<h2 id="inclusion-exclusion">Inclusion-exclusion</h2>
<pre><code>#|X ∪ Y| = #|X| + #|Y| - #|X ∩ Y|</code></pre>
<p>To prove that formula, it’s probably not a good idea to look at how <code>∪</code> and <code>∩</code> compute their cardinalities. A better idea is to construct a bijection, which implies an equality of cardinalities by <code>card_bijection</code>.</p>
<p>To start, subtractions are bad, so we rewrite the goal:</p>
<pre><code>#|X ∪ Y| + #|X ∩ Y| = #|X| + #|Y|</code></pre>
<p>Now we look for a bijection <code>(X ∪ Y) + (X ∩ Y) &lt;--&gt; X + Y</code>. It gets a bit tricky because of the dependent types.</p>
<pre class="alectryon"><code>Definition inclusion_exclusion_bijection {A} (X Y : finite_set_of A)
  : (X ∪ Y)%set_of + (X ∩ Y)%set_of &lt;--&gt; X + Y.
Admitted. (* Hard exercise *)</code></pre>
<p>Isomorphic sets have the same cardinality (by theorem <code>card_bijection_finite_type</code>). The resulting equation simplifies to the binary inclusion-exclusion identity, because <code>#|A + B|</code> equals <code>#|A| + #|B|</code> definitionally. So the proof consists simply of applying that theorem with the above bijection.</p>
<pre class="alectryon"><code>Theorem inclusion_exclusion {A} (X Y : finite_set_of A)
  : #|X ∪ Y| + #|X ∩ Y| = #|X| + #|Y|.
Proof.
  apply (@card_bijection_finite_type ((X ∪ Y) + (X ∩ Y)) (X + Y)).
  apply inclusion_exclusion_bijection.
Qed.</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>To formalize mathematics, it’s often useful to revisit our preconceptions about fundamental concepts. To carry out even basic combinatorics in type theory, it’s useful to distinguish two views of the naive notion of set.</p>
<p>For example, when we say “union”, we really mean one of two things depending on the context. Either the sets are obviously disjoint, so we really mean “sum”: this corresponds to viewing sets as types. Or we implicitly know that the two sets contain the same “type” of elements a priori, so the overlap is something we have to worry about explicitly: this corresponds to viewing sets as predicates on a given universe.</p>
<section class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Ironically, when making restaurant reservations, I still occasionally forget to count myself.<a class="footnote-back" href="https://blog.poisson.chat/rss.xml#fnref1">↩︎</a></p></li>
<li id="fn2"><p>The code from this post is part of this project I’ve started <a href="https://gitlab.com/lysxia/bijou">here</a>. Also check out Brent Yorgey’s thesis: <a href="http://ozark.hendrix.edu/~yorgey/pub/thesis.pdf"><em>Combinatorial Species and Labelled Structures</em></a> (2014).<a class="footnote-back" href="https://blog.poisson.chat/rss.xml#fnref2">↩︎</a></p></li>
<li id="fn3"><p>Speaking of sets, it’s important to distinguish <em>naive set theory</em> from <em>axiomatic set theory</em>. Naive set theory is arguably what most people think of when they hear “set”. It is a semi-formal system for organizing mathematics: there are sets, they have elements, and there are various operations to construct and analyze sets, but overall we don’t think too hard about what sets <em>are</em> (hence, “semi-formal”). When this blog post talks about sets, it is in the context of naive set theory. Axiomatic set theory is formal, with rules that are clear enough to be encoded in a computer. The name “axiomatic set theory” is a stroke of marketing genius, establishing it as the “standard” way of formalizing naive set theory, and thus, all of mathematics, as can be seen in most introductory courses on formal logic. Historically, Zermelo’s set theory was formulated at around the same time as Russell’s type theory, and type theory is at the root of currently very active areas of programming language theory and formal methods.<a class="footnote-back" href="https://blog.poisson.chat/rss.xml#fnref3">↩︎</a></p></li>
<li id="fn4"><p>Bijections actually form a groupoid (a “proof-relevant equivalence relation”).<a class="footnote-back" href="https://blog.poisson.chat/rss.xml#fnref4">↩︎</a></p></li>
<li id="fn5"><p>We could also have defined <code>fin</code> as the inductive type of bounded naturals, which is named <code>Fin.t</code> in the standard library. Anecdotal experience suggests that the sigma type is more beginner-friendly. But past a certain level of familiarity, I think they are completely interchangeable.</p>
<pre class="alectryon"><code>Inductive fin' : nat -&gt; Type :=
| F0 : fin' 1
| FS : forall n, fin' n -&gt; fin' (S n).</code></pre>
<p>The definition of <code>fin</code> as a sigma type relies on details of the definition of the order relation <code>_ &lt; _</code>. Other definitions may allow the proposition <code>p &lt; n</code> to be inhabited by multiple proof objects, causing <code>fin n</code> to have “more” than <code>n</code> inhabitants unless they are collapsed by proof irrelevance.<a class="footnote-back" href="https://blog.poisson.chat/rss.xml#fnref5">↩︎</a></p></li>
<li id="fn6"><p><em>math-comp</em> has a different but equivalent definition of <a href="https://math-comp.github.io/htmldoc/mathcomp.ssreflect.fintype.html"><code>fintype</code></a>.<a class="footnote-back" href="https://blog.poisson.chat/rss.xml#fnref6">↩︎</a></p></li>
<li id="fn7"><p>… if you know what those words mean.<a class="footnote-back" href="https://blog.poisson.chat/rss.xml#fnref7">↩︎</a></p></li>
</ol>
</section></div>
    </summary>
    <updated>2022-05-27T00:00:00Z</updated>
    <published>2022-05-27T00:00:00Z</published>
    <author>
      <name>Lysxia</name>
    </author>
    <source>
      <id>https://blog.poisson.chat</id>
      <logo>https://blog.poisson.chat/favicon.png</logo>
      <link href="https://blog.poisson.chat" rel="alternate" type="text/html"/>
      <link href="https://blog.poisson.chat/rss.xml" rel="self" type="application/rss+xml"/>
      <subtitle>A blog about functional programming and stuff</subtitle>
      <title>Lysxia's blog</title>
      <updated>2022-05-27T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://magnus.therning.org/2022-05-09-comments-and-org-static-blog.html</id>
    <link href="https://magnus.therning.org/2022-05-09-comments-and-org-static-blog.html" rel="alternate" type="text/html"/>
    <title>Comments and org-static-blog</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
I'm using <a href="https://github.com/bastibe/org-static-blog">org-static-blog</a> to generate the contents of this site. So far I'm very
happy with it, but I've gotten a few emails from readers who've wanted to
comment on something I've written and they always point out that it's not easy
to do. It's actually not a coincidence that it's a bit difficult!
</p>

<p>
Yesterday I came up with a way that might make is slightly easier without
involving JavaScript from a 3rd party. By making use of the built-in support for
adding HTML code for comments. One slight limitation is that it's a single
variable holding the code, and I'd really like to allow for both
</p>

<ul class="org-ul">
<li>using a link to a discussion site, e.g. <a href="https://www.reddit.com/">reddit</a>, as well as</li>
<li>my email address</li>
</ul>


<p>
As the comment support in org-static-blog comes in the form of a single variable
this seems a bit difficult to accomplish. However, it isn't difficult at all to
do in elisp due to the power of <code>advice-add</code>.
</p>

<p>
By using the following advice on <code>org-static-blog-publish-file</code>
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span>advice-add 'org-static-blog-publish-file <span class="org-builtin">:around</span>
            <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">lambda</span> <span class="org-rainbow-delimiters-depth-3">(</span>orig-fn filename <span class="org-type">&amp;rest</span> args<span class="org-rainbow-delimiters-depth-3">)</span>
              <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-keyword">let*</span>  <span class="org-rainbow-delimiters-depth-4">(</span><span class="org-rainbow-delimiters-depth-5">(</span>comments-url <span class="org-rainbow-delimiters-depth-6">(</span><span class="org-keyword">with-temp-buffer</span>
                                      <span class="org-rainbow-delimiters-depth-7">(</span>insert-file-contents filename<span class="org-rainbow-delimiters-depth-7">)</span>
                                      <span class="org-rainbow-delimiters-depth-7">(</span><span class="org-keyword">or</span> <span class="org-rainbow-delimiters-depth-8">(</span>cadar <span class="org-rainbow-delimiters-depth-9">(</span>org-collect-keywords '<span class="org-rainbow-delimiters-depth-1">(</span><span class="org-string">"commentsurl"</span><span class="org-rainbow-delimiters-depth-1">)</span><span class="org-rainbow-delimiters-depth-9">)</span><span class="org-rainbow-delimiters-depth-8">)</span>
                                          my-blog-default-comments-url<span class="org-rainbow-delimiters-depth-7">)</span><span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span>
                      <span class="org-rainbow-delimiters-depth-5">(</span>org-static-blog-post-comments <span class="org-rainbow-delimiters-depth-6">(</span>concat <span class="org-string">"Comment &lt;a href="</span> comments-url <span class="org-string">"&gt;here&lt;/a&gt;."</span><span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
                <span class="org-rainbow-delimiters-depth-4">(</span>apply orig-fn filename args<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
and defining <code>my-blog-default-comments-url</code> to a <code>mailto:...</code> URL I get a link
to use for commenting by either
</p>

<ol class="org-ol">
<li>set <code>commentsurl</code> to point to discussion about the post on reddit, or</li>
<li>not set <code>commentsurl</code> at all and get the <code>mailto:...</code> URL.</li>
</ol>


<p>
If you look at <a href="https://magnus.therning.org/2022-05-08-a-little-haskell:-epoch-timestamp.html">my previous post</a> you see the result of the former, and if you
look below you see the result of the latter.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-org-mode.html">org-mode</a></div></div>
    </summary>
    <updated>2022-05-09T20:10:00Z</updated>
    <published>2022-05-09T20:10:00Z</published>
    <category term="emacs"/>
    <category term="org-mode"/>
    <source>
      <id>https://magnus.therning.org/</id>
      <author>
        <name>Magnus Therning</name>
      </author>
      <link href="https://magnus.therning.org/" rel="alternate" type="text/html"/>
      <link href="https://magnus.therning.org/feed.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Magnus web site</subtitle>
      <title>Magnus web site</title>
      <updated>2022-08-21T20:35:13Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://magnus.therning.org/2022-05-08-a-little-haskell:-epoch-timestamp.html</id>
    <link href="https://magnus.therning.org/2022-05-08-a-little-haskell:-epoch-timestamp.html" rel="alternate" type="text/html"/>
    <title>A little Haskell: epoch timestamp</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
A need of getting the current <a href="https://en.wikipedia.org/wiki/Unix_time">UNIX time</a> is something that comes up every now and
then. Just this week I needed it in order to add a <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-command">k8s liveness probe</a><sup><a class="footref" href="https://magnus.therning.org/feed.xml#fn.1" id="fnr.1">1</a></sup>.
</p>

<p>
While it's often rather straight forward to get the Unix time as an integer in
other languages<sup><a class="footref" href="https://magnus.therning.org/feed.xml#fn.2" id="fnr.2">2</a></sup>, in Haskell there's a bit of type tetris involved.
</p>


<ol class="org-ol">
<li><a href="https://hoogle.haskell.org/?hoogle=getPOSIXTime&amp;scope=set%3Astackage">getPOSIXTime</a> gives me a <a href="https://hoogle.haskell.org/?hoogle=POSIXTime&amp;scope=set%3Astackage">POSIXTime</a>, which is an alias for <a href="https://hoogle.haskell.org/?hoogle=NominalDiffTime&amp;scope=set%3Astackage">NominalDiffTime</a>.</li>
<li><code>NominalDiffTime</code> implements <a href="https://hoogle.haskell.org/?hoogle=RealFrac&amp;scope=set%3Astackage">RealFrac</a> and can thus be converted to anything
implementing <a href="https://hoogle.haskell.org/?hoogle=Integral&amp;scope=set%3Astackage">Integral</a> (I wanted it as <code>Int64</code>).</li>
<li><code>NominalDiffTime</code> also implements <a href="https://hoogle.haskell.org/?hoogle=Num&amp;scope=set%3Astackage">Num</a>, so if the timestamp needs better
precision than seconds it's easy to do (I needed milliseconds).</li>
</ol>


<p>
The combination of the above is something like
</p>

<div class="org-src-container">
<pre class="src src-haskell">truncate <span class="org-haskell-definition">&lt;$&gt;</span> getPOSIXTime
</pre>
</div>

<p>
In my case the full function of writing the timestamp to a file looks like this
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">writeTimestampFile</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">MonadIO</span> m <span class="org-haskell-operator">=&gt;</span> <span class="org-haskell-type">Path</span> <span class="org-haskell-type">Abs</span> <span class="org-haskell-type">File</span> <span class="org-haskell-operator">-&gt;</span> m <span class="org-haskell-constructor"><span class="org-rainbow-delimiters-depth-1">()</span></span>
<span class="org-haskell-definition">writeTimestampFile</span> afn <span class="org-haskell-operator">=</span> liftIO <span class="org-haskell-operator">$</span> <span class="org-haskell-keyword">do</span>
    truncate <span class="org-haskell-operator">@</span><span class="org-haskell-keyword">_</span> <span class="org-haskell-operator">@</span><span class="org-haskell-constructor">Int64</span> <span class="org-haskell-operator">.</span> <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-operator">*</span> <span class="org-highlight-numbers-number">1000</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">&lt;$&gt;</span> getPOSIXTime <span class="org-haskell-operator">&gt;&gt;=</span> writeFile <span class="org-rainbow-delimiters-depth-1">(</span>fromAbsFile afn<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">.</span> show
</pre>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a class="footnum" href="https://magnus.therning.org/feed.xml#fnr.1" id="fn.1">1</a></sup> <div class="footpara"><p class="footpara">
Over the last few days I've looked into <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">k8s probes</a>. Since we're using
<a href="https://istio.io/latest/">Istio</a> TCP probes are of very <a href="https://github.com/istio/istio/pull/28737#pullrequestreview-535660318">limited use</a>, and as the service in question doesn't
offer an HTTP API I decided to use a liveness command that checks that the
contents of a file is a sufficiently recent epoch timestamp.
</p></div></div>

<div class="footdef"><sup><a class="footnum" href="https://magnus.therning.org/feed.xml#fnr.2" id="fn.2">2</a></sup> <div class="footpara"><p class="footpara">
Rust's Chrono package has <a href="https://docs.rs/chrono/0.4.19/chrono/struct.DateTime.html#method.timestamp">Utc.timestamp(t)</a>. Python has <a href="https://docs.python.org/3/library/time.html?highlight=time%20time#time.time">time.time()</a>.
Golang has <a href="https://pkg.go.dev/time#Time.Unix">Time.Unix</a>.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-k8s.html">k8s</a></div></div>
    </summary>
    <updated>2022-05-08T05:51:00Z</updated>
    <published>2022-05-08T05:51:00Z</published>
    <category term="haskell"/>
    <category term="k8s"/>
    <source>
      <id>https://magnus.therning.org/</id>
      <author>
        <name>Magnus Therning</name>
      </author>
      <link href="https://magnus.therning.org/" rel="alternate" type="text/html"/>
      <link href="https://magnus.therning.org/feed.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Magnus web site</subtitle>
      <title>Magnus web site</title>
      <updated>2022-08-21T20:35:13Z</updated>
    </source>
  </entry>
</feed>
